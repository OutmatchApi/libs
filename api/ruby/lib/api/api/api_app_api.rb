=begin
#Outmatch API

#Outmatch API

The version of the OpenAPI document: 0.0.45
Contact: internal@outmatchapi.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module api
  class ApiAppApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create api app
    # Create an api app for the authenticated user
    # @param [Hash] opts the optional parameters
    # @option opts [CreateApiAppRequest] :create_api_app_request 
    # @return [ApiApp]
    def create_api_app(opts = {})
      data, _status_code, _headers = create_api_app_with_http_info(opts)
      data
    end

    # Create api app
    # Create an api app for the authenticated user
    # @param [Hash] opts the optional parameters
    # @option opts [CreateApiAppRequest] :create_api_app_request 
    # @return [Array<(ApiApp, Integer, Hash)>] ApiApp data, response status code and response headers
    def create_api_app_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiAppApi.create_api_app ...'
      end
      # resource path
      local_var_path = '/apiApp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_api_app_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ApiApp'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ApiAppApi.create_api_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiAppApi#create_api_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create api app release
    # Create an api app release
    # @param app_id [String] app id to associate the release with
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body Created release object
    # @return [Release]
    def create_api_app_release(app_id, opts = {})
      data, _status_code, _headers = create_api_app_release_with_http_info(app_id, opts)
      data
    end

    # Create api app release
    # Create an api app release
    # @param app_id [String] app id to associate the release with
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body Created release object
    # @return [Array<(Release, Integer, Hash)>] Release data, response status code and response headers
    def create_api_app_release_with_http_info(app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiAppApi.create_api_app_release ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling ApiAppApi.create_api_app_release"
      end
      # resource path
      local_var_path = '/apiApp/{app_id}/release'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['text/plain'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Release'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ApiAppApi.create_api_app_release",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiAppApi#create_api_app_release\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate sdks for a relase
    # Generate sdks for a relase
    # @param app_id [String] app id
    # @param release_version [String] release id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateApiAppReleaseSdksRequest] :create_api_app_release_sdks_request 
    # @return [Array<Sdk>]
    def create_api_app_release_sdks(app_id, release_version, opts = {})
      data, _status_code, _headers = create_api_app_release_sdks_with_http_info(app_id, release_version, opts)
      data
    end

    # Generate sdks for a relase
    # Generate sdks for a relase
    # @param app_id [String] app id
    # @param release_version [String] release id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateApiAppReleaseSdksRequest] :create_api_app_release_sdks_request 
    # @return [Array<(Array<Sdk>, Integer, Hash)>] Array<Sdk> data, response status code and response headers
    def create_api_app_release_sdks_with_http_info(app_id, release_version, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ApiAppApi.create_api_app_release_sdks ...'
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling ApiAppApi.create_api_app_release_sdks"
      end
      # verify the required parameter 'release_version' is set
      if @api_client.config.client_side_validation && release_version.nil?
        fail ArgumentError, "Missing the required parameter 'release_version' when calling ApiAppApi.create_api_app_release_sdks"
      end
      # resource path
      local_var_path = '/apiApp/{app_id}/release/{release_version}/sdk'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s)).sub('{' + 'release_version' + '}', CGI.escape(release_version.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_api_app_release_sdks_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Sdk>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"ApiAppApi.create_api_app_release_sdks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ApiAppApi#create_api_app_release_sdks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
