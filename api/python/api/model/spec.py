# coding: utf-8

"""
    Outmatch API

    Outmatch API  # noqa: E501

    The version of the OpenAPI document: 0.0.44
    Contact: internal@outmatchapi.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from api import schemas  # noqa: F401


class Spec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "specType",
            "link",
            "description",
            "logo",
            "id",
            "title",
            "version",
        }
        
        class properties:
            id = schemas.StrSchema
            specType = schemas.StrSchema
            link = schemas.StrSchema
            title = schemas.StrSchema
            description = schemas.StrSchema
            version = schemas.StrSchema
        
            @staticmethod
            def logo() -> typing.Type['Logo']:
                return Logo
            __annotations__ = {
                "id": id,
                "specType": specType,
                "link": link,
                "title": title,
                "description": description,
                "version": version,
                "logo": logo,
            }
    
    specType: MetaOapg.properties.specType
    link: MetaOapg.properties.link
    description: MetaOapg.properties.description
    logo: 'Logo'
    id: MetaOapg.properties.id
    title: MetaOapg.properties.title
    version: MetaOapg.properties.version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specType"]) -> MetaOapg.properties.specType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo"]) -> 'Logo': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "specType", "link", "title", "description", "version", "logo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specType"]) -> MetaOapg.properties.specType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> 'Logo': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "specType", "link", "title", "description", "version", "logo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        specType: typing.Union[MetaOapg.properties.specType, str, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        description: typing.Union[MetaOapg.properties.description, str, ],
        logo: 'Logo',
        id: typing.Union[MetaOapg.properties.id, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Spec':
        return super().__new__(
            cls,
            *args,
            specType=specType,
            link=link,
            description=description,
            logo=logo,
            id=id,
            title=title,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )

from api.model.logo import Logo
