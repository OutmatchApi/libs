# coding: utf-8

"""
    Outmatch API

    Outmatch API  # noqa: E501

    The version of the OpenAPI document: 0.0.45
    Contact: internal@outmatchapi.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from api import schemas  # noqa: F401


class Sdk(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "codeUrl",
            "packageUrl",
            "language",
            "sdkVersion",
            "id",
            "error",
            "status",
        }
        
        class properties:
            id = schemas.StrSchema
        
            @staticmethod
            def language() -> typing.Type['Language']:
                return Language
            sdkVersion = schemas.StrSchema
            codeUrl = schemas.StrSchema
            packageUrl = schemas.StrSchema
        
            @staticmethod
            def status() -> typing.Type['Status']:
                return Status
            error = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "language": language,
                "sdkVersion": sdkVersion,
                "codeUrl": codeUrl,
                "packageUrl": packageUrl,
                "status": status,
                "error": error,
            }
    
    codeUrl: MetaOapg.properties.codeUrl
    packageUrl: MetaOapg.properties.packageUrl
    language: 'Language'
    sdkVersion: MetaOapg.properties.sdkVersion
    id: MetaOapg.properties.id
    error: MetaOapg.properties.error
    status: 'Status'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> 'Language': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sdkVersion"]) -> MetaOapg.properties.sdkVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["codeUrl"]) -> MetaOapg.properties.codeUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["packageUrl"]) -> MetaOapg.properties.packageUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'Status': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "language", "sdkVersion", "codeUrl", "packageUrl", "status", "error", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> 'Language': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sdkVersion"]) -> MetaOapg.properties.sdkVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["codeUrl"]) -> MetaOapg.properties.codeUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["packageUrl"]) -> MetaOapg.properties.packageUrl: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'Status': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "language", "sdkVersion", "codeUrl", "packageUrl", "status", "error", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        codeUrl: typing.Union[MetaOapg.properties.codeUrl, str, ],
        packageUrl: typing.Union[MetaOapg.properties.packageUrl, str, ],
        language: 'Language',
        sdkVersion: typing.Union[MetaOapg.properties.sdkVersion, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        error: typing.Union[MetaOapg.properties.error, str, ],
        status: 'Status',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Sdk':
        return super().__new__(
            cls,
            *args,
            codeUrl=codeUrl,
            packageUrl=packageUrl,
            language=language,
            sdkVersion=sdkVersion,
            id=id,
            error=error,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from api.model.language import Language
from api.model.status import Status
