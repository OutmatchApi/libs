/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package api.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.api.ApiApp
import com.outmatchapi.api.CreateApiAppReleaseSdksRequest
import com.outmatchapi.api.CreateApiAppRequest
import com.outmatchapi.api.Error
import com.outmatchapi.api.Release
import com.outmatchapi.api.Sdk

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import api.infrastructure.ApiClient
import api.infrastructure.ApiResponse
import api.infrastructure.ClientException
import api.infrastructure.ClientError
import api.infrastructure.ServerException
import api.infrastructure.ServerError
import api.infrastructure.MultiValueMap
import api.infrastructure.PartConfig
import api.infrastructure.RequestConfig
import api.infrastructure.RequestMethod
import api.infrastructure.ResponseType
import api.infrastructure.Success
import api.infrastructure.toMultiValue

class ApiAppApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.outmatchapi.com")
        }
    }

    /**
     * Create api app
     * Create an api app for the authenticated user
     * @param createApiAppRequest  (optional)
     * @return ApiApp
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createApiApp(createApiAppRequest: CreateApiAppRequest? = null) : ApiApp = withContext(Dispatchers.IO) {
        val localVarResponse = createApiAppWithHttpInfo(createApiAppRequest = createApiAppRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApiApp
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create api app
     * Create an api app for the authenticated user
     * @param createApiAppRequest  (optional)
     * @return ApiResponse<ApiApp?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun createApiAppWithHttpInfo(createApiAppRequest: CreateApiAppRequest?) : ApiResponse<ApiApp?> = withContext(Dispatchers.IO) {
        val localVariableConfig = createApiAppRequestConfig(createApiAppRequest = createApiAppRequest)

        return@withContext request<CreateApiAppRequest, ApiApp>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createApiApp
     *
     * @param createApiAppRequest  (optional)
     * @return RequestConfig
     */
    fun createApiAppRequestConfig(createApiAppRequest: CreateApiAppRequest?) : RequestConfig<CreateApiAppRequest> {
        val localVariableBody = createApiAppRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/apiApp",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Create api app release
     * Create an api app release
     * @param appId app id to associate the release with
     * @param body Created release object (optional)
     * @return Release
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createApiAppRelease(appId: kotlin.String, body: kotlin.String? = null) : Release = withContext(Dispatchers.IO) {
        val localVarResponse = createApiAppReleaseWithHttpInfo(appId = appId, body = body)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Release
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Create api app release
     * Create an api app release
     * @param appId app id to associate the release with
     * @param body Created release object (optional)
     * @return ApiResponse<Release?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun createApiAppReleaseWithHttpInfo(appId: kotlin.String, body: kotlin.String?) : ApiResponse<Release?> = withContext(Dispatchers.IO) {
        val localVariableConfig = createApiAppReleaseRequestConfig(appId = appId, body = body)

        return@withContext request<kotlin.String, Release>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createApiAppRelease
     *
     * @param appId app id to associate the release with
     * @param body Created release object (optional)
     * @return RequestConfig
     */
    fun createApiAppReleaseRequestConfig(appId: kotlin.String, body: kotlin.String?) : RequestConfig<kotlin.String> {
        val localVariableBody = body
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/apiApp/{app_id}/release".replace("{"+"app_id"+"}", encodeURIComponent(appId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Generate sdks for a relase
     * Generate sdks for a relase
     * @param appId app id
     * @param releaseVersion release id
     * @param createApiAppReleaseSdksRequest  (optional)
     * @return kotlin.collections.List<Sdk>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun createApiAppReleaseSdks(appId: kotlin.String, releaseVersion: kotlin.String, createApiAppReleaseSdksRequest: CreateApiAppReleaseSdksRequest? = null) : kotlin.collections.List<Sdk> = withContext(Dispatchers.IO) {
        val localVarResponse = createApiAppReleaseSdksWithHttpInfo(appId = appId, releaseVersion = releaseVersion, createApiAppReleaseSdksRequest = createApiAppReleaseSdksRequest)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<Sdk>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Generate sdks for a relase
     * Generate sdks for a relase
     * @param appId app id
     * @param releaseVersion release id
     * @param createApiAppReleaseSdksRequest  (optional)
     * @return ApiResponse<kotlin.collections.List<Sdk>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun createApiAppReleaseSdksWithHttpInfo(appId: kotlin.String, releaseVersion: kotlin.String, createApiAppReleaseSdksRequest: CreateApiAppReleaseSdksRequest?) : ApiResponse<kotlin.collections.List<Sdk>?> = withContext(Dispatchers.IO) {
        val localVariableConfig = createApiAppReleaseSdksRequestConfig(appId = appId, releaseVersion = releaseVersion, createApiAppReleaseSdksRequest = createApiAppReleaseSdksRequest)

        return@withContext request<CreateApiAppReleaseSdksRequest, kotlin.collections.List<Sdk>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation createApiAppReleaseSdks
     *
     * @param appId app id
     * @param releaseVersion release id
     * @param createApiAppReleaseSdksRequest  (optional)
     * @return RequestConfig
     */
    fun createApiAppReleaseSdksRequestConfig(appId: kotlin.String, releaseVersion: kotlin.String, createApiAppReleaseSdksRequest: CreateApiAppReleaseSdksRequest?) : RequestConfig<CreateApiAppReleaseSdksRequest> {
        val localVariableBody = createApiAppReleaseSdksRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/apiApp/{app_id}/release/{release_version}/sdk".replace("{"+"app_id"+"}", encodeURIComponent(appId.toString())).replace("{"+"release_version"+"}", encodeURIComponent(releaseVersion.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
