/**
 * Smooth API
 * Smooth API
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Logo from './Logo';

/**
 * The Spec model module.
 * @module model/Spec
 * @version 0.0.3
 */
class Spec {
    /**
     * Constructs a new <code>Spec</code>.
     * @alias module:model/Spec
     */
    constructor() { 
        
        Spec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Spec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Spec} obj Optional instance to populate.
     * @return {module:model/Spec} The populated <code>Spec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Spec();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('specType')) {
                obj['specType'] = ApiClient.convertToType(data['specType'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
            if (data.hasOwnProperty('docsLink')) {
                obj['docsLink'] = ApiClient.convertToType(data['docsLink'], 'String');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = Logo.constructFromObject(data['logo']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Spec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Spec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['specType'] && !(typeof data['specType'] === 'string' || data['specType'] instanceof String)) {
            throw new Error("Expected the field `specType` to be a primitive type in the JSON string but got " + data['specType']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }
        // ensure the json data is a string
        if (data['docsLink'] && !(typeof data['docsLink'] === 'string' || data['docsLink'] instanceof String)) {
            throw new Error("Expected the field `docsLink` to be a primitive type in the JSON string but got " + data['docsLink']);
        }
        // validate the optional field `logo`
        if (data['logo']) { // data not null
          Logo.validateJSON(data['logo']);
        }

        return true;
    }


}



/**
 * @member {String} id
 */
Spec.prototype['id'] = undefined;

/**
 * @member {String} specType
 */
Spec.prototype['specType'] = undefined;

/**
 * @member {String} link
 */
Spec.prototype['link'] = undefined;

/**
 * @member {String} title
 */
Spec.prototype['title'] = undefined;

/**
 * @member {String} description
 */
Spec.prototype['description'] = undefined;

/**
 * @member {String} version
 */
Spec.prototype['version'] = undefined;

/**
 * @member {String} docsLink
 */
Spec.prototype['docsLink'] = undefined;

/**
 * @member {module:model/Logo} logo
 */
Spec.prototype['logo'] = undefined;






export default Spec;

