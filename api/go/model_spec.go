/*
Outmatch API

Outmatch API

API version: 0.0.34
Contact: internal@outmatchapi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Spec struct for Spec
type Spec struct {
	Id string `json:"id"`
	SpecType string `json:"specType"`
	Link string `json:"link"`
	Title string `json:"title"`
	Description string `json:"description"`
	Version string `json:"version"`
	Logo Logo `json:"logo"`
}

// NewSpec instantiates a new Spec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpec(id string, specType string, link string, title string, description string, version string, logo Logo) *Spec {
	this := Spec{}
	this.Id = id
	this.SpecType = specType
	this.Link = link
	this.Title = title
	this.Description = description
	this.Version = version
	this.Logo = logo
	return &this
}

// NewSpecWithDefaults instantiates a new Spec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecWithDefaults() *Spec {
	this := Spec{}
	return &this
}

// GetId returns the Id field value
func (o *Spec) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Spec) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Spec) SetId(v string) {
	o.Id = v
}

// GetSpecType returns the SpecType field value
func (o *Spec) GetSpecType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SpecType
}

// GetSpecTypeOk returns a tuple with the SpecType field value
// and a boolean to check if the value has been set.
func (o *Spec) GetSpecTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SpecType, true
}

// SetSpecType sets field value
func (o *Spec) SetSpecType(v string) {
	o.SpecType = v
}

// GetLink returns the Link field value
func (o *Spec) GetLink() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Link
}

// GetLinkOk returns a tuple with the Link field value
// and a boolean to check if the value has been set.
func (o *Spec) GetLinkOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Link, true
}

// SetLink sets field value
func (o *Spec) SetLink(v string) {
	o.Link = v
}

// GetTitle returns the Title field value
func (o *Spec) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Spec) GetTitleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Spec) SetTitle(v string) {
	o.Title = v
}

// GetDescription returns the Description field value
func (o *Spec) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Spec) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Spec) SetDescription(v string) {
	o.Description = v
}

// GetVersion returns the Version field value
func (o *Spec) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *Spec) GetVersionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *Spec) SetVersion(v string) {
	o.Version = v
}

// GetLogo returns the Logo field value
func (o *Spec) GetLogo() Logo {
	if o == nil {
		var ret Logo
		return ret
	}

	return o.Logo
}

// GetLogoOk returns a tuple with the Logo field value
// and a boolean to check if the value has been set.
func (o *Spec) GetLogoOk() (*Logo, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Logo, true
}

// SetLogo sets field value
func (o *Spec) SetLogo(v Logo) {
	o.Logo = v
}

func (o Spec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["specType"] = o.SpecType
	}
	if true {
		toSerialize["link"] = o.Link
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["logo"] = o.Logo
	}
	return json.Marshal(toSerialize)
}

type NullableSpec struct {
	value *Spec
	isSet bool
}

func (v NullableSpec) Get() *Spec {
	return v.value
}

func (v *NullableSpec) Set(val *Spec) {
	v.value = val
	v.isSet = true
}

func (v NullableSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpec(val *Spec) *NullableSpec {
	return &NullableSpec{value: val, isSet: true}
}

func (v NullableSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


