/*
 * Outmatch API
 *
 * Outmatch API
 *
 * The version of the OpenAPI document: 0.0.44
 * Contact: internal@outmatchapi.com
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`create_api_app`]
#[derive(Clone, Debug, Default)]
pub struct CreateApiAppParams {
    pub create_api_app_request: Option<crate::models::CreateApiAppRequest>
}

/// struct for passing parameters to the method [`create_api_app_release`]
#[derive(Clone, Debug, Default)]
pub struct CreateApiAppReleaseParams {
    /// app id to associate the release with
    pub app_id: String,
    /// Created release object
    pub body: Option<String>
}

/// struct for passing parameters to the method [`create_api_app_release_sdks`]
#[derive(Clone, Debug, Default)]
pub struct CreateApiAppReleaseSdksParams {
    /// app id
    pub app_id: String,
    /// release id
    pub release_version: String,
    pub create_api_app_release_sdks_request: Option<crate::models::CreateApiAppReleaseSdksRequest>
}


/// struct for typed errors of method [`create_api_app`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateApiAppError {
    Status4XX(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_api_app_release`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateApiAppReleaseError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_api_app_release_sdks`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateApiAppReleaseSdksError {
    UnknownValue(serde_json::Value),
}


/// Create an api app for the authenticated user
pub async fn create_api_app(configuration: &configuration::Configuration, params: CreateApiAppParams) -> Result<crate::models::ApiApp, Error<CreateApiAppError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let create_api_app_request = params.create_api_app_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/apiApp", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_api_app_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateApiAppError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create an api app release
pub async fn create_api_app_release(configuration: &configuration::Configuration, params: CreateApiAppReleaseParams) -> Result<crate::models::Release, Error<CreateApiAppReleaseError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let app_id = params.app_id;
    let body = params.body;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/apiApp/{app_id}/release", local_var_configuration.base_path, app_id=crate::apis::urlencode(app_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateApiAppReleaseError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Generate sdks for a relase
pub async fn create_api_app_release_sdks(configuration: &configuration::Configuration, params: CreateApiAppReleaseSdksParams) -> Result<Vec<crate::models::Sdk>, Error<CreateApiAppReleaseSdksError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let app_id = params.app_id;
    let release_version = params.release_version;
    let create_api_app_release_sdks_request = params.create_api_app_release_sdks_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/apiApp/{app_id}/release/{release_version}/sdk", local_var_configuration.base_path, app_id=crate::apis::urlencode(app_id), release_version=crate::apis::urlencode(release_version));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_api_app_release_sdks_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateApiAppReleaseSdksError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

