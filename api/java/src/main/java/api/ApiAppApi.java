/*
 * Outmatch API
 * Outmatch API
 *
 * The version of the OpenAPI document: 0.0.44
 * Contact: internal@outmatchapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package api;

import invalidPackageName.ApiCallback;
import invalidPackageName.ApiClient;
import invalidPackageName.ApiException;
import invalidPackageName.ApiResponse;
import invalidPackageName.Configuration;
import invalidPackageName.Pair;
import invalidPackageName.ProgressRequestBody;
import invalidPackageName.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.outmatchapi.api.ApiApp;
import com.outmatchapi.api.CreateApiAppReleaseSdksRequest;
import com.outmatchapi.api.CreateApiAppRequest;
import com.outmatchapi.api.Error;
import com.outmatchapi.api.Release;
import com.outmatchapi.api.Sdk;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ApiAppApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiAppApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiAppApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createApiApp
     * @param createApiAppRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiAppCall(CreateApiAppRequest createApiAppRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createApiAppRequest;

        // create path and map variables
        String localVarPath = "/apiApp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApiAppValidateBeforeCall(CreateApiAppRequest createApiAppRequest, final ApiCallback _callback) throws ApiException {
        return createApiAppCall(createApiAppRequest, _callback);

    }

    /**
     * Create api app
     * Create an api app for the authenticated user
     * @param createApiAppRequest  (optional)
     * @return ApiApp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public ApiApp createApiApp(CreateApiAppRequest createApiAppRequest) throws ApiException {
        ApiResponse<ApiApp> localVarResp = createApiAppWithHttpInfo(createApiAppRequest);
        return localVarResp.getData();
    }

    /**
     * Create api app
     * Create an api app for the authenticated user
     * @param createApiAppRequest  (optional)
     * @return ApiResponse&lt;ApiApp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiApp> createApiAppWithHttpInfo(CreateApiAppRequest createApiAppRequest) throws ApiException {
        okhttp3.Call localVarCall = createApiAppValidateBeforeCall(createApiAppRequest, null);
        Type localVarReturnType = new TypeToken<ApiApp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create api app (asynchronously)
     * Create an api app for the authenticated user
     * @param createApiAppRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
        <tr><td> 4XX </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiAppAsync(CreateApiAppRequest createApiAppRequest, final ApiCallback<ApiApp> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApiAppValidateBeforeCall(createApiAppRequest, _callback);
        Type localVarReturnType = new TypeToken<ApiApp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createApiAppRelease
     * @param appId app id to associate the release with (required)
     * @param body Created release object (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiAppReleaseCall(String appId, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/apiApp/{app_id}/release"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApiAppReleaseValidateBeforeCall(String appId, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createApiAppRelease(Async)");
        }

        return createApiAppReleaseCall(appId, body, _callback);

    }

    /**
     * Create api app release
     * Create an api app release
     * @param appId app id to associate the release with (required)
     * @param body Created release object (optional)
     * @return Release
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public Release createApiAppRelease(String appId, String body) throws ApiException {
        ApiResponse<Release> localVarResp = createApiAppReleaseWithHttpInfo(appId, body);
        return localVarResp.getData();
    }

    /**
     * Create api app release
     * Create an api app release
     * @param appId app id to associate the release with (required)
     * @param body Created release object (optional)
     * @return ApiResponse&lt;Release&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Release> createApiAppReleaseWithHttpInfo(String appId, String body) throws ApiException {
        okhttp3.Call localVarCall = createApiAppReleaseValidateBeforeCall(appId, body, null);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create api app release (asynchronously)
     * Create an api app release
     * @param appId app id to associate the release with (required)
     * @param body Created release object (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiAppReleaseAsync(String appId, String body, final ApiCallback<Release> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApiAppReleaseValidateBeforeCall(appId, body, _callback);
        Type localVarReturnType = new TypeToken<Release>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createApiAppReleaseSdks
     * @param appId app id (required)
     * @param releaseVersion release id (required)
     * @param createApiAppReleaseSdksRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiAppReleaseSdksCall(String appId, String releaseVersion, CreateApiAppReleaseSdksRequest createApiAppReleaseSdksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createApiAppReleaseSdksRequest;

        // create path and map variables
        String localVarPath = "/apiApp/{app_id}/release/{release_version}/sdk"
            .replace("{" + "app_id" + "}", localVarApiClient.escapeString(appId.toString()))
            .replace("{" + "release_version" + "}", localVarApiClient.escapeString(releaseVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApiAppReleaseSdksValidateBeforeCall(String appId, String releaseVersion, CreateApiAppReleaseSdksRequest createApiAppReleaseSdksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createApiAppReleaseSdks(Async)");
        }

        // verify the required parameter 'releaseVersion' is set
        if (releaseVersion == null) {
            throw new ApiException("Missing the required parameter 'releaseVersion' when calling createApiAppReleaseSdks(Async)");
        }

        return createApiAppReleaseSdksCall(appId, releaseVersion, createApiAppReleaseSdksRequest, _callback);

    }

    /**
     * Generate sdks for a relase
     * Generate sdks for a relase
     * @param appId app id (required)
     * @param releaseVersion release id (required)
     * @param createApiAppReleaseSdksRequest  (optional)
     * @return List&lt;Sdk&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public List<Sdk> createApiAppReleaseSdks(String appId, String releaseVersion, CreateApiAppReleaseSdksRequest createApiAppReleaseSdksRequest) throws ApiException {
        ApiResponse<List<Sdk>> localVarResp = createApiAppReleaseSdksWithHttpInfo(appId, releaseVersion, createApiAppReleaseSdksRequest);
        return localVarResp.getData();
    }

    /**
     * Generate sdks for a relase
     * Generate sdks for a relase
     * @param appId app id (required)
     * @param releaseVersion release id (required)
     * @param createApiAppReleaseSdksRequest  (optional)
     * @return ApiResponse&lt;List&lt;Sdk&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Sdk>> createApiAppReleaseSdksWithHttpInfo(String appId, String releaseVersion, CreateApiAppReleaseSdksRequest createApiAppReleaseSdksRequest) throws ApiException {
        okhttp3.Call localVarCall = createApiAppReleaseSdksValidateBeforeCall(appId, releaseVersion, createApiAppReleaseSdksRequest, null);
        Type localVarReturnType = new TypeToken<List<Sdk>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate sdks for a relase (asynchronously)
     * Generate sdks for a relase
     * @param appId app id (required)
     * @param releaseVersion release id (required)
     * @param createApiAppReleaseSdksRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Example response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiAppReleaseSdksAsync(String appId, String releaseVersion, CreateApiAppReleaseSdksRequest createApiAppReleaseSdksRequest, final ApiCallback<List<Sdk>> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApiAppReleaseSdksValidateBeforeCall(appId, releaseVersion, createApiAppReleaseSdksRequest, _callback);
        Type localVarReturnType = new TypeToken<List<Sdk>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
