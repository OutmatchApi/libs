/*
Smooth API

Smooth API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Spec struct for Spec
type Spec struct {
	Id *string `json:"id,omitempty"`
	SpecType *string `json:"specType,omitempty"`
	Link *string `json:"link,omitempty"`
	Title *string `json:"title,omitempty"`
	Description *string `json:"description,omitempty"`
	Version *string `json:"version,omitempty"`
	DocsLink *string `json:"docsLink,omitempty"`
	Logo *Logo `json:"logo,omitempty"`
}

// NewSpec instantiates a new Spec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpec() *Spec {
	this := Spec{}
	return &this
}

// NewSpecWithDefaults instantiates a new Spec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpecWithDefaults() *Spec {
	this := Spec{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Spec) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spec) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Spec) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Spec) SetId(v string) {
	o.Id = &v
}

// GetSpecType returns the SpecType field value if set, zero value otherwise.
func (o *Spec) GetSpecType() string {
	if o == nil || isNil(o.SpecType) {
		var ret string
		return ret
	}
	return *o.SpecType
}

// GetSpecTypeOk returns a tuple with the SpecType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spec) GetSpecTypeOk() (*string, bool) {
	if o == nil || isNil(o.SpecType) {
    return nil, false
	}
	return o.SpecType, true
}

// HasSpecType returns a boolean if a field has been set.
func (o *Spec) HasSpecType() bool {
	if o != nil && !isNil(o.SpecType) {
		return true
	}

	return false
}

// SetSpecType gets a reference to the given string and assigns it to the SpecType field.
func (o *Spec) SetSpecType(v string) {
	o.SpecType = &v
}

// GetLink returns the Link field value if set, zero value otherwise.
func (o *Spec) GetLink() string {
	if o == nil || isNil(o.Link) {
		var ret string
		return ret
	}
	return *o.Link
}

// GetLinkOk returns a tuple with the Link field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spec) GetLinkOk() (*string, bool) {
	if o == nil || isNil(o.Link) {
    return nil, false
	}
	return o.Link, true
}

// HasLink returns a boolean if a field has been set.
func (o *Spec) HasLink() bool {
	if o != nil && !isNil(o.Link) {
		return true
	}

	return false
}

// SetLink gets a reference to the given string and assigns it to the Link field.
func (o *Spec) SetLink(v string) {
	o.Link = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Spec) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spec) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
    return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Spec) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Spec) SetTitle(v string) {
	o.Title = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Spec) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spec) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Spec) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Spec) SetDescription(v string) {
	o.Description = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Spec) GetVersion() string {
	if o == nil || isNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spec) GetVersionOk() (*string, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Spec) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Spec) SetVersion(v string) {
	o.Version = &v
}

// GetDocsLink returns the DocsLink field value if set, zero value otherwise.
func (o *Spec) GetDocsLink() string {
	if o == nil || isNil(o.DocsLink) {
		var ret string
		return ret
	}
	return *o.DocsLink
}

// GetDocsLinkOk returns a tuple with the DocsLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spec) GetDocsLinkOk() (*string, bool) {
	if o == nil || isNil(o.DocsLink) {
    return nil, false
	}
	return o.DocsLink, true
}

// HasDocsLink returns a boolean if a field has been set.
func (o *Spec) HasDocsLink() bool {
	if o != nil && !isNil(o.DocsLink) {
		return true
	}

	return false
}

// SetDocsLink gets a reference to the given string and assigns it to the DocsLink field.
func (o *Spec) SetDocsLink(v string) {
	o.DocsLink = &v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *Spec) GetLogo() Logo {
	if o == nil || isNil(o.Logo) {
		var ret Logo
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spec) GetLogoOk() (*Logo, bool) {
	if o == nil || isNil(o.Logo) {
    return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *Spec) HasLogo() bool {
	if o != nil && !isNil(o.Logo) {
		return true
	}

	return false
}

// SetLogo gets a reference to the given Logo and assigns it to the Logo field.
func (o *Spec) SetLogo(v Logo) {
	o.Logo = &v
}

func (o Spec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.SpecType) {
		toSerialize["specType"] = o.SpecType
	}
	if !isNil(o.Link) {
		toSerialize["link"] = o.Link
	}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !isNil(o.DocsLink) {
		toSerialize["docsLink"] = o.DocsLink
	}
	if !isNil(o.Logo) {
		toSerialize["logo"] = o.Logo
	}
	return json.Marshal(toSerialize)
}

type NullableSpec struct {
	value *Spec
	isSet bool
}

func (v NullableSpec) Get() *Spec {
	return v.value
}

func (v *NullableSpec) Set(val *Spec) {
	v.value = val
	v.isSet = true
}

func (v NullableSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpec(val *Spec) *NullableSpec {
	return &NullableSpec{value: val, isSet: true}
}

func (v NullableSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


