/*
Smooth API

Smooth API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Sdk struct for Sdk
type Sdk struct {
	Id *string `json:"id,omitempty"`
	Language *Language `json:"language,omitempty"`
	SdkVersion *string `json:"sdkVersion,omitempty"`
	CodeUrl *string `json:"codeUrl,omitempty"`
	PackageUrl *string `json:"packageUrl,omitempty"`
}

// NewSdk instantiates a new Sdk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSdk() *Sdk {
	this := Sdk{}
	return &this
}

// NewSdkWithDefaults instantiates a new Sdk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSdkWithDefaults() *Sdk {
	this := Sdk{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Sdk) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sdk) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Sdk) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Sdk) SetId(v string) {
	o.Id = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Sdk) GetLanguage() Language {
	if o == nil || isNil(o.Language) {
		var ret Language
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sdk) GetLanguageOk() (*Language, bool) {
	if o == nil || isNil(o.Language) {
    return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Sdk) HasLanguage() bool {
	if o != nil && !isNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given Language and assigns it to the Language field.
func (o *Sdk) SetLanguage(v Language) {
	o.Language = &v
}

// GetSdkVersion returns the SdkVersion field value if set, zero value otherwise.
func (o *Sdk) GetSdkVersion() string {
	if o == nil || isNil(o.SdkVersion) {
		var ret string
		return ret
	}
	return *o.SdkVersion
}

// GetSdkVersionOk returns a tuple with the SdkVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sdk) GetSdkVersionOk() (*string, bool) {
	if o == nil || isNil(o.SdkVersion) {
    return nil, false
	}
	return o.SdkVersion, true
}

// HasSdkVersion returns a boolean if a field has been set.
func (o *Sdk) HasSdkVersion() bool {
	if o != nil && !isNil(o.SdkVersion) {
		return true
	}

	return false
}

// SetSdkVersion gets a reference to the given string and assigns it to the SdkVersion field.
func (o *Sdk) SetSdkVersion(v string) {
	o.SdkVersion = &v
}

// GetCodeUrl returns the CodeUrl field value if set, zero value otherwise.
func (o *Sdk) GetCodeUrl() string {
	if o == nil || isNil(o.CodeUrl) {
		var ret string
		return ret
	}
	return *o.CodeUrl
}

// GetCodeUrlOk returns a tuple with the CodeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sdk) GetCodeUrlOk() (*string, bool) {
	if o == nil || isNil(o.CodeUrl) {
    return nil, false
	}
	return o.CodeUrl, true
}

// HasCodeUrl returns a boolean if a field has been set.
func (o *Sdk) HasCodeUrl() bool {
	if o != nil && !isNil(o.CodeUrl) {
		return true
	}

	return false
}

// SetCodeUrl gets a reference to the given string and assigns it to the CodeUrl field.
func (o *Sdk) SetCodeUrl(v string) {
	o.CodeUrl = &v
}

// GetPackageUrl returns the PackageUrl field value if set, zero value otherwise.
func (o *Sdk) GetPackageUrl() string {
	if o == nil || isNil(o.PackageUrl) {
		var ret string
		return ret
	}
	return *o.PackageUrl
}

// GetPackageUrlOk returns a tuple with the PackageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sdk) GetPackageUrlOk() (*string, bool) {
	if o == nil || isNil(o.PackageUrl) {
    return nil, false
	}
	return o.PackageUrl, true
}

// HasPackageUrl returns a boolean if a field has been set.
func (o *Sdk) HasPackageUrl() bool {
	if o != nil && !isNil(o.PackageUrl) {
		return true
	}

	return false
}

// SetPackageUrl gets a reference to the given string and assigns it to the PackageUrl field.
func (o *Sdk) SetPackageUrl(v string) {
	o.PackageUrl = &v
}

func (o Sdk) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !isNil(o.SdkVersion) {
		toSerialize["sdkVersion"] = o.SdkVersion
	}
	if !isNil(o.CodeUrl) {
		toSerialize["codeUrl"] = o.CodeUrl
	}
	if !isNil(o.PackageUrl) {
		toSerialize["packageUrl"] = o.PackageUrl
	}
	return json.Marshal(toSerialize)
}

type NullableSdk struct {
	value *Sdk
	isSet bool
}

func (v NullableSdk) Get() *Sdk {
	return v.value
}

func (v *NullableSdk) Set(val *Sdk) {
	v.value = val
	v.isSet = true
}

func (v NullableSdk) IsSet() bool {
	return v.isSet
}

func (v *NullableSdk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSdk(val *Sdk) *NullableSdk {
	return &NullableSdk{value: val, isSet: true}
}

func (v NullableSdk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSdk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


