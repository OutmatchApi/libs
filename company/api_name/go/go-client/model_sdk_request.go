/*
Smooth API

Smooth API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SdkRequest struct for SdkRequest
type SdkRequest struct {
	Languages []Language `json:"languages,omitempty"`
}

// NewSdkRequest instantiates a new SdkRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSdkRequest() *SdkRequest {
	this := SdkRequest{}
	return &this
}

// NewSdkRequestWithDefaults instantiates a new SdkRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSdkRequestWithDefaults() *SdkRequest {
	this := SdkRequest{}
	return &this
}

// GetLanguages returns the Languages field value if set, zero value otherwise.
func (o *SdkRequest) GetLanguages() []Language {
	if o == nil || isNil(o.Languages) {
		var ret []Language
		return ret
	}
	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SdkRequest) GetLanguagesOk() ([]Language, bool) {
	if o == nil || isNil(o.Languages) {
    return nil, false
	}
	return o.Languages, true
}

// HasLanguages returns a boolean if a field has been set.
func (o *SdkRequest) HasLanguages() bool {
	if o != nil && !isNil(o.Languages) {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given []Language and assigns it to the Languages field.
func (o *SdkRequest) SetLanguages(v []Language) {
	o.Languages = v
}

func (o SdkRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Languages) {
		toSerialize["languages"] = o.Languages
	}
	return json.Marshal(toSerialize)
}

type NullableSdkRequest struct {
	value *SdkRequest
	isSet bool
}

func (v NullableSdkRequest) Get() *SdkRequest {
	return v.value
}

func (v *NullableSdkRequest) Set(val *SdkRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSdkRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSdkRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSdkRequest(val *SdkRequest) *NullableSdkRequest {
	return &NullableSdkRequest{value: val, isSet: true}
}

func (v NullableSdkRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSdkRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


