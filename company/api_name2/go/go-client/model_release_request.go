/*
Smooth API

Smooth API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ReleaseRequest struct for ReleaseRequest
type ReleaseRequest struct {
	SpecString *string `json:"specString,omitempty"`
}

// NewReleaseRequest instantiates a new ReleaseRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReleaseRequest() *ReleaseRequest {
	this := ReleaseRequest{}
	return &this
}

// NewReleaseRequestWithDefaults instantiates a new ReleaseRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReleaseRequestWithDefaults() *ReleaseRequest {
	this := ReleaseRequest{}
	return &this
}

// GetSpecString returns the SpecString field value if set, zero value otherwise.
func (o *ReleaseRequest) GetSpecString() string {
	if o == nil || isNil(o.SpecString) {
		var ret string
		return ret
	}
	return *o.SpecString
}

// GetSpecStringOk returns a tuple with the SpecString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReleaseRequest) GetSpecStringOk() (*string, bool) {
	if o == nil || isNil(o.SpecString) {
    return nil, false
	}
	return o.SpecString, true
}

// HasSpecString returns a boolean if a field has been set.
func (o *ReleaseRequest) HasSpecString() bool {
	if o != nil && !isNil(o.SpecString) {
		return true
	}

	return false
}

// SetSpecString gets a reference to the given string and assigns it to the SpecString field.
func (o *ReleaseRequest) SetSpecString(v string) {
	o.SpecString = &v
}

func (o ReleaseRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SpecString) {
		toSerialize["specString"] = o.SpecString
	}
	return json.Marshal(toSerialize)
}

type NullableReleaseRequest struct {
	value *ReleaseRequest
	isSet bool
}

func (v NullableReleaseRequest) Get() *ReleaseRequest {
	return v.value
}

func (v *NullableReleaseRequest) Set(val *ReleaseRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReleaseRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReleaseRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReleaseRequest(val *ReleaseRequest) *NullableReleaseRequest {
	return &NullableReleaseRequest{value: val, isSet: true}
}

func (v NullableReleaseRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReleaseRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


