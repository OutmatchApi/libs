/*
Smooth API

Smooth API

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Logo struct for Logo
type Logo struct {
	Url *string `json:"url,omitempty"`
	AltText *string `json:"altText,omitempty"`
}

// NewLogo instantiates a new Logo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogo() *Logo {
	this := Logo{}
	return &this
}

// NewLogoWithDefaults instantiates a new Logo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogoWithDefaults() *Logo {
	this := Logo{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Logo) GetUrl() string {
	if o == nil || isNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logo) GetUrlOk() (*string, bool) {
	if o == nil || isNil(o.Url) {
    return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Logo) HasUrl() bool {
	if o != nil && !isNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Logo) SetUrl(v string) {
	o.Url = &v
}

// GetAltText returns the AltText field value if set, zero value otherwise.
func (o *Logo) GetAltText() string {
	if o == nil || isNil(o.AltText) {
		var ret string
		return ret
	}
	return *o.AltText
}

// GetAltTextOk returns a tuple with the AltText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Logo) GetAltTextOk() (*string, bool) {
	if o == nil || isNil(o.AltText) {
    return nil, false
	}
	return o.AltText, true
}

// HasAltText returns a boolean if a field has been set.
func (o *Logo) HasAltText() bool {
	if o != nil && !isNil(o.AltText) {
		return true
	}

	return false
}

// SetAltText gets a reference to the given string and assigns it to the AltText field.
func (o *Logo) SetAltText(v string) {
	o.AltText = &v
}

func (o Logo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !isNil(o.AltText) {
		toSerialize["altText"] = o.AltText
	}
	return json.Marshal(toSerialize)
}

type NullableLogo struct {
	value *Logo
	isSet bool
}

func (v NullableLogo) Get() *Logo {
	return v.value
}

func (v *NullableLogo) Set(val *Logo) {
	v.value = val
	v.isSet = true
}

func (v NullableLogo) IsSet() bool {
	return v.isSet
}

func (v *NullableLogo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogo(val *Logo) *NullableLogo {
	return &NullableLogo{value: val, isSet: true}
}

func (v NullableLogo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


