/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`d_elete_videos_video_id_chapters_language`]
#[derive(Clone, Debug, Default)]
pub struct DEleteVideosVideoIdChaptersLanguageParams {
    /// The unique identifier for the video you want to delete a chapter from. 
    pub video_id: String,
    /// A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
    pub language: String
}

/// struct for passing parameters to the method [`g_et_videos_video_id_chapters`]
#[derive(Clone, Debug, Default)]
pub struct GEtVideosVideoIdChaptersParams {
    /// The unique identifier for the video you want to retrieve a list of chapters for.
    pub video_id: String,
    /// Choose the number of search results to return per page. Minimum value: 1
    pub current_page: Option<i32>,
    /// Results per page. Allowed values 1-100, default is 25.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method [`g_et_videos_video_id_chapters_language`]
#[derive(Clone, Debug, Default)]
pub struct GEtVideosVideoIdChaptersLanguageParams {
    /// The unique identifier for the video you want to show a chapter for.
    pub video_id: String,
    /// A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
    pub language: String
}

/// struct for passing parameters to the method [`p_ost_videos_video_id_chapters_language`]
#[derive(Clone, Debug, Default)]
pub struct POstVideosVideoIdChaptersLanguageParams {
    /// The unique identifier for the video you want to upload a chapter for.
    pub video_id: String,
    /// A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
    pub language: String,
    /// The VTT file describing the chapters you want to upload.
    pub file: std::path::PathBuf
}


/// struct for typed errors of method [`d_elete_videos_video_id_chapters_language`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteVideosVideoIdChaptersLanguageError {
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_videos_video_id_chapters`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtVideosVideoIdChaptersError {
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_videos_video_id_chapters_language`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtVideosVideoIdChaptersLanguageError {
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_videos_video_id_chapters_language`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstVideosVideoIdChaptersLanguageError {
    Status400(crate::models::BadRequest),
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}


pub async fn d_elete_videos_video_id_chapters_language(configuration: &configuration::Configuration, params: DEleteVideosVideoIdChaptersLanguageParams) -> Result<(), Error<DEleteVideosVideoIdChaptersLanguageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let video_id = params.video_id;
    let language = params.language;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/videos/{videoId}/chapters/{language}", local_var_configuration.base_path, videoId=crate::apis::urlencode(video_id), language=crate::apis::urlencode(language));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DEleteVideosVideoIdChaptersLanguageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all chapters for a specified video.
pub async fn g_et_videos_video_id_chapters(configuration: &configuration::Configuration, params: GEtVideosVideoIdChaptersParams) -> Result<crate::models::ChaptersListResponse, Error<GEtVideosVideoIdChaptersError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let video_id = params.video_id;
    let current_page = params.current_page;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/videos/{videoId}/chapters", local_var_configuration.base_path, videoId=crate::apis::urlencode(video_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = current_page {
        local_var_req_builder = local_var_req_builder.query(&[("currentPage", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtVideosVideoIdChaptersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Chapters help your viewers find the sections of the video they are most interested in viewing. Tutorials that use the [chapters endpoint](https://api.video/blog/endpoints/chapters).
pub async fn g_et_videos_video_id_chapters_language(configuration: &configuration::Configuration, params: GEtVideosVideoIdChaptersLanguageParams) -> Result<crate::models::Chapter, Error<GEtVideosVideoIdChaptersLanguageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let video_id = params.video_id;
    let language = params.language;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/videos/{videoId}/chapters/{language}", local_var_configuration.base_path, videoId=crate::apis::urlencode(video_id), language=crate::apis::urlencode(language));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtVideosVideoIdChaptersLanguageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos) for more details.
pub async fn p_ost_videos_video_id_chapters_language(configuration: &configuration::Configuration, params: POstVideosVideoIdChaptersLanguageParams) -> Result<crate::models::Chapter, Error<POstVideosVideoIdChaptersLanguageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let video_id = params.video_id;
    let language = params.language;
    let file = params.file;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/videos/{videoId}/chapters/{language}", local_var_configuration.base_path, videoId=crate::apis::urlencode(video_id), language=crate::apis::urlencode(language));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'file' parameter
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstVideosVideoIdChaptersLanguageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

