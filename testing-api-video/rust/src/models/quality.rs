/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Quality {
    /// The quality of the video you have, in pixels. Choices include 360p, 480p, 720p, 1080p, and 2160p.
    #[serde(rename = "quality", skip_serializing_if = "Option::is_none")]
    pub quality: Option<Quality>,
    /// The status of your video. Statuses include waiting - the video is waiting to be encoded. encoding - the video is in the process of being encoded. encoded - the video was successfully encoded. failed - the video failed to be encoded.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
}

impl Quality {
    pub fn new() -> Quality {
        Quality {
            quality: None,
            status: None,
        }
    }
}

/// The quality of the video you have, in pixels. Choices include 360p, 480p, 720p, 1080p, and 2160p.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Quality {
    #[serde(rename = "240p")]
    Variant240p,
    #[serde(rename = "360p")]
    Variant360p,
    #[serde(rename = "480p")]
    Variant480p,
    #[serde(rename = "720p")]
    Variant720p,
    #[serde(rename = "1080p")]
    Variant1080p,
    #[serde(rename = "2160p")]
    Variant2160p,
}

impl Default for Quality {
    fn default() -> Quality {
        Self::Variant240p
    }
}
/// The status of your video. Statuses include waiting - the video is waiting to be encoded. encoding - the video is in the process of being encoded. encoded - the video was successfully encoded. failed - the video failed to be encoded.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "waiting")]
    Waiting,
    #[serde(rename = "encoding")]
    Encoding,
    #[serde(rename = "encoded")]
    Encoded,
    #[serde(rename = "failed")]
    Failed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Waiting
    }
}

