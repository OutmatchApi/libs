/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Video {
    #[serde(rename = "assets", skip_serializing_if = "Option::is_none")]
    pub assets: Option<Box<crate::models::VideoAssets>>,
    /// A description for the video content. 
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Metadata you can use to categorise and filter videos. Metadata is a list of dictionaries, where each dictionary represents a key value pair for categorising a video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair. 
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<Vec<crate::models::Metadata>>,
    /// This lets you know whether mp4 is supported. If enabled, an mp4 URL will be provided in the response for the video. 
    #[serde(rename = "mp4Support", skip_serializing_if = "Option::is_none")]
    pub mp4_support: Option<bool>,
    /// Defines if video is panoramic. 
    #[serde(rename = "panoramic", skip_serializing_if = "Option::is_none")]
    pub panoramic: Option<bool>,
    /// The id of the player that will be applied on the video. 
    #[serde(rename = "playerId", skip_serializing_if = "Option::is_none")]
    pub player_id: Option<String>,
    /// Defines if the content is publicly reachable or if a unique token is needed for each play session. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos). 
    #[serde(rename = "public", skip_serializing_if = "Option::is_none")]
    pub public: Option<bool>,
    /// The date and time the API created the video. Date and time are provided using ISO-8601 UTC format.
    #[serde(rename = "publishedAt", skip_serializing_if = "Option::is_none")]
    pub published_at: Option<String>,
    #[serde(rename = "source", skip_serializing_if = "Option::is_none")]
    pub source: Option<Box<crate::models::VideoSource>>,
    /// One array of tags (each tag is a string) in order to categorize a video. Tags may include spaces.  
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<serde_json::Value>>,
    /// The title of the video content. 
    #[serde(rename = "title", skip_serializing_if = "Option::is_none")]
    pub title: Option<String>,
    /// The date and time the video was updated. Date and time are provided using ISO-8601 UTC format.
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// The unique identifier of the video object.
    #[serde(rename = "videoId", skip_serializing_if = "Option::is_none")]
    pub video_id: Option<String>,
}

impl Video {
    pub fn new() -> Video {
        Video {
            assets: None,
            description: None,
            metadata: None,
            mp4_support: None,
            panoramic: None,
            player_id: None,
            public: None,
            published_at: None,
            source: None,
            tags: None,
            title: None,
            updated_at: None,
            video_id: None,
        }
    }
}


