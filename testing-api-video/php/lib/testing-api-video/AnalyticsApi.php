<?php
/**
 * AnalyticsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\testing-api-video;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AnalyticsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AnalyticsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'gETAnalyticsLiveStreamsLiveStreamId' => [
            'application/json',
        ],
        'gETAnalyticsSessionsSessionIdEvents' => [
            'application/json',
        ],
        'gETAnalyticsVideosVideoId' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation gETAnalyticsLiveStreamsLiveStreamId
     *
     * List live stream player sessions
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $live_stream_id The unique identifier for the live stream you want to retrieve analytics for. (required)
     * @param  string $period Period must have one of the following formats:  - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot; For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot; (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RawStatisticsListLiveStreamAnalyticsResponse|\OpenAPI\Client\Model\NotFound
     */
    public function gETAnalyticsLiveStreamsLiveStreamId($associative_array)
    {
        list($response) = $this->gETAnalyticsLiveStreamsLiveStreamIdWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation gETAnalyticsLiveStreamsLiveStreamIdWithHttpInfo
     *
     * List live stream player sessions
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $live_stream_id The unique identifier for the live stream you want to retrieve analytics for. (required)
     * @param  string $period Period must have one of the following formats:  - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot; For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot; (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RawStatisticsListLiveStreamAnalyticsResponse|\OpenAPI\Client\Model\NotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETAnalyticsLiveStreamsLiveStreamIdWithHttpInfo($associative_array)
    {
        $request = $this->gETAnalyticsLiveStreamsLiveStreamIdRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RawStatisticsListLiveStreamAnalyticsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RawStatisticsListLiveStreamAnalyticsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RawStatisticsListLiveStreamAnalyticsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFound' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RawStatisticsListLiveStreamAnalyticsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RawStatisticsListLiveStreamAnalyticsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gETAnalyticsLiveStreamsLiveStreamIdAsync
     *
     * List live stream player sessions
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $live_stream_id The unique identifier for the live stream you want to retrieve analytics for. (required)
     * @param  string $period Period must have one of the following formats:  - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot; For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot; (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAnalyticsLiveStreamsLiveStreamIdAsync($associative_array)
    {
        return $this->gETAnalyticsLiveStreamsLiveStreamIdAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETAnalyticsLiveStreamsLiveStreamIdAsyncWithHttpInfo
     *
     * List live stream player sessions
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $live_stream_id The unique identifier for the live stream you want to retrieve analytics for. (required)
     * @param  string $period Period must have one of the following formats:  - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot; For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot; (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAnalyticsLiveStreamsLiveStreamIdAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Model\RawStatisticsListLiveStreamAnalyticsResponse';
        $request = $this->gETAnalyticsLiveStreamsLiveStreamIdRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETAnalyticsLiveStreamsLiveStreamId'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $live_stream_id The unique identifier for the live stream you want to retrieve analytics for. (required)
     * @param  string $period Period must have one of the following formats:  - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot; For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot; (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETAnalyticsLiveStreamsLiveStreamIdRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $live_stream_id = array_key_exists('live_stream_id', $associative_array) ? $associative_array['live_stream_id'] : null;
        $period = array_key_exists('period', $associative_array) ? $associative_array['period'] : null;
        $current_page = array_key_exists('current_page', $associative_array) ? $associative_array['current_page'] : 1;
        $page_size = array_key_exists('page_size', $associative_array) ? $associative_array['page_size'] : 25;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['gETAnalyticsLiveStreamsLiveStreamId'][0];
        
        // verify the required parameter 'live_stream_id' is set
        if ($live_stream_id === null || (is_array($live_stream_id) && count($live_stream_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $live_stream_id when calling gETAnalyticsLiveStreamsLiveStreamId'
            );
        }





        $resourcePath = '/analytics/live-streams/{liveStreamId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current_page,
            'currentPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($live_stream_id !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($live_stream_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETAnalyticsSessionsSessionIdEvents
     *
     * List player session events
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $session_id A unique identifier you can use to reference and track a session with. (required)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsSessionsSessionIdEvents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RawStatisticsListPlayerSessionEventsResponse|\OpenAPI\Client\Model\NotFound
     */
    public function gETAnalyticsSessionsSessionIdEvents($associative_array)
    {
        list($response) = $this->gETAnalyticsSessionsSessionIdEventsWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation gETAnalyticsSessionsSessionIdEventsWithHttpInfo
     *
     * List player session events
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $session_id A unique identifier you can use to reference and track a session with. (required)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsSessionsSessionIdEvents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RawStatisticsListPlayerSessionEventsResponse|\OpenAPI\Client\Model\NotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETAnalyticsSessionsSessionIdEventsWithHttpInfo($associative_array)
    {
        $request = $this->gETAnalyticsSessionsSessionIdEventsRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RawStatisticsListPlayerSessionEventsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RawStatisticsListPlayerSessionEventsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RawStatisticsListPlayerSessionEventsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFound' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RawStatisticsListPlayerSessionEventsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RawStatisticsListPlayerSessionEventsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gETAnalyticsSessionsSessionIdEventsAsync
     *
     * List player session events
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $session_id A unique identifier you can use to reference and track a session with. (required)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsSessionsSessionIdEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAnalyticsSessionsSessionIdEventsAsync($associative_array)
    {
        return $this->gETAnalyticsSessionsSessionIdEventsAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETAnalyticsSessionsSessionIdEventsAsyncWithHttpInfo
     *
     * List player session events
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $session_id A unique identifier you can use to reference and track a session with. (required)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsSessionsSessionIdEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAnalyticsSessionsSessionIdEventsAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Model\RawStatisticsListPlayerSessionEventsResponse';
        $request = $this->gETAnalyticsSessionsSessionIdEventsRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETAnalyticsSessionsSessionIdEvents'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $session_id A unique identifier you can use to reference and track a session with. (required)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsSessionsSessionIdEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETAnalyticsSessionsSessionIdEventsRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $session_id = array_key_exists('session_id', $associative_array) ? $associative_array['session_id'] : null;
        $current_page = array_key_exists('current_page', $associative_array) ? $associative_array['current_page'] : 1;
        $page_size = array_key_exists('page_size', $associative_array) ? $associative_array['page_size'] : 25;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['gETAnalyticsSessionsSessionIdEvents'][0];
        
        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling gETAnalyticsSessionsSessionIdEvents'
            );
        }




        $resourcePath = '/analytics/sessions/{sessionId}/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current_page,
            'currentPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($session_id !== null) {
            $resourcePath = str_replace(
                '{' . 'sessionId' . '}',
                ObjectSerializer::toPathValue($session_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETAnalyticsVideosVideoId
     *
     * List video player sessions
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $video_id The unique identifier for the video you want to retrieve session information for. (required)
     * @param  string $period Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018 For a range period:  -  Date range: 2018-01-01/2018-01-15 (optional)
     * @param  string[] $metadata Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with. (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsVideosVideoId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\RawStatisticsListSessionsResponse|\OpenAPI\Client\Model\NotFound
     */
    public function gETAnalyticsVideosVideoId($associative_array)
    {
        list($response) = $this->gETAnalyticsVideosVideoIdWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation gETAnalyticsVideosVideoIdWithHttpInfo
     *
     * List video player sessions
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $video_id The unique identifier for the video you want to retrieve session information for. (required)
     * @param  string $period Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018 For a range period:  -  Date range: 2018-01-01/2018-01-15 (optional)
     * @param  string[] $metadata Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with. (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsVideosVideoId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\RawStatisticsListSessionsResponse|\OpenAPI\Client\Model\NotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETAnalyticsVideosVideoIdWithHttpInfo($associative_array)
    {
        $request = $this->gETAnalyticsVideosVideoIdRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\RawStatisticsListSessionsResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\RawStatisticsListSessionsResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\RawStatisticsListSessionsResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFound' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\RawStatisticsListSessionsResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\RawStatisticsListSessionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gETAnalyticsVideosVideoIdAsync
     *
     * List video player sessions
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $video_id The unique identifier for the video you want to retrieve session information for. (required)
     * @param  string $period Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018 For a range period:  -  Date range: 2018-01-01/2018-01-15 (optional)
     * @param  string[] $metadata Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with. (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsVideosVideoId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAnalyticsVideosVideoIdAsync($associative_array)
    {
        return $this->gETAnalyticsVideosVideoIdAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETAnalyticsVideosVideoIdAsyncWithHttpInfo
     *
     * List video player sessions
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $video_id The unique identifier for the video you want to retrieve session information for. (required)
     * @param  string $period Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018 For a range period:  -  Date range: 2018-01-01/2018-01-15 (optional)
     * @param  string[] $metadata Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with. (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsVideosVideoId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETAnalyticsVideosVideoIdAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Model\RawStatisticsListSessionsResponse';
        $request = $this->gETAnalyticsVideosVideoIdRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETAnalyticsVideosVideoId'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $video_id The unique identifier for the video you want to retrieve session information for. (required)
     * @param  string $period Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018 For a range period:  -  Date range: 2018-01-01/2018-01-15 (optional)
     * @param  string[] $metadata Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with. (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETAnalyticsVideosVideoId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETAnalyticsVideosVideoIdRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $video_id = array_key_exists('video_id', $associative_array) ? $associative_array['video_id'] : null;
        $period = array_key_exists('period', $associative_array) ? $associative_array['period'] : null;
        $metadata = array_key_exists('metadata', $associative_array) ? $associative_array['metadata'] : null;
        $current_page = array_key_exists('current_page', $associative_array) ? $associative_array['current_page'] : 1;
        $page_size = array_key_exists('page_size', $associative_array) ? $associative_array['page_size'] : 25;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['gETAnalyticsVideosVideoId'][0];
        
        // verify the required parameter 'video_id' is set
        if ($video_id === null || (is_array($video_id) && count($video_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $video_id when calling gETAnalyticsVideosVideoId'
            );
        }






        $resourcePath = '/analytics/videos/{videoId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $period,
            'period', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata,
            'metadata', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current_page,
            'currentPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($video_id !== null) {
            $resourcePath = str_replace(
                '{' . 'videoId' . '}',
                ObjectSerializer::toPathValue($video_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
