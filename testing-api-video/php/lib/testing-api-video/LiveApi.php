<?php
/**
 * LiveApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\testing-api-video;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * LiveApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LiveApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'dELETELiveStreamsLiveStreamId' => [
            'application/json',
        ],
        'dELETELiveStreamsLiveStreamIdThumbnail' => [
            'application/json',
        ],
        'gETLiveStreams' => [
            'application/json',
        ],
        'gETLiveStreamsLiveStreamId' => [
            'application/json',
        ],
        'pATCHLiveStreamsLiveStreamId' => [
            'application/json',
        ],
        'pOSTLiveStreams' => [
            'application/json',
        ],
        'pOSTLiveStreamsLiveStreamIdThumbnail' => [
            'multipart/form-data',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation dELETELiveStreamsLiveStreamId
     *
     * Delete a live stream
     *
     * @param  string $live_stream_id The unique ID for the live stream that you want to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dELETELiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function dELETELiveStreamsLiveStreamId($live_stream_id, string $contentType = self::contentTypes['dELETELiveStreamsLiveStreamId'][0])
    {
        $this->dELETELiveStreamsLiveStreamIdWithHttpInfo($live_stream_id, $contentType);
    }

    /**
     * Operation dELETELiveStreamsLiveStreamIdWithHttpInfo
     *
     * Delete a live stream
     *
     * @param  string $live_stream_id The unique ID for the live stream that you want to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dELETELiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function dELETELiveStreamsLiveStreamIdWithHttpInfo($live_stream_id, string $contentType = self::contentTypes['dELETELiveStreamsLiveStreamId'][0])
    {
        $request = $this->dELETELiveStreamsLiveStreamIdRequest($live_stream_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation dELETELiveStreamsLiveStreamIdAsync
     *
     * Delete a live stream
     *
     * @param  string $live_stream_id The unique ID for the live stream that you want to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dELETELiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dELETELiveStreamsLiveStreamIdAsync($live_stream_id, string $contentType = self::contentTypes['dELETELiveStreamsLiveStreamId'][0])
    {
        return $this->dELETELiveStreamsLiveStreamIdAsyncWithHttpInfo($live_stream_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dELETELiveStreamsLiveStreamIdAsyncWithHttpInfo
     *
     * Delete a live stream
     *
     * @param  string $live_stream_id The unique ID for the live stream that you want to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dELETELiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dELETELiveStreamsLiveStreamIdAsyncWithHttpInfo($live_stream_id, string $contentType = self::contentTypes['dELETELiveStreamsLiveStreamId'][0])
    {
        $returnType = '';
        $request = $this->dELETELiveStreamsLiveStreamIdRequest($live_stream_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dELETELiveStreamsLiveStreamId'
     *
     * @param  string $live_stream_id The unique ID for the live stream that you want to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dELETELiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dELETELiveStreamsLiveStreamIdRequest($live_stream_id, string $contentType = self::contentTypes['dELETELiveStreamsLiveStreamId'][0])
    {

        // verify the required parameter 'live_stream_id' is set
        if ($live_stream_id === null || (is_array($live_stream_id) && count($live_stream_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $live_stream_id when calling dELETELiveStreamsLiveStreamId'
            );
        }


        $resourcePath = '/live-streams/{liveStreamId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($live_stream_id !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($live_stream_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dELETELiveStreamsLiveStreamIdThumbnail
     *
     * Delete a thumbnail
     *
     * @param  string $live_stream_id The unique identifier for the live stream you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dELETELiveStreamsLiveStreamIdThumbnail'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LiveStream|\OpenAPI\Client\Model\NotFound
     */
    public function dELETELiveStreamsLiveStreamIdThumbnail($live_stream_id, string $contentType = self::contentTypes['dELETELiveStreamsLiveStreamIdThumbnail'][0])
    {
        list($response) = $this->dELETELiveStreamsLiveStreamIdThumbnailWithHttpInfo($live_stream_id, $contentType);
        return $response;
    }

    /**
     * Operation dELETELiveStreamsLiveStreamIdThumbnailWithHttpInfo
     *
     * Delete a thumbnail
     *
     * @param  string $live_stream_id The unique identifier for the live stream you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dELETELiveStreamsLiveStreamIdThumbnail'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LiveStream|\OpenAPI\Client\Model\NotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function dELETELiveStreamsLiveStreamIdThumbnailWithHttpInfo($live_stream_id, string $contentType = self::contentTypes['dELETELiveStreamsLiveStreamIdThumbnail'][0])
    {
        $request = $this->dELETELiveStreamsLiveStreamIdThumbnailRequest($live_stream_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LiveStream' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LiveStream' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LiveStream', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFound' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LiveStream';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LiveStream',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dELETELiveStreamsLiveStreamIdThumbnailAsync
     *
     * Delete a thumbnail
     *
     * @param  string $live_stream_id The unique identifier for the live stream you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dELETELiveStreamsLiveStreamIdThumbnail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dELETELiveStreamsLiveStreamIdThumbnailAsync($live_stream_id, string $contentType = self::contentTypes['dELETELiveStreamsLiveStreamIdThumbnail'][0])
    {
        return $this->dELETELiveStreamsLiveStreamIdThumbnailAsyncWithHttpInfo($live_stream_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dELETELiveStreamsLiveStreamIdThumbnailAsyncWithHttpInfo
     *
     * Delete a thumbnail
     *
     * @param  string $live_stream_id The unique identifier for the live stream you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dELETELiveStreamsLiveStreamIdThumbnail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dELETELiveStreamsLiveStreamIdThumbnailAsyncWithHttpInfo($live_stream_id, string $contentType = self::contentTypes['dELETELiveStreamsLiveStreamIdThumbnail'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LiveStream';
        $request = $this->dELETELiveStreamsLiveStreamIdThumbnailRequest($live_stream_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dELETELiveStreamsLiveStreamIdThumbnail'
     *
     * @param  string $live_stream_id The unique identifier for the live stream you want to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dELETELiveStreamsLiveStreamIdThumbnail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dELETELiveStreamsLiveStreamIdThumbnailRequest($live_stream_id, string $contentType = self::contentTypes['dELETELiveStreamsLiveStreamIdThumbnail'][0])
    {

        // verify the required parameter 'live_stream_id' is set
        if ($live_stream_id === null || (is_array($live_stream_id) && count($live_stream_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $live_stream_id when calling dELETELiveStreamsLiveStreamIdThumbnail'
            );
        }


        $resourcePath = '/live-streams/{liveStreamId}/thumbnail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($live_stream_id !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($live_stream_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETLiveStreams
     *
     * List all live streams
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $stream_key The unique stream key that allows you to stream videos. (optional)
     * @param  string $name You can filter live streams by their name or a part of their name. (optional)
     * @param  string $sort_by Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format. (optional)
     * @param  string $sort_order Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending. (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETLiveStreams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LiveStreamListResponse
     */
    public function gETLiveStreams($associative_array)
    {
        list($response) = $this->gETLiveStreamsWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation gETLiveStreamsWithHttpInfo
     *
     * List all live streams
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $stream_key The unique stream key that allows you to stream videos. (optional)
     * @param  string $name You can filter live streams by their name or a part of their name. (optional)
     * @param  string $sort_by Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format. (optional)
     * @param  string $sort_order Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending. (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETLiveStreams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LiveStreamListResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETLiveStreamsWithHttpInfo($associative_array)
    {
        $request = $this->gETLiveStreamsRequest($associative_array);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LiveStreamListResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LiveStreamListResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LiveStreamListResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LiveStreamListResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LiveStreamListResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gETLiveStreamsAsync
     *
     * List all live streams
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $stream_key The unique stream key that allows you to stream videos. (optional)
     * @param  string $name You can filter live streams by their name or a part of their name. (optional)
     * @param  string $sort_by Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format. (optional)
     * @param  string $sort_order Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending. (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETLiveStreams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLiveStreamsAsync($associative_array)
    {
        return $this->gETLiveStreamsAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETLiveStreamsAsyncWithHttpInfo
     *
     * List all live streams
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $stream_key The unique stream key that allows you to stream videos. (optional)
     * @param  string $name You can filter live streams by their name or a part of their name. (optional)
     * @param  string $sort_by Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format. (optional)
     * @param  string $sort_order Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending. (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETLiveStreams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLiveStreamsAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\OpenAPI\Client\Model\LiveStreamListResponse';
        $request = $this->gETLiveStreamsRequest($associative_array);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETLiveStreams'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $stream_key The unique stream key that allows you to stream videos. (optional)
     * @param  string $name You can filter live streams by their name or a part of their name. (optional)
     * @param  string $sort_by Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format. (optional)
     * @param  string $sort_order Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending. (optional)
     * @param  int $current_page Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param  int $page_size Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETLiveStreams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETLiveStreamsRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $stream_key = array_key_exists('stream_key', $associative_array) ? $associative_array['stream_key'] : null;
        $name = array_key_exists('name', $associative_array) ? $associative_array['name'] : null;
        $sort_by = array_key_exists('sort_by', $associative_array) ? $associative_array['sort_by'] : null;
        $sort_order = array_key_exists('sort_order', $associative_array) ? $associative_array['sort_order'] : null;
        $current_page = array_key_exists('current_page', $associative_array) ? $associative_array['current_page'] : 1;
        $page_size = array_key_exists('page_size', $associative_array) ? $associative_array['page_size'] : 25;
        $contentType = $associative_array['contentType'] ?? self::contentTypes['gETLiveStreams'][0];
        







        $resourcePath = '/live-streams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $stream_key,
            'streamKey', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_by,
            'sortBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_order,
            'sortOrder', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $current_page,
            'currentPage', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation gETLiveStreamsLiveStreamId
     *
     * Show live stream
     *
     * @param  string $live_stream_id The unique ID for the live stream you want to watch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LiveStream
     */
    public function gETLiveStreamsLiveStreamId($live_stream_id, string $contentType = self::contentTypes['gETLiveStreamsLiveStreamId'][0])
    {
        list($response) = $this->gETLiveStreamsLiveStreamIdWithHttpInfo($live_stream_id, $contentType);
        return $response;
    }

    /**
     * Operation gETLiveStreamsLiveStreamIdWithHttpInfo
     *
     * Show live stream
     *
     * @param  string $live_stream_id The unique ID for the live stream you want to watch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LiveStream, HTTP status code, HTTP response headers (array of strings)
     */
    public function gETLiveStreamsLiveStreamIdWithHttpInfo($live_stream_id, string $contentType = self::contentTypes['gETLiveStreamsLiveStreamId'][0])
    {
        $request = $this->gETLiveStreamsLiveStreamIdRequest($live_stream_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LiveStream' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LiveStream' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LiveStream', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LiveStream';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LiveStream',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation gETLiveStreamsLiveStreamIdAsync
     *
     * Show live stream
     *
     * @param  string $live_stream_id The unique ID for the live stream you want to watch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLiveStreamsLiveStreamIdAsync($live_stream_id, string $contentType = self::contentTypes['gETLiveStreamsLiveStreamId'][0])
    {
        return $this->gETLiveStreamsLiveStreamIdAsyncWithHttpInfo($live_stream_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation gETLiveStreamsLiveStreamIdAsyncWithHttpInfo
     *
     * Show live stream
     *
     * @param  string $live_stream_id The unique ID for the live stream you want to watch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function gETLiveStreamsLiveStreamIdAsyncWithHttpInfo($live_stream_id, string $contentType = self::contentTypes['gETLiveStreamsLiveStreamId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LiveStream';
        $request = $this->gETLiveStreamsLiveStreamIdRequest($live_stream_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'gETLiveStreamsLiveStreamId'
     *
     * @param  string $live_stream_id The unique ID for the live stream you want to watch. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['gETLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function gETLiveStreamsLiveStreamIdRequest($live_stream_id, string $contentType = self::contentTypes['gETLiveStreamsLiveStreamId'][0])
    {

        // verify the required parameter 'live_stream_id' is set
        if ($live_stream_id === null || (is_array($live_stream_id) && count($live_stream_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $live_stream_id when calling gETLiveStreamsLiveStreamId'
            );
        }


        $resourcePath = '/live-streams/{liveStreamId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($live_stream_id !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($live_stream_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pATCHLiveStreamsLiveStreamId
     *
     * Update a live stream
     *
     * @param  string $live_stream_id The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off. (required)
     * @param  \OpenAPI\Client\Model\LiveStreamUpdatePayload $live_stream_update_payload live_stream_update_payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pATCHLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LiveStream|\OpenAPI\Client\Model\BadRequest
     */
    public function pATCHLiveStreamsLiveStreamId($live_stream_id, $live_stream_update_payload = null, string $contentType = self::contentTypes['pATCHLiveStreamsLiveStreamId'][0])
    {
        list($response) = $this->pATCHLiveStreamsLiveStreamIdWithHttpInfo($live_stream_id, $live_stream_update_payload, $contentType);
        return $response;
    }

    /**
     * Operation pATCHLiveStreamsLiveStreamIdWithHttpInfo
     *
     * Update a live stream
     *
     * @param  string $live_stream_id The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off. (required)
     * @param  \OpenAPI\Client\Model\LiveStreamUpdatePayload $live_stream_update_payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pATCHLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LiveStream|\OpenAPI\Client\Model\BadRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function pATCHLiveStreamsLiveStreamIdWithHttpInfo($live_stream_id, $live_stream_update_payload = null, string $contentType = self::contentTypes['pATCHLiveStreamsLiveStreamId'][0])
    {
        $request = $this->pATCHLiveStreamsLiveStreamIdRequest($live_stream_id, $live_stream_update_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LiveStream' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LiveStream' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LiveStream', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequest' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LiveStream';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LiveStream',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pATCHLiveStreamsLiveStreamIdAsync
     *
     * Update a live stream
     *
     * @param  string $live_stream_id The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off. (required)
     * @param  \OpenAPI\Client\Model\LiveStreamUpdatePayload $live_stream_update_payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pATCHLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pATCHLiveStreamsLiveStreamIdAsync($live_stream_id, $live_stream_update_payload = null, string $contentType = self::contentTypes['pATCHLiveStreamsLiveStreamId'][0])
    {
        return $this->pATCHLiveStreamsLiveStreamIdAsyncWithHttpInfo($live_stream_id, $live_stream_update_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pATCHLiveStreamsLiveStreamIdAsyncWithHttpInfo
     *
     * Update a live stream
     *
     * @param  string $live_stream_id The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off. (required)
     * @param  \OpenAPI\Client\Model\LiveStreamUpdatePayload $live_stream_update_payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pATCHLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pATCHLiveStreamsLiveStreamIdAsyncWithHttpInfo($live_stream_id, $live_stream_update_payload = null, string $contentType = self::contentTypes['pATCHLiveStreamsLiveStreamId'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LiveStream';
        $request = $this->pATCHLiveStreamsLiveStreamIdRequest($live_stream_id, $live_stream_update_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pATCHLiveStreamsLiveStreamId'
     *
     * @param  string $live_stream_id The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off. (required)
     * @param  \OpenAPI\Client\Model\LiveStreamUpdatePayload $live_stream_update_payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pATCHLiveStreamsLiveStreamId'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pATCHLiveStreamsLiveStreamIdRequest($live_stream_id, $live_stream_update_payload = null, string $contentType = self::contentTypes['pATCHLiveStreamsLiveStreamId'][0])
    {

        // verify the required parameter 'live_stream_id' is set
        if ($live_stream_id === null || (is_array($live_stream_id) && count($live_stream_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $live_stream_id when calling pATCHLiveStreamsLiveStreamId'
            );
        }



        $resourcePath = '/live-streams/{liveStreamId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($live_stream_id !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($live_stream_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($live_stream_update_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($live_stream_update_payload));
            } else {
                $httpBody = $live_stream_update_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pOSTLiveStreams
     *
     * Create live stream
     *
     * @param  \OpenAPI\Client\Model\LiveStreamCreatePayload $live_stream_create_payload live_stream_create_payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSTLiveStreams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LiveStream|\OpenAPI\Client\Model\BadRequest
     */
    public function pOSTLiveStreams($live_stream_create_payload = null, string $contentType = self::contentTypes['pOSTLiveStreams'][0])
    {
        list($response) = $this->pOSTLiveStreamsWithHttpInfo($live_stream_create_payload, $contentType);
        return $response;
    }

    /**
     * Operation pOSTLiveStreamsWithHttpInfo
     *
     * Create live stream
     *
     * @param  \OpenAPI\Client\Model\LiveStreamCreatePayload $live_stream_create_payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSTLiveStreams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LiveStream|\OpenAPI\Client\Model\BadRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function pOSTLiveStreamsWithHttpInfo($live_stream_create_payload = null, string $contentType = self::contentTypes['pOSTLiveStreams'][0])
    {
        $request = $this->pOSTLiveStreamsRequest($live_stream_create_payload, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\LiveStream' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LiveStream' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LiveStream', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequest' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LiveStream';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LiveStream',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pOSTLiveStreamsAsync
     *
     * Create live stream
     *
     * @param  \OpenAPI\Client\Model\LiveStreamCreatePayload $live_stream_create_payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSTLiveStreams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pOSTLiveStreamsAsync($live_stream_create_payload = null, string $contentType = self::contentTypes['pOSTLiveStreams'][0])
    {
        return $this->pOSTLiveStreamsAsyncWithHttpInfo($live_stream_create_payload, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pOSTLiveStreamsAsyncWithHttpInfo
     *
     * Create live stream
     *
     * @param  \OpenAPI\Client\Model\LiveStreamCreatePayload $live_stream_create_payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSTLiveStreams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pOSTLiveStreamsAsyncWithHttpInfo($live_stream_create_payload = null, string $contentType = self::contentTypes['pOSTLiveStreams'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LiveStream';
        $request = $this->pOSTLiveStreamsRequest($live_stream_create_payload, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pOSTLiveStreams'
     *
     * @param  \OpenAPI\Client\Model\LiveStreamCreatePayload $live_stream_create_payload (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSTLiveStreams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pOSTLiveStreamsRequest($live_stream_create_payload = null, string $contentType = self::contentTypes['pOSTLiveStreams'][0])
    {



        $resourcePath = '/live-streams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($live_stream_create_payload)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($live_stream_create_payload));
            } else {
                $httpBody = $live_stream_create_payload;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation pOSTLiveStreamsLiveStreamIdThumbnail
     *
     * Upload a thumbnail
     *
     * @param  string $live_stream_id The unique ID for the live stream you want to upload. (required)
     * @param  \SplFileObject $file The image to be added as a thumbnail. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSTLiveStreamsLiveStreamIdThumbnail'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\LiveStream|\OpenAPI\Client\Model\BadRequest|\OpenAPI\Client\Model\NotFound
     */
    public function pOSTLiveStreamsLiveStreamIdThumbnail($live_stream_id, $file, string $contentType = self::contentTypes['pOSTLiveStreamsLiveStreamIdThumbnail'][0])
    {
        list($response) = $this->pOSTLiveStreamsLiveStreamIdThumbnailWithHttpInfo($live_stream_id, $file, $contentType);
        return $response;
    }

    /**
     * Operation pOSTLiveStreamsLiveStreamIdThumbnailWithHttpInfo
     *
     * Upload a thumbnail
     *
     * @param  string $live_stream_id The unique ID for the live stream you want to upload. (required)
     * @param  \SplFileObject $file The image to be added as a thumbnail. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSTLiveStreamsLiveStreamIdThumbnail'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\LiveStream|\OpenAPI\Client\Model\BadRequest|\OpenAPI\Client\Model\NotFound, HTTP status code, HTTP response headers (array of strings)
     */
    public function pOSTLiveStreamsLiveStreamIdThumbnailWithHttpInfo($live_stream_id, $file, string $contentType = self::contentTypes['pOSTLiveStreamsLiveStreamIdThumbnail'][0])
    {
        $request = $this->pOSTLiveStreamsLiveStreamIdThumbnailRequest($live_stream_id, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\LiveStream' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\LiveStream' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\LiveStream', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\BadRequest' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\BadRequest' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\BadRequest', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFound' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFound' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFound', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\LiveStream';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\LiveStream',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\BadRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFound',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation pOSTLiveStreamsLiveStreamIdThumbnailAsync
     *
     * Upload a thumbnail
     *
     * @param  string $live_stream_id The unique ID for the live stream you want to upload. (required)
     * @param  \SplFileObject $file The image to be added as a thumbnail. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSTLiveStreamsLiveStreamIdThumbnail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pOSTLiveStreamsLiveStreamIdThumbnailAsync($live_stream_id, $file, string $contentType = self::contentTypes['pOSTLiveStreamsLiveStreamIdThumbnail'][0])
    {
        return $this->pOSTLiveStreamsLiveStreamIdThumbnailAsyncWithHttpInfo($live_stream_id, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation pOSTLiveStreamsLiveStreamIdThumbnailAsyncWithHttpInfo
     *
     * Upload a thumbnail
     *
     * @param  string $live_stream_id The unique ID for the live stream you want to upload. (required)
     * @param  \SplFileObject $file The image to be added as a thumbnail. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSTLiveStreamsLiveStreamIdThumbnail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function pOSTLiveStreamsLiveStreamIdThumbnailAsyncWithHttpInfo($live_stream_id, $file, string $contentType = self::contentTypes['pOSTLiveStreamsLiveStreamIdThumbnail'][0])
    {
        $returnType = '\OpenAPI\Client\Model\LiveStream';
        $request = $this->pOSTLiveStreamsLiveStreamIdThumbnailRequest($live_stream_id, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'pOSTLiveStreamsLiveStreamIdThumbnail'
     *
     * @param  string $live_stream_id The unique ID for the live stream you want to upload. (required)
     * @param  \SplFileObject $file The image to be added as a thumbnail. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['pOSTLiveStreamsLiveStreamIdThumbnail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function pOSTLiveStreamsLiveStreamIdThumbnailRequest($live_stream_id, $file, string $contentType = self::contentTypes['pOSTLiveStreamsLiveStreamIdThumbnail'][0])
    {

        // verify the required parameter 'live_stream_id' is set
        if ($live_stream_id === null || (is_array($live_stream_id) && count($live_stream_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $live_stream_id when calling pOSTLiveStreamsLiveStreamIdThumbnail'
            );
        }

        // verify the required parameter 'file' is set
        if ($file === null || (is_array($file) && count($file) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file when calling pOSTLiveStreamsLiveStreamIdThumbnail'
            );
        }


        $resourcePath = '/live-streams/{liveStreamId}/thumbnail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($live_stream_id !== null) {
            $resourcePath = str_replace(
                '{' . 'liveStreamId' . '}',
                ObjectSerializer::toPathValue($live_stream_id),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
