=begin
#api.video

#api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for testing-api-video::PlayersApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'PlayersApi' do
  before do
    # run before each test
    @api_instance = testing-api-video::PlayersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of PlayersApi' do
    it 'should create an instance of PlayersApi' do
      expect(@api_instance).to be_instance_of(testing-api-video::PlayersApi)
    end
  end

  # unit tests for d_elete_players_player_id
  # Delete a player
  # Delete a player if you no longer need it. You can delete any player that you have the player ID for.
  # @param player_id The unique identifier for the player you want to delete.
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'd_elete_players_player_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for d_elete_players_player_id_logo
  # Delete logo
  # @param player_id The unique identifier for the player.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'd_elete_players_player_id_logo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for g_et_players
  # List all players
  # Retrieve a list of all the players you created, as well as details about each one. Tutorials that use the [player endpoint](https://api.video/blog/endpoints/player).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sort_by createdAt is the time the player was created. updatedAt is the time the player was last updated. The time is presented in ISO-8601 format.
  # @option opts [String] :sort_order Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones.
  # @option opts [Integer] :current_page Choose the number of search results to return per page. Minimum value: 1
  # @option opts [Integer] :page_size Results per page. Allowed values 1-100, default is 25.
  # @return [PlayersListResponse]
  describe 'g_et_players test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for g_et_players_player_id
  # Show a player
  # Use a player ID to retrieve details about the player and display it for viewers.
  # @param player_id The unique identifier for the player you want to retrieve. 
  # @param [Hash] opts the optional parameters
  # @return [Player]
  describe 'g_et_players_player_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for p_atch_players_player_id
  # Update a player
  # Use a player ID to update specific details for a player. NOTE: It may take up to 10 min before the new player configuration is available from our CDN.
  # @param player_id The unique identifier for the player.
  # @param player_update_payload 
  # @param [Hash] opts the optional parameters
  # @return [Player]
  describe 'p_atch_players_player_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for p_ost_players
  # Create a player
  # Create a player for your video, and customise it.
  # @param player_creation_payload 
  # @param [Hash] opts the optional parameters
  # @return [Player]
  describe 'p_ost_players test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for p_ost_players_player_id_logo
  # Upload a logo
  # The uploaded image maximum size should be 200x100 and its weight should be 200KB.  It will be scaled down to 30px height and converted to PNG to be displayed in the player.
  # @param player_id The unique identifier for the player.
  # @param file The name of the file you want to use for your logo.
  # @param link The path to the file you want to upload and use as a logo.
  # @param [Hash] opts the optional parameters
  # @return [Player]
  describe 'p_ost_players_player_id_logo test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
