# coding: utf-8

"""
    api.video

    api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from testing-api-video import schemas  # noqa: F401


class VideostatusIngest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Details about the capturing, transferring, and storing of your video for use immediately or in the future.
    """


    class MetaOapg:
        
        class properties:
            filesize = schemas.IntSchema
            
            
            class receivedBytes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['BytesRange']:
                        return BytesRange
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['BytesRange'], typing.List['BytesRange']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'receivedBytes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'BytesRange':
                    return super().__getitem__(i)
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def MISSING(cls):
                    return cls("missing")
                
                @schemas.classproperty
                def UPLOADING(cls):
                    return cls("uploading")
                
                @schemas.classproperty
                def UPLOADED(cls):
                    return cls("uploaded")
            __annotations__ = {
                "filesize": filesize,
                "receivedBytes": receivedBytes,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filesize"]) -> MetaOapg.properties.filesize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receivedBytes"]) -> MetaOapg.properties.receivedBytes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["filesize", "receivedBytes", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filesize"]) -> typing.Union[MetaOapg.properties.filesize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receivedBytes"]) -> typing.Union[MetaOapg.properties.receivedBytes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["filesize", "receivedBytes", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        filesize: typing.Union[MetaOapg.properties.filesize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        receivedBytes: typing.Union[MetaOapg.properties.receivedBytes, list, tuple, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideostatusIngest':
        return super().__new__(
            cls,
            *args,
            filesize=filesize,
            receivedBytes=receivedBytes,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from testing-api-video.model.bytes_range import BytesRange
