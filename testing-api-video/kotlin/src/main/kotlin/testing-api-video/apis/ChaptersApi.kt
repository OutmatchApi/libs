/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package testing-api-video.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.testing-api-video.BadMinusRequest
import com.outmatchapi.testing-api-video.Chapter
import com.outmatchapi.testing-api-video.ChaptersMinusListMinusResponse
import com.outmatchapi.testing-api-video.NotMinusFound

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import testing-api-video.infrastructure.ApiClient
import testing-api-video.infrastructure.ApiResponse
import testing-api-video.infrastructure.ClientException
import testing-api-video.infrastructure.ClientError
import testing-api-video.infrastructure.ServerException
import testing-api-video.infrastructure.ServerError
import testing-api-video.infrastructure.MultiValueMap
import testing-api-video.infrastructure.PartConfig
import testing-api-video.infrastructure.RequestConfig
import testing-api-video.infrastructure.RequestMethod
import testing-api-video.infrastructure.ResponseType
import testing-api-video.infrastructure.Success
import testing-api-video.infrastructure.toMultiValue

class ChaptersApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://ws.api.video")
        }
    }

    /**
     * Delete a chapter
     * 
     * @param videoId The unique identifier for the video you want to delete a chapter from. 
     * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun dELETEVideosVideoIdChaptersLanguage(videoId: kotlin.String, language: kotlin.String) : Unit = withContext(Dispatchers.IO) {
        val localVarResponse = dELETEVideosVideoIdChaptersLanguageWithHttpInfo(videoId = videoId, language = language)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Delete a chapter
     * 
     * @param videoId The unique identifier for the video you want to delete a chapter from. 
     * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun dELETEVideosVideoIdChaptersLanguageWithHttpInfo(videoId: kotlin.String, language: kotlin.String) : ApiResponse<Unit?> = withContext(Dispatchers.IO) {
        val localVariableConfig = dELETEVideosVideoIdChaptersLanguageRequestConfig(videoId = videoId, language = language)

        return@withContext request<Unit, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation dELETEVideosVideoIdChaptersLanguage
     *
     * @param videoId The unique identifier for the video you want to delete a chapter from. 
     * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @return RequestConfig
     */
    fun dELETEVideosVideoIdChaptersLanguageRequestConfig(videoId: kotlin.String, language: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.DELETE,
            path = "/videos/{videoId}/chapters/{language}".replace("{"+"videoId"+"}", encodeURIComponent(videoId.toString())).replace("{"+"language"+"}", encodeURIComponent(language.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List video chapters
     * Retrieve a list of all chapters for a specified video.
     * @param videoId The unique identifier for the video you want to retrieve a list of chapters for.
     * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @return ChaptersMinusListMinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun gETVideosVideoIdChapters(videoId: kotlin.String, currentPage: kotlin.Int? = 1, pageSize: kotlin.Int? = 25) : ChaptersMinusListMinusResponse = withContext(Dispatchers.IO) {
        val localVarResponse = gETVideosVideoIdChaptersWithHttpInfo(videoId = videoId, currentPage = currentPage, pageSize = pageSize)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChaptersMinusListMinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List video chapters
     * Retrieve a list of all chapters for a specified video.
     * @param videoId The unique identifier for the video you want to retrieve a list of chapters for.
     * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @return ApiResponse<ChaptersMinusListMinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun gETVideosVideoIdChaptersWithHttpInfo(videoId: kotlin.String, currentPage: kotlin.Int?, pageSize: kotlin.Int?) : ApiResponse<ChaptersMinusListMinusResponse?> = withContext(Dispatchers.IO) {
        val localVariableConfig = gETVideosVideoIdChaptersRequestConfig(videoId = videoId, currentPage = currentPage, pageSize = pageSize)

        return@withContext request<Unit, ChaptersMinusListMinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation gETVideosVideoIdChapters
     *
     * @param videoId The unique identifier for the video you want to retrieve a list of chapters for.
     * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @return RequestConfig
     */
    fun gETVideosVideoIdChaptersRequestConfig(videoId: kotlin.String, currentPage: kotlin.Int?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (currentPage != null) {
                    put("currentPage", listOf(currentPage.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/videos/{videoId}/chapters".replace("{"+"videoId"+"}", encodeURIComponent(videoId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Show a chapter
     * Chapters help your viewers find the sections of the video they are most interested in viewing. Tutorials that use the [chapters endpoint](https://api.video/blog/endpoints/chapters).
     * @param videoId The unique identifier for the video you want to show a chapter for.
     * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @return Chapter
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun gETVideosVideoIdChaptersLanguage(videoId: kotlin.String, language: kotlin.String) : Chapter = withContext(Dispatchers.IO) {
        val localVarResponse = gETVideosVideoIdChaptersLanguageWithHttpInfo(videoId = videoId, language = language)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Chapter
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Show a chapter
     * Chapters help your viewers find the sections of the video they are most interested in viewing. Tutorials that use the [chapters endpoint](https://api.video/blog/endpoints/chapters).
     * @param videoId The unique identifier for the video you want to show a chapter for.
     * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @return ApiResponse<Chapter?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun gETVideosVideoIdChaptersLanguageWithHttpInfo(videoId: kotlin.String, language: kotlin.String) : ApiResponse<Chapter?> = withContext(Dispatchers.IO) {
        val localVariableConfig = gETVideosVideoIdChaptersLanguageRequestConfig(videoId = videoId, language = language)

        return@withContext request<Unit, Chapter>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation gETVideosVideoIdChaptersLanguage
     *
     * @param videoId The unique identifier for the video you want to show a chapter for.
     * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @return RequestConfig
     */
    fun gETVideosVideoIdChaptersLanguageRequestConfig(videoId: kotlin.String, language: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/videos/{videoId}/chapters/{language}".replace("{"+"videoId"+"}", encodeURIComponent(videoId.toString())).replace("{"+"language"+"}", encodeURIComponent(language.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * Upload a chapter
     * Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos) for more details.
     * @param videoId The unique identifier for the video you want to upload a chapter for.
     * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @param file The VTT file describing the chapters you want to upload.
     * @return Chapter
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pOSTVideosVideoIdChaptersLanguage(videoId: kotlin.String, language: kotlin.String, file: java.io.File) : Chapter = withContext(Dispatchers.IO) {
        val localVarResponse = pOSTVideosVideoIdChaptersLanguageWithHttpInfo(videoId = videoId, language = language, file = file)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as Chapter
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Upload a chapter
     * Chapters help break the video into sections. Read our [tutorial](https://api.video/blog/tutorials/adding-chapters-to-your-videos) for more details.
     * @param videoId The unique identifier for the video you want to upload a chapter for.
     * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @param file The VTT file describing the chapters you want to upload.
     * @return ApiResponse<Chapter?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun pOSTVideosVideoIdChaptersLanguageWithHttpInfo(videoId: kotlin.String, language: kotlin.String, file: java.io.File) : ApiResponse<Chapter?> = withContext(Dispatchers.IO) {
        val localVariableConfig = pOSTVideosVideoIdChaptersLanguageRequestConfig(videoId = videoId, language = language, file = file)

        return@withContext request<Map<String, PartConfig<*>>, Chapter>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pOSTVideosVideoIdChaptersLanguage
     *
     * @param videoId The unique identifier for the video you want to upload a chapter for.
     * @param language A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
     * @param file The VTT file describing the chapters you want to upload.
     * @return RequestConfig
     */
    fun pOSTVideosVideoIdChaptersLanguageRequestConfig(videoId: kotlin.String, language: kotlin.String, file: java.io.File) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "file" to PartConfig(body = file, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/videos/{videoId}/chapters/{language}".replace("{"+"videoId"+"}", encodeURIComponent(videoId.toString())).replace("{"+"language"+"}", encodeURIComponent(language.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
