/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outmatchapi.testing_api_video;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.outmatchapi.testing_api_video.PlayerAllOfAssets;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * PlayerAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-08T22:16:40.712267Z[Etc/UTC]")
public class PlayerAllOf {
  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private PlayerAllOfAssets assets;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LINK_ACTIVE = "linkActive";
  @SerializedName(SERIALIZED_NAME_LINK_ACTIVE)
  private String linkActive;

  public static final String SERIALIZED_NAME_PLAYER_ID = "playerId";
  @SerializedName(SERIALIZED_NAME_PLAYER_ID)
  private String playerId;

  public static final String SERIALIZED_NAME_SHAPE_ASPECT = "shapeAspect";
  @SerializedName(SERIALIZED_NAME_SHAPE_ASPECT)
  private String shapeAspect;

  public static final String SERIALIZED_NAME_SHAPE_BACKGROUND_BOTTOM = "shapeBackgroundBottom";
  @SerializedName(SERIALIZED_NAME_SHAPE_BACKGROUND_BOTTOM)
  private String shapeBackgroundBottom;

  public static final String SERIALIZED_NAME_SHAPE_BACKGROUND_TOP = "shapeBackgroundTop";
  @SerializedName(SERIALIZED_NAME_SHAPE_BACKGROUND_TOP)
  private String shapeBackgroundTop;

  public static final String SERIALIZED_NAME_SHAPE_MARGIN = "shapeMargin";
  @SerializedName(SERIALIZED_NAME_SHAPE_MARGIN)
  private Integer shapeMargin;

  public static final String SERIALIZED_NAME_SHAPE_RADIUS = "shapeRadius";
  @SerializedName(SERIALIZED_NAME_SHAPE_RADIUS)
  private Integer shapeRadius;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public PlayerAllOf() {
  }

  public PlayerAllOf assets(PlayerAllOfAssets assets) {
    
    this.assets = assets;
    return this;
  }

   /**
   * Get assets
   * @return assets
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PlayerAllOfAssets getAssets() {
    return assets;
  }


  public void setAssets(PlayerAllOfAssets assets) {
    this.assets = assets;
  }


  public PlayerAllOf createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * When the player was created, presented in ISO-8601 format.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-01-31T10:17:47Z", value = "When the player was created, presented in ISO-8601 format.")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PlayerAllOf linkActive(String linkActive) {
    
    this.linkActive = linkActive;
    return this;
  }

   /**
   * Deprecated
   * @return linkActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deprecated")

  public String getLinkActive() {
    return linkActive;
  }


  public void setLinkActive(String linkActive) {
    this.linkActive = linkActive;
  }


  public PlayerAllOf playerId(String playerId) {
    
    this.playerId = playerId;
    return this;
  }

   /**
   * Get playerId
   * @return playerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "pl45KFKdlddgk654dspkze", value = "")

  public String getPlayerId() {
    return playerId;
  }


  public void setPlayerId(String playerId) {
    this.playerId = playerId;
  }


  public PlayerAllOf shapeAspect(String shapeAspect) {
    
    this.shapeAspect = shapeAspect;
    return this;
  }

   /**
   * Deprecated
   * @return shapeAspect
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deprecated")

  public String getShapeAspect() {
    return shapeAspect;
  }


  public void setShapeAspect(String shapeAspect) {
    this.shapeAspect = shapeAspect;
  }


  public PlayerAllOf shapeBackgroundBottom(String shapeBackgroundBottom) {
    
    this.shapeBackgroundBottom = shapeBackgroundBottom;
    return this;
  }

   /**
   * Deprecated
   * @return shapeBackgroundBottom
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deprecated")

  public String getShapeBackgroundBottom() {
    return shapeBackgroundBottom;
  }


  public void setShapeBackgroundBottom(String shapeBackgroundBottom) {
    this.shapeBackgroundBottom = shapeBackgroundBottom;
  }


  public PlayerAllOf shapeBackgroundTop(String shapeBackgroundTop) {
    
    this.shapeBackgroundTop = shapeBackgroundTop;
    return this;
  }

   /**
   * Deprecated
   * @return shapeBackgroundTop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deprecated")

  public String getShapeBackgroundTop() {
    return shapeBackgroundTop;
  }


  public void setShapeBackgroundTop(String shapeBackgroundTop) {
    this.shapeBackgroundTop = shapeBackgroundTop;
  }


  public PlayerAllOf shapeMargin(Integer shapeMargin) {
    
    this.shapeMargin = shapeMargin;
    return this;
  }

   /**
   * Deprecated
   * @return shapeMargin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deprecated")

  public Integer getShapeMargin() {
    return shapeMargin;
  }


  public void setShapeMargin(Integer shapeMargin) {
    this.shapeMargin = shapeMargin;
  }


  public PlayerAllOf shapeRadius(Integer shapeRadius) {
    
    this.shapeRadius = shapeRadius;
    return this;
  }

   /**
   * Deprecated
   * @return shapeRadius
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Deprecated")

  public Integer getShapeRadius() {
    return shapeRadius;
  }


  public void setShapeRadius(Integer shapeRadius) {
    this.shapeRadius = shapeRadius;
  }


  public PlayerAllOf updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * When the player was last updated, presented in ISO-8601 format.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-01-31T10:18:47Z", value = "When the player was last updated, presented in ISO-8601 format.")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlayerAllOf playerAllOf = (PlayerAllOf) o;
    return Objects.equals(this.assets, playerAllOf.assets) &&
        Objects.equals(this.createdAt, playerAllOf.createdAt) &&
        Objects.equals(this.linkActive, playerAllOf.linkActive) &&
        Objects.equals(this.playerId, playerAllOf.playerId) &&
        Objects.equals(this.shapeAspect, playerAllOf.shapeAspect) &&
        Objects.equals(this.shapeBackgroundBottom, playerAllOf.shapeBackgroundBottom) &&
        Objects.equals(this.shapeBackgroundTop, playerAllOf.shapeBackgroundTop) &&
        Objects.equals(this.shapeMargin, playerAllOf.shapeMargin) &&
        Objects.equals(this.shapeRadius, playerAllOf.shapeRadius) &&
        Objects.equals(this.updatedAt, playerAllOf.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assets, createdAt, linkActive, playerId, shapeAspect, shapeBackgroundBottom, shapeBackgroundTop, shapeMargin, shapeRadius, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlayerAllOf {\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    linkActive: ").append(toIndentedString(linkActive)).append("\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    shapeAspect: ").append(toIndentedString(shapeAspect)).append("\n");
    sb.append("    shapeBackgroundBottom: ").append(toIndentedString(shapeBackgroundBottom)).append("\n");
    sb.append("    shapeBackgroundTop: ").append(toIndentedString(shapeBackgroundTop)).append("\n");
    sb.append("    shapeMargin: ").append(toIndentedString(shapeMargin)).append("\n");
    sb.append("    shapeRadius: ").append(toIndentedString(shapeRadius)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assets");
    openapiFields.add("createdAt");
    openapiFields.add("linkActive");
    openapiFields.add("playerId");
    openapiFields.add("shapeAspect");
    openapiFields.add("shapeBackgroundBottom");
    openapiFields.add("shapeBackgroundTop");
    openapiFields.add("shapeMargin");
    openapiFields.add("shapeRadius");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PlayerAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PlayerAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlayerAllOf is not found in the empty JSON string", PlayerAllOf.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PlayerAllOf.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlayerAllOf` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `assets`
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        PlayerAllOfAssets.validateJsonObject(jsonObj.getAsJsonObject("assets"));
      }
      if ((jsonObj.get("linkActive") != null && !jsonObj.get("linkActive").isJsonNull()) && !jsonObj.get("linkActive").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkActive` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkActive").toString()));
      }
      if ((jsonObj.get("playerId") != null && !jsonObj.get("playerId").isJsonNull()) && !jsonObj.get("playerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `playerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("playerId").toString()));
      }
      if ((jsonObj.get("shapeAspect") != null && !jsonObj.get("shapeAspect").isJsonNull()) && !jsonObj.get("shapeAspect").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeAspect` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeAspect").toString()));
      }
      if ((jsonObj.get("shapeBackgroundBottom") != null && !jsonObj.get("shapeBackgroundBottom").isJsonNull()) && !jsonObj.get("shapeBackgroundBottom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeBackgroundBottom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeBackgroundBottom").toString()));
      }
      if ((jsonObj.get("shapeBackgroundTop") != null && !jsonObj.get("shapeBackgroundTop").isJsonNull()) && !jsonObj.get("shapeBackgroundTop").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shapeBackgroundTop` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shapeBackgroundTop").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlayerAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlayerAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlayerAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlayerAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<PlayerAllOf>() {
           @Override
           public void write(JsonWriter out, PlayerAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlayerAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PlayerAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PlayerAllOf
  * @throws IOException if the JSON string is invalid with respect to PlayerAllOf
  */
  public static PlayerAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlayerAllOf.class);
  }

 /**
  * Convert an instance of PlayerAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

