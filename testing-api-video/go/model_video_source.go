/*
api.video

api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testing-api-video

import (
	"encoding/json"
)

// VideoSource Source information about the video.
type VideoSource struct {
	LiveStream *VideoSourceLiveStream `json:"liveStream,omitempty"`
	Type *string `json:"type,omitempty"`
	// The URL where the video is stored.
	Uri *string `json:"uri,omitempty"`
}

// NewVideoSource instantiates a new VideoSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoSource() *VideoSource {
	this := VideoSource{}
	return &this
}

// NewVideoSourceWithDefaults instantiates a new VideoSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoSourceWithDefaults() *VideoSource {
	this := VideoSource{}
	return &this
}

// GetLiveStream returns the LiveStream field value if set, zero value otherwise.
func (o *VideoSource) GetLiveStream() VideoSourceLiveStream {
	if o == nil || isNil(o.LiveStream) {
		var ret VideoSourceLiveStream
		return ret
	}
	return *o.LiveStream
}

// GetLiveStreamOk returns a tuple with the LiveStream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSource) GetLiveStreamOk() (*VideoSourceLiveStream, bool) {
	if o == nil || isNil(o.LiveStream) {
    return nil, false
	}
	return o.LiveStream, true
}

// HasLiveStream returns a boolean if a field has been set.
func (o *VideoSource) HasLiveStream() bool {
	if o != nil && !isNil(o.LiveStream) {
		return true
	}

	return false
}

// SetLiveStream gets a reference to the given VideoSourceLiveStream and assigns it to the LiveStream field.
func (o *VideoSource) SetLiveStream(v VideoSourceLiveStream) {
	o.LiveStream = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VideoSource) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSource) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VideoSource) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VideoSource) SetType(v string) {
	o.Type = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *VideoSource) GetUri() string {
	if o == nil || isNil(o.Uri) {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSource) GetUriOk() (*string, bool) {
	if o == nil || isNil(o.Uri) {
    return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *VideoSource) HasUri() bool {
	if o != nil && !isNil(o.Uri) {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *VideoSource) SetUri(v string) {
	o.Uri = &v
}

func (o VideoSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.LiveStream) {
		toSerialize["liveStream"] = o.LiveStream
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.Uri) {
		toSerialize["uri"] = o.Uri
	}
	return json.Marshal(toSerialize)
}

type NullableVideoSource struct {
	value *VideoSource
	isSet bool
}

func (v NullableVideoSource) Get() *VideoSource {
	return v.value
}

func (v *NullableVideoSource) Set(val *VideoSource) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoSource) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoSource(val *VideoSource) *NullableVideoSource {
	return &NullableVideoSource{value: val, isSet: true}
}

func (v NullableVideoSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


