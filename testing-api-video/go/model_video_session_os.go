/*
api.video

api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testing-api-video

import (
	"encoding/json"
)

// VideoSessionOs The operating system the viewer is on.
type VideoSessionOs struct {
	// The name of the operating system.
	Name *string `json:"name,omitempty"`
	// The nickname for the operating system, often representing the version.
	Shortname *string `json:"shortname,omitempty"`
	// The version of the operating system.
	Version *string `json:"version,omitempty"`
}

// NewVideoSessionOs instantiates a new VideoSessionOs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoSessionOs() *VideoSessionOs {
	this := VideoSessionOs{}
	return &this
}

// NewVideoSessionOsWithDefaults instantiates a new VideoSessionOs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoSessionOsWithDefaults() *VideoSessionOs {
	this := VideoSessionOs{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *VideoSessionOs) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSessionOs) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *VideoSessionOs) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *VideoSessionOs) SetName(v string) {
	o.Name = &v
}

// GetShortname returns the Shortname field value if set, zero value otherwise.
func (o *VideoSessionOs) GetShortname() string {
	if o == nil || isNil(o.Shortname) {
		var ret string
		return ret
	}
	return *o.Shortname
}

// GetShortnameOk returns a tuple with the Shortname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSessionOs) GetShortnameOk() (*string, bool) {
	if o == nil || isNil(o.Shortname) {
    return nil, false
	}
	return o.Shortname, true
}

// HasShortname returns a boolean if a field has been set.
func (o *VideoSessionOs) HasShortname() bool {
	if o != nil && !isNil(o.Shortname) {
		return true
	}

	return false
}

// SetShortname gets a reference to the given string and assigns it to the Shortname field.
func (o *VideoSessionOs) SetShortname(v string) {
	o.Shortname = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VideoSessionOs) GetVersion() string {
	if o == nil || isNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSessionOs) GetVersionOk() (*string, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VideoSessionOs) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *VideoSessionOs) SetVersion(v string) {
	o.Version = &v
}

func (o VideoSessionOs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Shortname) {
		toSerialize["shortname"] = o.Shortname
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableVideoSessionOs struct {
	value *VideoSessionOs
	isSet bool
}

func (v NullableVideoSessionOs) Get() *VideoSessionOs {
	return v.value
}

func (v *NullableVideoSessionOs) Set(val *VideoSessionOs) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoSessionOs) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoSessionOs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoSessionOs(val *VideoSessionOs) *NullableVideoSessionOs {
	return &NullableVideoSessionOs{value: val, isSet: true}
}

func (v NullableVideoSessionOs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoSessionOs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


