/*
api.video

api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testing-api-video

import (
	"encoding/json"
)

// BytesRange struct for BytesRange
type BytesRange struct {
	// The starting point for the range of bytes for a chunk of a video.
	From *int32 `json:"from,omitempty"`
	// The ending point for the range of bytes for a chunk of a video.
	To *int32 `json:"to,omitempty"`
	// The total number of bytes in the provided range.
	Total *int32 `json:"total,omitempty"`
}

// NewBytesRange instantiates a new BytesRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBytesRange() *BytesRange {
	this := BytesRange{}
	return &this
}

// NewBytesRangeWithDefaults instantiates a new BytesRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBytesRangeWithDefaults() *BytesRange {
	this := BytesRange{}
	return &this
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *BytesRange) GetFrom() int32 {
	if o == nil || isNil(o.From) {
		var ret int32
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BytesRange) GetFromOk() (*int32, bool) {
	if o == nil || isNil(o.From) {
    return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *BytesRange) HasFrom() bool {
	if o != nil && !isNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given int32 and assigns it to the From field.
func (o *BytesRange) SetFrom(v int32) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *BytesRange) GetTo() int32 {
	if o == nil || isNil(o.To) {
		var ret int32
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BytesRange) GetToOk() (*int32, bool) {
	if o == nil || isNil(o.To) {
    return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *BytesRange) HasTo() bool {
	if o != nil && !isNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given int32 and assigns it to the To field.
func (o *BytesRange) SetTo(v int32) {
	o.To = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *BytesRange) GetTotal() int32 {
	if o == nil || isNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BytesRange) GetTotalOk() (*int32, bool) {
	if o == nil || isNil(o.Total) {
    return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *BytesRange) HasTotal() bool {
	if o != nil && !isNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *BytesRange) SetTotal(v int32) {
	o.Total = &v
}

func (o BytesRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !isNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !isNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	return json.Marshal(toSerialize)
}

type NullableBytesRange struct {
	value *BytesRange
	isSet bool
}

func (v NullableBytesRange) Get() *BytesRange {
	return v.value
}

func (v *NullableBytesRange) Set(val *BytesRange) {
	v.value = val
	v.isSet = true
}

func (v NullableBytesRange) IsSet() bool {
	return v.isSet
}

func (v *NullableBytesRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBytesRange(val *BytesRange) *NullableBytesRange {
	return &NullableBytesRange{value: val, isSet: true}
}

func (v NullableBytesRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBytesRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


