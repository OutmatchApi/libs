/*
api.video

api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package testing-api-video

import (
	"encoding/json"
)

// LiveStreamSession struct for LiveStreamSession
type LiveStreamSession struct {
	Client *LiveStreamSessionClient `json:"client,omitempty"`
	Device *LiveStreamSessionDevice `json:"device,omitempty"`
	Location *LiveStreamSessionLocation `json:"location,omitempty"`
	Os *VideoSessionOs `json:"os,omitempty"`
	Referrer *LiveStreamSessionReferrer `json:"referrer,omitempty"`
	Session *LiveStreamSessionSession `json:"session,omitempty"`
}

// NewLiveStreamSession instantiates a new LiveStreamSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLiveStreamSession() *LiveStreamSession {
	this := LiveStreamSession{}
	return &this
}

// NewLiveStreamSessionWithDefaults instantiates a new LiveStreamSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLiveStreamSessionWithDefaults() *LiveStreamSession {
	this := LiveStreamSession{}
	return &this
}

// GetClient returns the Client field value if set, zero value otherwise.
func (o *LiveStreamSession) GetClient() LiveStreamSessionClient {
	if o == nil || isNil(o.Client) {
		var ret LiveStreamSessionClient
		return ret
	}
	return *o.Client
}

// GetClientOk returns a tuple with the Client field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveStreamSession) GetClientOk() (*LiveStreamSessionClient, bool) {
	if o == nil || isNil(o.Client) {
    return nil, false
	}
	return o.Client, true
}

// HasClient returns a boolean if a field has been set.
func (o *LiveStreamSession) HasClient() bool {
	if o != nil && !isNil(o.Client) {
		return true
	}

	return false
}

// SetClient gets a reference to the given LiveStreamSessionClient and assigns it to the Client field.
func (o *LiveStreamSession) SetClient(v LiveStreamSessionClient) {
	o.Client = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *LiveStreamSession) GetDevice() LiveStreamSessionDevice {
	if o == nil || isNil(o.Device) {
		var ret LiveStreamSessionDevice
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveStreamSession) GetDeviceOk() (*LiveStreamSessionDevice, bool) {
	if o == nil || isNil(o.Device) {
    return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *LiveStreamSession) HasDevice() bool {
	if o != nil && !isNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given LiveStreamSessionDevice and assigns it to the Device field.
func (o *LiveStreamSession) SetDevice(v LiveStreamSessionDevice) {
	o.Device = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *LiveStreamSession) GetLocation() LiveStreamSessionLocation {
	if o == nil || isNil(o.Location) {
		var ret LiveStreamSessionLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveStreamSession) GetLocationOk() (*LiveStreamSessionLocation, bool) {
	if o == nil || isNil(o.Location) {
    return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *LiveStreamSession) HasLocation() bool {
	if o != nil && !isNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given LiveStreamSessionLocation and assigns it to the Location field.
func (o *LiveStreamSession) SetLocation(v LiveStreamSessionLocation) {
	o.Location = &v
}

// GetOs returns the Os field value if set, zero value otherwise.
func (o *LiveStreamSession) GetOs() VideoSessionOs {
	if o == nil || isNil(o.Os) {
		var ret VideoSessionOs
		return ret
	}
	return *o.Os
}

// GetOsOk returns a tuple with the Os field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveStreamSession) GetOsOk() (*VideoSessionOs, bool) {
	if o == nil || isNil(o.Os) {
    return nil, false
	}
	return o.Os, true
}

// HasOs returns a boolean if a field has been set.
func (o *LiveStreamSession) HasOs() bool {
	if o != nil && !isNil(o.Os) {
		return true
	}

	return false
}

// SetOs gets a reference to the given VideoSessionOs and assigns it to the Os field.
func (o *LiveStreamSession) SetOs(v VideoSessionOs) {
	o.Os = &v
}

// GetReferrer returns the Referrer field value if set, zero value otherwise.
func (o *LiveStreamSession) GetReferrer() LiveStreamSessionReferrer {
	if o == nil || isNil(o.Referrer) {
		var ret LiveStreamSessionReferrer
		return ret
	}
	return *o.Referrer
}

// GetReferrerOk returns a tuple with the Referrer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveStreamSession) GetReferrerOk() (*LiveStreamSessionReferrer, bool) {
	if o == nil || isNil(o.Referrer) {
    return nil, false
	}
	return o.Referrer, true
}

// HasReferrer returns a boolean if a field has been set.
func (o *LiveStreamSession) HasReferrer() bool {
	if o != nil && !isNil(o.Referrer) {
		return true
	}

	return false
}

// SetReferrer gets a reference to the given LiveStreamSessionReferrer and assigns it to the Referrer field.
func (o *LiveStreamSession) SetReferrer(v LiveStreamSessionReferrer) {
	o.Referrer = &v
}

// GetSession returns the Session field value if set, zero value otherwise.
func (o *LiveStreamSession) GetSession() LiveStreamSessionSession {
	if o == nil || isNil(o.Session) {
		var ret LiveStreamSessionSession
		return ret
	}
	return *o.Session
}

// GetSessionOk returns a tuple with the Session field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LiveStreamSession) GetSessionOk() (*LiveStreamSessionSession, bool) {
	if o == nil || isNil(o.Session) {
    return nil, false
	}
	return o.Session, true
}

// HasSession returns a boolean if a field has been set.
func (o *LiveStreamSession) HasSession() bool {
	if o != nil && !isNil(o.Session) {
		return true
	}

	return false
}

// SetSession gets a reference to the given LiveStreamSessionSession and assigns it to the Session field.
func (o *LiveStreamSession) SetSession(v LiveStreamSessionSession) {
	o.Session = &v
}

func (o LiveStreamSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Client) {
		toSerialize["client"] = o.Client
	}
	if !isNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !isNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !isNil(o.Os) {
		toSerialize["os"] = o.Os
	}
	if !isNil(o.Referrer) {
		toSerialize["referrer"] = o.Referrer
	}
	if !isNil(o.Session) {
		toSerialize["session"] = o.Session
	}
	return json.Marshal(toSerialize)
}

type NullableLiveStreamSession struct {
	value *LiveStreamSession
	isSet bool
}

func (v NullableLiveStreamSession) Get() *LiveStreamSession {
	return v.value
}

func (v *NullableLiveStreamSession) Set(val *LiveStreamSession) {
	v.value = val
	v.isSet = true
}

func (v NullableLiveStreamSession) IsSet() bool {
	return v.isSet
}

func (v *NullableLiveStreamSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLiveStreamSession(val *LiveStreamSession) *NullableLiveStreamSession {
	return &NullableLiveStreamSession{value: val, isSet: true}
}

func (v NullableLiveStreamSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLiveStreamSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


