/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package invalidPackageName;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.internal.bind.util.ISO8601Utils;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonElement;
import io.gsonfire.GsonFireBuilder;
import io.gsonfire.TypeSelector;

import okio.ByteString;

import java.io.IOException;
import java.io.StringReader;
import java.lang.reflect.Type;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.Locale;
import java.util.Map;
import java.util.HashMap;

/*
 * A JSON utility class
 *
 * NOTE: in the future, this class may be converted to static, which may break
 *       backward-compatibility
 */
public class JSON {
    private static Gson gson;
    private static boolean isLenientOnJson = false;
    private static DateTypeAdapter dateTypeAdapter = new DateTypeAdapter();
    private static SqlDateTypeAdapter sqlDateTypeAdapter = new SqlDateTypeAdapter();
    private static OffsetDateTimeTypeAdapter offsetDateTimeTypeAdapter = new OffsetDateTimeTypeAdapter();
    private static LocalDateTypeAdapter localDateTypeAdapter = new LocalDateTypeAdapter();
    private static ByteArrayAdapter byteArrayAdapter = new ByteArrayAdapter();

    @SuppressWarnings("unchecked")
    public static GsonBuilder createGson() {
        GsonFireBuilder fireBuilder = new GsonFireBuilder()
        ;
        GsonBuilder builder = fireBuilder.createGsonBuilder();
        return builder;
    }

    private static String getDiscriminatorValue(JsonElement readElement, String discriminatorField) {
        JsonElement element = readElement.getAsJsonObject().get(discriminatorField);
        if (null == element) {
            throw new IllegalArgumentException("missing discriminator field: <" + discriminatorField + ">");
        }
        return element.getAsString();
    }

    /**
     * Returns the Java class that implements the OpenAPI schema for the specified discriminator value.
     *
     * @param classByDiscriminatorValue The map of discriminator values to Java classes.
     * @param discriminatorValue The value of the OpenAPI discriminator in the input data.
     * @return The Java class that implements the OpenAPI schema
     */
    private static Class getClassByDiscriminator(Map classByDiscriminatorValue, String discriminatorValue) {
        Class clazz = (Class) classByDiscriminatorValue.get(discriminatorValue);
        if (null == clazz) {
            throw new IllegalArgumentException("cannot determine model class of name: <" + discriminatorValue + ">");
        }
        return clazz;
    }

    {
        GsonBuilder gsonBuilder = createGson();
        gsonBuilder.registerTypeAdapter(Date.class, dateTypeAdapter);
        gsonBuilder.registerTypeAdapter(java.sql.Date.class, sqlDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(OffsetDateTime.class, offsetDateTimeTypeAdapter);
        gsonBuilder.registerTypeAdapter(LocalDate.class, localDateTypeAdapter);
        gsonBuilder.registerTypeAdapter(byte[].class, byteArrayAdapter);
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.APIMethodUsersGetPresence.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsArchiveErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsArchiveSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsConvertToPrivateErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsConvertToPrivateSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsCreateErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsCreateSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsDeleteErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsDeleteSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsDisconnectSharedErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsGetConversationPrefsSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsGetConversationPrefsSchemaPrefs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsGetConversationPrefsSchemaPrefsCanThread.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsGetTeamsErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsGetTeamsSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsGetTeamsSchemaResponseMetadata.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsInviteErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsInviteSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsRenameSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsRenameSchema1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsSearchErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsSearchSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsSetConversationPrefsErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsSetConversationPrefsSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsUnarchiveErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsUnarchiveErrorSchema1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsUnarchiveErrorSchema2.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AdminConversationsUnarchiveSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ApiPermissionsScopesListSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ApiPermissionsScopesListSuccessSchemaScopes.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ApiTestErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ApiTestSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsPermissionsInfoErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsPermissionsInfoSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsPermissionsInfoSchemaInfo.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsPermissionsInfoSchemaInfoAppHome.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsPermissionsInfoSchemaInfoTeam.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsPermissionsRequestErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsPermissionsRequestSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsPermissionsResourcesListErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsPermissionsResourcesListSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsPermissionsResourcesListSuccessSchemaResourcesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsPermissionsResourcesListSuccessSchemaResponseMetadata.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsPermissionsScopesListErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsUninstallErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AppsUninstallSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AuthRevokeErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AuthRevokeSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AuthTestErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.AuthTestSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.BlocksInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.BotsInfoErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.BotsInfoSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.BotsInfoSchemaBot.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.BotsInfoSchemaBotIcons.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatDeleteErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatDeleteScheduledMessageErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatDeleteScheduledMessageSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatDeleteSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatGetPermalinkErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatGetPermalinkSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatMeMessageErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatMeMessageSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatPostEphemeralErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatPostEphemeralSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatPostMessageErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatPostMessageSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatScheduleMessageErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatScheduleMessageSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatScheduleMessageSuccessSchemaMessage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatScheduledMessagesListErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatScheduledMessagesListSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatScheduledMessagesListSchemaScheduledMessagesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatUnfurlErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatUnfurlSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatUpdateErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ChatUpdateSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationIMChannelObjectFromConversationsMethods.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationIMChannelObjectFromConversationsMethodsSharesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationMPIMObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationObjectDisplayCounts.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationObjectParentConversationInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationObjectSharesInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsArchiveErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsArchiveSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsCloseErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsCloseSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsCreateErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsCreateSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsHistoryErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsHistorySuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsHistorySuccessSchemaChannelActionsTsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsInfoErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsInfoSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsInviteErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsInviteErrorSchema1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsJoinErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsJoinSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsKickErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsKickSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsLeaveErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsLeaveSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsListErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsListSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsMarkErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsMarkSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsMembersErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsMembersSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsOpenErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsOpenSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsOpenSuccessSchemaChannelInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsOpenSuccessSchemaChannelInnerAnyOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsRenameErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsRenameSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsRepliesErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsRepliesSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsRepliesSuccessSchemaMessagesInnerInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsRepliesSuccessSchemaMessagesInnerInnerAnyOf1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsSetPurposeErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsSetPurposeSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsSetTopicErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsSetTopicSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsUnarchiveErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ConversationsUnarchiveSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DefaultErrorTemplate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DefaultSuccessTemplate.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DeprecationWarning.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DeprecationWarningAndPagingStyleTogether.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DialogOpenErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DialogOpenSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DndEndDndErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DndEndDndSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DndEndSnoozeErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DndEndSnoozeSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DndInfoErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DndInfoSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DndSetSnoozeErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.DndSetSnoozeSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ErrorsIsReturnedWhenAnErrorAssociatesAnUserInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilePin.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesCommentsDeleteErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesCommentsDeleteSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesDeleteErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesDeleteSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesInfoErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesInfoSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesListErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesListSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesRevokePublicURLErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesRevokePublicURLSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesSharedPublicURLErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesSharedPublicURLSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesUploadErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.FilesUploadSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.MessageObject.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.MessagePin.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.MigrationExchangeErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.MigrationExchangeSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.NewPagingStyle.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsBotProfile.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsChannel.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsChannelLatestInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsChannelPurpose.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsComment.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsConversationInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsEnterpriseUser.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsExternalOrgMigrations.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsExternalOrgMigrationsCurrentInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsFile.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsFileShares.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsIcon.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsMessage.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsMessageAttachmentsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsMessageBotIdInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsMessageIcons.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsPaging.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsPrimaryOwner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsReaction.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsReminder.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsResources.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsResourcesExcludedIdsInnerInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsResponseMetadataInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsSubteam.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsSubteamAutoTypeInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsSubteamDeletedByInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsSubteamPrefs.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsTeam.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsTeamDiscoverableInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsTeamProfileField.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsTeamProfileFieldOption.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsTeamProfileFieldOptionsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsTeamSsoProvider.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsUserInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsUserInnerAnyOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsUserInnerAnyOf1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsUserInnerAnyOfTeamProfile.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsUserProfile.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ObjsUserProfileShort.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.PinsAddErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.PinsAddSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.PinsListErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.PinsListSuccessSchemaInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.PinsListSuccessSchemaInnerAnyOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.PinsListSuccessSchemaInnerAnyOf1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.PinsListSuccessSchemaInnerAnyOfItemsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.PinsRemoveErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.PinsRemoveSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsAddErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsAddSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsGetErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsGetSuccessSchemaInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsGetSuccessSchemaInnerAnyOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsGetSuccessSchemaInnerAnyOf1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsGetSuccessSchemaInnerAnyOf2.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsListErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsListSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsListSchemaItemsInnerInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsListSchemaItemsInnerInnerAnyOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsListSchemaItemsInnerInnerAnyOf1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsListSchemaItemsInnerInnerAnyOf2.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsRemoveErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ReactionsRemoveSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RemindersAddErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RemindersAddSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RemindersCompleteErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RemindersCompleteSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RemindersDeleteErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RemindersDeleteSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RemindersInfoErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RemindersInfoSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RemindersListErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RemindersListSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.ResponseMetadata.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RtmConnectErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RtmConnectSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RtmConnectSchemaSelf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.RtmConnectSchemaTeam.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.StarsAddErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.StarsAddSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.StarsListErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.StarsListSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.StarsListSchemaItemsInnerInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.StarsListSchemaItemsInnerInnerAnyOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.StarsListSchemaItemsInnerInnerAnyOf1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.StarsListSchemaItemsInnerInnerAnyOf2.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.StarsListSchemaItemsInnerInnerAnyOf3.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.StarsListSchemaItemsInnerInnerAnyOf4.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.StarsListSchemaItemsInnerInnerAnyOf5.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.StarsRemoveErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.StarsRemoveSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.TeamAccessLogsErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.TeamAccessLogsSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.TeamAccessLogsSchemaLoginsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.TeamInfoErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.TeamInfoSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.TeamIntegrationLogsErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.TeamIntegrationLogsSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.TeamIntegrationLogsSchemaLogsInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.TeamProfileGetErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.TeamProfileGetSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.TeamProfileGetSuccessSchemaProfile.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsCreateErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsCreateSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsDisableErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsDisableSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsEnableErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsEnableSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsListErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsListSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsUpdateErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsUpdateSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsUsersListErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsUsersListSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsUsersUpdateErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsergroupsUsersUpdateSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersConversationsErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersConversationsSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersCountsErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersDeletePhotoErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersDeletePhotoSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersIdentityErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersIdentitySchemaInner.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersIdentitySchemaInnerAnyOf.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersIdentitySchemaInnerAnyOf1.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersIdentitySchemaInnerAnyOf1User.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersIdentitySchemaInnerAnyOf2.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersIdentitySchemaInnerAnyOf2User.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersIdentitySchemaInnerAnyOf3.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersIdentitySchemaInnerAnyOf3Team.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersIdentitySchemaInnerAnyOfTeam.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersInfoErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersInfoSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersListErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersListSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersLookupByEmailErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersLookupByEmailSuccessSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersProfileGetErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersProfileGetSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersProfileSetErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersProfileSetSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersSetActiveErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersSetActiveSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersSetPhotoErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersSetPhotoSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersSetPhotoSchemaProfile.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersSetPresenceErrorSchema.CustomTypeAdapterFactory());
        gsonBuilder.registerTypeAdapterFactory(new com.outmatchapi.slack.UsersSetPresenceSchema.CustomTypeAdapterFactory());
        gson = gsonBuilder.create();
    }

    /**
     * Get Gson.
     *
     * @return Gson
     */
    public static Gson getGson() {
        return gson;
    }

    /**
     * Set Gson.
     *
     * @param gson Gson
     */
    public static void setGson(Gson gson) {
        JSON.gson = gson;
    }

    public static void setLenientOnJson(boolean lenientOnJson) {
        isLenientOnJson = lenientOnJson;
    }

    /**
     * Serialize the given Java object into JSON string.
     *
     * @param obj Object
     * @return String representation of the JSON
     */
    public static String serialize(Object obj) {
        return gson.toJson(obj);
    }

    /**
     * Deserialize the given JSON string to Java object.
     *
     * @param <T>        Type
     * @param body       The JSON string
     * @param returnType The type to deserialize into
     * @return The deserialized Java object
     */
    @SuppressWarnings("unchecked")
    public static <T> T deserialize(String body, Type returnType) {
        try {
            if (isLenientOnJson) {
                JsonReader jsonReader = new JsonReader(new StringReader(body));
                // see https://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/stream/JsonReader.html#setLenient(boolean)
                jsonReader.setLenient(true);
                return gson.fromJson(jsonReader, returnType);
            } else {
                return gson.fromJson(body, returnType);
            }
        } catch (JsonParseException e) {
            // Fallback processing when failed to parse JSON form response body:
            // return the response body string directly for the String return type;
            if (returnType.equals(String.class)) {
                return (T) body;
            } else {
                throw (e);
            }
        }
    }

    /**
     * Gson TypeAdapter for Byte Array type
     */
    public static class ByteArrayAdapter extends TypeAdapter<byte[]> {

        @Override
        public void write(JsonWriter out, byte[] value) throws IOException {
            if (value == null) {
                out.nullValue();
            } else {
                out.value(ByteString.of(value).base64());
            }
        }

        @Override
        public byte[] read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String bytesAsBase64 = in.nextString();
                    ByteString byteString = ByteString.decodeBase64(bytesAsBase64);
                    return byteString.toByteArray();
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 OffsetDateTime type
     */
    public static class OffsetDateTimeTypeAdapter extends TypeAdapter<OffsetDateTime> {

        private DateTimeFormatter formatter;

        public OffsetDateTimeTypeAdapter() {
            this(DateTimeFormatter.ISO_OFFSET_DATE_TIME);
        }

        public OffsetDateTimeTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, OffsetDateTime date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public OffsetDateTime read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    if (date.endsWith("+0000")) {
                        date = date.substring(0, date.length()-5) + "Z";
                    }
                    return OffsetDateTime.parse(date, formatter);
            }
        }
    }

    /**
     * Gson TypeAdapter for JSR310 LocalDate type
     */
    public static class LocalDateTypeAdapter extends TypeAdapter<LocalDate> {

        private DateTimeFormatter formatter;

        public LocalDateTypeAdapter() {
            this(DateTimeFormatter.ISO_LOCAL_DATE);
        }

        public LocalDateTypeAdapter(DateTimeFormatter formatter) {
            this.formatter = formatter;
        }

        public void setFormat(DateTimeFormatter dateFormat) {
            this.formatter = dateFormat;
        }

        @Override
        public void write(JsonWriter out, LocalDate date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                out.value(formatter.format(date));
            }
        }

        @Override
        public LocalDate read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    return LocalDate.parse(date, formatter);
            }
        }
    }

    public static void setOffsetDateTimeFormat(DateTimeFormatter dateFormat) {
        offsetDateTimeTypeAdapter.setFormat(dateFormat);
    }

    public static void setLocalDateFormat(DateTimeFormatter dateFormat) {
        localDateTypeAdapter.setFormat(dateFormat);
    }

    /**
     * Gson TypeAdapter for java.sql.Date type
     * If the dateFormat is null, a simple "yyyy-MM-dd" format will be used
     * (more efficient than SimpleDateFormat).
     */
    public static class SqlDateTypeAdapter extends TypeAdapter<java.sql.Date> {

        private DateFormat dateFormat;

        public SqlDateTypeAdapter() {}

        public SqlDateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, java.sql.Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = date.toString();
                }
                out.value(value);
            }
        }

        @Override
        public java.sql.Date read(JsonReader in) throws IOException {
            switch (in.peek()) {
                case NULL:
                    in.nextNull();
                    return null;
                default:
                    String date = in.nextString();
                    try {
                        if (dateFormat != null) {
                            return new java.sql.Date(dateFormat.parse(date).getTime());
                        }
                        return new java.sql.Date(ISO8601Utils.parse(date, new ParsePosition(0)).getTime());
                    } catch (ParseException e) {
                        throw new JsonParseException(e);
                    }
            }
        }
    }

    /**
     * Gson TypeAdapter for java.util.Date type
     * If the dateFormat is null, ISO8601Utils will be used.
     */
    public static class DateTypeAdapter extends TypeAdapter<Date> {

        private DateFormat dateFormat;

        public DateTypeAdapter() {}

        public DateTypeAdapter(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        public void setFormat(DateFormat dateFormat) {
            this.dateFormat = dateFormat;
        }

        @Override
        public void write(JsonWriter out, Date date) throws IOException {
            if (date == null) {
                out.nullValue();
            } else {
                String value;
                if (dateFormat != null) {
                    value = dateFormat.format(date);
                } else {
                    value = ISO8601Utils.format(date, true);
                }
                out.value(value);
            }
        }

        @Override
        public Date read(JsonReader in) throws IOException {
            try {
                switch (in.peek()) {
                    case NULL:
                        in.nextNull();
                        return null;
                    default:
                        String date = in.nextString();
                        try {
                            if (dateFormat != null) {
                                return dateFormat.parse(date);
                            }
                            return ISO8601Utils.parse(date, new ParsePosition(0));
                        } catch (ParseException e) {
                            throw new JsonParseException(e);
                        }
                }
            } catch (IllegalArgumentException e) {
                throw new JsonParseException(e);
            }
        }
    }

    public static void setDateFormat(DateFormat dateFormat) {
        dateTypeAdapter.setFormat(dateFormat);
    }

    public static void setSqlDateFormat(DateFormat dateFormat) {
        sqlDateTypeAdapter.setFormat(dateFormat);
    }
}
