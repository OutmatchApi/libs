/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outmatchapi.slack;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * ObjsMessageAttachmentsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-08T22:09:03.829372Z[Etc/UTC]")
public class ObjsMessageAttachmentsInner {
  public static final String SERIALIZED_NAME_FALLBACK = "fallback";
  @SerializedName(SERIALIZED_NAME_FALLBACK)
  private String fallback;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IMAGE_BYTES = "image_bytes";
  @SerializedName(SERIALIZED_NAME_IMAGE_BYTES)
  private Integer imageBytes;

  public static final String SERIALIZED_NAME_IMAGE_HEIGHT = "image_height";
  @SerializedName(SERIALIZED_NAME_IMAGE_HEIGHT)
  private Integer imageHeight;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_IMAGE_WIDTH = "image_width";
  @SerializedName(SERIALIZED_NAME_IMAGE_WIDTH)
  private Integer imageWidth;

  public ObjsMessageAttachmentsInner() {
  }

  public ObjsMessageAttachmentsInner fallback(String fallback) {
    
    this.fallback = fallback;
    return this;
  }

   /**
   * Get fallback
   * @return fallback
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFallback() {
    return fallback;
  }


  public void setFallback(String fallback) {
    this.fallback = fallback;
  }


  public ObjsMessageAttachmentsInner id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getId() {
    return id;
  }


  public void setId(Integer id) {
    this.id = id;
  }


  public ObjsMessageAttachmentsInner imageBytes(Integer imageBytes) {
    
    this.imageBytes = imageBytes;
    return this;
  }

   /**
   * Get imageBytes
   * @return imageBytes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getImageBytes() {
    return imageBytes;
  }


  public void setImageBytes(Integer imageBytes) {
    this.imageBytes = imageBytes;
  }


  public ObjsMessageAttachmentsInner imageHeight(Integer imageHeight) {
    
    this.imageHeight = imageHeight;
    return this;
  }

   /**
   * Get imageHeight
   * @return imageHeight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getImageHeight() {
    return imageHeight;
  }


  public void setImageHeight(Integer imageHeight) {
    this.imageHeight = imageHeight;
  }


  public ObjsMessageAttachmentsInner imageUrl(String imageUrl) {
    
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * Get imageUrl
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImageUrl() {
    return imageUrl;
  }


  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public ObjsMessageAttachmentsInner imageWidth(Integer imageWidth) {
    
    this.imageWidth = imageWidth;
    return this;
  }

   /**
   * Get imageWidth
   * @return imageWidth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getImageWidth() {
    return imageWidth;
  }


  public void setImageWidth(Integer imageWidth) {
    this.imageWidth = imageWidth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjsMessageAttachmentsInner objsMessageAttachmentsInner = (ObjsMessageAttachmentsInner) o;
    return Objects.equals(this.fallback, objsMessageAttachmentsInner.fallback) &&
        Objects.equals(this.id, objsMessageAttachmentsInner.id) &&
        Objects.equals(this.imageBytes, objsMessageAttachmentsInner.imageBytes) &&
        Objects.equals(this.imageHeight, objsMessageAttachmentsInner.imageHeight) &&
        Objects.equals(this.imageUrl, objsMessageAttachmentsInner.imageUrl) &&
        Objects.equals(this.imageWidth, objsMessageAttachmentsInner.imageWidth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fallback, id, imageBytes, imageHeight, imageUrl, imageWidth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjsMessageAttachmentsInner {\n");
    sb.append("    fallback: ").append(toIndentedString(fallback)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageBytes: ").append(toIndentedString(imageBytes)).append("\n");
    sb.append("    imageHeight: ").append(toIndentedString(imageHeight)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    imageWidth: ").append(toIndentedString(imageWidth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fallback");
    openapiFields.add("id");
    openapiFields.add("image_bytes");
    openapiFields.add("image_height");
    openapiFields.add("image_url");
    openapiFields.add("image_width");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ObjsMessageAttachmentsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ObjsMessageAttachmentsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ObjsMessageAttachmentsInner is not found in the empty JSON string", ObjsMessageAttachmentsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ObjsMessageAttachmentsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ObjsMessageAttachmentsInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ObjsMessageAttachmentsInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("fallback") != null && !jsonObj.get("fallback").isJsonNull()) && !jsonObj.get("fallback").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fallback` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fallback").toString()));
      }
      if ((jsonObj.get("image_url") != null && !jsonObj.get("image_url").isJsonNull()) && !jsonObj.get("image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ObjsMessageAttachmentsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ObjsMessageAttachmentsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ObjsMessageAttachmentsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ObjsMessageAttachmentsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ObjsMessageAttachmentsInner>() {
           @Override
           public void write(JsonWriter out, ObjsMessageAttachmentsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ObjsMessageAttachmentsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ObjsMessageAttachmentsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ObjsMessageAttachmentsInner
  * @throws IOException if the JSON string is invalid with respect to ObjsMessageAttachmentsInner
  */
  public static ObjsMessageAttachmentsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ObjsMessageAttachmentsInner.class);
  }

 /**
  * Convert an instance of ObjsMessageAttachmentsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

