/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outmatchapi.slack;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.outmatchapi.slack.AppsPermissionsInfoSchemaInfoAppHome;
import com.outmatchapi.slack.AppsPermissionsInfoSchemaInfoTeam;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * AppsPermissionsInfoSchemaInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-08T22:09:03.829372Z[Etc/UTC]")
public class AppsPermissionsInfoSchemaInfo {
  public static final String SERIALIZED_NAME_APP_HOME = "app_home";
  @SerializedName(SERIALIZED_NAME_APP_HOME)
  private AppsPermissionsInfoSchemaInfoAppHome appHome;

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private AppsPermissionsInfoSchemaInfoAppHome channel;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private AppsPermissionsInfoSchemaInfoAppHome group;

  public static final String SERIALIZED_NAME_IM = "im";
  @SerializedName(SERIALIZED_NAME_IM)
  private AppsPermissionsInfoSchemaInfoAppHome im;

  public static final String SERIALIZED_NAME_MPIM = "mpim";
  @SerializedName(SERIALIZED_NAME_MPIM)
  private AppsPermissionsInfoSchemaInfoAppHome mpim;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private AppsPermissionsInfoSchemaInfoTeam team;

  public AppsPermissionsInfoSchemaInfo() {
  }

  public AppsPermissionsInfoSchemaInfo appHome(AppsPermissionsInfoSchemaInfoAppHome appHome) {
    
    this.appHome = appHome;
    return this;
  }

   /**
   * Get appHome
   * @return appHome
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AppsPermissionsInfoSchemaInfoAppHome getAppHome() {
    return appHome;
  }


  public void setAppHome(AppsPermissionsInfoSchemaInfoAppHome appHome) {
    this.appHome = appHome;
  }


  public AppsPermissionsInfoSchemaInfo channel(AppsPermissionsInfoSchemaInfoAppHome channel) {
    
    this.channel = channel;
    return this;
  }

   /**
   * Get channel
   * @return channel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AppsPermissionsInfoSchemaInfoAppHome getChannel() {
    return channel;
  }


  public void setChannel(AppsPermissionsInfoSchemaInfoAppHome channel) {
    this.channel = channel;
  }


  public AppsPermissionsInfoSchemaInfo group(AppsPermissionsInfoSchemaInfoAppHome group) {
    
    this.group = group;
    return this;
  }

   /**
   * Get group
   * @return group
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AppsPermissionsInfoSchemaInfoAppHome getGroup() {
    return group;
  }


  public void setGroup(AppsPermissionsInfoSchemaInfoAppHome group) {
    this.group = group;
  }


  public AppsPermissionsInfoSchemaInfo im(AppsPermissionsInfoSchemaInfoAppHome im) {
    
    this.im = im;
    return this;
  }

   /**
   * Get im
   * @return im
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AppsPermissionsInfoSchemaInfoAppHome getIm() {
    return im;
  }


  public void setIm(AppsPermissionsInfoSchemaInfoAppHome im) {
    this.im = im;
  }


  public AppsPermissionsInfoSchemaInfo mpim(AppsPermissionsInfoSchemaInfoAppHome mpim) {
    
    this.mpim = mpim;
    return this;
  }

   /**
   * Get mpim
   * @return mpim
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AppsPermissionsInfoSchemaInfoAppHome getMpim() {
    return mpim;
  }


  public void setMpim(AppsPermissionsInfoSchemaInfoAppHome mpim) {
    this.mpim = mpim;
  }


  public AppsPermissionsInfoSchemaInfo team(AppsPermissionsInfoSchemaInfoTeam team) {
    
    this.team = team;
    return this;
  }

   /**
   * Get team
   * @return team
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AppsPermissionsInfoSchemaInfoTeam getTeam() {
    return team;
  }


  public void setTeam(AppsPermissionsInfoSchemaInfoTeam team) {
    this.team = team;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppsPermissionsInfoSchemaInfo appsPermissionsInfoSchemaInfo = (AppsPermissionsInfoSchemaInfo) o;
    return Objects.equals(this.appHome, appsPermissionsInfoSchemaInfo.appHome) &&
        Objects.equals(this.channel, appsPermissionsInfoSchemaInfo.channel) &&
        Objects.equals(this.group, appsPermissionsInfoSchemaInfo.group) &&
        Objects.equals(this.im, appsPermissionsInfoSchemaInfo.im) &&
        Objects.equals(this.mpim, appsPermissionsInfoSchemaInfo.mpim) &&
        Objects.equals(this.team, appsPermissionsInfoSchemaInfo.team);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appHome, channel, group, im, mpim, team);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppsPermissionsInfoSchemaInfo {\n");
    sb.append("    appHome: ").append(toIndentedString(appHome)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    im: ").append(toIndentedString(im)).append("\n");
    sb.append("    mpim: ").append(toIndentedString(mpim)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_home");
    openapiFields.add("channel");
    openapiFields.add("group");
    openapiFields.add("im");
    openapiFields.add("mpim");
    openapiFields.add("team");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("app_home");
    openapiRequiredFields.add("channel");
    openapiRequiredFields.add("group");
    openapiRequiredFields.add("im");
    openapiRequiredFields.add("mpim");
    openapiRequiredFields.add("team");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AppsPermissionsInfoSchemaInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AppsPermissionsInfoSchemaInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppsPermissionsInfoSchemaInfo is not found in the empty JSON string", AppsPermissionsInfoSchemaInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!AppsPermissionsInfoSchemaInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppsPermissionsInfoSchemaInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AppsPermissionsInfoSchemaInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `app_home`
      AppsPermissionsInfoSchemaInfoAppHome.validateJsonObject(jsonObj.getAsJsonObject("app_home"));
      // validate the required field `channel`
      AppsPermissionsInfoSchemaInfoAppHome.validateJsonObject(jsonObj.getAsJsonObject("channel"));
      // validate the required field `group`
      AppsPermissionsInfoSchemaInfoAppHome.validateJsonObject(jsonObj.getAsJsonObject("group"));
      // validate the required field `im`
      AppsPermissionsInfoSchemaInfoAppHome.validateJsonObject(jsonObj.getAsJsonObject("im"));
      // validate the required field `mpim`
      AppsPermissionsInfoSchemaInfoAppHome.validateJsonObject(jsonObj.getAsJsonObject("mpim"));
      // validate the required field `team`
      AppsPermissionsInfoSchemaInfoTeam.validateJsonObject(jsonObj.getAsJsonObject("team"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppsPermissionsInfoSchemaInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppsPermissionsInfoSchemaInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppsPermissionsInfoSchemaInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppsPermissionsInfoSchemaInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AppsPermissionsInfoSchemaInfo>() {
           @Override
           public void write(JsonWriter out, AppsPermissionsInfoSchemaInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppsPermissionsInfoSchemaInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppsPermissionsInfoSchemaInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppsPermissionsInfoSchemaInfo
  * @throws IOException if the JSON string is invalid with respect to AppsPermissionsInfoSchemaInfo
  */
  public static AppsPermissionsInfoSchemaInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppsPermissionsInfoSchemaInfo.class);
  }

 /**
  * Convert an instance of AppsPermissionsInfoSchemaInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

