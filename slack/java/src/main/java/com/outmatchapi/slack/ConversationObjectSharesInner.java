/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outmatchapi.slack;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.outmatchapi.slack.ObjsTeam;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * ConversationObjectSharesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-08T22:09:03.829372Z[Etc/UTC]")
public class ConversationObjectSharesInner {
  public static final String SERIALIZED_NAME_ACCEPTED_USER = "accepted_user";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_USER)
  private String acceptedUser;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive;

  public static final String SERIALIZED_NAME_TEAM = "team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private ObjsTeam team;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public ConversationObjectSharesInner() {
  }

  public ConversationObjectSharesInner acceptedUser(String acceptedUser) {
    
    this.acceptedUser = acceptedUser;
    return this;
  }

   /**
   * Get acceptedUser
   * @return acceptedUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAcceptedUser() {
    return acceptedUser;
  }


  public void setAcceptedUser(String acceptedUser) {
    this.acceptedUser = acceptedUser;
  }


  public ConversationObjectSharesInner isActive(Boolean isActive) {
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * @return isActive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    this.isActive = isActive;
  }


  public ConversationObjectSharesInner team(ObjsTeam team) {
    
    this.team = team;
    return this;
  }

   /**
   * Get team
   * @return team
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ObjsTeam getTeam() {
    return team;
  }


  public void setTeam(ObjsTeam team) {
    this.team = team;
  }


  public ConversationObjectSharesInner user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getUser() {
    return user;
  }


  public void setUser(String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationObjectSharesInner conversationObjectSharesInner = (ConversationObjectSharesInner) o;
    return Objects.equals(this.acceptedUser, conversationObjectSharesInner.acceptedUser) &&
        Objects.equals(this.isActive, conversationObjectSharesInner.isActive) &&
        Objects.equals(this.team, conversationObjectSharesInner.team) &&
        Objects.equals(this.user, conversationObjectSharesInner.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedUser, isActive, team, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationObjectSharesInner {\n");
    sb.append("    acceptedUser: ").append(toIndentedString(acceptedUser)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accepted_user");
    openapiFields.add("is_active");
    openapiFields.add("team");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("is_active");
    openapiRequiredFields.add("team");
    openapiRequiredFields.add("user");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConversationObjectSharesInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConversationObjectSharesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationObjectSharesInner is not found in the empty JSON string", ConversationObjectSharesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConversationObjectSharesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationObjectSharesInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConversationObjectSharesInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("accepted_user") != null && !jsonObj.get("accepted_user").isJsonNull()) && !jsonObj.get("accepted_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accepted_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accepted_user").toString()));
      }
      // validate the required field `team`
      ObjsTeam.validateJsonObject(jsonObj.getAsJsonObject("team"));
      if (!jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationObjectSharesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationObjectSharesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationObjectSharesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationObjectSharesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationObjectSharesInner>() {
           @Override
           public void write(JsonWriter out, ConversationObjectSharesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationObjectSharesInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConversationObjectSharesInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConversationObjectSharesInner
  * @throws IOException if the JSON string is invalid with respect to ConversationObjectSharesInner
  */
  public static ConversationObjectSharesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationObjectSharesInner.class);
  }

 /**
  * Convert an instance of ConversationObjectSharesInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

