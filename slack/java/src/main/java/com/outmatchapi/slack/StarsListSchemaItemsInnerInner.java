/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outmatchapi.slack;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.outmatchapi.slack.ObjsComment;
import com.outmatchapi.slack.ObjsFile;
import com.outmatchapi.slack.ObjsMessage;
import com.outmatchapi.slack.StarsListSchemaItemsInnerInnerAnyOf;
import com.outmatchapi.slack.StarsListSchemaItemsInnerInnerAnyOf1;
import com.outmatchapi.slack.StarsListSchemaItemsInnerInnerAnyOf2;
import com.outmatchapi.slack.StarsListSchemaItemsInnerInnerAnyOf3;
import com.outmatchapi.slack.StarsListSchemaItemsInnerInnerAnyOf4;
import com.outmatchapi.slack.StarsListSchemaItemsInnerInnerAnyOf5;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import javax.ws.rs.core.GenericType;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;

import invalidPackageName.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-08T22:09:03.829372Z[Etc/UTC]")
public class StarsListSchemaItemsInnerInner extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(StarsListSchemaItemsInnerInner.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!StarsListSchemaItemsInnerInner.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'StarsListSchemaItemsInnerInner' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<StarsListSchemaItemsInnerInnerAnyOf> adapterStarsListSchemaItemsInnerInnerAnyOf = gson.getDelegateAdapter(this, TypeToken.get(StarsListSchemaItemsInnerInnerAnyOf.class));
            final TypeAdapter<StarsListSchemaItemsInnerInnerAnyOf1> adapterStarsListSchemaItemsInnerInnerAnyOf1 = gson.getDelegateAdapter(this, TypeToken.get(StarsListSchemaItemsInnerInnerAnyOf1.class));
            final TypeAdapter<StarsListSchemaItemsInnerInnerAnyOf2> adapterStarsListSchemaItemsInnerInnerAnyOf2 = gson.getDelegateAdapter(this, TypeToken.get(StarsListSchemaItemsInnerInnerAnyOf2.class));
            final TypeAdapter<StarsListSchemaItemsInnerInnerAnyOf3> adapterStarsListSchemaItemsInnerInnerAnyOf3 = gson.getDelegateAdapter(this, TypeToken.get(StarsListSchemaItemsInnerInnerAnyOf3.class));
            final TypeAdapter<StarsListSchemaItemsInnerInnerAnyOf4> adapterStarsListSchemaItemsInnerInnerAnyOf4 = gson.getDelegateAdapter(this, TypeToken.get(StarsListSchemaItemsInnerInnerAnyOf4.class));
            final TypeAdapter<StarsListSchemaItemsInnerInnerAnyOf5> adapterStarsListSchemaItemsInnerInnerAnyOf5 = gson.getDelegateAdapter(this, TypeToken.get(StarsListSchemaItemsInnerInnerAnyOf5.class));

            return (TypeAdapter<T>) new TypeAdapter<StarsListSchemaItemsInnerInner>() {
                @Override
                public void write(JsonWriter out, StarsListSchemaItemsInnerInner value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `StarsListSchemaItemsInnerInnerAnyOf`
                    if (value.getActualInstance() instanceof StarsListSchemaItemsInnerInnerAnyOf) {
                        JsonObject obj = adapterStarsListSchemaItemsInnerInnerAnyOf.toJsonTree((StarsListSchemaItemsInnerInnerAnyOf)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `StarsListSchemaItemsInnerInnerAnyOf1`
                    if (value.getActualInstance() instanceof StarsListSchemaItemsInnerInnerAnyOf1) {
                        JsonObject obj = adapterStarsListSchemaItemsInnerInnerAnyOf1.toJsonTree((StarsListSchemaItemsInnerInnerAnyOf1)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `StarsListSchemaItemsInnerInnerAnyOf2`
                    if (value.getActualInstance() instanceof StarsListSchemaItemsInnerInnerAnyOf2) {
                        JsonObject obj = adapterStarsListSchemaItemsInnerInnerAnyOf2.toJsonTree((StarsListSchemaItemsInnerInnerAnyOf2)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `StarsListSchemaItemsInnerInnerAnyOf3`
                    if (value.getActualInstance() instanceof StarsListSchemaItemsInnerInnerAnyOf3) {
                        JsonObject obj = adapterStarsListSchemaItemsInnerInnerAnyOf3.toJsonTree((StarsListSchemaItemsInnerInnerAnyOf3)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `StarsListSchemaItemsInnerInnerAnyOf4`
                    if (value.getActualInstance() instanceof StarsListSchemaItemsInnerInnerAnyOf4) {
                        JsonObject obj = adapterStarsListSchemaItemsInnerInnerAnyOf4.toJsonTree((StarsListSchemaItemsInnerInnerAnyOf4)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    // check if the actual instance is of the type `StarsListSchemaItemsInnerInnerAnyOf5`
                    if (value.getActualInstance() instanceof StarsListSchemaItemsInnerInnerAnyOf5) {
                        JsonObject obj = adapterStarsListSchemaItemsInnerInnerAnyOf5.toJsonTree((StarsListSchemaItemsInnerInnerAnyOf5)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, obj);
                        return;
                    }

                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: StarsListSchemaItemsInnerInnerAnyOf, StarsListSchemaItemsInnerInnerAnyOf1, StarsListSchemaItemsInnerInnerAnyOf2, StarsListSchemaItemsInnerInnerAnyOf3, StarsListSchemaItemsInnerInnerAnyOf4, StarsListSchemaItemsInnerInnerAnyOf5");
                }

                @Override
                public StarsListSchemaItemsInnerInner read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonObject jsonObject = elementAdapter.read(in).getAsJsonObject();

                    // deserialize StarsListSchemaItemsInnerInnerAnyOf
                    try {
                        // validate the JSON object to see if any exception is thrown
                        StarsListSchemaItemsInnerInnerAnyOf.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'StarsListSchemaItemsInnerInnerAnyOf'");
                        StarsListSchemaItemsInnerInner ret = new StarsListSchemaItemsInnerInner();
                        ret.setActualInstance(adapterStarsListSchemaItemsInnerInnerAnyOf.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'StarsListSchemaItemsInnerInnerAnyOf'", e);
                    }

                    // deserialize StarsListSchemaItemsInnerInnerAnyOf1
                    try {
                        // validate the JSON object to see if any exception is thrown
                        StarsListSchemaItemsInnerInnerAnyOf1.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'StarsListSchemaItemsInnerInnerAnyOf1'");
                        StarsListSchemaItemsInnerInner ret = new StarsListSchemaItemsInnerInner();
                        ret.setActualInstance(adapterStarsListSchemaItemsInnerInnerAnyOf1.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'StarsListSchemaItemsInnerInnerAnyOf1'", e);
                    }

                    // deserialize StarsListSchemaItemsInnerInnerAnyOf2
                    try {
                        // validate the JSON object to see if any exception is thrown
                        StarsListSchemaItemsInnerInnerAnyOf2.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'StarsListSchemaItemsInnerInnerAnyOf2'");
                        StarsListSchemaItemsInnerInner ret = new StarsListSchemaItemsInnerInner();
                        ret.setActualInstance(adapterStarsListSchemaItemsInnerInnerAnyOf2.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'StarsListSchemaItemsInnerInnerAnyOf2'", e);
                    }

                    // deserialize StarsListSchemaItemsInnerInnerAnyOf3
                    try {
                        // validate the JSON object to see if any exception is thrown
                        StarsListSchemaItemsInnerInnerAnyOf3.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'StarsListSchemaItemsInnerInnerAnyOf3'");
                        StarsListSchemaItemsInnerInner ret = new StarsListSchemaItemsInnerInner();
                        ret.setActualInstance(adapterStarsListSchemaItemsInnerInnerAnyOf3.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'StarsListSchemaItemsInnerInnerAnyOf3'", e);
                    }

                    // deserialize StarsListSchemaItemsInnerInnerAnyOf4
                    try {
                        // validate the JSON object to see if any exception is thrown
                        StarsListSchemaItemsInnerInnerAnyOf4.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'StarsListSchemaItemsInnerInnerAnyOf4'");
                        StarsListSchemaItemsInnerInner ret = new StarsListSchemaItemsInnerInner();
                        ret.setActualInstance(adapterStarsListSchemaItemsInnerInnerAnyOf4.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'StarsListSchemaItemsInnerInnerAnyOf4'", e);
                    }

                    // deserialize StarsListSchemaItemsInnerInnerAnyOf5
                    try {
                        // validate the JSON object to see if any exception is thrown
                        StarsListSchemaItemsInnerInnerAnyOf5.validateJsonObject(jsonObject);
                        log.log(Level.FINER, "Input data matches schema 'StarsListSchemaItemsInnerInnerAnyOf5'");
                        StarsListSchemaItemsInnerInner ret = new StarsListSchemaItemsInnerInner();
                        ret.setActualInstance(adapterStarsListSchemaItemsInnerInnerAnyOf5.fromJsonTree(jsonObject));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        log.log(Level.FINER, "Input data does not match schema 'StarsListSchemaItemsInnerInnerAnyOf5'", e);
                    }


                    throw new IOException(String.format("Failed deserialization for StarsListSchemaItemsInnerInner: no class matched. JSON: %s", jsonObject.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, GenericType> schemas = new HashMap<String, GenericType>();

    public StarsListSchemaItemsInnerInner() {
        super("anyOf", Boolean.FALSE);
    }

    public StarsListSchemaItemsInnerInner(StarsListSchemaItemsInnerInnerAnyOf o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public StarsListSchemaItemsInnerInner(StarsListSchemaItemsInnerInnerAnyOf1 o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public StarsListSchemaItemsInnerInner(StarsListSchemaItemsInnerInnerAnyOf2 o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public StarsListSchemaItemsInnerInner(StarsListSchemaItemsInnerInnerAnyOf3 o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public StarsListSchemaItemsInnerInner(StarsListSchemaItemsInnerInnerAnyOf4 o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    public StarsListSchemaItemsInnerInner(StarsListSchemaItemsInnerInnerAnyOf5 o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("StarsListSchemaItemsInnerInnerAnyOf", new GenericType<StarsListSchemaItemsInnerInnerAnyOf>() {
        });
        schemas.put("StarsListSchemaItemsInnerInnerAnyOf1", new GenericType<StarsListSchemaItemsInnerInnerAnyOf1>() {
        });
        schemas.put("StarsListSchemaItemsInnerInnerAnyOf2", new GenericType<StarsListSchemaItemsInnerInnerAnyOf2>() {
        });
        schemas.put("StarsListSchemaItemsInnerInnerAnyOf3", new GenericType<StarsListSchemaItemsInnerInnerAnyOf3>() {
        });
        schemas.put("StarsListSchemaItemsInnerInnerAnyOf4", new GenericType<StarsListSchemaItemsInnerInnerAnyOf4>() {
        });
        schemas.put("StarsListSchemaItemsInnerInnerAnyOf5", new GenericType<StarsListSchemaItemsInnerInnerAnyOf5>() {
        });
    }

    @Override
    public Map<String, GenericType> getSchemas() {
        return StarsListSchemaItemsInnerInner.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * StarsListSchemaItemsInnerInnerAnyOf, StarsListSchemaItemsInnerInnerAnyOf1, StarsListSchemaItemsInnerInnerAnyOf2, StarsListSchemaItemsInnerInnerAnyOf3, StarsListSchemaItemsInnerInnerAnyOf4, StarsListSchemaItemsInnerInnerAnyOf5
     *
     * It could be an instance of the 'anyOf' schemas.
     * The anyOf child schemas may themselves be a composed schema (allOf, anyOf, anyOf).
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof StarsListSchemaItemsInnerInnerAnyOf) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof StarsListSchemaItemsInnerInnerAnyOf1) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof StarsListSchemaItemsInnerInnerAnyOf2) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof StarsListSchemaItemsInnerInnerAnyOf3) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof StarsListSchemaItemsInnerInnerAnyOf4) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof StarsListSchemaItemsInnerInnerAnyOf5) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be StarsListSchemaItemsInnerInnerAnyOf, StarsListSchemaItemsInnerInnerAnyOf1, StarsListSchemaItemsInnerInnerAnyOf2, StarsListSchemaItemsInnerInnerAnyOf3, StarsListSchemaItemsInnerInnerAnyOf4, StarsListSchemaItemsInnerInnerAnyOf5");
    }

    /**
     * Get the actual instance, which can be the following:
     * StarsListSchemaItemsInnerInnerAnyOf, StarsListSchemaItemsInnerInnerAnyOf1, StarsListSchemaItemsInnerInnerAnyOf2, StarsListSchemaItemsInnerInnerAnyOf3, StarsListSchemaItemsInnerInnerAnyOf4, StarsListSchemaItemsInnerInnerAnyOf5
     *
     * @return The actual instance (StarsListSchemaItemsInnerInnerAnyOf, StarsListSchemaItemsInnerInnerAnyOf1, StarsListSchemaItemsInnerInnerAnyOf2, StarsListSchemaItemsInnerInnerAnyOf3, StarsListSchemaItemsInnerInnerAnyOf4, StarsListSchemaItemsInnerInnerAnyOf5)
     */
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `StarsListSchemaItemsInnerInnerAnyOf`. If the actual instance is not `StarsListSchemaItemsInnerInnerAnyOf`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StarsListSchemaItemsInnerInnerAnyOf`
     * @throws ClassCastException if the instance is not `StarsListSchemaItemsInnerInnerAnyOf`
     */
    public StarsListSchemaItemsInnerInnerAnyOf getStarsListSchemaItemsInnerInnerAnyOf() throws ClassCastException {
        return (StarsListSchemaItemsInnerInnerAnyOf)super.getActualInstance();
    }

    /**
     * Get the actual instance of `StarsListSchemaItemsInnerInnerAnyOf1`. If the actual instance is not `StarsListSchemaItemsInnerInnerAnyOf1`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StarsListSchemaItemsInnerInnerAnyOf1`
     * @throws ClassCastException if the instance is not `StarsListSchemaItemsInnerInnerAnyOf1`
     */
    public StarsListSchemaItemsInnerInnerAnyOf1 getStarsListSchemaItemsInnerInnerAnyOf1() throws ClassCastException {
        return (StarsListSchemaItemsInnerInnerAnyOf1)super.getActualInstance();
    }

    /**
     * Get the actual instance of `StarsListSchemaItemsInnerInnerAnyOf2`. If the actual instance is not `StarsListSchemaItemsInnerInnerAnyOf2`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StarsListSchemaItemsInnerInnerAnyOf2`
     * @throws ClassCastException if the instance is not `StarsListSchemaItemsInnerInnerAnyOf2`
     */
    public StarsListSchemaItemsInnerInnerAnyOf2 getStarsListSchemaItemsInnerInnerAnyOf2() throws ClassCastException {
        return (StarsListSchemaItemsInnerInnerAnyOf2)super.getActualInstance();
    }

    /**
     * Get the actual instance of `StarsListSchemaItemsInnerInnerAnyOf3`. If the actual instance is not `StarsListSchemaItemsInnerInnerAnyOf3`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StarsListSchemaItemsInnerInnerAnyOf3`
     * @throws ClassCastException if the instance is not `StarsListSchemaItemsInnerInnerAnyOf3`
     */
    public StarsListSchemaItemsInnerInnerAnyOf3 getStarsListSchemaItemsInnerInnerAnyOf3() throws ClassCastException {
        return (StarsListSchemaItemsInnerInnerAnyOf3)super.getActualInstance();
    }

    /**
     * Get the actual instance of `StarsListSchemaItemsInnerInnerAnyOf4`. If the actual instance is not `StarsListSchemaItemsInnerInnerAnyOf4`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StarsListSchemaItemsInnerInnerAnyOf4`
     * @throws ClassCastException if the instance is not `StarsListSchemaItemsInnerInnerAnyOf4`
     */
    public StarsListSchemaItemsInnerInnerAnyOf4 getStarsListSchemaItemsInnerInnerAnyOf4() throws ClassCastException {
        return (StarsListSchemaItemsInnerInnerAnyOf4)super.getActualInstance();
    }

    /**
     * Get the actual instance of `StarsListSchemaItemsInnerInnerAnyOf5`. If the actual instance is not `StarsListSchemaItemsInnerInnerAnyOf5`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `StarsListSchemaItemsInnerInnerAnyOf5`
     * @throws ClassCastException if the instance is not `StarsListSchemaItemsInnerInnerAnyOf5`
     */
    public StarsListSchemaItemsInnerInnerAnyOf5 getStarsListSchemaItemsInnerInnerAnyOf5() throws ClassCastException {
        return (StarsListSchemaItemsInnerInnerAnyOf5)super.getActualInstance();
    }


 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to StarsListSchemaItemsInnerInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
    // validate anyOf schemas one by one
    int validCount = 0;
    // validate the json string with StarsListSchemaItemsInnerInnerAnyOf
    try {
      StarsListSchemaItemsInnerInnerAnyOf.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with StarsListSchemaItemsInnerInnerAnyOf1
    try {
      StarsListSchemaItemsInnerInnerAnyOf1.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with StarsListSchemaItemsInnerInnerAnyOf2
    try {
      StarsListSchemaItemsInnerInnerAnyOf2.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with StarsListSchemaItemsInnerInnerAnyOf3
    try {
      StarsListSchemaItemsInnerInnerAnyOf3.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with StarsListSchemaItemsInnerInnerAnyOf4
    try {
      StarsListSchemaItemsInnerInnerAnyOf4.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    // validate the json string with StarsListSchemaItemsInnerInnerAnyOf5
    try {
      StarsListSchemaItemsInnerInnerAnyOf5.validateJsonObject(jsonObj);
      return; // return earlier as at least one schema is valid with respect to the Json object
      //validCount++;
    } catch (Exception e) {
      // continue to the next one
    }
    if (validCount == 0) {
      throw new IOException(String.format("The JSON string is invalid for StarsListSchemaItemsInnerInner with anyOf schemas: StarsListSchemaItemsInnerInnerAnyOf, StarsListSchemaItemsInnerInnerAnyOf1, StarsListSchemaItemsInnerInnerAnyOf2, StarsListSchemaItemsInnerInnerAnyOf3, StarsListSchemaItemsInnerInnerAnyOf4, StarsListSchemaItemsInnerInnerAnyOf5. JSON: %s", jsonObj.toString()));
    }
  }

 /**
  * Create an instance of StarsListSchemaItemsInnerInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StarsListSchemaItemsInnerInner
  * @throws IOException if the JSON string is invalid with respect to StarsListSchemaItemsInnerInner
  */
  public static StarsListSchemaItemsInnerInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StarsListSchemaItemsInnerInner.class);
  }

 /**
  * Convert an instance of StarsListSchemaItemsInnerInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

