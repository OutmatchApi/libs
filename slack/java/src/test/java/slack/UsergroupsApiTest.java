/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package slack;

import invalidPackageName.ApiException;
import com.outmatchapi.slack.UsergroupsCreateErrorSchema;
import com.outmatchapi.slack.UsergroupsCreateSchema;
import com.outmatchapi.slack.UsergroupsDisableErrorSchema;
import com.outmatchapi.slack.UsergroupsDisableSchema;
import com.outmatchapi.slack.UsergroupsEnableErrorSchema;
import com.outmatchapi.slack.UsergroupsEnableSchema;
import com.outmatchapi.slack.UsergroupsListErrorSchema;
import com.outmatchapi.slack.UsergroupsListSchema;
import com.outmatchapi.slack.UsergroupsUpdateErrorSchema;
import com.outmatchapi.slack.UsergroupsUpdateSchema;
import com.outmatchapi.slack.UsergroupsUsersListErrorSchema;
import com.outmatchapi.slack.UsergroupsUsersListSchema;
import com.outmatchapi.slack.UsergroupsUsersUpdateErrorSchema;
import com.outmatchapi.slack.UsergroupsUsersUpdateSchema;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsergroupsApi
 */
@Disabled
public class UsergroupsApiTest {

    private final UsergroupsApi api = new UsergroupsApi();

    /**
     * Create a User Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usergroupsCreateTest() throws ApiException {
        String token = null;
        String name = null;
        String channels = null;
        String description = null;
        String handle = null;
        Boolean includeCount = null;
        UsergroupsCreateSchema response = api.usergroupsCreate(token, name, channels, description, handle, includeCount);
        // TODO: test validations
    }

    /**
     * Disable an existing User Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usergroupsDisableTest() throws ApiException {
        String token = null;
        String usergroup = null;
        Boolean includeCount = null;
        UsergroupsDisableSchema response = api.usergroupsDisable(token, usergroup, includeCount);
        // TODO: test validations
    }

    /**
     * Enable a User Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usergroupsEnableTest() throws ApiException {
        String token = null;
        String usergroup = null;
        Boolean includeCount = null;
        UsergroupsEnableSchema response = api.usergroupsEnable(token, usergroup, includeCount);
        // TODO: test validations
    }

    /**
     * List all User Groups for a team
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usergroupsListTest() throws ApiException {
        String token = null;
        Boolean includeUsers = null;
        Boolean includeCount = null;
        Boolean includeDisabled = null;
        UsergroupsListSchema response = api.usergroupsList(token, includeUsers, includeCount, includeDisabled);
        // TODO: test validations
    }

    /**
     * Update an existing User Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usergroupsUpdateTest() throws ApiException {
        String token = null;
        String usergroup = null;
        String channels = null;
        String description = null;
        String handle = null;
        Boolean includeCount = null;
        String name = null;
        UsergroupsUpdateSchema response = api.usergroupsUpdate(token, usergroup, channels, description, handle, includeCount, name);
        // TODO: test validations
    }

    /**
     * List all users in a User Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usergroupsUsersListTest() throws ApiException {
        String token = null;
        String usergroup = null;
        Boolean includeDisabled = null;
        UsergroupsUsersListSchema response = api.usergroupsUsersList(token, usergroup, includeDisabled);
        // TODO: test validations
    }

    /**
     * Update the list of users for a User Group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usergroupsUsersUpdateTest() throws ApiException {
        String token = null;
        String usergroup = null;
        String users = null;
        Boolean includeCount = null;
        UsergroupsUsersUpdateSchema response = api.usergroupsUsersUpdate(token, usergroup, users, includeCount);
        // TODO: test validations
    }

}
