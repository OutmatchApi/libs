/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package slack;

import invalidPackageName.ApiException;
import java.math.BigDecimal;
import com.outmatchapi.slack.DefaultErrorTemplate;
import com.outmatchapi.slack.DefaultSuccessTemplate;
import com.outmatchapi.slack.FilesCommentsDeleteErrorSchema;
import com.outmatchapi.slack.FilesCommentsDeleteSchema;
import com.outmatchapi.slack.FilesDeleteErrorSchema;
import com.outmatchapi.slack.FilesDeleteSchema;
import com.outmatchapi.slack.FilesInfoErrorSchema;
import com.outmatchapi.slack.FilesInfoSchema;
import com.outmatchapi.slack.FilesListErrorSchema;
import com.outmatchapi.slack.FilesListSchema;
import com.outmatchapi.slack.FilesRevokePublicURLErrorSchema;
import com.outmatchapi.slack.FilesRevokePublicURLSchema;
import com.outmatchapi.slack.FilesSharedPublicURLErrorSchema;
import com.outmatchapi.slack.FilesSharedPublicURLSchema;
import com.outmatchapi.slack.FilesUploadErrorSchema;
import com.outmatchapi.slack.FilesUploadSchema;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FilesApi
 */
@Disabled
public class FilesApiTest {

    private final FilesApi api = new FilesApi();

    /**
     * Deletes an existing comment on a file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesCommentsDeleteTest() throws ApiException {
        String token = null;
        String _file = null;
        String id = null;
        FilesCommentsDeleteSchema response = api.filesCommentsDelete(token, _file, id);
        // TODO: test validations
    }

    /**
     * Deletes a file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesDeleteTest() throws ApiException {
        String token = null;
        String _file = null;
        FilesDeleteSchema response = api.filesDelete(token, _file);
        // TODO: test validations
    }

    /**
     * Gets information about a file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesInfoTest() throws ApiException {
        String token = null;
        String _file = null;
        String count = null;
        String page = null;
        Integer limit = null;
        String cursor = null;
        FilesInfoSchema response = api.filesInfo(token, _file, count, page, limit, cursor);
        // TODO: test validations
    }

    /**
     * List for a team, in a channel, or from a user with applied filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesListTest() throws ApiException {
        String token = null;
        String user = null;
        String channel = null;
        BigDecimal tsFrom = null;
        BigDecimal tsTo = null;
        String types = null;
        String count = null;
        String page = null;
        Boolean showFilesHiddenByLimit = null;
        FilesListSchema response = api.filesList(token, user, channel, tsFrom, tsTo, types, count, page, showFilesHiddenByLimit);
        // TODO: test validations
    }

    /**
     * Adds a file from a remote service
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesRemoteAddTest() throws ApiException {
        String externalId = null;
        String externalUrl = null;
        String filetype = null;
        String indexableFileContents = null;
        String previewImage = null;
        String title = null;
        String token = null;
        DefaultSuccessTemplate response = api.filesRemoteAdd(externalId, externalUrl, filetype, indexableFileContents, previewImage, title, token);
        // TODO: test validations
    }

    /**
     * Retrieve information about a remote file added to Slack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesRemoteInfoTest() throws ApiException {
        String token = null;
        String _file = null;
        String externalId = null;
        DefaultSuccessTemplate response = api.filesRemoteInfo(token, _file, externalId);
        // TODO: test validations
    }

    /**
     * Retrieve information about a remote file added to Slack
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesRemoteListTest() throws ApiException {
        String token = null;
        String channel = null;
        BigDecimal tsFrom = null;
        BigDecimal tsTo = null;
        Integer limit = null;
        String cursor = null;
        DefaultSuccessTemplate response = api.filesRemoteList(token, channel, tsFrom, tsTo, limit, cursor);
        // TODO: test validations
    }

    /**
     * Remove a remote file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesRemoteRemoveTest() throws ApiException {
        String externalId = null;
        String _file = null;
        String token = null;
        DefaultSuccessTemplate response = api.filesRemoteRemove(externalId, _file, token);
        // TODO: test validations
    }

    /**
     * Share a remote file into a channel.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesRemoteShareTest() throws ApiException {
        String token = null;
        String _file = null;
        String externalId = null;
        String channels = null;
        DefaultSuccessTemplate response = api.filesRemoteShare(token, _file, externalId, channels);
        // TODO: test validations
    }

    /**
     * Updates an existing remote file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesRemoteUpdateTest() throws ApiException {
        String externalId = null;
        String externalUrl = null;
        String _file = null;
        String filetype = null;
        String indexableFileContents = null;
        String previewImage = null;
        String title = null;
        String token = null;
        DefaultSuccessTemplate response = api.filesRemoteUpdate(externalId, externalUrl, _file, filetype, indexableFileContents, previewImage, title, token);
        // TODO: test validations
    }

    /**
     * Revokes public/external sharing access for a file
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesRevokePublicURLTest() throws ApiException {
        String token = null;
        String _file = null;
        FilesRevokePublicURLSchema response = api.filesRevokePublicURL(token, _file);
        // TODO: test validations
    }

    /**
     * Enables a file for public/external sharing.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesSharedPublicURLTest() throws ApiException {
        String token = null;
        String _file = null;
        FilesSharedPublicURLSchema response = api.filesSharedPublicURL(token, _file);
        // TODO: test validations
    }

    /**
     * Uploads or creates a file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void filesUploadTest() throws ApiException {
        String channels = null;
        String content = null;
        String _file = null;
        String filename = null;
        String filetype = null;
        String initialComment = null;
        BigDecimal threadTs = null;
        String title = null;
        String token = null;
        FilesUploadSchema response = api.filesUpload(channels, content, _file, filename, filetype, initialComment, threadTs, title, token);
        // TODO: test validations
    }

}
