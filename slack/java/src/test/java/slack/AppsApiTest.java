/*
 * Slack Web API
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package slack;

import invalidPackageName.ApiException;
import com.outmatchapi.slack.ApiPermissionsScopesListSuccessSchema;
import com.outmatchapi.slack.AppsPermissionsInfoErrorSchema;
import com.outmatchapi.slack.AppsPermissionsInfoSchema;
import com.outmatchapi.slack.AppsPermissionsRequestErrorSchema;
import com.outmatchapi.slack.AppsPermissionsRequestSchema;
import com.outmatchapi.slack.AppsPermissionsResourcesListErrorSchema;
import com.outmatchapi.slack.AppsPermissionsResourcesListSuccessSchema;
import com.outmatchapi.slack.AppsPermissionsScopesListErrorSchema;
import com.outmatchapi.slack.AppsUninstallErrorSchema;
import com.outmatchapi.slack.AppsUninstallSchema;
import com.outmatchapi.slack.DefaultErrorTemplate;
import com.outmatchapi.slack.DefaultSuccessTemplate;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AppsApi
 */
@Disabled
public class AppsApiTest {

    private final AppsApi api = new AppsApi();

    /**
     * Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsEventAuthorizationsListTest() throws ApiException {
        String token = null;
        String eventContext = null;
        String cursor = null;
        Integer limit = null;
        DefaultSuccessTemplate response = api.appsEventAuthorizationsList(token, eventContext, cursor, limit);
        // TODO: test validations
    }

    /**
     * Returns list of permissions this app has on a team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPermissionsInfoTest() throws ApiException {
        String token = null;
        AppsPermissionsInfoSchema response = api.appsPermissionsInfo(token);
        // TODO: test validations
    }

    /**
     * Allows an app to request additional scopes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPermissionsRequestTest() throws ApiException {
        String token = null;
        String scopes = null;
        String triggerId = null;
        AppsPermissionsRequestSchema response = api.appsPermissionsRequest(token, scopes, triggerId);
        // TODO: test validations
    }

    /**
     * Returns list of resource grants this app has on a team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPermissionsResourcesListTest() throws ApiException {
        String token = null;
        String cursor = null;
        Integer limit = null;
        AppsPermissionsResourcesListSuccessSchema response = api.appsPermissionsResourcesList(token, cursor, limit);
        // TODO: test validations
    }

    /**
     * Returns list of scopes this app has on a team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPermissionsScopesListTest() throws ApiException {
        String token = null;
        ApiPermissionsScopesListSuccessSchema response = api.appsPermissionsScopesList(token);
        // TODO: test validations
    }

    /**
     * Returns list of user grants and corresponding scopes this app has on a team.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPermissionsUsersListTest() throws ApiException {
        String token = null;
        String cursor = null;
        Integer limit = null;
        DefaultSuccessTemplate response = api.appsPermissionsUsersList(token, cursor, limit);
        // TODO: test validations
    }

    /**
     * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsPermissionsUsersRequestTest() throws ApiException {
        String token = null;
        String scopes = null;
        String triggerId = null;
        String user = null;
        DefaultSuccessTemplate response = api.appsPermissionsUsersRequest(token, scopes, triggerId, user);
        // TODO: test validations
    }

    /**
     * Uninstalls your app from a workspace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void appsUninstallTest() throws ApiException {
        String token = null;
        String clientId = null;
        String clientSecret = null;
        AppsUninstallSchema response = api.appsUninstall(token, clientId, clientSecret);
        // TODO: test validations
    }

}
