<?php
/**
 * ChatApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\slack;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * ChatApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ChatApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'chatDelete' => [
            'application/x-www-form-urlencoded',
        ],
        'chatDeleteScheduledMessage' => [
            'application/x-www-form-urlencoded',
        ],
        'chatGetPermalink' => [
            'application/json',
        ],
        'chatMeMessage' => [
            'application/x-www-form-urlencoded',
        ],
        'chatPostEphemeral' => [
            'application/x-www-form-urlencoded',
        ],
        'chatPostMessage' => [
            'application/x-www-form-urlencoded',
        ],
        'chatScheduleMessage' => [
            'application/x-www-form-urlencoded',
        ],
        'chatScheduledMessagesList' => [
            'application/json',
        ],
        'chatUnfurl' => [
            'application/x-www-form-urlencoded',
        ],
        'chatUpdate' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation chatDelete
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  bool $as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param  string $channel Channel containing the message to be deleted. (optional)
     * @param  float $ts Timestamp of the message to be deleted. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChatDeleteSuccessSchema|\OpenAPI\Client\Model\ChatDeleteErrorSchema
     */
    public function chatDelete($token = null, $as_user = null, $channel = null, $ts = null, string $contentType = self::contentTypes['chatDelete'][0])
    {
        list($response) = $this->chatDeleteWithHttpInfo($token, $as_user, $channel, $ts, $contentType);
        return $response;
    }

    /**
     * Operation chatDeleteWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  bool $as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param  string $channel Channel containing the message to be deleted. (optional)
     * @param  float $ts Timestamp of the message to be deleted. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChatDeleteSuccessSchema|\OpenAPI\Client\Model\ChatDeleteErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatDeleteWithHttpInfo($token = null, $as_user = null, $channel = null, $ts = null, string $contentType = self::contentTypes['chatDelete'][0])
    {
        $request = $this->chatDeleteRequest($token, $as_user, $channel, $ts, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChatDeleteSuccessSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatDeleteSuccessSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatDeleteSuccessSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ChatDeleteErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatDeleteErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatDeleteErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChatDeleteSuccessSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatDeleteSuccessSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatDeleteErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatDeleteAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  bool $as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param  string $channel Channel containing the message to be deleted. (optional)
     * @param  float $ts Timestamp of the message to be deleted. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatDeleteAsync($token = null, $as_user = null, $channel = null, $ts = null, string $contentType = self::contentTypes['chatDelete'][0])
    {
        return $this->chatDeleteAsyncWithHttpInfo($token, $as_user, $channel, $ts, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatDeleteAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  bool $as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param  string $channel Channel containing the message to be deleted. (optional)
     * @param  float $ts Timestamp of the message to be deleted. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatDeleteAsyncWithHttpInfo($token = null, $as_user = null, $channel = null, $ts = null, string $contentType = self::contentTypes['chatDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ChatDeleteSuccessSchema';
        $request = $this->chatDeleteRequest($token, $as_user, $channel, $ts, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatDelete'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  bool $as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param  string $channel Channel containing the message to be deleted. (optional)
     * @param  float $ts Timestamp of the message to be deleted. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatDeleteRequest($token = null, $as_user = null, $channel = null, $ts = null, string $contentType = self::contentTypes['chatDelete'][0])
    {






        $resourcePath = '/chat.delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($as_user !== null) {
            $formParams['as_user'] = ObjectSerializer::toFormValue($as_user);
        }
        // form params
        if ($channel !== null) {
            $formParams['channel'] = ObjectSerializer::toFormValue($channel);
        }
        // form params
        if ($ts !== null) {
            $formParams['ts'] = ObjectSerializer::toFormValue($ts);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatDeleteScheduledMessage
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel The channel the scheduled_message is posting to (required)
     * @param  string $scheduled_message_id &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage (required)
     * @param  bool $as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatDeleteScheduledMessage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChatDeleteScheduledMessageSchema|\OpenAPI\Client\Model\ChatDeleteScheduledMessageErrorSchema
     */
    public function chatDeleteScheduledMessage($token, $channel, $scheduled_message_id, $as_user = null, string $contentType = self::contentTypes['chatDeleteScheduledMessage'][0])
    {
        list($response) = $this->chatDeleteScheduledMessageWithHttpInfo($token, $channel, $scheduled_message_id, $as_user, $contentType);
        return $response;
    }

    /**
     * Operation chatDeleteScheduledMessageWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel The channel the scheduled_message is posting to (required)
     * @param  string $scheduled_message_id &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage (required)
     * @param  bool $as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatDeleteScheduledMessage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChatDeleteScheduledMessageSchema|\OpenAPI\Client\Model\ChatDeleteScheduledMessageErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatDeleteScheduledMessageWithHttpInfo($token, $channel, $scheduled_message_id, $as_user = null, string $contentType = self::contentTypes['chatDeleteScheduledMessage'][0])
    {
        $request = $this->chatDeleteScheduledMessageRequest($token, $channel, $scheduled_message_id, $as_user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChatDeleteScheduledMessageSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatDeleteScheduledMessageSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatDeleteScheduledMessageSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ChatDeleteScheduledMessageErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatDeleteScheduledMessageErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatDeleteScheduledMessageErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChatDeleteScheduledMessageSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatDeleteScheduledMessageSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatDeleteScheduledMessageErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatDeleteScheduledMessageAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel The channel the scheduled_message is posting to (required)
     * @param  string $scheduled_message_id &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage (required)
     * @param  bool $as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatDeleteScheduledMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatDeleteScheduledMessageAsync($token, $channel, $scheduled_message_id, $as_user = null, string $contentType = self::contentTypes['chatDeleteScheduledMessage'][0])
    {
        return $this->chatDeleteScheduledMessageAsyncWithHttpInfo($token, $channel, $scheduled_message_id, $as_user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatDeleteScheduledMessageAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel The channel the scheduled_message is posting to (required)
     * @param  string $scheduled_message_id &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage (required)
     * @param  bool $as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatDeleteScheduledMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatDeleteScheduledMessageAsyncWithHttpInfo($token, $channel, $scheduled_message_id, $as_user = null, string $contentType = self::contentTypes['chatDeleteScheduledMessage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ChatDeleteScheduledMessageSchema';
        $request = $this->chatDeleteScheduledMessageRequest($token, $channel, $scheduled_message_id, $as_user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatDeleteScheduledMessage'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel The channel the scheduled_message is posting to (required)
     * @param  string $scheduled_message_id &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage (required)
     * @param  bool $as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatDeleteScheduledMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatDeleteScheduledMessageRequest($token, $channel, $scheduled_message_id, $as_user = null, string $contentType = self::contentTypes['chatDeleteScheduledMessage'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling chatDeleteScheduledMessage'
            );
        }

        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling chatDeleteScheduledMessage'
            );
        }

        // verify the required parameter 'scheduled_message_id' is set
        if ($scheduled_message_id === null || (is_array($scheduled_message_id) && count($scheduled_message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scheduled_message_id when calling chatDeleteScheduledMessage'
            );
        }



        $resourcePath = '/chat.deleteScheduledMessage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($as_user !== null) {
            $formParams['as_user'] = ObjectSerializer::toFormValue($as_user);
        }
        // form params
        if ($channel !== null) {
            $formParams['channel'] = ObjectSerializer::toFormValue($channel);
        }
        // form params
        if ($scheduled_message_id !== null) {
            $formParams['scheduled_message_id'] = ObjectSerializer::toFormValue($scheduled_message_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatGetPermalink
     *
     * @param  string $token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param  string $channel The ID of the conversation or channel containing the message (required)
     * @param  string $message_ts A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatGetPermalink'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChatGetPermalinkSuccessSchema|\OpenAPI\Client\Model\ChatGetPermalinkErrorSchema
     */
    public function chatGetPermalink($token, $channel, $message_ts, string $contentType = self::contentTypes['chatGetPermalink'][0])
    {
        list($response) = $this->chatGetPermalinkWithHttpInfo($token, $channel, $message_ts, $contentType);
        return $response;
    }

    /**
     * Operation chatGetPermalinkWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param  string $channel The ID of the conversation or channel containing the message (required)
     * @param  string $message_ts A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatGetPermalink'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChatGetPermalinkSuccessSchema|\OpenAPI\Client\Model\ChatGetPermalinkErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatGetPermalinkWithHttpInfo($token, $channel, $message_ts, string $contentType = self::contentTypes['chatGetPermalink'][0])
    {
        $request = $this->chatGetPermalinkRequest($token, $channel, $message_ts, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChatGetPermalinkSuccessSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatGetPermalinkSuccessSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatGetPermalinkSuccessSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ChatGetPermalinkErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatGetPermalinkErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatGetPermalinkErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChatGetPermalinkSuccessSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatGetPermalinkSuccessSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatGetPermalinkErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatGetPermalinkAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param  string $channel The ID of the conversation or channel containing the message (required)
     * @param  string $message_ts A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatGetPermalink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatGetPermalinkAsync($token, $channel, $message_ts, string $contentType = self::contentTypes['chatGetPermalink'][0])
    {
        return $this->chatGetPermalinkAsyncWithHttpInfo($token, $channel, $message_ts, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatGetPermalinkAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param  string $channel The ID of the conversation or channel containing the message (required)
     * @param  string $message_ts A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatGetPermalink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatGetPermalinkAsyncWithHttpInfo($token, $channel, $message_ts, string $contentType = self::contentTypes['chatGetPermalink'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ChatGetPermalinkSuccessSchema';
        $request = $this->chatGetPermalinkRequest($token, $channel, $message_ts, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatGetPermalink'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;none&#x60; (required)
     * @param  string $channel The ID of the conversation or channel containing the message (required)
     * @param  string $message_ts A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatGetPermalink'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatGetPermalinkRequest($token, $channel, $message_ts, string $contentType = self::contentTypes['chatGetPermalink'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling chatGetPermalink'
            );
        }

        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling chatGetPermalink'
            );
        }

        // verify the required parameter 'message_ts' is set
        if ($message_ts === null || (is_array($message_ts) && count($message_ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_ts when calling chatGetPermalink'
            );
        }


        $resourcePath = '/chat.getPermalink';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $message_ts,
            'message_ts', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatMeMessage
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  string $channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. (optional)
     * @param  string $text Text of the message to send. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatMeMessage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChatMeMessageSchema|\OpenAPI\Client\Model\ChatMeMessageErrorSchema
     */
    public function chatMeMessage($token = null, $channel = null, $text = null, string $contentType = self::contentTypes['chatMeMessage'][0])
    {
        list($response) = $this->chatMeMessageWithHttpInfo($token, $channel, $text, $contentType);
        return $response;
    }

    /**
     * Operation chatMeMessageWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  string $channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. (optional)
     * @param  string $text Text of the message to send. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatMeMessage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChatMeMessageSchema|\OpenAPI\Client\Model\ChatMeMessageErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatMeMessageWithHttpInfo($token = null, $channel = null, $text = null, string $contentType = self::contentTypes['chatMeMessage'][0])
    {
        $request = $this->chatMeMessageRequest($token, $channel, $text, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChatMeMessageSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatMeMessageSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatMeMessageSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ChatMeMessageErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatMeMessageErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatMeMessageErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChatMeMessageSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatMeMessageSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatMeMessageErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatMeMessageAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  string $channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. (optional)
     * @param  string $text Text of the message to send. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatMeMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatMeMessageAsync($token = null, $channel = null, $text = null, string $contentType = self::contentTypes['chatMeMessage'][0])
    {
        return $this->chatMeMessageAsyncWithHttpInfo($token, $channel, $text, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatMeMessageAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  string $channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. (optional)
     * @param  string $text Text of the message to send. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatMeMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatMeMessageAsyncWithHttpInfo($token = null, $channel = null, $text = null, string $contentType = self::contentTypes['chatMeMessage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ChatMeMessageSchema';
        $request = $this->chatMeMessageRequest($token, $channel, $text, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatMeMessage'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  string $channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. (optional)
     * @param  string $text Text of the message to send. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatMeMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatMeMessageRequest($token = null, $channel = null, $text = null, string $contentType = self::contentTypes['chatMeMessage'][0])
    {





        $resourcePath = '/chat.meMessage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel !== null) {
            $formParams['channel'] = ObjectSerializer::toFormValue($channel);
        }
        // form params
        if ($text !== null) {
            $formParams['text'] = ObjectSerializer::toFormValue($text);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatPostEphemeral
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. (required)
     * @param  string $user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument. (required)
     * @param  bool $as_user Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  string $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread. (optional)
     * @param  string $username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatPostEphemeral'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChatPostEphemeralSuccessSchema|\OpenAPI\Client\Model\ChatPostEphemeralErrorSchema
     */
    public function chatPostEphemeral($token, $channel, $user, $as_user = null, $attachments = null, $blocks = null, $icon_emoji = null, $icon_url = null, $link_names = null, $parse = null, $text = null, $thread_ts = null, $username = null, string $contentType = self::contentTypes['chatPostEphemeral'][0])
    {
        list($response) = $this->chatPostEphemeralWithHttpInfo($token, $channel, $user, $as_user, $attachments, $blocks, $icon_emoji, $icon_url, $link_names, $parse, $text, $thread_ts, $username, $contentType);
        return $response;
    }

    /**
     * Operation chatPostEphemeralWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. (required)
     * @param  string $user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument. (required)
     * @param  bool $as_user Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  string $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread. (optional)
     * @param  string $username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatPostEphemeral'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChatPostEphemeralSuccessSchema|\OpenAPI\Client\Model\ChatPostEphemeralErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatPostEphemeralWithHttpInfo($token, $channel, $user, $as_user = null, $attachments = null, $blocks = null, $icon_emoji = null, $icon_url = null, $link_names = null, $parse = null, $text = null, $thread_ts = null, $username = null, string $contentType = self::contentTypes['chatPostEphemeral'][0])
    {
        $request = $this->chatPostEphemeralRequest($token, $channel, $user, $as_user, $attachments, $blocks, $icon_emoji, $icon_url, $link_names, $parse, $text, $thread_ts, $username, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChatPostEphemeralSuccessSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatPostEphemeralSuccessSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatPostEphemeralSuccessSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ChatPostEphemeralErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatPostEphemeralErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatPostEphemeralErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChatPostEphemeralSuccessSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatPostEphemeralSuccessSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatPostEphemeralErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatPostEphemeralAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. (required)
     * @param  string $user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument. (required)
     * @param  bool $as_user Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  string $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread. (optional)
     * @param  string $username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatPostEphemeral'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatPostEphemeralAsync($token, $channel, $user, $as_user = null, $attachments = null, $blocks = null, $icon_emoji = null, $icon_url = null, $link_names = null, $parse = null, $text = null, $thread_ts = null, $username = null, string $contentType = self::contentTypes['chatPostEphemeral'][0])
    {
        return $this->chatPostEphemeralAsyncWithHttpInfo($token, $channel, $user, $as_user, $attachments, $blocks, $icon_emoji, $icon_url, $link_names, $parse, $text, $thread_ts, $username, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatPostEphemeralAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. (required)
     * @param  string $user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument. (required)
     * @param  bool $as_user Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  string $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread. (optional)
     * @param  string $username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatPostEphemeral'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatPostEphemeralAsyncWithHttpInfo($token, $channel, $user, $as_user = null, $attachments = null, $blocks = null, $icon_emoji = null, $icon_url = null, $link_names = null, $parse = null, $text = null, $thread_ts = null, $username = null, string $contentType = self::contentTypes['chatPostEphemeral'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ChatPostEphemeralSuccessSchema';
        $request = $this->chatPostEphemeralRequest($token, $channel, $user, $as_user, $attachments, $blocks, $icon_emoji, $icon_url, $link_names, $parse, $text, $thread_ts, $username, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatPostEphemeral'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. (required)
     * @param  string $user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument. (required)
     * @param  bool $as_user Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  string $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread. (optional)
     * @param  string $username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatPostEphemeral'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatPostEphemeralRequest($token, $channel, $user, $as_user = null, $attachments = null, $blocks = null, $icon_emoji = null, $icon_url = null, $link_names = null, $parse = null, $text = null, $thread_ts = null, $username = null, string $contentType = self::contentTypes['chatPostEphemeral'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling chatPostEphemeral'
            );
        }

        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling chatPostEphemeral'
            );
        }

        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling chatPostEphemeral'
            );
        }












        $resourcePath = '/chat.postEphemeral';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($as_user !== null) {
            $formParams['as_user'] = ObjectSerializer::toFormValue($as_user);
        }
        // form params
        if ($attachments !== null) {
            $formParams['attachments'] = ObjectSerializer::toFormValue($attachments);
        }
        // form params
        if ($blocks !== null) {
            $formParams['blocks'] = ObjectSerializer::toFormValue($blocks);
        }
        // form params
        if ($channel !== null) {
            $formParams['channel'] = ObjectSerializer::toFormValue($channel);
        }
        // form params
        if ($icon_emoji !== null) {
            $formParams['icon_emoji'] = ObjectSerializer::toFormValue($icon_emoji);
        }
        // form params
        if ($icon_url !== null) {
            $formParams['icon_url'] = ObjectSerializer::toFormValue($icon_url);
        }
        // form params
        if ($link_names !== null) {
            $formParams['link_names'] = ObjectSerializer::toFormValue($link_names);
        }
        // form params
        if ($parse !== null) {
            $formParams['parse'] = ObjectSerializer::toFormValue($parse);
        }
        // form params
        if ($text !== null) {
            $formParams['text'] = ObjectSerializer::toFormValue($text);
        }
        // form params
        if ($thread_ts !== null) {
            $formParams['thread_ts'] = ObjectSerializer::toFormValue($thread_ts);
        }
        // form params
        if ($user !== null) {
            $formParams['user'] = ObjectSerializer::toFormValue($user);
        }
        // form params
        if ($username !== null) {
            $formParams['username'] = ObjectSerializer::toFormValue($username);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatPostMessage
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (required)
     * @param  string $as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  bool $mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param  bool $reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  string $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param  bool $unfurl_links Pass true to enable unfurling of primarily text-based content. (optional)
     * @param  bool $unfurl_media Pass false to disable unfurling of media content. (optional)
     * @param  string $username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatPostMessage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChatPostMessageSuccessSchema|\OpenAPI\Client\Model\ChatPostMessageErrorSchema
     */
    public function chatPostMessage($token, $channel, $as_user = null, $attachments = null, $blocks = null, $icon_emoji = null, $icon_url = null, $link_names = null, $mrkdwn = null, $parse = null, $reply_broadcast = null, $text = null, $thread_ts = null, $unfurl_links = null, $unfurl_media = null, $username = null, string $contentType = self::contentTypes['chatPostMessage'][0])
    {
        list($response) = $this->chatPostMessageWithHttpInfo($token, $channel, $as_user, $attachments, $blocks, $icon_emoji, $icon_url, $link_names, $mrkdwn, $parse, $reply_broadcast, $text, $thread_ts, $unfurl_links, $unfurl_media, $username, $contentType);
        return $response;
    }

    /**
     * Operation chatPostMessageWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (required)
     * @param  string $as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  bool $mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param  bool $reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  string $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param  bool $unfurl_links Pass true to enable unfurling of primarily text-based content. (optional)
     * @param  bool $unfurl_media Pass false to disable unfurling of media content. (optional)
     * @param  string $username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatPostMessage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChatPostMessageSuccessSchema|\OpenAPI\Client\Model\ChatPostMessageErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatPostMessageWithHttpInfo($token, $channel, $as_user = null, $attachments = null, $blocks = null, $icon_emoji = null, $icon_url = null, $link_names = null, $mrkdwn = null, $parse = null, $reply_broadcast = null, $text = null, $thread_ts = null, $unfurl_links = null, $unfurl_media = null, $username = null, string $contentType = self::contentTypes['chatPostMessage'][0])
    {
        $request = $this->chatPostMessageRequest($token, $channel, $as_user, $attachments, $blocks, $icon_emoji, $icon_url, $link_names, $mrkdwn, $parse, $reply_broadcast, $text, $thread_ts, $unfurl_links, $unfurl_media, $username, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChatPostMessageSuccessSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatPostMessageSuccessSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatPostMessageSuccessSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ChatPostMessageErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatPostMessageErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatPostMessageErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChatPostMessageSuccessSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatPostMessageSuccessSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatPostMessageErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatPostMessageAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (required)
     * @param  string $as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  bool $mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param  bool $reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  string $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param  bool $unfurl_links Pass true to enable unfurling of primarily text-based content. (optional)
     * @param  bool $unfurl_media Pass false to disable unfurling of media content. (optional)
     * @param  string $username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatPostMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatPostMessageAsync($token, $channel, $as_user = null, $attachments = null, $blocks = null, $icon_emoji = null, $icon_url = null, $link_names = null, $mrkdwn = null, $parse = null, $reply_broadcast = null, $text = null, $thread_ts = null, $unfurl_links = null, $unfurl_media = null, $username = null, string $contentType = self::contentTypes['chatPostMessage'][0])
    {
        return $this->chatPostMessageAsyncWithHttpInfo($token, $channel, $as_user, $attachments, $blocks, $icon_emoji, $icon_url, $link_names, $mrkdwn, $parse, $reply_broadcast, $text, $thread_ts, $unfurl_links, $unfurl_media, $username, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatPostMessageAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (required)
     * @param  string $as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  bool $mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param  bool $reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  string $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param  bool $unfurl_links Pass true to enable unfurling of primarily text-based content. (optional)
     * @param  bool $unfurl_media Pass false to disable unfurling of media content. (optional)
     * @param  string $username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatPostMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatPostMessageAsyncWithHttpInfo($token, $channel, $as_user = null, $attachments = null, $blocks = null, $icon_emoji = null, $icon_url = null, $link_names = null, $mrkdwn = null, $parse = null, $reply_broadcast = null, $text = null, $thread_ts = null, $unfurl_links = null, $unfurl_media = null, $username = null, string $contentType = self::contentTypes['chatPostMessage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ChatPostMessageSuccessSchema';
        $request = $this->chatPostMessageRequest($token, $channel, $as_user, $attachments, $blocks, $icon_emoji, $icon_url, $link_names, $mrkdwn, $parse, $reply_broadcast, $text, $thread_ts, $unfurl_links, $unfurl_media, $username, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatPostMessage'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (required)
     * @param  string $as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  bool $mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param  bool $reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  string $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param  bool $unfurl_links Pass true to enable unfurling of primarily text-based content. (optional)
     * @param  bool $unfurl_media Pass false to disable unfurling of media content. (optional)
     * @param  string $username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatPostMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatPostMessageRequest($token, $channel, $as_user = null, $attachments = null, $blocks = null, $icon_emoji = null, $icon_url = null, $link_names = null, $mrkdwn = null, $parse = null, $reply_broadcast = null, $text = null, $thread_ts = null, $unfurl_links = null, $unfurl_media = null, $username = null, string $contentType = self::contentTypes['chatPostMessage'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling chatPostMessage'
            );
        }

        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling chatPostMessage'
            );
        }
















        $resourcePath = '/chat.postMessage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($as_user !== null) {
            $formParams['as_user'] = ObjectSerializer::toFormValue($as_user);
        }
        // form params
        if ($attachments !== null) {
            $formParams['attachments'] = ObjectSerializer::toFormValue($attachments);
        }
        // form params
        if ($blocks !== null) {
            $formParams['blocks'] = ObjectSerializer::toFormValue($blocks);
        }
        // form params
        if ($channel !== null) {
            $formParams['channel'] = ObjectSerializer::toFormValue($channel);
        }
        // form params
        if ($icon_emoji !== null) {
            $formParams['icon_emoji'] = ObjectSerializer::toFormValue($icon_emoji);
        }
        // form params
        if ($icon_url !== null) {
            $formParams['icon_url'] = ObjectSerializer::toFormValue($icon_url);
        }
        // form params
        if ($link_names !== null) {
            $formParams['link_names'] = ObjectSerializer::toFormValue($link_names);
        }
        // form params
        if ($mrkdwn !== null) {
            $formParams['mrkdwn'] = ObjectSerializer::toFormValue($mrkdwn);
        }
        // form params
        if ($parse !== null) {
            $formParams['parse'] = ObjectSerializer::toFormValue($parse);
        }
        // form params
        if ($reply_broadcast !== null) {
            $formParams['reply_broadcast'] = ObjectSerializer::toFormValue($reply_broadcast);
        }
        // form params
        if ($text !== null) {
            $formParams['text'] = ObjectSerializer::toFormValue($text);
        }
        // form params
        if ($thread_ts !== null) {
            $formParams['thread_ts'] = ObjectSerializer::toFormValue($thread_ts);
        }
        // form params
        if ($unfurl_links !== null) {
            $formParams['unfurl_links'] = ObjectSerializer::toFormValue($unfurl_links);
        }
        // form params
        if ($unfurl_media !== null) {
            $formParams['unfurl_media'] = ObjectSerializer::toFormValue($unfurl_media);
        }
        // form params
        if ($username !== null) {
            $formParams['username'] = ObjectSerializer::toFormValue($username);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatScheduleMessage
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  bool $as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting). (optional)
     * @param  string $post_at Unix EPOCH timestamp of time in future to send the message. (optional)
     * @param  bool $reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  float $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param  bool $unfurl_links Pass true to enable unfurling of primarily text-based content. (optional)
     * @param  bool $unfurl_media Pass false to disable unfurling of media content. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatScheduleMessage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChatScheduleMessageSuccessSchema|\OpenAPI\Client\Model\ChatScheduleMessageErrorSchema
     */
    public function chatScheduleMessage($token = null, $as_user = null, $attachments = null, $blocks = null, $channel = null, $link_names = null, $parse = null, $post_at = null, $reply_broadcast = null, $text = null, $thread_ts = null, $unfurl_links = null, $unfurl_media = null, string $contentType = self::contentTypes['chatScheduleMessage'][0])
    {
        list($response) = $this->chatScheduleMessageWithHttpInfo($token, $as_user, $attachments, $blocks, $channel, $link_names, $parse, $post_at, $reply_broadcast, $text, $thread_ts, $unfurl_links, $unfurl_media, $contentType);
        return $response;
    }

    /**
     * Operation chatScheduleMessageWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  bool $as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting). (optional)
     * @param  string $post_at Unix EPOCH timestamp of time in future to send the message. (optional)
     * @param  bool $reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  float $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param  bool $unfurl_links Pass true to enable unfurling of primarily text-based content. (optional)
     * @param  bool $unfurl_media Pass false to disable unfurling of media content. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatScheduleMessage'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChatScheduleMessageSuccessSchema|\OpenAPI\Client\Model\ChatScheduleMessageErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatScheduleMessageWithHttpInfo($token = null, $as_user = null, $attachments = null, $blocks = null, $channel = null, $link_names = null, $parse = null, $post_at = null, $reply_broadcast = null, $text = null, $thread_ts = null, $unfurl_links = null, $unfurl_media = null, string $contentType = self::contentTypes['chatScheduleMessage'][0])
    {
        $request = $this->chatScheduleMessageRequest($token, $as_user, $attachments, $blocks, $channel, $link_names, $parse, $post_at, $reply_broadcast, $text, $thread_ts, $unfurl_links, $unfurl_media, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChatScheduleMessageSuccessSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatScheduleMessageSuccessSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatScheduleMessageSuccessSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ChatScheduleMessageErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatScheduleMessageErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatScheduleMessageErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChatScheduleMessageSuccessSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatScheduleMessageSuccessSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatScheduleMessageErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatScheduleMessageAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  bool $as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting). (optional)
     * @param  string $post_at Unix EPOCH timestamp of time in future to send the message. (optional)
     * @param  bool $reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  float $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param  bool $unfurl_links Pass true to enable unfurling of primarily text-based content. (optional)
     * @param  bool $unfurl_media Pass false to disable unfurling of media content. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatScheduleMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatScheduleMessageAsync($token = null, $as_user = null, $attachments = null, $blocks = null, $channel = null, $link_names = null, $parse = null, $post_at = null, $reply_broadcast = null, $text = null, $thread_ts = null, $unfurl_links = null, $unfurl_media = null, string $contentType = self::contentTypes['chatScheduleMessage'][0])
    {
        return $this->chatScheduleMessageAsyncWithHttpInfo($token, $as_user, $attachments, $blocks, $channel, $link_names, $parse, $post_at, $reply_broadcast, $text, $thread_ts, $unfurl_links, $unfurl_media, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatScheduleMessageAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  bool $as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting). (optional)
     * @param  string $post_at Unix EPOCH timestamp of time in future to send the message. (optional)
     * @param  bool $reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  float $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param  bool $unfurl_links Pass true to enable unfurling of primarily text-based content. (optional)
     * @param  bool $unfurl_media Pass false to disable unfurling of media content. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatScheduleMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatScheduleMessageAsyncWithHttpInfo($token = null, $as_user = null, $attachments = null, $blocks = null, $channel = null, $link_names = null, $parse = null, $post_at = null, $reply_broadcast = null, $text = null, $thread_ts = null, $unfurl_links = null, $unfurl_media = null, string $contentType = self::contentTypes['chatScheduleMessage'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ChatScheduleMessageSuccessSchema';
        $request = $this->chatScheduleMessageRequest($token, $as_user, $attachments, $blocks, $channel, $link_names, $parse, $post_at, $reply_broadcast, $text, $thread_ts, $unfurl_links, $unfurl_media, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatScheduleMessage'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param  bool $as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param  string $blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param  string $channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (optional)
     * @param  bool $link_names Find and link channel names and usernames. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting). (optional)
     * @param  string $post_at Unix EPOCH timestamp of time in future to send the message. (optional)
     * @param  bool $reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param  string $text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param  float $thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param  bool $unfurl_links Pass true to enable unfurling of primarily text-based content. (optional)
     * @param  bool $unfurl_media Pass false to disable unfurling of media content. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatScheduleMessage'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatScheduleMessageRequest($token = null, $as_user = null, $attachments = null, $blocks = null, $channel = null, $link_names = null, $parse = null, $post_at = null, $reply_broadcast = null, $text = null, $thread_ts = null, $unfurl_links = null, $unfurl_media = null, string $contentType = self::contentTypes['chatScheduleMessage'][0])
    {















        $resourcePath = '/chat.scheduleMessage';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($as_user !== null) {
            $formParams['as_user'] = ObjectSerializer::toFormValue($as_user);
        }
        // form params
        if ($attachments !== null) {
            $formParams['attachments'] = ObjectSerializer::toFormValue($attachments);
        }
        // form params
        if ($blocks !== null) {
            $formParams['blocks'] = ObjectSerializer::toFormValue($blocks);
        }
        // form params
        if ($channel !== null) {
            $formParams['channel'] = ObjectSerializer::toFormValue($channel);
        }
        // form params
        if ($link_names !== null) {
            $formParams['link_names'] = ObjectSerializer::toFormValue($link_names);
        }
        // form params
        if ($parse !== null) {
            $formParams['parse'] = ObjectSerializer::toFormValue($parse);
        }
        // form params
        if ($post_at !== null) {
            $formParams['post_at'] = ObjectSerializer::toFormValue($post_at);
        }
        // form params
        if ($reply_broadcast !== null) {
            $formParams['reply_broadcast'] = ObjectSerializer::toFormValue($reply_broadcast);
        }
        // form params
        if ($text !== null) {
            $formParams['text'] = ObjectSerializer::toFormValue($text);
        }
        // form params
        if ($thread_ts !== null) {
            $formParams['thread_ts'] = ObjectSerializer::toFormValue($thread_ts);
        }
        // form params
        if ($unfurl_links !== null) {
            $formParams['unfurl_links'] = ObjectSerializer::toFormValue($unfurl_links);
        }
        // form params
        if ($unfurl_media !== null) {
            $formParams['unfurl_media'] = ObjectSerializer::toFormValue($unfurl_media);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatScheduledMessagesList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param  string $channel The channel of the scheduled messages (optional)
     * @param  float $latest A UNIX timestamp of the latest value in the time range (optional)
     * @param  float $oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param  int $limit Maximum number of original entries to return. (optional)
     * @param  string $cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatScheduledMessagesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChatScheduledMessagesListSchema|\OpenAPI\Client\Model\ChatScheduledMessagesListErrorSchema
     */
    public function chatScheduledMessagesList($token = null, $channel = null, $latest = null, $oldest = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['chatScheduledMessagesList'][0])
    {
        list($response) = $this->chatScheduledMessagesListWithHttpInfo($token, $channel, $latest, $oldest, $limit, $cursor, $contentType);
        return $response;
    }

    /**
     * Operation chatScheduledMessagesListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param  string $channel The channel of the scheduled messages (optional)
     * @param  float $latest A UNIX timestamp of the latest value in the time range (optional)
     * @param  float $oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param  int $limit Maximum number of original entries to return. (optional)
     * @param  string $cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatScheduledMessagesList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChatScheduledMessagesListSchema|\OpenAPI\Client\Model\ChatScheduledMessagesListErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatScheduledMessagesListWithHttpInfo($token = null, $channel = null, $latest = null, $oldest = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['chatScheduledMessagesList'][0])
    {
        $request = $this->chatScheduledMessagesListRequest($token, $channel, $latest, $oldest, $limit, $cursor, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChatScheduledMessagesListSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatScheduledMessagesListSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatScheduledMessagesListSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ChatScheduledMessagesListErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatScheduledMessagesListErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatScheduledMessagesListErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChatScheduledMessagesListSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatScheduledMessagesListSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatScheduledMessagesListErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatScheduledMessagesListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param  string $channel The channel of the scheduled messages (optional)
     * @param  float $latest A UNIX timestamp of the latest value in the time range (optional)
     * @param  float $oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param  int $limit Maximum number of original entries to return. (optional)
     * @param  string $cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatScheduledMessagesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatScheduledMessagesListAsync($token = null, $channel = null, $latest = null, $oldest = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['chatScheduledMessagesList'][0])
    {
        return $this->chatScheduledMessagesListAsyncWithHttpInfo($token, $channel, $latest, $oldest, $limit, $cursor, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatScheduledMessagesListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param  string $channel The channel of the scheduled messages (optional)
     * @param  float $latest A UNIX timestamp of the latest value in the time range (optional)
     * @param  float $oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param  int $limit Maximum number of original entries to return. (optional)
     * @param  string $cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatScheduledMessagesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatScheduledMessagesListAsyncWithHttpInfo($token = null, $channel = null, $latest = null, $oldest = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['chatScheduledMessagesList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ChatScheduledMessagesListSchema';
        $request = $this->chatScheduledMessagesListRequest($token, $channel, $latest, $oldest, $limit, $cursor, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatScheduledMessagesList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param  string $channel The channel of the scheduled messages (optional)
     * @param  float $latest A UNIX timestamp of the latest value in the time range (optional)
     * @param  float $oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param  int $limit Maximum number of original entries to return. (optional)
     * @param  string $cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatScheduledMessagesList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatScheduledMessagesListRequest($token = null, $channel = null, $latest = null, $oldest = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['chatScheduledMessagesList'][0])
    {








        $resourcePath = '/chat.scheduledMessages.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $latest,
            'latest', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $oldest,
            'oldest', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatUnfurl
     *
     * @param  string $token Authentication token. Requires scope: &#x60;links:write&#x60; (required)
     * @param  string $channel Channel ID of the message (required)
     * @param  string $ts Timestamp of the message to add unfurl behavior to. (required)
     * @param  string $unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. (optional)
     * @param  string $user_auth_message Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior (optional)
     * @param  bool $user_auth_required Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain (optional)
     * @param  string $user_auth_url Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatUnfurl'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChatUnfurlSuccessSchema|\OpenAPI\Client\Model\ChatUnfurlErrorSchema
     */
    public function chatUnfurl($token, $channel, $ts, $unfurls = null, $user_auth_message = null, $user_auth_required = null, $user_auth_url = null, string $contentType = self::contentTypes['chatUnfurl'][0])
    {
        list($response) = $this->chatUnfurlWithHttpInfo($token, $channel, $ts, $unfurls, $user_auth_message, $user_auth_required, $user_auth_url, $contentType);
        return $response;
    }

    /**
     * Operation chatUnfurlWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;links:write&#x60; (required)
     * @param  string $channel Channel ID of the message (required)
     * @param  string $ts Timestamp of the message to add unfurl behavior to. (required)
     * @param  string $unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. (optional)
     * @param  string $user_auth_message Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior (optional)
     * @param  bool $user_auth_required Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain (optional)
     * @param  string $user_auth_url Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatUnfurl'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChatUnfurlSuccessSchema|\OpenAPI\Client\Model\ChatUnfurlErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatUnfurlWithHttpInfo($token, $channel, $ts, $unfurls = null, $user_auth_message = null, $user_auth_required = null, $user_auth_url = null, string $contentType = self::contentTypes['chatUnfurl'][0])
    {
        $request = $this->chatUnfurlRequest($token, $channel, $ts, $unfurls, $user_auth_message, $user_auth_required, $user_auth_url, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChatUnfurlSuccessSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatUnfurlSuccessSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatUnfurlSuccessSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ChatUnfurlErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatUnfurlErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatUnfurlErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChatUnfurlSuccessSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatUnfurlSuccessSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatUnfurlErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatUnfurlAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;links:write&#x60; (required)
     * @param  string $channel Channel ID of the message (required)
     * @param  string $ts Timestamp of the message to add unfurl behavior to. (required)
     * @param  string $unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. (optional)
     * @param  string $user_auth_message Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior (optional)
     * @param  bool $user_auth_required Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain (optional)
     * @param  string $user_auth_url Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatUnfurl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatUnfurlAsync($token, $channel, $ts, $unfurls = null, $user_auth_message = null, $user_auth_required = null, $user_auth_url = null, string $contentType = self::contentTypes['chatUnfurl'][0])
    {
        return $this->chatUnfurlAsyncWithHttpInfo($token, $channel, $ts, $unfurls, $user_auth_message, $user_auth_required, $user_auth_url, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatUnfurlAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;links:write&#x60; (required)
     * @param  string $channel Channel ID of the message (required)
     * @param  string $ts Timestamp of the message to add unfurl behavior to. (required)
     * @param  string $unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. (optional)
     * @param  string $user_auth_message Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior (optional)
     * @param  bool $user_auth_required Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain (optional)
     * @param  string $user_auth_url Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatUnfurl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatUnfurlAsyncWithHttpInfo($token, $channel, $ts, $unfurls = null, $user_auth_message = null, $user_auth_required = null, $user_auth_url = null, string $contentType = self::contentTypes['chatUnfurl'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ChatUnfurlSuccessSchema';
        $request = $this->chatUnfurlRequest($token, $channel, $ts, $unfurls, $user_auth_message, $user_auth_required, $user_auth_url, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatUnfurl'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;links:write&#x60; (required)
     * @param  string $channel Channel ID of the message (required)
     * @param  string $ts Timestamp of the message to add unfurl behavior to. (required)
     * @param  string $unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. (optional)
     * @param  string $user_auth_message Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior (optional)
     * @param  bool $user_auth_required Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain (optional)
     * @param  string $user_auth_url Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatUnfurl'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatUnfurlRequest($token, $channel, $ts, $unfurls = null, $user_auth_message = null, $user_auth_required = null, $user_auth_url = null, string $contentType = self::contentTypes['chatUnfurl'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling chatUnfurl'
            );
        }

        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling chatUnfurl'
            );
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling chatUnfurl'
            );
        }






        $resourcePath = '/chat.unfurl';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel !== null) {
            $formParams['channel'] = ObjectSerializer::toFormValue($channel);
        }
        // form params
        if ($ts !== null) {
            $formParams['ts'] = ObjectSerializer::toFormValue($ts);
        }
        // form params
        if ($unfurls !== null) {
            $formParams['unfurls'] = ObjectSerializer::toFormValue($unfurls);
        }
        // form params
        if ($user_auth_message !== null) {
            $formParams['user_auth_message'] = ObjectSerializer::toFormValue($user_auth_message);
        }
        // form params
        if ($user_auth_required !== null) {
            $formParams['user_auth_required'] = ObjectSerializer::toFormValue($user_auth_required);
        }
        // form params
        if ($user_auth_url !== null) {
            $formParams['user_auth_url'] = ObjectSerializer::toFormValue($user_auth_url);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation chatUpdate
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel containing the message to be updated. (required)
     * @param  string $ts Timestamp of the message to be updated. (required)
     * @param  string $as_user Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field. (optional)
     * @param  string $blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field. (optional)
     * @param  string $link_names Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;. (optional)
     * @param  string $text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ChatUpdateSuccessSchema|\OpenAPI\Client\Model\ChatUpdateErrorSchema
     */
    public function chatUpdate($token, $channel, $ts, $as_user = null, $attachments = null, $blocks = null, $link_names = null, $parse = null, $text = null, string $contentType = self::contentTypes['chatUpdate'][0])
    {
        list($response) = $this->chatUpdateWithHttpInfo($token, $channel, $ts, $as_user, $attachments, $blocks, $link_names, $parse, $text, $contentType);
        return $response;
    }

    /**
     * Operation chatUpdateWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel containing the message to be updated. (required)
     * @param  string $ts Timestamp of the message to be updated. (required)
     * @param  string $as_user Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field. (optional)
     * @param  string $blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field. (optional)
     * @param  string $link_names Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;. (optional)
     * @param  string $text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ChatUpdateSuccessSchema|\OpenAPI\Client\Model\ChatUpdateErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function chatUpdateWithHttpInfo($token, $channel, $ts, $as_user = null, $attachments = null, $blocks = null, $link_names = null, $parse = null, $text = null, string $contentType = self::contentTypes['chatUpdate'][0])
    {
        $request = $this->chatUpdateRequest($token, $channel, $ts, $as_user, $attachments, $blocks, $link_names, $parse, $text, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ChatUpdateSuccessSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatUpdateSuccessSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatUpdateSuccessSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\ChatUpdateErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ChatUpdateErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ChatUpdateErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ChatUpdateSuccessSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatUpdateSuccessSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ChatUpdateErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation chatUpdateAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel containing the message to be updated. (required)
     * @param  string $ts Timestamp of the message to be updated. (required)
     * @param  string $as_user Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field. (optional)
     * @param  string $blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field. (optional)
     * @param  string $link_names Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;. (optional)
     * @param  string $text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatUpdateAsync($token, $channel, $ts, $as_user = null, $attachments = null, $blocks = null, $link_names = null, $parse = null, $text = null, string $contentType = self::contentTypes['chatUpdate'][0])
    {
        return $this->chatUpdateAsyncWithHttpInfo($token, $channel, $ts, $as_user, $attachments, $blocks, $link_names, $parse, $text, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation chatUpdateAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel containing the message to be updated. (required)
     * @param  string $ts Timestamp of the message to be updated. (required)
     * @param  string $as_user Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field. (optional)
     * @param  string $blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field. (optional)
     * @param  string $link_names Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;. (optional)
     * @param  string $text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function chatUpdateAsyncWithHttpInfo($token, $channel, $ts, $as_user = null, $attachments = null, $blocks = null, $link_names = null, $parse = null, $text = null, string $contentType = self::contentTypes['chatUpdate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ChatUpdateSuccessSchema';
        $request = $this->chatUpdateRequest($token, $channel, $ts, $as_user, $attachments, $blocks, $link_names, $parse, $text, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'chatUpdate'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;chat:write&#x60; (required)
     * @param  string $channel Channel containing the message to be updated. (required)
     * @param  string $ts Timestamp of the message to be updated. (required)
     * @param  string $as_user Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. (optional)
     * @param  string $attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field. (optional)
     * @param  string $blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field. (optional)
     * @param  string $link_names Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;. (optional)
     * @param  string $parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;. (optional)
     * @param  string $text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['chatUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function chatUpdateRequest($token, $channel, $ts, $as_user = null, $attachments = null, $blocks = null, $link_names = null, $parse = null, $text = null, string $contentType = self::contentTypes['chatUpdate'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling chatUpdate'
            );
        }

        // verify the required parameter 'channel' is set
        if ($channel === null || (is_array($channel) && count($channel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel when calling chatUpdate'
            );
        }

        // verify the required parameter 'ts' is set
        if ($ts === null || (is_array($ts) && count($ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ts when calling chatUpdate'
            );
        }








        $resourcePath = '/chat.update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($as_user !== null) {
            $formParams['as_user'] = ObjectSerializer::toFormValue($as_user);
        }
        // form params
        if ($attachments !== null) {
            $formParams['attachments'] = ObjectSerializer::toFormValue($attachments);
        }
        // form params
        if ($blocks !== null) {
            $formParams['blocks'] = ObjectSerializer::toFormValue($blocks);
        }
        // form params
        if ($channel !== null) {
            $formParams['channel'] = ObjectSerializer::toFormValue($channel);
        }
        // form params
        if ($link_names !== null) {
            $formParams['link_names'] = ObjectSerializer::toFormValue($link_names);
        }
        // form params
        if ($parse !== null) {
            $formParams['parse'] = ObjectSerializer::toFormValue($parse);
        }
        // form params
        if ($text !== null) {
            $formParams['text'] = ObjectSerializer::toFormValue($text);
        }
        // form params
        if ($ts !== null) {
            $formParams['ts'] = ObjectSerializer::toFormValue($ts);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
