<?php
/**
 * FilesRemoteApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\slack;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * FilesRemoteApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class FilesRemoteApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'filesRemoteAdd' => [
            'application/x-www-form-urlencoded',
        ],
        'filesRemoteInfo' => [
            'application/json',
        ],
        'filesRemoteList' => [
            'application/json',
        ],
        'filesRemoteRemove' => [
            'application/x-www-form-urlencoded',
        ],
        'filesRemoteShare' => [
            'application/json',
        ],
        'filesRemoteUpdate' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation filesRemoteAdd
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $external_url URL of the remote file. (optional)
     * @param  string $filetype type of file (optional)
     * @param  string $indexable_file_contents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
     * @param  string $preview_image Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param  string $title Title of the file being shared. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function filesRemoteAdd($external_id = null, $external_url = null, $filetype = null, $indexable_file_contents = null, $preview_image = null, $title = null, $token = null, string $contentType = self::contentTypes['filesRemoteAdd'][0])
    {
        list($response) = $this->filesRemoteAddWithHttpInfo($external_id, $external_url, $filetype, $indexable_file_contents, $preview_image, $title, $token, $contentType);
        return $response;
    }

    /**
     * Operation filesRemoteAddWithHttpInfo
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $external_url URL of the remote file. (optional)
     * @param  string $filetype type of file (optional)
     * @param  string $indexable_file_contents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
     * @param  string $preview_image Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param  string $title Title of the file being shared. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function filesRemoteAddWithHttpInfo($external_id = null, $external_url = null, $filetype = null, $indexable_file_contents = null, $preview_image = null, $title = null, $token = null, string $contentType = self::contentTypes['filesRemoteAdd'][0])
    {
        $request = $this->filesRemoteAddRequest($external_id, $external_url, $filetype, $indexable_file_contents, $preview_image, $title, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation filesRemoteAddAsync
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $external_url URL of the remote file. (optional)
     * @param  string $filetype type of file (optional)
     * @param  string $indexable_file_contents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
     * @param  string $preview_image Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param  string $title Title of the file being shared. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filesRemoteAddAsync($external_id = null, $external_url = null, $filetype = null, $indexable_file_contents = null, $preview_image = null, $title = null, $token = null, string $contentType = self::contentTypes['filesRemoteAdd'][0])
    {
        return $this->filesRemoteAddAsyncWithHttpInfo($external_id, $external_url, $filetype, $indexable_file_contents, $preview_image, $title, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filesRemoteAddAsyncWithHttpInfo
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $external_url URL of the remote file. (optional)
     * @param  string $filetype type of file (optional)
     * @param  string $indexable_file_contents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
     * @param  string $preview_image Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param  string $title Title of the file being shared. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filesRemoteAddAsyncWithHttpInfo($external_id = null, $external_url = null, $filetype = null, $indexable_file_contents = null, $preview_image = null, $title = null, $token = null, string $contentType = self::contentTypes['filesRemoteAdd'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->filesRemoteAddRequest($external_id, $external_url, $filetype, $indexable_file_contents, $preview_image, $title, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filesRemoteAdd'
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $external_url URL of the remote file. (optional)
     * @param  string $filetype type of file (optional)
     * @param  string $indexable_file_contents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file. (optional)
     * @param  string $preview_image Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param  string $title Title of the file being shared. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function filesRemoteAddRequest($external_id = null, $external_url = null, $filetype = null, $indexable_file_contents = null, $preview_image = null, $title = null, $token = null, string $contentType = self::contentTypes['filesRemoteAdd'][0])
    {









        $resourcePath = '/files.remote.add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($external_id !== null) {
            $formParams['external_id'] = ObjectSerializer::toFormValue($external_id);
        }
        // form params
        if ($external_url !== null) {
            $formParams['external_url'] = ObjectSerializer::toFormValue($external_url);
        }
        // form params
        if ($filetype !== null) {
            $formParams['filetype'] = ObjectSerializer::toFormValue($filetype);
        }
        // form params
        if ($indexable_file_contents !== null) {
            $formParams['indexable_file_contents'] = ObjectSerializer::toFormValue($indexable_file_contents);
        }
        // form params
        if ($preview_image !== null) {
            $formParams['preview_image'] = ObjectSerializer::toFormValue($preview_image);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filesRemoteInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function filesRemoteInfo($token = null, $file = null, $external_id = null, string $contentType = self::contentTypes['filesRemoteInfo'][0])
    {
        list($response) = $this->filesRemoteInfoWithHttpInfo($token, $file, $external_id, $contentType);
        return $response;
    }

    /**
     * Operation filesRemoteInfoWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function filesRemoteInfoWithHttpInfo($token = null, $file = null, $external_id = null, string $contentType = self::contentTypes['filesRemoteInfo'][0])
    {
        $request = $this->filesRemoteInfoRequest($token, $file, $external_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation filesRemoteInfoAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filesRemoteInfoAsync($token = null, $file = null, $external_id = null, string $contentType = self::contentTypes['filesRemoteInfo'][0])
    {
        return $this->filesRemoteInfoAsyncWithHttpInfo($token, $file, $external_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filesRemoteInfoAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filesRemoteInfoAsyncWithHttpInfo($token = null, $file = null, $external_id = null, string $contentType = self::contentTypes['filesRemoteInfo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->filesRemoteInfoRequest($token, $file, $external_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filesRemoteInfo'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function filesRemoteInfoRequest($token = null, $file = null, $external_id = null, string $contentType = self::contentTypes['filesRemoteInfo'][0])
    {





        $resourcePath = '/files.remote.info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file,
            'file', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_id,
            'external_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filesRemoteList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param  string $channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param  float $ts_from Filter files created after this timestamp (inclusive). (optional)
     * @param  float $ts_to Filter files created before this timestamp (inclusive). (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  string $cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function filesRemoteList($token = null, $channel = null, $ts_from = null, $ts_to = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['filesRemoteList'][0])
    {
        list($response) = $this->filesRemoteListWithHttpInfo($token, $channel, $ts_from, $ts_to, $limit, $cursor, $contentType);
        return $response;
    }

    /**
     * Operation filesRemoteListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param  string $channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param  float $ts_from Filter files created after this timestamp (inclusive). (optional)
     * @param  float $ts_to Filter files created before this timestamp (inclusive). (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  string $cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function filesRemoteListWithHttpInfo($token = null, $channel = null, $ts_from = null, $ts_to = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['filesRemoteList'][0])
    {
        $request = $this->filesRemoteListRequest($token, $channel, $ts_from, $ts_to, $limit, $cursor, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation filesRemoteListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param  string $channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param  float $ts_from Filter files created after this timestamp (inclusive). (optional)
     * @param  float $ts_to Filter files created before this timestamp (inclusive). (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  string $cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filesRemoteListAsync($token = null, $channel = null, $ts_from = null, $ts_to = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['filesRemoteList'][0])
    {
        return $this->filesRemoteListAsyncWithHttpInfo($token, $channel, $ts_from, $ts_to, $limit, $cursor, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filesRemoteListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param  string $channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param  float $ts_from Filter files created after this timestamp (inclusive). (optional)
     * @param  float $ts_to Filter files created before this timestamp (inclusive). (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  string $cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filesRemoteListAsyncWithHttpInfo($token = null, $channel = null, $ts_from = null, $ts_to = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['filesRemoteList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->filesRemoteListRequest($token, $channel, $ts_from, $ts_to, $limit, $cursor, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filesRemoteList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:read&#x60; (optional)
     * @param  string $channel Filter files appearing in a specific channel, indicated by its ID. (optional)
     * @param  float $ts_from Filter files created after this timestamp (inclusive). (optional)
     * @param  float $ts_to Filter files created before this timestamp (inclusive). (optional)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  string $cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function filesRemoteListRequest($token = null, $channel = null, $ts_from = null, $ts_to = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['filesRemoteList'][0])
    {








        $resourcePath = '/files.remote.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ts_from,
            'ts_from', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ts_to,
            'ts_to', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filesRemoteRemove
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteRemove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function filesRemoteRemove($external_id = null, $file = null, $token = null, string $contentType = self::contentTypes['filesRemoteRemove'][0])
    {
        list($response) = $this->filesRemoteRemoveWithHttpInfo($external_id, $file, $token, $contentType);
        return $response;
    }

    /**
     * Operation filesRemoteRemoveWithHttpInfo
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteRemove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function filesRemoteRemoveWithHttpInfo($external_id = null, $file = null, $token = null, string $contentType = self::contentTypes['filesRemoteRemove'][0])
    {
        $request = $this->filesRemoteRemoveRequest($external_id, $file, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation filesRemoteRemoveAsync
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filesRemoteRemoveAsync($external_id = null, $file = null, $token = null, string $contentType = self::contentTypes['filesRemoteRemove'][0])
    {
        return $this->filesRemoteRemoveAsyncWithHttpInfo($external_id, $file, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filesRemoteRemoveAsyncWithHttpInfo
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filesRemoteRemoveAsyncWithHttpInfo($external_id = null, $file = null, $token = null, string $contentType = self::contentTypes['filesRemoteRemove'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->filesRemoteRemoveRequest($external_id, $file, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filesRemoteRemove'
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function filesRemoteRemoveRequest($external_id = null, $file = null, $token = null, string $contentType = self::contentTypes['filesRemoteRemove'][0])
    {





        $resourcePath = '/files.remote.remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($external_id !== null) {
            $formParams['external_id'] = ObjectSerializer::toFormValue($external_id);
        }
        // form params
        if ($file !== null) {
            $formParams['file'] = ObjectSerializer::toFormValue($file);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filesRemoteShare
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
     * @param  string $file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
     * @param  string $external_id The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
     * @param  string $channels Comma-separated list of channel IDs where the file will be shared. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteShare'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function filesRemoteShare($token = null, $file = null, $external_id = null, $channels = null, string $contentType = self::contentTypes['filesRemoteShare'][0])
    {
        list($response) = $this->filesRemoteShareWithHttpInfo($token, $file, $external_id, $channels, $contentType);
        return $response;
    }

    /**
     * Operation filesRemoteShareWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
     * @param  string $file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
     * @param  string $external_id The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
     * @param  string $channels Comma-separated list of channel IDs where the file will be shared. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteShare'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function filesRemoteShareWithHttpInfo($token = null, $file = null, $external_id = null, $channels = null, string $contentType = self::contentTypes['filesRemoteShare'][0])
    {
        $request = $this->filesRemoteShareRequest($token, $file, $external_id, $channels, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation filesRemoteShareAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
     * @param  string $file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
     * @param  string $external_id The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
     * @param  string $channels Comma-separated list of channel IDs where the file will be shared. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteShare'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filesRemoteShareAsync($token = null, $file = null, $external_id = null, $channels = null, string $contentType = self::contentTypes['filesRemoteShare'][0])
    {
        return $this->filesRemoteShareAsyncWithHttpInfo($token, $file, $external_id, $channels, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filesRemoteShareAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
     * @param  string $file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
     * @param  string $external_id The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
     * @param  string $channels Comma-separated list of channel IDs where the file will be shared. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteShare'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filesRemoteShareAsyncWithHttpInfo($token = null, $file = null, $external_id = null, $channels = null, string $contentType = self::contentTypes['filesRemoteShare'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->filesRemoteShareRequest($token, $file, $external_id, $channels, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filesRemoteShare'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:share&#x60; (optional)
     * @param  string $file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required. (optional)
     * @param  string $external_id The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required. (optional)
     * @param  string $channels Comma-separated list of channel IDs where the file will be shared. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteShare'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function filesRemoteShareRequest($token = null, $file = null, $external_id = null, $channels = null, string $contentType = self::contentTypes['filesRemoteShare'][0])
    {






        $resourcePath = '/files.remote.share';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $file,
            'file', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_id,
            'external_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channels,
            'channels', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation filesRemoteUpdate
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $external_url URL of the remote file. (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $filetype type of file (optional)
     * @param  string $indexable_file_contents File containing contents that can be used to improve searchability for the remote file. (optional)
     * @param  string $preview_image Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param  string $title Title of the file being shared. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function filesRemoteUpdate($external_id = null, $external_url = null, $file = null, $filetype = null, $indexable_file_contents = null, $preview_image = null, $title = null, $token = null, string $contentType = self::contentTypes['filesRemoteUpdate'][0])
    {
        list($response) = $this->filesRemoteUpdateWithHttpInfo($external_id, $external_url, $file, $filetype, $indexable_file_contents, $preview_image, $title, $token, $contentType);
        return $response;
    }

    /**
     * Operation filesRemoteUpdateWithHttpInfo
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $external_url URL of the remote file. (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $filetype type of file (optional)
     * @param  string $indexable_file_contents File containing contents that can be used to improve searchability for the remote file. (optional)
     * @param  string $preview_image Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param  string $title Title of the file being shared. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function filesRemoteUpdateWithHttpInfo($external_id = null, $external_url = null, $file = null, $filetype = null, $indexable_file_contents = null, $preview_image = null, $title = null, $token = null, string $contentType = self::contentTypes['filesRemoteUpdate'][0])
    {
        $request = $this->filesRemoteUpdateRequest($external_id, $external_url, $file, $filetype, $indexable_file_contents, $preview_image, $title, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation filesRemoteUpdateAsync
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $external_url URL of the remote file. (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $filetype type of file (optional)
     * @param  string $indexable_file_contents File containing contents that can be used to improve searchability for the remote file. (optional)
     * @param  string $preview_image Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param  string $title Title of the file being shared. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filesRemoteUpdateAsync($external_id = null, $external_url = null, $file = null, $filetype = null, $indexable_file_contents = null, $preview_image = null, $title = null, $token = null, string $contentType = self::contentTypes['filesRemoteUpdate'][0])
    {
        return $this->filesRemoteUpdateAsyncWithHttpInfo($external_id, $external_url, $file, $filetype, $indexable_file_contents, $preview_image, $title, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation filesRemoteUpdateAsyncWithHttpInfo
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $external_url URL of the remote file. (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $filetype type of file (optional)
     * @param  string $indexable_file_contents File containing contents that can be used to improve searchability for the remote file. (optional)
     * @param  string $preview_image Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param  string $title Title of the file being shared. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function filesRemoteUpdateAsyncWithHttpInfo($external_id = null, $external_url = null, $file = null, $filetype = null, $indexable_file_contents = null, $preview_image = null, $title = null, $token = null, string $contentType = self::contentTypes['filesRemoteUpdate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->filesRemoteUpdateRequest($external_id, $external_url, $file, $filetype, $indexable_file_contents, $preview_image, $title, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'filesRemoteUpdate'
     *
     * @param  string $external_id Creator defined GUID for the file. (optional)
     * @param  string $external_url URL of the remote file. (optional)
     * @param  string $file Specify a file by providing its ID. (optional)
     * @param  string $filetype type of file (optional)
     * @param  string $indexable_file_contents File containing contents that can be used to improve searchability for the remote file. (optional)
     * @param  string $preview_image Preview of the document via &#x60;multipart/form-data&#x60;. (optional)
     * @param  string $title Title of the file being shared. (optional)
     * @param  string $token Authentication token. Requires scope: &#x60;remote_files:write&#x60; (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['filesRemoteUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function filesRemoteUpdateRequest($external_id = null, $external_url = null, $file = null, $filetype = null, $indexable_file_contents = null, $preview_image = null, $title = null, $token = null, string $contentType = self::contentTypes['filesRemoteUpdate'][0])
    {










        $resourcePath = '/files.remote.update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($external_id !== null) {
            $formParams['external_id'] = ObjectSerializer::toFormValue($external_id);
        }
        // form params
        if ($external_url !== null) {
            $formParams['external_url'] = ObjectSerializer::toFormValue($external_url);
        }
        // form params
        if ($file !== null) {
            $formParams['file'] = ObjectSerializer::toFormValue($file);
        }
        // form params
        if ($filetype !== null) {
            $formParams['filetype'] = ObjectSerializer::toFormValue($filetype);
        }
        // form params
        if ($indexable_file_contents !== null) {
            $formParams['indexable_file_contents'] = ObjectSerializer::toFormValue($indexable_file_contents);
        }
        // form params
        if ($preview_image !== null) {
            $formParams['preview_image'] = ObjectSerializer::toFormValue($preview_image);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
