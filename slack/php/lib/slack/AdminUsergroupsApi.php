<?php
/**
 * AdminUsergroupsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\slack;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AdminUsergroupsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdminUsergroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'adminUsergroupsAddChannels' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsergroupsAddTeams' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsergroupsListChannels' => [
            'application/json',
        ],
        'adminUsergroupsRemoveChannels' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminUsergroupsAddChannels
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma separated string of channel IDs. (required)
     * @param  string $usergroup_id ID of the IDP group to add default channels for. (required)
     * @param  string $team_id The workspace to add default channels in. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsergroupsAddChannels($token, $channel_ids, $usergroup_id, $team_id = null, string $contentType = self::contentTypes['adminUsergroupsAddChannels'][0])
    {
        list($response) = $this->adminUsergroupsAddChannelsWithHttpInfo($token, $channel_ids, $usergroup_id, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminUsergroupsAddChannelsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma separated string of channel IDs. (required)
     * @param  string $usergroup_id ID of the IDP group to add default channels for. (required)
     * @param  string $team_id The workspace to add default channels in. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsergroupsAddChannelsWithHttpInfo($token, $channel_ids, $usergroup_id, $team_id = null, string $contentType = self::contentTypes['adminUsergroupsAddChannels'][0])
    {
        $request = $this->adminUsergroupsAddChannelsRequest($token, $channel_ids, $usergroup_id, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsergroupsAddChannelsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma separated string of channel IDs. (required)
     * @param  string $usergroup_id ID of the IDP group to add default channels for. (required)
     * @param  string $team_id The workspace to add default channels in. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsAddChannelsAsync($token, $channel_ids, $usergroup_id, $team_id = null, string $contentType = self::contentTypes['adminUsergroupsAddChannels'][0])
    {
        return $this->adminUsergroupsAddChannelsAsyncWithHttpInfo($token, $channel_ids, $usergroup_id, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsergroupsAddChannelsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma separated string of channel IDs. (required)
     * @param  string $usergroup_id ID of the IDP group to add default channels for. (required)
     * @param  string $team_id The workspace to add default channels in. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsAddChannelsAsyncWithHttpInfo($token, $channel_ids, $usergroup_id, $team_id = null, string $contentType = self::contentTypes['adminUsergroupsAddChannels'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsergroupsAddChannelsRequest($token, $channel_ids, $usergroup_id, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsergroupsAddChannels'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma separated string of channel IDs. (required)
     * @param  string $usergroup_id ID of the IDP group to add default channels for. (required)
     * @param  string $team_id The workspace to add default channels in. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsergroupsAddChannelsRequest($token, $channel_ids, $usergroup_id, $team_id = null, string $contentType = self::contentTypes['adminUsergroupsAddChannels'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsergroupsAddChannels'
            );
        }

        // verify the required parameter 'channel_ids' is set
        if ($channel_ids === null || (is_array($channel_ids) && count($channel_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_ids when calling adminUsergroupsAddChannels'
            );
        }

        // verify the required parameter 'usergroup_id' is set
        if ($usergroup_id === null || (is_array($usergroup_id) && count($usergroup_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroup_id when calling adminUsergroupsAddChannels'
            );
        }



        $resourcePath = '/admin.usergroups.addChannels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_ids !== null) {
            $formParams['channel_ids'] = ObjectSerializer::toFormValue($channel_ids);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }
        // form params
        if ($usergroup_id !== null) {
            $formParams['usergroup_id'] = ObjectSerializer::toFormValue($usergroup_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsergroupsAddTeams
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_ids A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param  string $usergroup_id An encoded usergroup (IDP Group) ID. (required)
     * @param  bool $auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddTeams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsergroupsAddTeams($token, $team_ids, $usergroup_id, $auto_provision = null, string $contentType = self::contentTypes['adminUsergroupsAddTeams'][0])
    {
        list($response) = $this->adminUsergroupsAddTeamsWithHttpInfo($token, $team_ids, $usergroup_id, $auto_provision, $contentType);
        return $response;
    }

    /**
     * Operation adminUsergroupsAddTeamsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_ids A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param  string $usergroup_id An encoded usergroup (IDP Group) ID. (required)
     * @param  bool $auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddTeams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsergroupsAddTeamsWithHttpInfo($token, $team_ids, $usergroup_id, $auto_provision = null, string $contentType = self::contentTypes['adminUsergroupsAddTeams'][0])
    {
        $request = $this->adminUsergroupsAddTeamsRequest($token, $team_ids, $usergroup_id, $auto_provision, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsergroupsAddTeamsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_ids A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param  string $usergroup_id An encoded usergroup (IDP Group) ID. (required)
     * @param  bool $auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsAddTeamsAsync($token, $team_ids, $usergroup_id, $auto_provision = null, string $contentType = self::contentTypes['adminUsergroupsAddTeams'][0])
    {
        return $this->adminUsergroupsAddTeamsAsyncWithHttpInfo($token, $team_ids, $usergroup_id, $auto_provision, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsergroupsAddTeamsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_ids A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param  string $usergroup_id An encoded usergroup (IDP Group) ID. (required)
     * @param  bool $auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsAddTeamsAsyncWithHttpInfo($token, $team_ids, $usergroup_id, $auto_provision = null, string $contentType = self::contentTypes['adminUsergroupsAddTeams'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsergroupsAddTeamsRequest($token, $team_ids, $usergroup_id, $auto_provision, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsergroupsAddTeams'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_ids A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param  string $usergroup_id An encoded usergroup (IDP Group) ID. (required)
     * @param  bool $auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsergroupsAddTeamsRequest($token, $team_ids, $usergroup_id, $auto_provision = null, string $contentType = self::contentTypes['adminUsergroupsAddTeams'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsergroupsAddTeams'
            );
        }

        // verify the required parameter 'team_ids' is set
        if ($team_ids === null || (is_array($team_ids) && count($team_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_ids when calling adminUsergroupsAddTeams'
            );
        }

        // verify the required parameter 'usergroup_id' is set
        if ($usergroup_id === null || (is_array($usergroup_id) && count($usergroup_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroup_id when calling adminUsergroupsAddTeams'
            );
        }



        $resourcePath = '/admin.usergroups.addTeams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($auto_provision !== null) {
            $formParams['auto_provision'] = ObjectSerializer::toFormValue($auto_provision);
        }
        // form params
        if ($team_ids !== null) {
            $formParams['team_ids'] = ObjectSerializer::toFormValue($team_ids);
        }
        // form params
        if ($usergroup_id !== null) {
            $formParams['usergroup_id'] = ObjectSerializer::toFormValue($usergroup_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsergroupsListChannels
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param  string $usergroup_id ID of the IDP group to list default channels for. (required)
     * @param  string $team_id ID of the the workspace. (optional)
     * @param  bool $include_num_members Flag to include or exclude the count of members per channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsListChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsergroupsListChannels($token, $usergroup_id, $team_id = null, $include_num_members = null, string $contentType = self::contentTypes['adminUsergroupsListChannels'][0])
    {
        list($response) = $this->adminUsergroupsListChannelsWithHttpInfo($token, $usergroup_id, $team_id, $include_num_members, $contentType);
        return $response;
    }

    /**
     * Operation adminUsergroupsListChannelsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param  string $usergroup_id ID of the IDP group to list default channels for. (required)
     * @param  string $team_id ID of the the workspace. (optional)
     * @param  bool $include_num_members Flag to include or exclude the count of members per channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsListChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsergroupsListChannelsWithHttpInfo($token, $usergroup_id, $team_id = null, $include_num_members = null, string $contentType = self::contentTypes['adminUsergroupsListChannels'][0])
    {
        $request = $this->adminUsergroupsListChannelsRequest($token, $usergroup_id, $team_id, $include_num_members, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsergroupsListChannelsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param  string $usergroup_id ID of the IDP group to list default channels for. (required)
     * @param  string $team_id ID of the the workspace. (optional)
     * @param  bool $include_num_members Flag to include or exclude the count of members per channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsListChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsListChannelsAsync($token, $usergroup_id, $team_id = null, $include_num_members = null, string $contentType = self::contentTypes['adminUsergroupsListChannels'][0])
    {
        return $this->adminUsergroupsListChannelsAsyncWithHttpInfo($token, $usergroup_id, $team_id, $include_num_members, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsergroupsListChannelsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param  string $usergroup_id ID of the IDP group to list default channels for. (required)
     * @param  string $team_id ID of the the workspace. (optional)
     * @param  bool $include_num_members Flag to include or exclude the count of members per channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsListChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsListChannelsAsyncWithHttpInfo($token, $usergroup_id, $team_id = null, $include_num_members = null, string $contentType = self::contentTypes['adminUsergroupsListChannels'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsergroupsListChannelsRequest($token, $usergroup_id, $team_id, $include_num_members, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsergroupsListChannels'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param  string $usergroup_id ID of the IDP group to list default channels for. (required)
     * @param  string $team_id ID of the the workspace. (optional)
     * @param  bool $include_num_members Flag to include or exclude the count of members per channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsListChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsergroupsListChannelsRequest($token, $usergroup_id, $team_id = null, $include_num_members = null, string $contentType = self::contentTypes['adminUsergroupsListChannels'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsergroupsListChannels'
            );
        }

        // verify the required parameter 'usergroup_id' is set
        if ($usergroup_id === null || (is_array($usergroup_id) && count($usergroup_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroup_id when calling adminUsergroupsListChannels'
            );
        }




        $resourcePath = '/admin.usergroups.listChannels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $usergroup_id,
            'usergroup_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_num_members,
            'include_num_members', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsergroupsRemoveChannels
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma-separated string of channel IDs (required)
     * @param  string $usergroup_id ID of the IDP Group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsRemoveChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsergroupsRemoveChannels($token, $channel_ids, $usergroup_id, string $contentType = self::contentTypes['adminUsergroupsRemoveChannels'][0])
    {
        list($response) = $this->adminUsergroupsRemoveChannelsWithHttpInfo($token, $channel_ids, $usergroup_id, $contentType);
        return $response;
    }

    /**
     * Operation adminUsergroupsRemoveChannelsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma-separated string of channel IDs (required)
     * @param  string $usergroup_id ID of the IDP Group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsRemoveChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsergroupsRemoveChannelsWithHttpInfo($token, $channel_ids, $usergroup_id, string $contentType = self::contentTypes['adminUsergroupsRemoveChannels'][0])
    {
        $request = $this->adminUsergroupsRemoveChannelsRequest($token, $channel_ids, $usergroup_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsergroupsRemoveChannelsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma-separated string of channel IDs (required)
     * @param  string $usergroup_id ID of the IDP Group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsRemoveChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsRemoveChannelsAsync($token, $channel_ids, $usergroup_id, string $contentType = self::contentTypes['adminUsergroupsRemoveChannels'][0])
    {
        return $this->adminUsergroupsRemoveChannelsAsyncWithHttpInfo($token, $channel_ids, $usergroup_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsergroupsRemoveChannelsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma-separated string of channel IDs (required)
     * @param  string $usergroup_id ID of the IDP Group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsRemoveChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsRemoveChannelsAsyncWithHttpInfo($token, $channel_ids, $usergroup_id, string $contentType = self::contentTypes['adminUsergroupsRemoveChannels'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsergroupsRemoveChannelsRequest($token, $channel_ids, $usergroup_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsergroupsRemoveChannels'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma-separated string of channel IDs (required)
     * @param  string $usergroup_id ID of the IDP Group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsRemoveChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsergroupsRemoveChannelsRequest($token, $channel_ids, $usergroup_id, string $contentType = self::contentTypes['adminUsergroupsRemoveChannels'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsergroupsRemoveChannels'
            );
        }

        // verify the required parameter 'channel_ids' is set
        if ($channel_ids === null || (is_array($channel_ids) && count($channel_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_ids when calling adminUsergroupsRemoveChannels'
            );
        }

        // verify the required parameter 'usergroup_id' is set
        if ($usergroup_id === null || (is_array($usergroup_id) && count($usergroup_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroup_id when calling adminUsergroupsRemoveChannels'
            );
        }


        $resourcePath = '/admin.usergroups.removeChannels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_ids !== null) {
            $formParams['channel_ids'] = ObjectSerializer::toFormValue($channel_ids);
        }
        // form params
        if ($usergroup_id !== null) {
            $formParams['usergroup_id'] = ObjectSerializer::toFormValue($usergroup_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
