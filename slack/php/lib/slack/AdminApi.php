<?php
/**
 * AdminApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\slack;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AdminApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdminApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'adminAppsApprove' => [
            'application/x-www-form-urlencoded',
        ],
        'adminAppsApprovedList' => [
            'application/json',
        ],
        'adminAppsRequestsList' => [
            'application/json',
        ],
        'adminAppsRestrict' => [
            'application/x-www-form-urlencoded',
        ],
        'adminAppsRestrictedList' => [
            'application/json',
        ],
        'adminConversationsArchive' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsConvertToPrivate' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsCreate' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsDelete' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsDisconnectShared' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsEkmListOriginalConnectedChannelInfo' => [
            'application/json',
        ],
        'adminConversationsGetConversationPrefs' => [
            'application/json',
        ],
        'adminConversationsGetTeams' => [
            'application/json',
        ],
        'adminConversationsInvite' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsRename' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsRestrictAccessAddGroup' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsRestrictAccessListGroups' => [
            'application/json',
        ],
        'adminConversationsRestrictAccessRemoveGroup' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsSearch' => [
            'application/json',
        ],
        'adminConversationsSetConversationPrefs' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsSetTeams' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsUnarchive' => [
            'application/x-www-form-urlencoded',
        ],
        'adminEmojiAdd' => [
            'application/x-www-form-urlencoded',
        ],
        'adminEmojiAddAlias' => [
            'application/x-www-form-urlencoded',
        ],
        'adminEmojiList' => [
            'application/json',
        ],
        'adminEmojiRemove' => [
            'application/x-www-form-urlencoded',
        ],
        'adminEmojiRename' => [
            'application/x-www-form-urlencoded',
        ],
        'adminInviteRequestsApprove' => [
            'application/x-www-form-urlencoded',
        ],
        'adminInviteRequestsApprovedList' => [
            'application/json',
        ],
        'adminInviteRequestsDeniedList' => [
            'application/json',
        ],
        'adminInviteRequestsDeny' => [
            'application/x-www-form-urlencoded',
        ],
        'adminInviteRequestsList' => [
            'application/json',
        ],
        'adminTeamsAdminsList' => [
            'application/json',
        ],
        'adminTeamsCreate' => [
            'application/x-www-form-urlencoded',
        ],
        'adminTeamsList' => [
            'application/json',
        ],
        'adminTeamsOwnersList' => [
            'application/json',
        ],
        'adminTeamsSettingsInfo' => [
            'application/json',
        ],
        'adminTeamsSettingsSetDefaultChannels' => [
            'application/x-www-form-urlencoded',
        ],
        'adminTeamsSettingsSetDescription' => [
            'application/x-www-form-urlencoded',
        ],
        'adminTeamsSettingsSetDiscoverability' => [
            'application/x-www-form-urlencoded',
        ],
        'adminTeamsSettingsSetIcon' => [
            'application/x-www-form-urlencoded',
        ],
        'adminTeamsSettingsSetName' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsergroupsAddChannels' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsergroupsAddTeams' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsergroupsListChannels' => [
            'application/json',
        ],
        'adminUsergroupsRemoveChannels' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsersAssign' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsersInvite' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsersList' => [
            'application/json',
        ],
        'adminUsersRemove' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsersSessionInvalidate' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsersSessionReset' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsersSetAdmin' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsersSetExpiration' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsersSetOwner' => [
            'application/x-www-form-urlencoded',
        ],
        'adminUsersSetRegular' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminAppsApprove
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:write&#x60; (required)
     * @param  string $app_id The id of the app to approve. (optional)
     * @param  string $request_id The id of the request to approve. (optional)
     * @param  string $team_id team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsApprove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminAppsApprove($token, $app_id = null, $request_id = null, $team_id = null, string $contentType = self::contentTypes['adminAppsApprove'][0])
    {
        list($response) = $this->adminAppsApproveWithHttpInfo($token, $app_id, $request_id, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminAppsApproveWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:write&#x60; (required)
     * @param  string $app_id The id of the app to approve. (optional)
     * @param  string $request_id The id of the request to approve. (optional)
     * @param  string $team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsApprove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAppsApproveWithHttpInfo($token, $app_id = null, $request_id = null, $team_id = null, string $contentType = self::contentTypes['adminAppsApprove'][0])
    {
        $request = $this->adminAppsApproveRequest($token, $app_id, $request_id, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAppsApproveAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:write&#x60; (required)
     * @param  string $app_id The id of the app to approve. (optional)
     * @param  string $request_id The id of the request to approve. (optional)
     * @param  string $team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAppsApproveAsync($token, $app_id = null, $request_id = null, $team_id = null, string $contentType = self::contentTypes['adminAppsApprove'][0])
    {
        return $this->adminAppsApproveAsyncWithHttpInfo($token, $app_id, $request_id, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAppsApproveAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:write&#x60; (required)
     * @param  string $app_id The id of the app to approve. (optional)
     * @param  string $request_id The id of the request to approve. (optional)
     * @param  string $team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAppsApproveAsyncWithHttpInfo($token, $app_id = null, $request_id = null, $team_id = null, string $contentType = self::contentTypes['adminAppsApprove'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminAppsApproveRequest($token, $app_id, $request_id, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAppsApprove'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:write&#x60; (required)
     * @param  string $app_id The id of the app to approve. (optional)
     * @param  string $request_id The id of the request to approve. (optional)
     * @param  string $team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminAppsApproveRequest($token, $app_id = null, $request_id = null, $team_id = null, string $contentType = self::contentTypes['adminAppsApprove'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminAppsApprove'
            );
        }





        $resourcePath = '/admin.apps.approve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($app_id !== null) {
            $formParams['app_id'] = ObjectSerializer::toFormValue($app_id);
        }
        // form params
        if ($request_id !== null) {
            $formParams['request_id'] = ObjectSerializer::toFormValue($request_id);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAppsApprovedList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id team_id (optional)
     * @param  string $enterprise_id enterprise_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsApprovedList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminAppsApprovedList($token, $limit = null, $cursor = null, $team_id = null, $enterprise_id = null, string $contentType = self::contentTypes['adminAppsApprovedList'][0])
    {
        list($response) = $this->adminAppsApprovedListWithHttpInfo($token, $limit, $cursor, $team_id, $enterprise_id, $contentType);
        return $response;
    }

    /**
     * Operation adminAppsApprovedListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id (optional)
     * @param  string $enterprise_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsApprovedList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAppsApprovedListWithHttpInfo($token, $limit = null, $cursor = null, $team_id = null, $enterprise_id = null, string $contentType = self::contentTypes['adminAppsApprovedList'][0])
    {
        $request = $this->adminAppsApprovedListRequest($token, $limit, $cursor, $team_id, $enterprise_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAppsApprovedListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id (optional)
     * @param  string $enterprise_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsApprovedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAppsApprovedListAsync($token, $limit = null, $cursor = null, $team_id = null, $enterprise_id = null, string $contentType = self::contentTypes['adminAppsApprovedList'][0])
    {
        return $this->adminAppsApprovedListAsyncWithHttpInfo($token, $limit, $cursor, $team_id, $enterprise_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAppsApprovedListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id (optional)
     * @param  string $enterprise_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsApprovedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAppsApprovedListAsyncWithHttpInfo($token, $limit = null, $cursor = null, $team_id = null, $enterprise_id = null, string $contentType = self::contentTypes['adminAppsApprovedList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminAppsApprovedListRequest($token, $limit, $cursor, $team_id, $enterprise_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAppsApprovedList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id (optional)
     * @param  string $enterprise_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsApprovedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminAppsApprovedListRequest($token, $limit = null, $cursor = null, $team_id = null, $enterprise_id = null, string $contentType = self::contentTypes['adminAppsApprovedList'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminAppsApprovedList'
            );
        }






        $resourcePath = '/admin.apps.approved.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enterprise_id,
            'enterprise_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAppsRequestsList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRequestsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminAppsRequestsList($token, $limit = null, $cursor = null, $team_id = null, string $contentType = self::contentTypes['adminAppsRequestsList'][0])
    {
        list($response) = $this->adminAppsRequestsListWithHttpInfo($token, $limit, $cursor, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminAppsRequestsListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRequestsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAppsRequestsListWithHttpInfo($token, $limit = null, $cursor = null, $team_id = null, string $contentType = self::contentTypes['adminAppsRequestsList'][0])
    {
        $request = $this->adminAppsRequestsListRequest($token, $limit, $cursor, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAppsRequestsListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRequestsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAppsRequestsListAsync($token, $limit = null, $cursor = null, $team_id = null, string $contentType = self::contentTypes['adminAppsRequestsList'][0])
    {
        return $this->adminAppsRequestsListAsyncWithHttpInfo($token, $limit, $cursor, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAppsRequestsListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRequestsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAppsRequestsListAsyncWithHttpInfo($token, $limit = null, $cursor = null, $team_id = null, string $contentType = self::contentTypes['adminAppsRequestsList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminAppsRequestsListRequest($token, $limit, $cursor, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAppsRequestsList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRequestsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminAppsRequestsListRequest($token, $limit = null, $cursor = null, $team_id = null, string $contentType = self::contentTypes['adminAppsRequestsList'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminAppsRequestsList'
            );
        }





        $resourcePath = '/admin.apps.requests.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAppsRestrict
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:write&#x60; (required)
     * @param  string $app_id The id of the app to restrict. (optional)
     * @param  string $request_id The id of the request to restrict. (optional)
     * @param  string $team_id team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRestrict'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminAppsRestrict($token, $app_id = null, $request_id = null, $team_id = null, string $contentType = self::contentTypes['adminAppsRestrict'][0])
    {
        list($response) = $this->adminAppsRestrictWithHttpInfo($token, $app_id, $request_id, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminAppsRestrictWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:write&#x60; (required)
     * @param  string $app_id The id of the app to restrict. (optional)
     * @param  string $request_id The id of the request to restrict. (optional)
     * @param  string $team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRestrict'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAppsRestrictWithHttpInfo($token, $app_id = null, $request_id = null, $team_id = null, string $contentType = self::contentTypes['adminAppsRestrict'][0])
    {
        $request = $this->adminAppsRestrictRequest($token, $app_id, $request_id, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAppsRestrictAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:write&#x60; (required)
     * @param  string $app_id The id of the app to restrict. (optional)
     * @param  string $request_id The id of the request to restrict. (optional)
     * @param  string $team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRestrict'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAppsRestrictAsync($token, $app_id = null, $request_id = null, $team_id = null, string $contentType = self::contentTypes['adminAppsRestrict'][0])
    {
        return $this->adminAppsRestrictAsyncWithHttpInfo($token, $app_id, $request_id, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAppsRestrictAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:write&#x60; (required)
     * @param  string $app_id The id of the app to restrict. (optional)
     * @param  string $request_id The id of the request to restrict. (optional)
     * @param  string $team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRestrict'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAppsRestrictAsyncWithHttpInfo($token, $app_id = null, $request_id = null, $team_id = null, string $contentType = self::contentTypes['adminAppsRestrict'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminAppsRestrictRequest($token, $app_id, $request_id, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAppsRestrict'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:write&#x60; (required)
     * @param  string $app_id The id of the app to restrict. (optional)
     * @param  string $request_id The id of the request to restrict. (optional)
     * @param  string $team_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRestrict'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminAppsRestrictRequest($token, $app_id = null, $request_id = null, $team_id = null, string $contentType = self::contentTypes['adminAppsRestrict'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminAppsRestrict'
            );
        }





        $resourcePath = '/admin.apps.restrict';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($app_id !== null) {
            $formParams['app_id'] = ObjectSerializer::toFormValue($app_id);
        }
        // form params
        if ($request_id !== null) {
            $formParams['request_id'] = ObjectSerializer::toFormValue($request_id);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminAppsRestrictedList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id team_id (optional)
     * @param  string $enterprise_id enterprise_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRestrictedList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminAppsRestrictedList($token, $limit = null, $cursor = null, $team_id = null, $enterprise_id = null, string $contentType = self::contentTypes['adminAppsRestrictedList'][0])
    {
        list($response) = $this->adminAppsRestrictedListWithHttpInfo($token, $limit, $cursor, $team_id, $enterprise_id, $contentType);
        return $response;
    }

    /**
     * Operation adminAppsRestrictedListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id (optional)
     * @param  string $enterprise_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRestrictedList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminAppsRestrictedListWithHttpInfo($token, $limit = null, $cursor = null, $team_id = null, $enterprise_id = null, string $contentType = self::contentTypes['adminAppsRestrictedList'][0])
    {
        $request = $this->adminAppsRestrictedListRequest($token, $limit, $cursor, $team_id, $enterprise_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminAppsRestrictedListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id (optional)
     * @param  string $enterprise_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRestrictedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAppsRestrictedListAsync($token, $limit = null, $cursor = null, $team_id = null, $enterprise_id = null, string $contentType = self::contentTypes['adminAppsRestrictedList'][0])
    {
        return $this->adminAppsRestrictedListAsyncWithHttpInfo($token, $limit, $cursor, $team_id, $enterprise_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminAppsRestrictedListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id (optional)
     * @param  string $enterprise_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRestrictedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminAppsRestrictedListAsyncWithHttpInfo($token, $limit = null, $cursor = null, $team_id = null, $enterprise_id = null, string $contentType = self::contentTypes['adminAppsRestrictedList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminAppsRestrictedListRequest($token, $limit, $cursor, $team_id, $enterprise_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminAppsRestrictedList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.apps:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  string $team_id (optional)
     * @param  string $enterprise_id (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminAppsRestrictedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminAppsRestrictedListRequest($token, $limit = null, $cursor = null, $team_id = null, $enterprise_id = null, string $contentType = self::contentTypes['adminAppsRestrictedList'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminAppsRestrictedList'
            );
        }






        $resourcePath = '/admin.apps.restricted.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $enterprise_id,
            'enterprise_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsArchive
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsArchive'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsArchiveSchema|\OpenAPI\Client\Model\AdminConversationsArchiveErrorSchema
     */
    public function adminConversationsArchive($token, $channel_id, string $contentType = self::contentTypes['adminConversationsArchive'][0])
    {
        list($response) = $this->adminConversationsArchiveWithHttpInfo($token, $channel_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsArchiveWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsArchive'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsArchiveSchema|\OpenAPI\Client\Model\AdminConversationsArchiveErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsArchiveWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsArchive'][0])
    {
        $request = $this->adminConversationsArchiveRequest($token, $channel_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsArchiveSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsArchiveSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsArchiveSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsArchiveErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsArchiveErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsArchiveErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsArchiveSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsArchiveSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsArchiveErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsArchiveAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsArchiveAsync($token, $channel_id, string $contentType = self::contentTypes['adminConversationsArchive'][0])
    {
        return $this->adminConversationsArchiveAsyncWithHttpInfo($token, $channel_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsArchiveAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsArchiveAsyncWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsArchive'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsArchiveSchema';
        $request = $this->adminConversationsArchiveRequest($token, $channel_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsArchive'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsArchiveRequest($token, $channel_id, string $contentType = self::contentTypes['adminConversationsArchive'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsArchive'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsArchive'
            );
        }


        $resourcePath = '/admin.conversations.archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsConvertToPrivate
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to convert to private. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsConvertToPrivate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema|\OpenAPI\Client\Model\AdminConversationsConvertToPrivateErrorSchema
     */
    public function adminConversationsConvertToPrivate($token, $channel_id, string $contentType = self::contentTypes['adminConversationsConvertToPrivate'][0])
    {
        list($response) = $this->adminConversationsConvertToPrivateWithHttpInfo($token, $channel_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsConvertToPrivateWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to convert to private. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsConvertToPrivate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema|\OpenAPI\Client\Model\AdminConversationsConvertToPrivateErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsConvertToPrivateWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsConvertToPrivate'][0])
    {
        $request = $this->adminConversationsConvertToPrivateRequest($token, $channel_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsConvertToPrivateErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsConvertToPrivateErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsConvertToPrivateErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsConvertToPrivateErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsConvertToPrivateAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to convert to private. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsConvertToPrivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsConvertToPrivateAsync($token, $channel_id, string $contentType = self::contentTypes['adminConversationsConvertToPrivate'][0])
    {
        return $this->adminConversationsConvertToPrivateAsyncWithHttpInfo($token, $channel_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsConvertToPrivateAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to convert to private. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsConvertToPrivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsConvertToPrivateAsyncWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsConvertToPrivate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema';
        $request = $this->adminConversationsConvertToPrivateRequest($token, $channel_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsConvertToPrivate'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to convert to private. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsConvertToPrivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsConvertToPrivateRequest($token, $channel_id, string $contentType = self::contentTypes['adminConversationsConvertToPrivate'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsConvertToPrivate'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsConvertToPrivate'
            );
        }


        $resourcePath = '/admin.conversations.convertToPrivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsCreate
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  bool $is_private When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param  string $name Name of the public or private channel to create. (required)
     * @param  string $description Description of the public or private channel to create. (optional)
     * @param  bool $org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param  string $team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsCreateSchema|\OpenAPI\Client\Model\AdminConversationsCreateErrorSchema
     */
    public function adminConversationsCreate($token, $is_private, $name, $description = null, $org_wide = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsCreate'][0])
    {
        list($response) = $this->adminConversationsCreateWithHttpInfo($token, $is_private, $name, $description, $org_wide, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsCreateWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  bool $is_private When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param  string $name Name of the public or private channel to create. (required)
     * @param  string $description Description of the public or private channel to create. (optional)
     * @param  bool $org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param  string $team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsCreateSchema|\OpenAPI\Client\Model\AdminConversationsCreateErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsCreateWithHttpInfo($token, $is_private, $name, $description = null, $org_wide = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsCreate'][0])
    {
        $request = $this->adminConversationsCreateRequest($token, $is_private, $name, $description, $org_wide, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsCreateSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsCreateSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsCreateSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsCreateErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsCreateErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsCreateErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsCreateSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsCreateSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsCreateErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsCreateAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  bool $is_private When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param  string $name Name of the public or private channel to create. (required)
     * @param  string $description Description of the public or private channel to create. (optional)
     * @param  bool $org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param  string $team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsCreateAsync($token, $is_private, $name, $description = null, $org_wide = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsCreate'][0])
    {
        return $this->adminConversationsCreateAsyncWithHttpInfo($token, $is_private, $name, $description, $org_wide, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsCreateAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  bool $is_private When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param  string $name Name of the public or private channel to create. (required)
     * @param  string $description Description of the public or private channel to create. (optional)
     * @param  bool $org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param  string $team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsCreateAsyncWithHttpInfo($token, $is_private, $name, $description = null, $org_wide = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsCreate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsCreateSchema';
        $request = $this->adminConversationsCreateRequest($token, $is_private, $name, $description, $org_wide, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsCreate'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  bool $is_private When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param  string $name Name of the public or private channel to create. (required)
     * @param  string $description Description of the public or private channel to create. (optional)
     * @param  bool $org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param  string $team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsCreateRequest($token, $is_private, $name, $description = null, $org_wide = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsCreate'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsCreate'
            );
        }

        // verify the required parameter 'is_private' is set
        if ($is_private === null || (is_array($is_private) && count($is_private) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_private when calling adminConversationsCreate'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling adminConversationsCreate'
            );
        }





        $resourcePath = '/admin.conversations.create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($is_private !== null) {
            $formParams['is_private'] = ObjectSerializer::toFormValue($is_private);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($org_wide !== null) {
            $formParams['org_wide'] = ObjectSerializer::toFormValue($org_wide);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsDelete
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsDeleteSchema|\OpenAPI\Client\Model\AdminConversationsDeleteErrorSchema
     */
    public function adminConversationsDelete($token, $channel_id, string $contentType = self::contentTypes['adminConversationsDelete'][0])
    {
        list($response) = $this->adminConversationsDeleteWithHttpInfo($token, $channel_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsDeleteWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsDeleteSchema|\OpenAPI\Client\Model\AdminConversationsDeleteErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsDeleteWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsDelete'][0])
    {
        $request = $this->adminConversationsDeleteRequest($token, $channel_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsDeleteSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsDeleteSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsDeleteSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsDeleteErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsDeleteErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsDeleteErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsDeleteSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsDeleteSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsDeleteErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsDeleteAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsDeleteAsync($token, $channel_id, string $contentType = self::contentTypes['adminConversationsDelete'][0])
    {
        return $this->adminConversationsDeleteAsyncWithHttpInfo($token, $channel_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsDeleteAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsDeleteAsyncWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsDeleteSchema';
        $request = $this->adminConversationsDeleteRequest($token, $channel_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsDelete'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsDeleteRequest($token, $channel_id, string $contentType = self::contentTypes['adminConversationsDelete'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsDelete'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsDelete'
            );
        }


        $resourcePath = '/admin.conversations.delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsDisconnectShared
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to be disconnected from some workspaces. (required)
     * @param  string $leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDisconnectShared'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsRenameSchema|\OpenAPI\Client\Model\AdminConversationsDisconnectSharedErrorSchema
     */
    public function adminConversationsDisconnectShared($token, $channel_id, $leaving_team_ids = null, string $contentType = self::contentTypes['adminConversationsDisconnectShared'][0])
    {
        list($response) = $this->adminConversationsDisconnectSharedWithHttpInfo($token, $channel_id, $leaving_team_ids, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsDisconnectSharedWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to be disconnected from some workspaces. (required)
     * @param  string $leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDisconnectShared'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsRenameSchema|\OpenAPI\Client\Model\AdminConversationsDisconnectSharedErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsDisconnectSharedWithHttpInfo($token, $channel_id, $leaving_team_ids = null, string $contentType = self::contentTypes['adminConversationsDisconnectShared'][0])
    {
        $request = $this->adminConversationsDisconnectSharedRequest($token, $channel_id, $leaving_team_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsRenameSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsRenameSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsRenameSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsDisconnectSharedErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsDisconnectSharedErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsDisconnectSharedErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsRenameSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsRenameSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsDisconnectSharedErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsDisconnectSharedAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to be disconnected from some workspaces. (required)
     * @param  string $leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDisconnectShared'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsDisconnectSharedAsync($token, $channel_id, $leaving_team_ids = null, string $contentType = self::contentTypes['adminConversationsDisconnectShared'][0])
    {
        return $this->adminConversationsDisconnectSharedAsyncWithHttpInfo($token, $channel_id, $leaving_team_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsDisconnectSharedAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to be disconnected from some workspaces. (required)
     * @param  string $leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDisconnectShared'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsDisconnectSharedAsyncWithHttpInfo($token, $channel_id, $leaving_team_ids = null, string $contentType = self::contentTypes['adminConversationsDisconnectShared'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsRenameSchema';
        $request = $this->adminConversationsDisconnectSharedRequest($token, $channel_id, $leaving_team_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsDisconnectShared'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to be disconnected from some workspaces. (required)
     * @param  string $leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDisconnectShared'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsDisconnectSharedRequest($token, $channel_id, $leaving_team_ids = null, string $contentType = self::contentTypes['adminConversationsDisconnectShared'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsDisconnectShared'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsDisconnectShared'
            );
        }



        $resourcePath = '/admin.conversations.disconnectShared';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }
        // form params
        if ($leaving_team_ids !== null) {
            $formParams['leaving_team_ids'] = ObjectSerializer::toFormValue($leaving_team_ids);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsEkmListOriginalConnectedChannelInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_ids A comma-separated list of channels to filter to. (optional)
     * @param  string $team_ids A comma-separated list of the workspaces to which the channels you would like returned belong. (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsEkmListOriginalConnectedChannelInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminConversationsEkmListOriginalConnectedChannelInfo($token, $channel_ids = null, $team_ids = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminConversationsEkmListOriginalConnectedChannelInfo'][0])
    {
        list($response) = $this->adminConversationsEkmListOriginalConnectedChannelInfoWithHttpInfo($token, $channel_ids, $team_ids, $limit, $cursor, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsEkmListOriginalConnectedChannelInfoWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_ids A comma-separated list of channels to filter to. (optional)
     * @param  string $team_ids A comma-separated list of the workspaces to which the channels you would like returned belong. (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsEkmListOriginalConnectedChannelInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsEkmListOriginalConnectedChannelInfoWithHttpInfo($token, $channel_ids = null, $team_ids = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminConversationsEkmListOriginalConnectedChannelInfo'][0])
    {
        $request = $this->adminConversationsEkmListOriginalConnectedChannelInfoRequest($token, $channel_ids, $team_ids, $limit, $cursor, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsEkmListOriginalConnectedChannelInfoAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_ids A comma-separated list of channels to filter to. (optional)
     * @param  string $team_ids A comma-separated list of the workspaces to which the channels you would like returned belong. (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsEkmListOriginalConnectedChannelInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsEkmListOriginalConnectedChannelInfoAsync($token, $channel_ids = null, $team_ids = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminConversationsEkmListOriginalConnectedChannelInfo'][0])
    {
        return $this->adminConversationsEkmListOriginalConnectedChannelInfoAsyncWithHttpInfo($token, $channel_ids, $team_ids, $limit, $cursor, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsEkmListOriginalConnectedChannelInfoAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_ids A comma-separated list of channels to filter to. (optional)
     * @param  string $team_ids A comma-separated list of the workspaces to which the channels you would like returned belong. (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsEkmListOriginalConnectedChannelInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsEkmListOriginalConnectedChannelInfoAsyncWithHttpInfo($token, $channel_ids = null, $team_ids = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminConversationsEkmListOriginalConnectedChannelInfo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminConversationsEkmListOriginalConnectedChannelInfoRequest($token, $channel_ids, $team_ids, $limit, $cursor, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsEkmListOriginalConnectedChannelInfo'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_ids A comma-separated list of channels to filter to. (optional)
     * @param  string $team_ids A comma-separated list of the workspaces to which the channels you would like returned belong. (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsEkmListOriginalConnectedChannelInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsEkmListOriginalConnectedChannelInfoRequest($token, $channel_ids = null, $team_ids = null, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminConversationsEkmListOriginalConnectedChannelInfo'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsEkmListOriginalConnectedChannelInfo'
            );
        }






        $resourcePath = '/admin.conversations.ekm.listOriginalConnectedChannelInfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel_ids,
            'channel_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_ids,
            'team_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsGetConversationPrefs
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to get preferences for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema|\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema
     */
    public function adminConversationsGetConversationPrefs($token, $channel_id, string $contentType = self::contentTypes['adminConversationsGetConversationPrefs'][0])
    {
        list($response) = $this->adminConversationsGetConversationPrefsWithHttpInfo($token, $channel_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsGetConversationPrefsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to get preferences for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema|\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsGetConversationPrefsWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsGetConversationPrefs'][0])
    {
        $request = $this->adminConversationsGetConversationPrefsRequest($token, $channel_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsGetConversationPrefsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to get preferences for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsGetConversationPrefsAsync($token, $channel_id, string $contentType = self::contentTypes['adminConversationsGetConversationPrefs'][0])
    {
        return $this->adminConversationsGetConversationPrefsAsyncWithHttpInfo($token, $channel_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsGetConversationPrefsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to get preferences for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsGetConversationPrefsAsyncWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsGetConversationPrefs'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema';
        $request = $this->adminConversationsGetConversationPrefsRequest($token, $channel_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsGetConversationPrefs'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to get preferences for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsGetConversationPrefsRequest($token, $channel_id, string $contentType = self::contentTypes['adminConversationsGetConversationPrefs'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsGetConversationPrefs'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsGetConversationPrefs'
            );
        }


        $resourcePath = '/admin.conversations.getConversationPrefs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel_id,
            'channel_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsGetTeams
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to determine connected workspaces within the organization for. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetTeams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsGetTeamsSchema|\OpenAPI\Client\Model\AdminConversationsGetTeamsErrorSchema
     */
    public function adminConversationsGetTeams($token, $channel_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminConversationsGetTeams'][0])
    {
        list($response) = $this->adminConversationsGetTeamsWithHttpInfo($token, $channel_id, $cursor, $limit, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsGetTeamsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to determine connected workspaces within the organization for. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetTeams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsGetTeamsSchema|\OpenAPI\Client\Model\AdminConversationsGetTeamsErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsGetTeamsWithHttpInfo($token, $channel_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminConversationsGetTeams'][0])
    {
        $request = $this->adminConversationsGetTeamsRequest($token, $channel_id, $cursor, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsGetTeamsSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsGetTeamsSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsGetTeamsSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsGetTeamsErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsGetTeamsErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsGetTeamsErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsGetTeamsSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsGetTeamsSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsGetTeamsErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsGetTeamsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to determine connected workspaces within the organization for. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsGetTeamsAsync($token, $channel_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminConversationsGetTeams'][0])
    {
        return $this->adminConversationsGetTeamsAsyncWithHttpInfo($token, $channel_id, $cursor, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsGetTeamsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to determine connected workspaces within the organization for. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsGetTeamsAsyncWithHttpInfo($token, $channel_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminConversationsGetTeams'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsGetTeamsSchema';
        $request = $this->adminConversationsGetTeamsRequest($token, $channel_id, $cursor, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsGetTeams'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to determine connected workspaces within the organization for. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsGetTeamsRequest($token, $channel_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminConversationsGetTeams'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsGetTeams'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsGetTeams'
            );
        }




        $resourcePath = '/admin.conversations.getTeams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel_id,
            'channel_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsInvite
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel that the users will be invited to. (required)
     * @param  string $user_ids The users to invite. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsInvite'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsInviteSchema|\OpenAPI\Client\Model\AdminConversationsInviteErrorSchema
     */
    public function adminConversationsInvite($token, $channel_id, $user_ids, string $contentType = self::contentTypes['adminConversationsInvite'][0])
    {
        list($response) = $this->adminConversationsInviteWithHttpInfo($token, $channel_id, $user_ids, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsInviteWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel that the users will be invited to. (required)
     * @param  string $user_ids The users to invite. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsInvite'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsInviteSchema|\OpenAPI\Client\Model\AdminConversationsInviteErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsInviteWithHttpInfo($token, $channel_id, $user_ids, string $contentType = self::contentTypes['adminConversationsInvite'][0])
    {
        $request = $this->adminConversationsInviteRequest($token, $channel_id, $user_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsInviteSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsInviteSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsInviteSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsInviteErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsInviteErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsInviteErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsInviteSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsInviteSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsInviteErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsInviteAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel that the users will be invited to. (required)
     * @param  string $user_ids The users to invite. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsInviteAsync($token, $channel_id, $user_ids, string $contentType = self::contentTypes['adminConversationsInvite'][0])
    {
        return $this->adminConversationsInviteAsyncWithHttpInfo($token, $channel_id, $user_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsInviteAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel that the users will be invited to. (required)
     * @param  string $user_ids The users to invite. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsInviteAsyncWithHttpInfo($token, $channel_id, $user_ids, string $contentType = self::contentTypes['adminConversationsInvite'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsInviteSchema';
        $request = $this->adminConversationsInviteRequest($token, $channel_id, $user_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsInvite'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel that the users will be invited to. (required)
     * @param  string $user_ids The users to invite. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsInviteRequest($token, $channel_id, $user_ids, string $contentType = self::contentTypes['adminConversationsInvite'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsInvite'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsInvite'
            );
        }

        // verify the required parameter 'user_ids' is set
        if ($user_ids === null || (is_array($user_ids) && count($user_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_ids when calling adminConversationsInvite'
            );
        }


        $resourcePath = '/admin.conversations.invite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }
        // form params
        if ($user_ids !== null) {
            $formParams['user_ids'] = ObjectSerializer::toFormValue($user_ids);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsRename
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to rename. (required)
     * @param  string $name name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRename'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsRenameSchema1|\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema1
     */
    public function adminConversationsRename($token, $channel_id, $name, string $contentType = self::contentTypes['adminConversationsRename'][0])
    {
        list($response) = $this->adminConversationsRenameWithHttpInfo($token, $channel_id, $name, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsRenameWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to rename. (required)
     * @param  string $name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRename'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsRenameSchema1|\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema1, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsRenameWithHttpInfo($token, $channel_id, $name, string $contentType = self::contentTypes['adminConversationsRename'][0])
    {
        $request = $this->adminConversationsRenameRequest($token, $channel_id, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsRenameSchema1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsRenameSchema1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsRenameSchema1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsRenameSchema1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsRenameSchema1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsRenameAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to rename. (required)
     * @param  string $name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsRenameAsync($token, $channel_id, $name, string $contentType = self::contentTypes['adminConversationsRename'][0])
    {
        return $this->adminConversationsRenameAsyncWithHttpInfo($token, $channel_id, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsRenameAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to rename. (required)
     * @param  string $name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsRenameAsyncWithHttpInfo($token, $channel_id, $name, string $contentType = self::contentTypes['adminConversationsRename'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsRenameSchema1';
        $request = $this->adminConversationsRenameRequest($token, $channel_id, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsRename'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to rename. (required)
     * @param  string $name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsRenameRequest($token, $channel_id, $name, string $contentType = self::contentTypes['adminConversationsRename'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsRename'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsRename'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling adminConversationsRename'
            );
        }


        $resourcePath = '/admin.conversations.rename';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsRestrictAccessAddGroup
     *
     * @param  string $channel_id The channel to link this group to. (required)
     * @param  string $group_id The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessAddGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminConversationsRestrictAccessAddGroup($channel_id, $group_id, $token, $team_id = null, string $contentType = self::contentTypes['adminConversationsRestrictAccessAddGroup'][0])
    {
        list($response) = $this->adminConversationsRestrictAccessAddGroupWithHttpInfo($channel_id, $group_id, $token, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsRestrictAccessAddGroupWithHttpInfo
     *
     * @param  string $channel_id The channel to link this group to. (required)
     * @param  string $group_id The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessAddGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsRestrictAccessAddGroupWithHttpInfo($channel_id, $group_id, $token, $team_id = null, string $contentType = self::contentTypes['adminConversationsRestrictAccessAddGroup'][0])
    {
        $request = $this->adminConversationsRestrictAccessAddGroupRequest($channel_id, $group_id, $token, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsRestrictAccessAddGroupAsync
     *
     * @param  string $channel_id The channel to link this group to. (required)
     * @param  string $group_id The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessAddGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsRestrictAccessAddGroupAsync($channel_id, $group_id, $token, $team_id = null, string $contentType = self::contentTypes['adminConversationsRestrictAccessAddGroup'][0])
    {
        return $this->adminConversationsRestrictAccessAddGroupAsyncWithHttpInfo($channel_id, $group_id, $token, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsRestrictAccessAddGroupAsyncWithHttpInfo
     *
     * @param  string $channel_id The channel to link this group to. (required)
     * @param  string $group_id The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessAddGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsRestrictAccessAddGroupAsyncWithHttpInfo($channel_id, $group_id, $token, $team_id = null, string $contentType = self::contentTypes['adminConversationsRestrictAccessAddGroup'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminConversationsRestrictAccessAddGroupRequest($channel_id, $group_id, $token, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsRestrictAccessAddGroup'
     *
     * @param  string $channel_id The channel to link this group to. (required)
     * @param  string $group_id The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessAddGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsRestrictAccessAddGroupRequest($channel_id, $group_id, $token, $team_id = null, string $contentType = self::contentTypes['adminConversationsRestrictAccessAddGroup'][0])
    {

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsRestrictAccessAddGroup'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling adminConversationsRestrictAccessAddGroup'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsRestrictAccessAddGroup'
            );
        }



        $resourcePath = '/admin.conversations.restrictAccess.addGroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }
        // form params
        if ($group_id !== null) {
            $formParams['group_id'] = ObjectSerializer::toFormValue($group_id);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsRestrictAccessListGroups
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id channel_id (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessListGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminConversationsRestrictAccessListGroups($token, $channel_id, $team_id = null, string $contentType = self::contentTypes['adminConversationsRestrictAccessListGroups'][0])
    {
        list($response) = $this->adminConversationsRestrictAccessListGroupsWithHttpInfo($token, $channel_id, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsRestrictAccessListGroupsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessListGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsRestrictAccessListGroupsWithHttpInfo($token, $channel_id, $team_id = null, string $contentType = self::contentTypes['adminConversationsRestrictAccessListGroups'][0])
    {
        $request = $this->adminConversationsRestrictAccessListGroupsRequest($token, $channel_id, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsRestrictAccessListGroupsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessListGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsRestrictAccessListGroupsAsync($token, $channel_id, $team_id = null, string $contentType = self::contentTypes['adminConversationsRestrictAccessListGroups'][0])
    {
        return $this->adminConversationsRestrictAccessListGroupsAsyncWithHttpInfo($token, $channel_id, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsRestrictAccessListGroupsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessListGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsRestrictAccessListGroupsAsyncWithHttpInfo($token, $channel_id, $team_id = null, string $contentType = self::contentTypes['adminConversationsRestrictAccessListGroups'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminConversationsRestrictAccessListGroupsRequest($token, $channel_id, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsRestrictAccessListGroups'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessListGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsRestrictAccessListGroupsRequest($token, $channel_id, $team_id = null, string $contentType = self::contentTypes['adminConversationsRestrictAccessListGroups'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsRestrictAccessListGroups'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsRestrictAccessListGroups'
            );
        }



        $resourcePath = '/admin.conversations.restrictAccess.listGroups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel_id,
            'channel_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsRestrictAccessRemoveGroup
     *
     * @param  string $channel_id The channel to remove the linked group from. (required)
     * @param  string $group_id The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessRemoveGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminConversationsRestrictAccessRemoveGroup($channel_id, $group_id, $team_id, $token, string $contentType = self::contentTypes['adminConversationsRestrictAccessRemoveGroup'][0])
    {
        list($response) = $this->adminConversationsRestrictAccessRemoveGroupWithHttpInfo($channel_id, $group_id, $team_id, $token, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsRestrictAccessRemoveGroupWithHttpInfo
     *
     * @param  string $channel_id The channel to remove the linked group from. (required)
     * @param  string $group_id The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessRemoveGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsRestrictAccessRemoveGroupWithHttpInfo($channel_id, $group_id, $team_id, $token, string $contentType = self::contentTypes['adminConversationsRestrictAccessRemoveGroup'][0])
    {
        $request = $this->adminConversationsRestrictAccessRemoveGroupRequest($channel_id, $group_id, $team_id, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsRestrictAccessRemoveGroupAsync
     *
     * @param  string $channel_id The channel to remove the linked group from. (required)
     * @param  string $group_id The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessRemoveGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsRestrictAccessRemoveGroupAsync($channel_id, $group_id, $team_id, $token, string $contentType = self::contentTypes['adminConversationsRestrictAccessRemoveGroup'][0])
    {
        return $this->adminConversationsRestrictAccessRemoveGroupAsyncWithHttpInfo($channel_id, $group_id, $team_id, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsRestrictAccessRemoveGroupAsyncWithHttpInfo
     *
     * @param  string $channel_id The channel to remove the linked group from. (required)
     * @param  string $group_id The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessRemoveGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsRestrictAccessRemoveGroupAsyncWithHttpInfo($channel_id, $group_id, $team_id, $token, string $contentType = self::contentTypes['adminConversationsRestrictAccessRemoveGroup'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminConversationsRestrictAccessRemoveGroupRequest($channel_id, $group_id, $team_id, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsRestrictAccessRemoveGroup'
     *
     * @param  string $channel_id The channel to remove the linked group from. (required)
     * @param  string $group_id The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel. (required)
     * @param  string $team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRestrictAccessRemoveGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsRestrictAccessRemoveGroupRequest($channel_id, $group_id, $team_id, $token, string $contentType = self::contentTypes['adminConversationsRestrictAccessRemoveGroup'][0])
    {

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsRestrictAccessRemoveGroup'
            );
        }

        // verify the required parameter 'group_id' is set
        if ($group_id === null || (is_array($group_id) && count($group_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_id when calling adminConversationsRestrictAccessRemoveGroup'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminConversationsRestrictAccessRemoveGroup'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsRestrictAccessRemoveGroup'
            );
        }


        $resourcePath = '/admin.conversations.restrictAccess.removeGroup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }
        // form params
        if ($group_id !== null) {
            $formParams['group_id'] = ObjectSerializer::toFormValue($group_id);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsSearch
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $team_ids Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param  string $query Name of the the channel to query by. (optional)
     * @param  int $limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param  string $sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted (optional)
     * @param  string $sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsSearchSchema|\OpenAPI\Client\Model\AdminConversationsSearchErrorSchema
     */
    public function adminConversationsSearch($token, $team_ids = null, $query = null, $limit = null, $cursor = null, $search_channel_types = null, $sort = null, $sort_dir = null, string $contentType = self::contentTypes['adminConversationsSearch'][0])
    {
        list($response) = $this->adminConversationsSearchWithHttpInfo($token, $team_ids, $query, $limit, $cursor, $search_channel_types, $sort, $sort_dir, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsSearchWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $team_ids Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param  string $query Name of the the channel to query by. (optional)
     * @param  int $limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param  string $sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted (optional)
     * @param  string $sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsSearchSchema|\OpenAPI\Client\Model\AdminConversationsSearchErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsSearchWithHttpInfo($token, $team_ids = null, $query = null, $limit = null, $cursor = null, $search_channel_types = null, $sort = null, $sort_dir = null, string $contentType = self::contentTypes['adminConversationsSearch'][0])
    {
        $request = $this->adminConversationsSearchRequest($token, $team_ids, $query, $limit, $cursor, $search_channel_types, $sort, $sort_dir, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsSearchSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsSearchSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsSearchSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsSearchErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsSearchErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsSearchErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsSearchSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsSearchSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsSearchErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsSearchAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $team_ids Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param  string $query Name of the the channel to query by. (optional)
     * @param  int $limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param  string $sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted (optional)
     * @param  string $sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsSearchAsync($token, $team_ids = null, $query = null, $limit = null, $cursor = null, $search_channel_types = null, $sort = null, $sort_dir = null, string $contentType = self::contentTypes['adminConversationsSearch'][0])
    {
        return $this->adminConversationsSearchAsyncWithHttpInfo($token, $team_ids, $query, $limit, $cursor, $search_channel_types, $sort, $sort_dir, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsSearchAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $team_ids Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param  string $query Name of the the channel to query by. (optional)
     * @param  int $limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param  string $sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted (optional)
     * @param  string $sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsSearchAsyncWithHttpInfo($token, $team_ids = null, $query = null, $limit = null, $cursor = null, $search_channel_types = null, $sort = null, $sort_dir = null, string $contentType = self::contentTypes['adminConversationsSearch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsSearchSchema';
        $request = $this->adminConversationsSearchRequest($token, $team_ids, $query, $limit, $cursor, $search_channel_types, $sort, $sort_dir, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsSearch'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $team_ids Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param  string $query Name of the the channel to query by. (optional)
     * @param  int $limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param  string $sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted (optional)
     * @param  string $sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsSearchRequest($token, $team_ids = null, $query = null, $limit = null, $cursor = null, $search_channel_types = null, $sort = null, $sort_dir = null, string $contentType = self::contentTypes['adminConversationsSearch'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsSearch'
            );
        }









        $resourcePath = '/admin.conversations.search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_ids,
            'team_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_channel_types,
            'search_channel_types', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_dir,
            'sort_dir', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsSetConversationPrefs
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to set the prefs for (required)
     * @param  string $prefs The prefs for this channel in a stringified JSON format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema|\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsErrorSchema
     */
    public function adminConversationsSetConversationPrefs($token, $channel_id, $prefs, string $contentType = self::contentTypes['adminConversationsSetConversationPrefs'][0])
    {
        list($response) = $this->adminConversationsSetConversationPrefsWithHttpInfo($token, $channel_id, $prefs, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsSetConversationPrefsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to set the prefs for (required)
     * @param  string $prefs The prefs for this channel in a stringified JSON format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema|\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsSetConversationPrefsWithHttpInfo($token, $channel_id, $prefs, string $contentType = self::contentTypes['adminConversationsSetConversationPrefs'][0])
    {
        $request = $this->adminConversationsSetConversationPrefsRequest($token, $channel_id, $prefs, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsSetConversationPrefsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to set the prefs for (required)
     * @param  string $prefs The prefs for this channel in a stringified JSON format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsSetConversationPrefsAsync($token, $channel_id, $prefs, string $contentType = self::contentTypes['adminConversationsSetConversationPrefs'][0])
    {
        return $this->adminConversationsSetConversationPrefsAsyncWithHttpInfo($token, $channel_id, $prefs, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsSetConversationPrefsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to set the prefs for (required)
     * @param  string $prefs The prefs for this channel in a stringified JSON format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsSetConversationPrefsAsyncWithHttpInfo($token, $channel_id, $prefs, string $contentType = self::contentTypes['adminConversationsSetConversationPrefs'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema';
        $request = $this->adminConversationsSetConversationPrefsRequest($token, $channel_id, $prefs, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsSetConversationPrefs'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to set the prefs for (required)
     * @param  string $prefs The prefs for this channel in a stringified JSON format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsSetConversationPrefsRequest($token, $channel_id, $prefs, string $contentType = self::contentTypes['adminConversationsSetConversationPrefs'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsSetConversationPrefs'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsSetConversationPrefs'
            );
        }

        // verify the required parameter 'prefs' is set
        if ($prefs === null || (is_array($prefs) && count($prefs) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prefs when calling adminConversationsSetConversationPrefs'
            );
        }


        $resourcePath = '/admin.conversations.setConversationPrefs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }
        // form params
        if ($prefs !== null) {
            $formParams['prefs'] = ObjectSerializer::toFormValue($prefs);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsSetTeams
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param  bool $org_channel True if channel has to be converted to an org channel (optional)
     * @param  string $target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param  string $team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetTeams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminConversationsSetTeams($token, $channel_id, $org_channel = null, $target_team_ids = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsSetTeams'][0])
    {
        list($response) = $this->adminConversationsSetTeamsWithHttpInfo($token, $channel_id, $org_channel, $target_team_ids, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsSetTeamsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param  bool $org_channel True if channel has to be converted to an org channel (optional)
     * @param  string $target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param  string $team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetTeams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsSetTeamsWithHttpInfo($token, $channel_id, $org_channel = null, $target_team_ids = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsSetTeams'][0])
    {
        $request = $this->adminConversationsSetTeamsRequest($token, $channel_id, $org_channel, $target_team_ids, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsSetTeamsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param  bool $org_channel True if channel has to be converted to an org channel (optional)
     * @param  string $target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param  string $team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsSetTeamsAsync($token, $channel_id, $org_channel = null, $target_team_ids = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsSetTeams'][0])
    {
        return $this->adminConversationsSetTeamsAsyncWithHttpInfo($token, $channel_id, $org_channel, $target_team_ids, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsSetTeamsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param  bool $org_channel True if channel has to be converted to an org channel (optional)
     * @param  string $target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param  string $team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsSetTeamsAsyncWithHttpInfo($token, $channel_id, $org_channel = null, $target_team_ids = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsSetTeams'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminConversationsSetTeamsRequest($token, $channel_id, $org_channel, $target_team_ids, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsSetTeams'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param  bool $org_channel True if channel has to be converted to an org channel (optional)
     * @param  string $target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param  string $team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsSetTeamsRequest($token, $channel_id, $org_channel = null, $target_team_ids = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsSetTeams'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsSetTeams'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsSetTeams'
            );
        }





        $resourcePath = '/admin.conversations.setTeams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }
        // form params
        if ($org_channel !== null) {
            $formParams['org_channel'] = ObjectSerializer::toFormValue($org_channel);
        }
        // form params
        if ($target_team_ids !== null) {
            $formParams['target_team_ids'] = ObjectSerializer::toFormValue($target_team_ids);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsUnarchive
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsUnarchive'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsUnarchiveSchema|\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema2
     */
    public function adminConversationsUnarchive($token, $channel_id, string $contentType = self::contentTypes['adminConversationsUnarchive'][0])
    {
        list($response) = $this->adminConversationsUnarchiveWithHttpInfo($token, $channel_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsUnarchiveWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsUnarchive'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsUnarchiveSchema|\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema2, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsUnarchiveWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsUnarchive'][0])
    {
        $request = $this->adminConversationsUnarchiveRequest($token, $channel_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsUnarchiveSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema2' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsUnarchiveSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsUnarchiveSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsUnarchiveAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsUnarchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsUnarchiveAsync($token, $channel_id, string $contentType = self::contentTypes['adminConversationsUnarchive'][0])
    {
        return $this->adminConversationsUnarchiveAsyncWithHttpInfo($token, $channel_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsUnarchiveAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsUnarchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsUnarchiveAsyncWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsUnarchive'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsUnarchiveSchema';
        $request = $this->adminConversationsUnarchiveRequest($token, $channel_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsUnarchive'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsUnarchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsUnarchiveRequest($token, $channel_id, string $contentType = self::contentTypes['adminConversationsUnarchive'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsUnarchive'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsUnarchive'
            );
        }


        $resourcePath = '/admin.conversations.unarchive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminEmojiAdd
     *
     * @param  string $name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $url The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminEmojiAdd($name, $token, $url, string $contentType = self::contentTypes['adminEmojiAdd'][0])
    {
        list($response) = $this->adminEmojiAddWithHttpInfo($name, $token, $url, $contentType);
        return $response;
    }

    /**
     * Operation adminEmojiAddWithHttpInfo
     *
     * @param  string $name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $url The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiAdd'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminEmojiAddWithHttpInfo($name, $token, $url, string $contentType = self::contentTypes['adminEmojiAdd'][0])
    {
        $request = $this->adminEmojiAddRequest($name, $token, $url, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminEmojiAddAsync
     *
     * @param  string $name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $url The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminEmojiAddAsync($name, $token, $url, string $contentType = self::contentTypes['adminEmojiAdd'][0])
    {
        return $this->adminEmojiAddAsyncWithHttpInfo($name, $token, $url, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminEmojiAddAsyncWithHttpInfo
     *
     * @param  string $name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $url The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminEmojiAddAsyncWithHttpInfo($name, $token, $url, string $contentType = self::contentTypes['adminEmojiAdd'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminEmojiAddRequest($name, $token, $url, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminEmojiAdd'
     *
     * @param  string $name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $url The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiAdd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminEmojiAddRequest($name, $token, $url, string $contentType = self::contentTypes['adminEmojiAdd'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling adminEmojiAdd'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminEmojiAdd'
            );
        }

        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling adminEmojiAdd'
            );
        }


        $resourcePath = '/admin.emoji.add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminEmojiAddAlias
     *
     * @param  string $alias_for The alias of the emoji. (required)
     * @param  string $name The name of the emoji to be aliased. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiAddAlias'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminEmojiAddAlias($alias_for, $name, $token, string $contentType = self::contentTypes['adminEmojiAddAlias'][0])
    {
        list($response) = $this->adminEmojiAddAliasWithHttpInfo($alias_for, $name, $token, $contentType);
        return $response;
    }

    /**
     * Operation adminEmojiAddAliasWithHttpInfo
     *
     * @param  string $alias_for The alias of the emoji. (required)
     * @param  string $name The name of the emoji to be aliased. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiAddAlias'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminEmojiAddAliasWithHttpInfo($alias_for, $name, $token, string $contentType = self::contentTypes['adminEmojiAddAlias'][0])
    {
        $request = $this->adminEmojiAddAliasRequest($alias_for, $name, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminEmojiAddAliasAsync
     *
     * @param  string $alias_for The alias of the emoji. (required)
     * @param  string $name The name of the emoji to be aliased. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiAddAlias'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminEmojiAddAliasAsync($alias_for, $name, $token, string $contentType = self::contentTypes['adminEmojiAddAlias'][0])
    {
        return $this->adminEmojiAddAliasAsyncWithHttpInfo($alias_for, $name, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminEmojiAddAliasAsyncWithHttpInfo
     *
     * @param  string $alias_for The alias of the emoji. (required)
     * @param  string $name The name of the emoji to be aliased. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiAddAlias'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminEmojiAddAliasAsyncWithHttpInfo($alias_for, $name, $token, string $contentType = self::contentTypes['adminEmojiAddAlias'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminEmojiAddAliasRequest($alias_for, $name, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminEmojiAddAlias'
     *
     * @param  string $alias_for The alias of the emoji. (required)
     * @param  string $name The name of the emoji to be aliased. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiAddAlias'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminEmojiAddAliasRequest($alias_for, $name, $token, string $contentType = self::contentTypes['adminEmojiAddAlias'][0])
    {

        // verify the required parameter 'alias_for' is set
        if ($alias_for === null || (is_array($alias_for) && count($alias_for) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias_for when calling adminEmojiAddAlias'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling adminEmojiAddAlias'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminEmojiAddAlias'
            );
        }


        $resourcePath = '/admin.emoji.addAlias';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($alias_for !== null) {
            $formParams['alias_for'] = ObjectSerializer::toFormValue($alias_for);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminEmojiList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminEmojiList($token, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminEmojiList'][0])
    {
        list($response) = $this->adminEmojiListWithHttpInfo($token, $cursor, $limit, $contentType);
        return $response;
    }

    /**
     * Operation adminEmojiListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminEmojiListWithHttpInfo($token, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminEmojiList'][0])
    {
        $request = $this->adminEmojiListRequest($token, $cursor, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminEmojiListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminEmojiListAsync($token, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminEmojiList'][0])
    {
        return $this->adminEmojiListAsyncWithHttpInfo($token, $cursor, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminEmojiListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminEmojiListAsyncWithHttpInfo($token, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminEmojiList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminEmojiListRequest($token, $cursor, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminEmojiList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminEmojiListRequest($token, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminEmojiList'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminEmojiList'
            );
        }




        $resourcePath = '/admin.emoji.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminEmojiRemove
     *
     * @param  string $name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiRemove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminEmojiRemove($name, $token, string $contentType = self::contentTypes['adminEmojiRemove'][0])
    {
        list($response) = $this->adminEmojiRemoveWithHttpInfo($name, $token, $contentType);
        return $response;
    }

    /**
     * Operation adminEmojiRemoveWithHttpInfo
     *
     * @param  string $name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiRemove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminEmojiRemoveWithHttpInfo($name, $token, string $contentType = self::contentTypes['adminEmojiRemove'][0])
    {
        $request = $this->adminEmojiRemoveRequest($name, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminEmojiRemoveAsync
     *
     * @param  string $name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminEmojiRemoveAsync($name, $token, string $contentType = self::contentTypes['adminEmojiRemove'][0])
    {
        return $this->adminEmojiRemoveAsyncWithHttpInfo($name, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminEmojiRemoveAsyncWithHttpInfo
     *
     * @param  string $name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminEmojiRemoveAsyncWithHttpInfo($name, $token, string $contentType = self::contentTypes['adminEmojiRemove'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminEmojiRemoveRequest($name, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminEmojiRemove'
     *
     * @param  string $name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminEmojiRemoveRequest($name, $token, string $contentType = self::contentTypes['adminEmojiRemove'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling adminEmojiRemove'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminEmojiRemove'
            );
        }


        $resourcePath = '/admin.emoji.remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminEmojiRename
     *
     * @param  string $name The name of the emoji to be renamed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $new_name The new name of the emoji. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiRename'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminEmojiRename($name, $new_name, $token, string $contentType = self::contentTypes['adminEmojiRename'][0])
    {
        list($response) = $this->adminEmojiRenameWithHttpInfo($name, $new_name, $token, $contentType);
        return $response;
    }

    /**
     * Operation adminEmojiRenameWithHttpInfo
     *
     * @param  string $name The name of the emoji to be renamed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $new_name The new name of the emoji. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiRename'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminEmojiRenameWithHttpInfo($name, $new_name, $token, string $contentType = self::contentTypes['adminEmojiRename'][0])
    {
        $request = $this->adminEmojiRenameRequest($name, $new_name, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminEmojiRenameAsync
     *
     * @param  string $name The name of the emoji to be renamed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $new_name The new name of the emoji. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminEmojiRenameAsync($name, $new_name, $token, string $contentType = self::contentTypes['adminEmojiRename'][0])
    {
        return $this->adminEmojiRenameAsyncWithHttpInfo($name, $new_name, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminEmojiRenameAsyncWithHttpInfo
     *
     * @param  string $name The name of the emoji to be renamed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $new_name The new name of the emoji. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminEmojiRenameAsyncWithHttpInfo($name, $new_name, $token, string $contentType = self::contentTypes['adminEmojiRename'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminEmojiRenameRequest($name, $new_name, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminEmojiRename'
     *
     * @param  string $name The name of the emoji to be renamed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included. (required)
     * @param  string $new_name The new name of the emoji. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminEmojiRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminEmojiRenameRequest($name, $new_name, $token, string $contentType = self::contentTypes['adminEmojiRename'][0])
    {

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling adminEmojiRename'
            );
        }

        // verify the required parameter 'new_name' is set
        if ($new_name === null || (is_array($new_name) && count($new_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $new_name when calling adminEmojiRename'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminEmojiRename'
            );
        }


        $resourcePath = '/admin.emoji.rename';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($new_name !== null) {
            $formParams['new_name'] = ObjectSerializer::toFormValue($new_name);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminInviteRequestsApprove
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @param  \OpenAPI\Client\Model\AdminInviteRequestsApproveRequest $admin_invite_requests_approve_request admin_invite_requests_approve_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsApprove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminInviteRequestsApprove($token, $admin_invite_requests_approve_request = null, string $contentType = self::contentTypes['adminInviteRequestsApprove'][0])
    {
        list($response) = $this->adminInviteRequestsApproveWithHttpInfo($token, $admin_invite_requests_approve_request, $contentType);
        return $response;
    }

    /**
     * Operation adminInviteRequestsApproveWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @param  \OpenAPI\Client\Model\AdminInviteRequestsApproveRequest $admin_invite_requests_approve_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsApprove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminInviteRequestsApproveWithHttpInfo($token, $admin_invite_requests_approve_request = null, string $contentType = self::contentTypes['adminInviteRequestsApprove'][0])
    {
        $request = $this->adminInviteRequestsApproveRequest($token, $admin_invite_requests_approve_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminInviteRequestsApproveAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @param  \OpenAPI\Client\Model\AdminInviteRequestsApproveRequest $admin_invite_requests_approve_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminInviteRequestsApproveAsync($token, $admin_invite_requests_approve_request = null, string $contentType = self::contentTypes['adminInviteRequestsApprove'][0])
    {
        return $this->adminInviteRequestsApproveAsyncWithHttpInfo($token, $admin_invite_requests_approve_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminInviteRequestsApproveAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @param  \OpenAPI\Client\Model\AdminInviteRequestsApproveRequest $admin_invite_requests_approve_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminInviteRequestsApproveAsyncWithHttpInfo($token, $admin_invite_requests_approve_request = null, string $contentType = self::contentTypes['adminInviteRequestsApprove'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminInviteRequestsApproveRequest($token, $admin_invite_requests_approve_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminInviteRequestsApprove'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @param  \OpenAPI\Client\Model\AdminInviteRequestsApproveRequest $admin_invite_requests_approve_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsApprove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminInviteRequestsApproveRequest($token, $admin_invite_requests_approve_request = null, string $contentType = self::contentTypes['adminInviteRequestsApprove'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminInviteRequestsApprove'
            );
        }



        $resourcePath = '/admin.inviteRequests.approve';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($admin_invite_requests_approve_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($admin_invite_requests_approve_request));
            } else {
                $httpBody = $admin_invite_requests_approve_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminInviteRequestsApprovedList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsApprovedList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminInviteRequestsApprovedList($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsApprovedList'][0])
    {
        list($response) = $this->adminInviteRequestsApprovedListWithHttpInfo($token, $team_id, $cursor, $limit, $contentType);
        return $response;
    }

    /**
     * Operation adminInviteRequestsApprovedListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsApprovedList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminInviteRequestsApprovedListWithHttpInfo($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsApprovedList'][0])
    {
        $request = $this->adminInviteRequestsApprovedListRequest($token, $team_id, $cursor, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminInviteRequestsApprovedListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsApprovedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminInviteRequestsApprovedListAsync($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsApprovedList'][0])
    {
        return $this->adminInviteRequestsApprovedListAsyncWithHttpInfo($token, $team_id, $cursor, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminInviteRequestsApprovedListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsApprovedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminInviteRequestsApprovedListAsyncWithHttpInfo($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsApprovedList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminInviteRequestsApprovedListRequest($token, $team_id, $cursor, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminInviteRequestsApprovedList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsApprovedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminInviteRequestsApprovedListRequest($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsApprovedList'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminInviteRequestsApprovedList'
            );
        }





        $resourcePath = '/admin.inviteRequests.approved.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminInviteRequestsDeniedList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous api response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsDeniedList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminInviteRequestsDeniedList($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsDeniedList'][0])
    {
        list($response) = $this->adminInviteRequestsDeniedListWithHttpInfo($token, $team_id, $cursor, $limit, $contentType);
        return $response;
    }

    /**
     * Operation adminInviteRequestsDeniedListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous api response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsDeniedList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminInviteRequestsDeniedListWithHttpInfo($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsDeniedList'][0])
    {
        $request = $this->adminInviteRequestsDeniedListRequest($token, $team_id, $cursor, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminInviteRequestsDeniedListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous api response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsDeniedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminInviteRequestsDeniedListAsync($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsDeniedList'][0])
    {
        return $this->adminInviteRequestsDeniedListAsyncWithHttpInfo($token, $team_id, $cursor, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminInviteRequestsDeniedListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous api response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsDeniedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminInviteRequestsDeniedListAsyncWithHttpInfo($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsDeniedList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminInviteRequestsDeniedListRequest($token, $team_id, $cursor, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminInviteRequestsDeniedList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous api response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsDeniedList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminInviteRequestsDeniedListRequest($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsDeniedList'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminInviteRequestsDeniedList'
            );
        }





        $resourcePath = '/admin.inviteRequests.denied.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminInviteRequestsDeny
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @param  \OpenAPI\Client\Model\AdminInviteRequestsApproveRequest $admin_invite_requests_approve_request admin_invite_requests_approve_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsDeny'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminInviteRequestsDeny($token, $admin_invite_requests_approve_request = null, string $contentType = self::contentTypes['adminInviteRequestsDeny'][0])
    {
        list($response) = $this->adminInviteRequestsDenyWithHttpInfo($token, $admin_invite_requests_approve_request, $contentType);
        return $response;
    }

    /**
     * Operation adminInviteRequestsDenyWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @param  \OpenAPI\Client\Model\AdminInviteRequestsApproveRequest $admin_invite_requests_approve_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsDeny'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminInviteRequestsDenyWithHttpInfo($token, $admin_invite_requests_approve_request = null, string $contentType = self::contentTypes['adminInviteRequestsDeny'][0])
    {
        $request = $this->adminInviteRequestsDenyRequest($token, $admin_invite_requests_approve_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminInviteRequestsDenyAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @param  \OpenAPI\Client\Model\AdminInviteRequestsApproveRequest $admin_invite_requests_approve_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsDeny'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminInviteRequestsDenyAsync($token, $admin_invite_requests_approve_request = null, string $contentType = self::contentTypes['adminInviteRequestsDeny'][0])
    {
        return $this->adminInviteRequestsDenyAsyncWithHttpInfo($token, $admin_invite_requests_approve_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminInviteRequestsDenyAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @param  \OpenAPI\Client\Model\AdminInviteRequestsApproveRequest $admin_invite_requests_approve_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsDeny'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminInviteRequestsDenyAsyncWithHttpInfo($token, $admin_invite_requests_approve_request = null, string $contentType = self::contentTypes['adminInviteRequestsDeny'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminInviteRequestsDenyRequest($token, $admin_invite_requests_approve_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminInviteRequestsDeny'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:write&#x60; (required)
     * @param  \OpenAPI\Client\Model\AdminInviteRequestsApproveRequest $admin_invite_requests_approve_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsDeny'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminInviteRequestsDenyRequest($token, $admin_invite_requests_approve_request = null, string $contentType = self::contentTypes['adminInviteRequestsDeny'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminInviteRequestsDeny'
            );
        }



        $resourcePath = '/admin.inviteRequests.deny';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($admin_invite_requests_approve_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($admin_invite_requests_approve_request));
            } else {
                $httpBody = $admin_invite_requests_approve_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminInviteRequestsList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminInviteRequestsList($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsList'][0])
    {
        list($response) = $this->adminInviteRequestsListWithHttpInfo($token, $team_id, $cursor, $limit, $contentType);
        return $response;
    }

    /**
     * Operation adminInviteRequestsListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminInviteRequestsListWithHttpInfo($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsList'][0])
    {
        $request = $this->adminInviteRequestsListRequest($token, $team_id, $cursor, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminInviteRequestsListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminInviteRequestsListAsync($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsList'][0])
    {
        return $this->adminInviteRequestsListAsyncWithHttpInfo($token, $team_id, $cursor, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminInviteRequestsListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminInviteRequestsListAsyncWithHttpInfo($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminInviteRequestsListRequest($token, $team_id, $cursor, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminInviteRequestsList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.invites:read&#x60; (required)
     * @param  string $team_id ID for the workspace where the invite requests were made. (optional)
     * @param  string $cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response (optional)
     * @param  int $limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminInviteRequestsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminInviteRequestsListRequest($token, $team_id = null, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminInviteRequestsList'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminInviteRequestsList'
            );
        }





        $resourcePath = '/admin.inviteRequests.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminTeamsAdminsList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id team_id (required)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsAdminsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminTeamsAdminsList($token, $team_id, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsAdminsList'][0])
    {
        list($response) = $this->adminTeamsAdminsListWithHttpInfo($token, $team_id, $limit, $cursor, $contentType);
        return $response;
    }

    /**
     * Operation adminTeamsAdminsListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id (required)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsAdminsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminTeamsAdminsListWithHttpInfo($token, $team_id, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsAdminsList'][0])
    {
        $request = $this->adminTeamsAdminsListRequest($token, $team_id, $limit, $cursor, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminTeamsAdminsListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id (required)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsAdminsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsAdminsListAsync($token, $team_id, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsAdminsList'][0])
    {
        return $this->adminTeamsAdminsListAsyncWithHttpInfo($token, $team_id, $limit, $cursor, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminTeamsAdminsListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id (required)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsAdminsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsAdminsListAsyncWithHttpInfo($token, $team_id, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsAdminsList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminTeamsAdminsListRequest($token, $team_id, $limit, $cursor, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminTeamsAdminsList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id (required)
     * @param  int $limit The maximum number of items to return. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsAdminsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminTeamsAdminsListRequest($token, $team_id, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsAdminsList'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminTeamsAdminsList'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminTeamsAdminsList'
            );
        }




        $resourcePath = '/admin.teams.admins.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminTeamsCreate
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_domain Team domain (for example, slacksoftballteam). (required)
     * @param  string $team_name Team name (for example, Slack Softball Team). (required)
     * @param  string $team_description Description for the team. (optional)
     * @param  string $team_discoverability Who can join the team. A team&#39;s discoverability can be &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;invite_only&#x60;, or &#x60;unlisted&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminTeamsCreate($token, $team_domain, $team_name, $team_description = null, $team_discoverability = null, string $contentType = self::contentTypes['adminTeamsCreate'][0])
    {
        list($response) = $this->adminTeamsCreateWithHttpInfo($token, $team_domain, $team_name, $team_description, $team_discoverability, $contentType);
        return $response;
    }

    /**
     * Operation adminTeamsCreateWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_domain Team domain (for example, slacksoftballteam). (required)
     * @param  string $team_name Team name (for example, Slack Softball Team). (required)
     * @param  string $team_description Description for the team. (optional)
     * @param  string $team_discoverability Who can join the team. A team&#39;s discoverability can be &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;invite_only&#x60;, or &#x60;unlisted&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminTeamsCreateWithHttpInfo($token, $team_domain, $team_name, $team_description = null, $team_discoverability = null, string $contentType = self::contentTypes['adminTeamsCreate'][0])
    {
        $request = $this->adminTeamsCreateRequest($token, $team_domain, $team_name, $team_description, $team_discoverability, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminTeamsCreateAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_domain Team domain (for example, slacksoftballteam). (required)
     * @param  string $team_name Team name (for example, Slack Softball Team). (required)
     * @param  string $team_description Description for the team. (optional)
     * @param  string $team_discoverability Who can join the team. A team&#39;s discoverability can be &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;invite_only&#x60;, or &#x60;unlisted&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsCreateAsync($token, $team_domain, $team_name, $team_description = null, $team_discoverability = null, string $contentType = self::contentTypes['adminTeamsCreate'][0])
    {
        return $this->adminTeamsCreateAsyncWithHttpInfo($token, $team_domain, $team_name, $team_description, $team_discoverability, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminTeamsCreateAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_domain Team domain (for example, slacksoftballteam). (required)
     * @param  string $team_name Team name (for example, Slack Softball Team). (required)
     * @param  string $team_description Description for the team. (optional)
     * @param  string $team_discoverability Who can join the team. A team&#39;s discoverability can be &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;invite_only&#x60;, or &#x60;unlisted&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsCreateAsyncWithHttpInfo($token, $team_domain, $team_name, $team_description = null, $team_discoverability = null, string $contentType = self::contentTypes['adminTeamsCreate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminTeamsCreateRequest($token, $team_domain, $team_name, $team_description, $team_discoverability, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminTeamsCreate'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_domain Team domain (for example, slacksoftballteam). (required)
     * @param  string $team_name Team name (for example, Slack Softball Team). (required)
     * @param  string $team_description Description for the team. (optional)
     * @param  string $team_discoverability Who can join the team. A team&#39;s discoverability can be &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;invite_only&#x60;, or &#x60;unlisted&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminTeamsCreateRequest($token, $team_domain, $team_name, $team_description = null, $team_discoverability = null, string $contentType = self::contentTypes['adminTeamsCreate'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminTeamsCreate'
            );
        }

        // verify the required parameter 'team_domain' is set
        if ($team_domain === null || (is_array($team_domain) && count($team_domain) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_domain when calling adminTeamsCreate'
            );
        }

        // verify the required parameter 'team_name' is set
        if ($team_name === null || (is_array($team_name) && count($team_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_name when calling adminTeamsCreate'
            );
        }




        $resourcePath = '/admin.teams.create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($team_description !== null) {
            $formParams['team_description'] = ObjectSerializer::toFormValue($team_description);
        }
        // form params
        if ($team_discoverability !== null) {
            $formParams['team_discoverability'] = ObjectSerializer::toFormValue($team_discoverability);
        }
        // form params
        if ($team_domain !== null) {
            $formParams['team_domain'] = ObjectSerializer::toFormValue($team_domain);
        }
        // form params
        if ($team_name !== null) {
            $formParams['team_name'] = ObjectSerializer::toFormValue($team_name);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminTeamsList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 100 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminTeamsList($token, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsList'][0])
    {
        list($response) = $this->adminTeamsListWithHttpInfo($token, $limit, $cursor, $contentType);
        return $response;
    }

    /**
     * Operation adminTeamsListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 100 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminTeamsListWithHttpInfo($token, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsList'][0])
    {
        $request = $this->adminTeamsListRequest($token, $limit, $cursor, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminTeamsListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 100 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsListAsync($token, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsList'][0])
    {
        return $this->adminTeamsListAsyncWithHttpInfo($token, $limit, $cursor, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminTeamsListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 100 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsListAsyncWithHttpInfo($token, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminTeamsListRequest($token, $limit, $cursor, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminTeamsList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 100 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminTeamsListRequest($token, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsList'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminTeamsList'
            );
        }




        $resourcePath = '/admin.teams.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminTeamsOwnersList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id team_id (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsOwnersList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminTeamsOwnersList($token, $team_id, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsOwnersList'][0])
    {
        list($response) = $this->adminTeamsOwnersListWithHttpInfo($token, $team_id, $limit, $cursor, $contentType);
        return $response;
    }

    /**
     * Operation adminTeamsOwnersListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsOwnersList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminTeamsOwnersListWithHttpInfo($token, $team_id, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsOwnersList'][0])
    {
        $request = $this->adminTeamsOwnersListRequest($token, $team_id, $limit, $cursor, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminTeamsOwnersListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsOwnersList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsOwnersListAsync($token, $team_id, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsOwnersList'][0])
    {
        return $this->adminTeamsOwnersListAsyncWithHttpInfo($token, $team_id, $limit, $cursor, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminTeamsOwnersListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsOwnersList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsOwnersListAsyncWithHttpInfo($token, $team_id, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsOwnersList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminTeamsOwnersListRequest($token, $team_id, $limit, $cursor, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminTeamsOwnersList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id (required)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsOwnersList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminTeamsOwnersListRequest($token, $team_id, $limit = null, $cursor = null, string $contentType = self::contentTypes['adminTeamsOwnersList'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminTeamsOwnersList'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminTeamsOwnersList'
            );
        }




        $resourcePath = '/admin.teams.owners.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminTeamsSettingsInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id team_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminTeamsSettingsInfo($token, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsInfo'][0])
    {
        list($response) = $this->adminTeamsSettingsInfoWithHttpInfo($token, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminTeamsSettingsInfoWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsInfo'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminTeamsSettingsInfoWithHttpInfo($token, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsInfo'][0])
    {
        $request = $this->adminTeamsSettingsInfoRequest($token, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminTeamsSettingsInfoAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsSettingsInfoAsync($token, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsInfo'][0])
    {
        return $this->adminTeamsSettingsInfoAsyncWithHttpInfo($token, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminTeamsSettingsInfoAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsSettingsInfoAsyncWithHttpInfo($token, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsInfo'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminTeamsSettingsInfoRequest($token, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminTeamsSettingsInfo'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:read&#x60; (required)
     * @param  string $team_id (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsInfo'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminTeamsSettingsInfoRequest($token, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsInfo'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminTeamsSettingsInfo'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminTeamsSettingsInfo'
            );
        }


        $resourcePath = '/admin.teams.settings.info';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminTeamsSettingsSetDefaultChannels
     *
     * @param  string $channel_ids An array of channel IDs. (required)
     * @param  string $team_id ID for the workspace to set the default channel for. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDefaultChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminTeamsSettingsSetDefaultChannels($channel_ids, $team_id, $token, string $contentType = self::contentTypes['adminTeamsSettingsSetDefaultChannels'][0])
    {
        list($response) = $this->adminTeamsSettingsSetDefaultChannelsWithHttpInfo($channel_ids, $team_id, $token, $contentType);
        return $response;
    }

    /**
     * Operation adminTeamsSettingsSetDefaultChannelsWithHttpInfo
     *
     * @param  string $channel_ids An array of channel IDs. (required)
     * @param  string $team_id ID for the workspace to set the default channel for. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDefaultChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminTeamsSettingsSetDefaultChannelsWithHttpInfo($channel_ids, $team_id, $token, string $contentType = self::contentTypes['adminTeamsSettingsSetDefaultChannels'][0])
    {
        $request = $this->adminTeamsSettingsSetDefaultChannelsRequest($channel_ids, $team_id, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminTeamsSettingsSetDefaultChannelsAsync
     *
     * @param  string $channel_ids An array of channel IDs. (required)
     * @param  string $team_id ID for the workspace to set the default channel for. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDefaultChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsSettingsSetDefaultChannelsAsync($channel_ids, $team_id, $token, string $contentType = self::contentTypes['adminTeamsSettingsSetDefaultChannels'][0])
    {
        return $this->adminTeamsSettingsSetDefaultChannelsAsyncWithHttpInfo($channel_ids, $team_id, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminTeamsSettingsSetDefaultChannelsAsyncWithHttpInfo
     *
     * @param  string $channel_ids An array of channel IDs. (required)
     * @param  string $team_id ID for the workspace to set the default channel for. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDefaultChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsSettingsSetDefaultChannelsAsyncWithHttpInfo($channel_ids, $team_id, $token, string $contentType = self::contentTypes['adminTeamsSettingsSetDefaultChannels'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminTeamsSettingsSetDefaultChannelsRequest($channel_ids, $team_id, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminTeamsSettingsSetDefaultChannels'
     *
     * @param  string $channel_ids An array of channel IDs. (required)
     * @param  string $team_id ID for the workspace to set the default channel for. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDefaultChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminTeamsSettingsSetDefaultChannelsRequest($channel_ids, $team_id, $token, string $contentType = self::contentTypes['adminTeamsSettingsSetDefaultChannels'][0])
    {

        // verify the required parameter 'channel_ids' is set
        if ($channel_ids === null || (is_array($channel_ids) && count($channel_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_ids when calling adminTeamsSettingsSetDefaultChannels'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminTeamsSettingsSetDefaultChannels'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminTeamsSettingsSetDefaultChannels'
            );
        }


        $resourcePath = '/admin.teams.settings.setDefaultChannels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($channel_ids !== null) {
            $formParams['channel_ids'] = ObjectSerializer::toFormValue($channel_ids);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminTeamsSettingsSetDescription
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $description The new description for the workspace. (required)
     * @param  string $team_id ID for the workspace to set the description for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDescription'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminTeamsSettingsSetDescription($token, $description, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetDescription'][0])
    {
        list($response) = $this->adminTeamsSettingsSetDescriptionWithHttpInfo($token, $description, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminTeamsSettingsSetDescriptionWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $description The new description for the workspace. (required)
     * @param  string $team_id ID for the workspace to set the description for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDescription'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminTeamsSettingsSetDescriptionWithHttpInfo($token, $description, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetDescription'][0])
    {
        $request = $this->adminTeamsSettingsSetDescriptionRequest($token, $description, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminTeamsSettingsSetDescriptionAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $description The new description for the workspace. (required)
     * @param  string $team_id ID for the workspace to set the description for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDescription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsSettingsSetDescriptionAsync($token, $description, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetDescription'][0])
    {
        return $this->adminTeamsSettingsSetDescriptionAsyncWithHttpInfo($token, $description, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminTeamsSettingsSetDescriptionAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $description The new description for the workspace. (required)
     * @param  string $team_id ID for the workspace to set the description for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDescription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsSettingsSetDescriptionAsyncWithHttpInfo($token, $description, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetDescription'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminTeamsSettingsSetDescriptionRequest($token, $description, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminTeamsSettingsSetDescription'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $description The new description for the workspace. (required)
     * @param  string $team_id ID for the workspace to set the description for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDescription'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminTeamsSettingsSetDescriptionRequest($token, $description, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetDescription'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminTeamsSettingsSetDescription'
            );
        }

        // verify the required parameter 'description' is set
        if ($description === null || (is_array($description) && count($description) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $description when calling adminTeamsSettingsSetDescription'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminTeamsSettingsSetDescription'
            );
        }


        $resourcePath = '/admin.teams.settings.setDescription';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminTeamsSettingsSetDiscoverability
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $discoverability This workspace&#39;s discovery setting. It must be set to one of &#x60;open&#x60;, &#x60;invite_only&#x60;, &#x60;closed&#x60;, or &#x60;unlisted&#x60;. (required)
     * @param  string $team_id The ID of the workspace to set discoverability on. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDiscoverability'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminTeamsSettingsSetDiscoverability($token, $discoverability, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetDiscoverability'][0])
    {
        list($response) = $this->adminTeamsSettingsSetDiscoverabilityWithHttpInfo($token, $discoverability, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminTeamsSettingsSetDiscoverabilityWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $discoverability This workspace&#39;s discovery setting. It must be set to one of &#x60;open&#x60;, &#x60;invite_only&#x60;, &#x60;closed&#x60;, or &#x60;unlisted&#x60;. (required)
     * @param  string $team_id The ID of the workspace to set discoverability on. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDiscoverability'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminTeamsSettingsSetDiscoverabilityWithHttpInfo($token, $discoverability, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetDiscoverability'][0])
    {
        $request = $this->adminTeamsSettingsSetDiscoverabilityRequest($token, $discoverability, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminTeamsSettingsSetDiscoverabilityAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $discoverability This workspace&#39;s discovery setting. It must be set to one of &#x60;open&#x60;, &#x60;invite_only&#x60;, &#x60;closed&#x60;, or &#x60;unlisted&#x60;. (required)
     * @param  string $team_id The ID of the workspace to set discoverability on. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDiscoverability'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsSettingsSetDiscoverabilityAsync($token, $discoverability, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetDiscoverability'][0])
    {
        return $this->adminTeamsSettingsSetDiscoverabilityAsyncWithHttpInfo($token, $discoverability, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminTeamsSettingsSetDiscoverabilityAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $discoverability This workspace&#39;s discovery setting. It must be set to one of &#x60;open&#x60;, &#x60;invite_only&#x60;, &#x60;closed&#x60;, or &#x60;unlisted&#x60;. (required)
     * @param  string $team_id The ID of the workspace to set discoverability on. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDiscoverability'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsSettingsSetDiscoverabilityAsyncWithHttpInfo($token, $discoverability, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetDiscoverability'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminTeamsSettingsSetDiscoverabilityRequest($token, $discoverability, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminTeamsSettingsSetDiscoverability'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $discoverability This workspace&#39;s discovery setting. It must be set to one of &#x60;open&#x60;, &#x60;invite_only&#x60;, &#x60;closed&#x60;, or &#x60;unlisted&#x60;. (required)
     * @param  string $team_id The ID of the workspace to set discoverability on. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetDiscoverability'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminTeamsSettingsSetDiscoverabilityRequest($token, $discoverability, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetDiscoverability'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminTeamsSettingsSetDiscoverability'
            );
        }

        // verify the required parameter 'discoverability' is set
        if ($discoverability === null || (is_array($discoverability) && count($discoverability) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $discoverability when calling adminTeamsSettingsSetDiscoverability'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminTeamsSettingsSetDiscoverability'
            );
        }


        $resourcePath = '/admin.teams.settings.setDiscoverability';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($discoverability !== null) {
            $formParams['discoverability'] = ObjectSerializer::toFormValue($discoverability);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminTeamsSettingsSetIcon
     *
     * @param  string $image_url Image URL for the icon (required)
     * @param  string $team_id ID for the workspace to set the icon for. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetIcon'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminTeamsSettingsSetIcon($image_url, $team_id, $token, string $contentType = self::contentTypes['adminTeamsSettingsSetIcon'][0])
    {
        list($response) = $this->adminTeamsSettingsSetIconWithHttpInfo($image_url, $team_id, $token, $contentType);
        return $response;
    }

    /**
     * Operation adminTeamsSettingsSetIconWithHttpInfo
     *
     * @param  string $image_url Image URL for the icon (required)
     * @param  string $team_id ID for the workspace to set the icon for. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetIcon'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminTeamsSettingsSetIconWithHttpInfo($image_url, $team_id, $token, string $contentType = self::contentTypes['adminTeamsSettingsSetIcon'][0])
    {
        $request = $this->adminTeamsSettingsSetIconRequest($image_url, $team_id, $token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminTeamsSettingsSetIconAsync
     *
     * @param  string $image_url Image URL for the icon (required)
     * @param  string $team_id ID for the workspace to set the icon for. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsSettingsSetIconAsync($image_url, $team_id, $token, string $contentType = self::contentTypes['adminTeamsSettingsSetIcon'][0])
    {
        return $this->adminTeamsSettingsSetIconAsyncWithHttpInfo($image_url, $team_id, $token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminTeamsSettingsSetIconAsyncWithHttpInfo
     *
     * @param  string $image_url Image URL for the icon (required)
     * @param  string $team_id ID for the workspace to set the icon for. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsSettingsSetIconAsyncWithHttpInfo($image_url, $team_id, $token, string $contentType = self::contentTypes['adminTeamsSettingsSetIcon'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminTeamsSettingsSetIconRequest($image_url, $team_id, $token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminTeamsSettingsSetIcon'
     *
     * @param  string $image_url Image URL for the icon (required)
     * @param  string $team_id ID for the workspace to set the icon for. (required)
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetIcon'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminTeamsSettingsSetIconRequest($image_url, $team_id, $token, string $contentType = self::contentTypes['adminTeamsSettingsSetIcon'][0])
    {

        // verify the required parameter 'image_url' is set
        if ($image_url === null || (is_array($image_url) && count($image_url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_url when calling adminTeamsSettingsSetIcon'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminTeamsSettingsSetIcon'
            );
        }

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminTeamsSettingsSetIcon'
            );
        }


        $resourcePath = '/admin.teams.settings.setIcon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($image_url !== null) {
            $formParams['image_url'] = ObjectSerializer::toFormValue($image_url);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminTeamsSettingsSetName
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $name The new name of the workspace. (required)
     * @param  string $team_id ID for the workspace to set the name for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetName'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminTeamsSettingsSetName($token, $name, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetName'][0])
    {
        list($response) = $this->adminTeamsSettingsSetNameWithHttpInfo($token, $name, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminTeamsSettingsSetNameWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $name The new name of the workspace. (required)
     * @param  string $team_id ID for the workspace to set the name for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetName'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminTeamsSettingsSetNameWithHttpInfo($token, $name, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetName'][0])
    {
        $request = $this->adminTeamsSettingsSetNameRequest($token, $name, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminTeamsSettingsSetNameAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $name The new name of the workspace. (required)
     * @param  string $team_id ID for the workspace to set the name for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetName'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsSettingsSetNameAsync($token, $name, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetName'][0])
    {
        return $this->adminTeamsSettingsSetNameAsyncWithHttpInfo($token, $name, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminTeamsSettingsSetNameAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $name The new name of the workspace. (required)
     * @param  string $team_id ID for the workspace to set the name for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetName'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminTeamsSettingsSetNameAsyncWithHttpInfo($token, $name, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetName'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminTeamsSettingsSetNameRequest($token, $name, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminTeamsSettingsSetName'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $name The new name of the workspace. (required)
     * @param  string $team_id ID for the workspace to set the name for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminTeamsSettingsSetName'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminTeamsSettingsSetNameRequest($token, $name, $team_id, string $contentType = self::contentTypes['adminTeamsSettingsSetName'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminTeamsSettingsSetName'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling adminTeamsSettingsSetName'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminTeamsSettingsSetName'
            );
        }


        $resourcePath = '/admin.teams.settings.setName';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsergroupsAddChannels
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma separated string of channel IDs. (required)
     * @param  string $usergroup_id ID of the IDP group to add default channels for. (required)
     * @param  string $team_id The workspace to add default channels in. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsergroupsAddChannels($token, $channel_ids, $usergroup_id, $team_id = null, string $contentType = self::contentTypes['adminUsergroupsAddChannels'][0])
    {
        list($response) = $this->adminUsergroupsAddChannelsWithHttpInfo($token, $channel_ids, $usergroup_id, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminUsergroupsAddChannelsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma separated string of channel IDs. (required)
     * @param  string $usergroup_id ID of the IDP group to add default channels for. (required)
     * @param  string $team_id The workspace to add default channels in. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsergroupsAddChannelsWithHttpInfo($token, $channel_ids, $usergroup_id, $team_id = null, string $contentType = self::contentTypes['adminUsergroupsAddChannels'][0])
    {
        $request = $this->adminUsergroupsAddChannelsRequest($token, $channel_ids, $usergroup_id, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsergroupsAddChannelsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma separated string of channel IDs. (required)
     * @param  string $usergroup_id ID of the IDP group to add default channels for. (required)
     * @param  string $team_id The workspace to add default channels in. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsAddChannelsAsync($token, $channel_ids, $usergroup_id, $team_id = null, string $contentType = self::contentTypes['adminUsergroupsAddChannels'][0])
    {
        return $this->adminUsergroupsAddChannelsAsyncWithHttpInfo($token, $channel_ids, $usergroup_id, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsergroupsAddChannelsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma separated string of channel IDs. (required)
     * @param  string $usergroup_id ID of the IDP group to add default channels for. (required)
     * @param  string $team_id The workspace to add default channels in. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsAddChannelsAsyncWithHttpInfo($token, $channel_ids, $usergroup_id, $team_id = null, string $contentType = self::contentTypes['adminUsergroupsAddChannels'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsergroupsAddChannelsRequest($token, $channel_ids, $usergroup_id, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsergroupsAddChannels'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma separated string of channel IDs. (required)
     * @param  string $usergroup_id ID of the IDP group to add default channels for. (required)
     * @param  string $team_id The workspace to add default channels in. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsergroupsAddChannelsRequest($token, $channel_ids, $usergroup_id, $team_id = null, string $contentType = self::contentTypes['adminUsergroupsAddChannels'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsergroupsAddChannels'
            );
        }

        // verify the required parameter 'channel_ids' is set
        if ($channel_ids === null || (is_array($channel_ids) && count($channel_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_ids when calling adminUsergroupsAddChannels'
            );
        }

        // verify the required parameter 'usergroup_id' is set
        if ($usergroup_id === null || (is_array($usergroup_id) && count($usergroup_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroup_id when calling adminUsergroupsAddChannels'
            );
        }



        $resourcePath = '/admin.usergroups.addChannels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_ids !== null) {
            $formParams['channel_ids'] = ObjectSerializer::toFormValue($channel_ids);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }
        // form params
        if ($usergroup_id !== null) {
            $formParams['usergroup_id'] = ObjectSerializer::toFormValue($usergroup_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsergroupsAddTeams
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_ids A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param  string $usergroup_id An encoded usergroup (IDP Group) ID. (required)
     * @param  bool $auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddTeams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsergroupsAddTeams($token, $team_ids, $usergroup_id, $auto_provision = null, string $contentType = self::contentTypes['adminUsergroupsAddTeams'][0])
    {
        list($response) = $this->adminUsergroupsAddTeamsWithHttpInfo($token, $team_ids, $usergroup_id, $auto_provision, $contentType);
        return $response;
    }

    /**
     * Operation adminUsergroupsAddTeamsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_ids A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param  string $usergroup_id An encoded usergroup (IDP Group) ID. (required)
     * @param  bool $auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddTeams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsergroupsAddTeamsWithHttpInfo($token, $team_ids, $usergroup_id, $auto_provision = null, string $contentType = self::contentTypes['adminUsergroupsAddTeams'][0])
    {
        $request = $this->adminUsergroupsAddTeamsRequest($token, $team_ids, $usergroup_id, $auto_provision, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsergroupsAddTeamsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_ids A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param  string $usergroup_id An encoded usergroup (IDP Group) ID. (required)
     * @param  bool $auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsAddTeamsAsync($token, $team_ids, $usergroup_id, $auto_provision = null, string $contentType = self::contentTypes['adminUsergroupsAddTeams'][0])
    {
        return $this->adminUsergroupsAddTeamsAsyncWithHttpInfo($token, $team_ids, $usergroup_id, $auto_provision, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsergroupsAddTeamsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_ids A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param  string $usergroup_id An encoded usergroup (IDP Group) ID. (required)
     * @param  bool $auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsAddTeamsAsyncWithHttpInfo($token, $team_ids, $usergroup_id, $auto_provision = null, string $contentType = self::contentTypes['adminUsergroupsAddTeams'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsergroupsAddTeamsRequest($token, $team_ids, $usergroup_id, $auto_provision, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsergroupsAddTeams'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.teams:write&#x60; (required)
     * @param  string $team_ids A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token. (required)
     * @param  string $usergroup_id An encoded usergroup (IDP Group) ID. (required)
     * @param  bool $auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsAddTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsergroupsAddTeamsRequest($token, $team_ids, $usergroup_id, $auto_provision = null, string $contentType = self::contentTypes['adminUsergroupsAddTeams'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsergroupsAddTeams'
            );
        }

        // verify the required parameter 'team_ids' is set
        if ($team_ids === null || (is_array($team_ids) && count($team_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_ids when calling adminUsergroupsAddTeams'
            );
        }

        // verify the required parameter 'usergroup_id' is set
        if ($usergroup_id === null || (is_array($usergroup_id) && count($usergroup_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroup_id when calling adminUsergroupsAddTeams'
            );
        }



        $resourcePath = '/admin.usergroups.addTeams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($auto_provision !== null) {
            $formParams['auto_provision'] = ObjectSerializer::toFormValue($auto_provision);
        }
        // form params
        if ($team_ids !== null) {
            $formParams['team_ids'] = ObjectSerializer::toFormValue($team_ids);
        }
        // form params
        if ($usergroup_id !== null) {
            $formParams['usergroup_id'] = ObjectSerializer::toFormValue($usergroup_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsergroupsListChannels
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param  string $usergroup_id ID of the IDP group to list default channels for. (required)
     * @param  string $team_id ID of the the workspace. (optional)
     * @param  bool $include_num_members Flag to include or exclude the count of members per channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsListChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsergroupsListChannels($token, $usergroup_id, $team_id = null, $include_num_members = null, string $contentType = self::contentTypes['adminUsergroupsListChannels'][0])
    {
        list($response) = $this->adminUsergroupsListChannelsWithHttpInfo($token, $usergroup_id, $team_id, $include_num_members, $contentType);
        return $response;
    }

    /**
     * Operation adminUsergroupsListChannelsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param  string $usergroup_id ID of the IDP group to list default channels for. (required)
     * @param  string $team_id ID of the the workspace. (optional)
     * @param  bool $include_num_members Flag to include or exclude the count of members per channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsListChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsergroupsListChannelsWithHttpInfo($token, $usergroup_id, $team_id = null, $include_num_members = null, string $contentType = self::contentTypes['adminUsergroupsListChannels'][0])
    {
        $request = $this->adminUsergroupsListChannelsRequest($token, $usergroup_id, $team_id, $include_num_members, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsergroupsListChannelsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param  string $usergroup_id ID of the IDP group to list default channels for. (required)
     * @param  string $team_id ID of the the workspace. (optional)
     * @param  bool $include_num_members Flag to include or exclude the count of members per channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsListChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsListChannelsAsync($token, $usergroup_id, $team_id = null, $include_num_members = null, string $contentType = self::contentTypes['adminUsergroupsListChannels'][0])
    {
        return $this->adminUsergroupsListChannelsAsyncWithHttpInfo($token, $usergroup_id, $team_id, $include_num_members, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsergroupsListChannelsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param  string $usergroup_id ID of the IDP group to list default channels for. (required)
     * @param  string $team_id ID of the the workspace. (optional)
     * @param  bool $include_num_members Flag to include or exclude the count of members per channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsListChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsListChannelsAsyncWithHttpInfo($token, $usergroup_id, $team_id = null, $include_num_members = null, string $contentType = self::contentTypes['adminUsergroupsListChannels'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsergroupsListChannelsRequest($token, $usergroup_id, $team_id, $include_num_members, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsergroupsListChannels'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60; (required)
     * @param  string $usergroup_id ID of the IDP group to list default channels for. (required)
     * @param  string $team_id ID of the the workspace. (optional)
     * @param  bool $include_num_members Flag to include or exclude the count of members per channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsListChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsergroupsListChannelsRequest($token, $usergroup_id, $team_id = null, $include_num_members = null, string $contentType = self::contentTypes['adminUsergroupsListChannels'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsergroupsListChannels'
            );
        }

        // verify the required parameter 'usergroup_id' is set
        if ($usergroup_id === null || (is_array($usergroup_id) && count($usergroup_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroup_id when calling adminUsergroupsListChannels'
            );
        }




        $resourcePath = '/admin.usergroups.listChannels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $usergroup_id,
            'usergroup_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_num_members,
            'include_num_members', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsergroupsRemoveChannels
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma-separated string of channel IDs (required)
     * @param  string $usergroup_id ID of the IDP Group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsRemoveChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsergroupsRemoveChannels($token, $channel_ids, $usergroup_id, string $contentType = self::contentTypes['adminUsergroupsRemoveChannels'][0])
    {
        list($response) = $this->adminUsergroupsRemoveChannelsWithHttpInfo($token, $channel_ids, $usergroup_id, $contentType);
        return $response;
    }

    /**
     * Operation adminUsergroupsRemoveChannelsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma-separated string of channel IDs (required)
     * @param  string $usergroup_id ID of the IDP Group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsRemoveChannels'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsergroupsRemoveChannelsWithHttpInfo($token, $channel_ids, $usergroup_id, string $contentType = self::contentTypes['adminUsergroupsRemoveChannels'][0])
    {
        $request = $this->adminUsergroupsRemoveChannelsRequest($token, $channel_ids, $usergroup_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsergroupsRemoveChannelsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma-separated string of channel IDs (required)
     * @param  string $usergroup_id ID of the IDP Group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsRemoveChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsRemoveChannelsAsync($token, $channel_ids, $usergroup_id, string $contentType = self::contentTypes['adminUsergroupsRemoveChannels'][0])
    {
        return $this->adminUsergroupsRemoveChannelsAsyncWithHttpInfo($token, $channel_ids, $usergroup_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsergroupsRemoveChannelsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma-separated string of channel IDs (required)
     * @param  string $usergroup_id ID of the IDP Group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsRemoveChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsergroupsRemoveChannelsAsyncWithHttpInfo($token, $channel_ids, $usergroup_id, string $contentType = self::contentTypes['adminUsergroupsRemoveChannels'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsergroupsRemoveChannelsRequest($token, $channel_ids, $usergroup_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsergroupsRemoveChannels'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60; (required)
     * @param  string $channel_ids Comma-separated string of channel IDs (required)
     * @param  string $usergroup_id ID of the IDP Group (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsergroupsRemoveChannels'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsergroupsRemoveChannelsRequest($token, $channel_ids, $usergroup_id, string $contentType = self::contentTypes['adminUsergroupsRemoveChannels'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsergroupsRemoveChannels'
            );
        }

        // verify the required parameter 'channel_ids' is set
        if ($channel_ids === null || (is_array($channel_ids) && count($channel_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_ids when calling adminUsergroupsRemoveChannels'
            );
        }

        // verify the required parameter 'usergroup_id' is set
        if ($usergroup_id === null || (is_array($usergroup_id) && count($usergroup_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroup_id when calling adminUsergroupsRemoveChannels'
            );
        }


        $resourcePath = '/admin.usergroups.removeChannels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_ids !== null) {
            $formParams['channel_ids'] = ObjectSerializer::toFormValue($channel_ids);
        }
        // form params
        if ($usergroup_id !== null) {
            $formParams['usergroup_id'] = ObjectSerializer::toFormValue($usergroup_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsersAssign
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to add to the workspace. (required)
     * @param  string $channel_ids Comma separated values of channel IDs to add user in the new workspace. (optional)
     * @param  bool $is_restricted True if user should be added to the workspace as a guest. (optional)
     * @param  bool $is_ultra_restricted True if user should be added to the workspace as a single-channel guest. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersAssign'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsersAssign($token, $team_id, $user_id, $channel_ids = null, $is_restricted = null, $is_ultra_restricted = null, string $contentType = self::contentTypes['adminUsersAssign'][0])
    {
        list($response) = $this->adminUsersAssignWithHttpInfo($token, $team_id, $user_id, $channel_ids, $is_restricted, $is_ultra_restricted, $contentType);
        return $response;
    }

    /**
     * Operation adminUsersAssignWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to add to the workspace. (required)
     * @param  string $channel_ids Comma separated values of channel IDs to add user in the new workspace. (optional)
     * @param  bool $is_restricted True if user should be added to the workspace as a guest. (optional)
     * @param  bool $is_ultra_restricted True if user should be added to the workspace as a single-channel guest. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersAssign'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsersAssignWithHttpInfo($token, $team_id, $user_id, $channel_ids = null, $is_restricted = null, $is_ultra_restricted = null, string $contentType = self::contentTypes['adminUsersAssign'][0])
    {
        $request = $this->adminUsersAssignRequest($token, $team_id, $user_id, $channel_ids, $is_restricted, $is_ultra_restricted, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsersAssignAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to add to the workspace. (required)
     * @param  string $channel_ids Comma separated values of channel IDs to add user in the new workspace. (optional)
     * @param  bool $is_restricted True if user should be added to the workspace as a guest. (optional)
     * @param  bool $is_ultra_restricted True if user should be added to the workspace as a single-channel guest. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersAssign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersAssignAsync($token, $team_id, $user_id, $channel_ids = null, $is_restricted = null, $is_ultra_restricted = null, string $contentType = self::contentTypes['adminUsersAssign'][0])
    {
        return $this->adminUsersAssignAsyncWithHttpInfo($token, $team_id, $user_id, $channel_ids, $is_restricted, $is_ultra_restricted, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsersAssignAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to add to the workspace. (required)
     * @param  string $channel_ids Comma separated values of channel IDs to add user in the new workspace. (optional)
     * @param  bool $is_restricted True if user should be added to the workspace as a guest. (optional)
     * @param  bool $is_ultra_restricted True if user should be added to the workspace as a single-channel guest. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersAssign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersAssignAsyncWithHttpInfo($token, $team_id, $user_id, $channel_ids = null, $is_restricted = null, $is_ultra_restricted = null, string $contentType = self::contentTypes['adminUsersAssign'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsersAssignRequest($token, $team_id, $user_id, $channel_ids, $is_restricted, $is_ultra_restricted, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsersAssign'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to add to the workspace. (required)
     * @param  string $channel_ids Comma separated values of channel IDs to add user in the new workspace. (optional)
     * @param  bool $is_restricted True if user should be added to the workspace as a guest. (optional)
     * @param  bool $is_ultra_restricted True if user should be added to the workspace as a single-channel guest. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersAssign'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsersAssignRequest($token, $team_id, $user_id, $channel_ids = null, $is_restricted = null, $is_ultra_restricted = null, string $contentType = self::contentTypes['adminUsersAssign'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsersAssign'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminUsersAssign'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling adminUsersAssign'
            );
        }





        $resourcePath = '/admin.users.assign';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_ids !== null) {
            $formParams['channel_ids'] = ObjectSerializer::toFormValue($channel_ids);
        }
        // form params
        if ($is_restricted !== null) {
            $formParams['is_restricted'] = ObjectSerializer::toFormValue($is_restricted);
        }
        // form params
        if ($is_ultra_restricted !== null) {
            $formParams['is_ultra_restricted'] = ObjectSerializer::toFormValue($is_ultra_restricted);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }
        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = ObjectSerializer::toFormValue($user_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsersInvite
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $channel_ids A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required. (required)
     * @param  string $email The email address of the person to invite. (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $custom_message An optional message to send to the user in the invite email. (optional)
     * @param  string $guest_expiration_ts Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
     * @param  bool $is_restricted Is this user a multi-channel guest user? (default: false) (optional)
     * @param  bool $is_ultra_restricted Is this user a single channel guest user? (default: false) (optional)
     * @param  string $real_name Full name of the user. (optional)
     * @param  bool $resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersInvite'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsersInvite($token, $channel_ids, $email, $team_id, $custom_message = null, $guest_expiration_ts = null, $is_restricted = null, $is_ultra_restricted = null, $real_name = null, $resend = null, string $contentType = self::contentTypes['adminUsersInvite'][0])
    {
        list($response) = $this->adminUsersInviteWithHttpInfo($token, $channel_ids, $email, $team_id, $custom_message, $guest_expiration_ts, $is_restricted, $is_ultra_restricted, $real_name, $resend, $contentType);
        return $response;
    }

    /**
     * Operation adminUsersInviteWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $channel_ids A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required. (required)
     * @param  string $email The email address of the person to invite. (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $custom_message An optional message to send to the user in the invite email. (optional)
     * @param  string $guest_expiration_ts Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
     * @param  bool $is_restricted Is this user a multi-channel guest user? (default: false) (optional)
     * @param  bool $is_ultra_restricted Is this user a single channel guest user? (default: false) (optional)
     * @param  string $real_name Full name of the user. (optional)
     * @param  bool $resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersInvite'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsersInviteWithHttpInfo($token, $channel_ids, $email, $team_id, $custom_message = null, $guest_expiration_ts = null, $is_restricted = null, $is_ultra_restricted = null, $real_name = null, $resend = null, string $contentType = self::contentTypes['adminUsersInvite'][0])
    {
        $request = $this->adminUsersInviteRequest($token, $channel_ids, $email, $team_id, $custom_message, $guest_expiration_ts, $is_restricted, $is_ultra_restricted, $real_name, $resend, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsersInviteAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $channel_ids A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required. (required)
     * @param  string $email The email address of the person to invite. (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $custom_message An optional message to send to the user in the invite email. (optional)
     * @param  string $guest_expiration_ts Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
     * @param  bool $is_restricted Is this user a multi-channel guest user? (default: false) (optional)
     * @param  bool $is_ultra_restricted Is this user a single channel guest user? (default: false) (optional)
     * @param  string $real_name Full name of the user. (optional)
     * @param  bool $resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersInviteAsync($token, $channel_ids, $email, $team_id, $custom_message = null, $guest_expiration_ts = null, $is_restricted = null, $is_ultra_restricted = null, $real_name = null, $resend = null, string $contentType = self::contentTypes['adminUsersInvite'][0])
    {
        return $this->adminUsersInviteAsyncWithHttpInfo($token, $channel_ids, $email, $team_id, $custom_message, $guest_expiration_ts, $is_restricted, $is_ultra_restricted, $real_name, $resend, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsersInviteAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $channel_ids A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required. (required)
     * @param  string $email The email address of the person to invite. (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $custom_message An optional message to send to the user in the invite email. (optional)
     * @param  string $guest_expiration_ts Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
     * @param  bool $is_restricted Is this user a multi-channel guest user? (default: false) (optional)
     * @param  bool $is_ultra_restricted Is this user a single channel guest user? (default: false) (optional)
     * @param  string $real_name Full name of the user. (optional)
     * @param  bool $resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersInviteAsyncWithHttpInfo($token, $channel_ids, $email, $team_id, $custom_message = null, $guest_expiration_ts = null, $is_restricted = null, $is_ultra_restricted = null, $real_name = null, $resend = null, string $contentType = self::contentTypes['adminUsersInvite'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsersInviteRequest($token, $channel_ids, $email, $team_id, $custom_message, $guest_expiration_ts, $is_restricted, $is_ultra_restricted, $real_name, $resend, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsersInvite'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $channel_ids A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required. (required)
     * @param  string $email The email address of the person to invite. (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $custom_message An optional message to send to the user in the invite email. (optional)
     * @param  string $guest_expiration_ts Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
     * @param  bool $is_restricted Is this user a multi-channel guest user? (default: false) (optional)
     * @param  bool $is_ultra_restricted Is this user a single channel guest user? (default: false) (optional)
     * @param  string $real_name Full name of the user. (optional)
     * @param  bool $resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsersInviteRequest($token, $channel_ids, $email, $team_id, $custom_message = null, $guest_expiration_ts = null, $is_restricted = null, $is_ultra_restricted = null, $real_name = null, $resend = null, string $contentType = self::contentTypes['adminUsersInvite'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsersInvite'
            );
        }

        // verify the required parameter 'channel_ids' is set
        if ($channel_ids === null || (is_array($channel_ids) && count($channel_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_ids when calling adminUsersInvite'
            );
        }

        // verify the required parameter 'email' is set
        if ($email === null || (is_array($email) && count($email) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email when calling adminUsersInvite'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminUsersInvite'
            );
        }








        $resourcePath = '/admin.users.invite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_ids !== null) {
            $formParams['channel_ids'] = ObjectSerializer::toFormValue($channel_ids);
        }
        // form params
        if ($custom_message !== null) {
            $formParams['custom_message'] = ObjectSerializer::toFormValue($custom_message);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($guest_expiration_ts !== null) {
            $formParams['guest_expiration_ts'] = ObjectSerializer::toFormValue($guest_expiration_ts);
        }
        // form params
        if ($is_restricted !== null) {
            $formParams['is_restricted'] = ObjectSerializer::toFormValue($is_restricted);
        }
        // form params
        if ($is_ultra_restricted !== null) {
            $formParams['is_ultra_restricted'] = ObjectSerializer::toFormValue($is_ultra_restricted);
        }
        // form params
        if ($real_name !== null) {
            $formParams['real_name'] = ObjectSerializer::toFormValue($real_name);
        }
        // form params
        if ($resend !== null) {
            $formParams['resend'] = ObjectSerializer::toFormValue($resend);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsersList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:read&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  int $limit Limit for how many users to be retrieved per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsersList($token, $team_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminUsersList'][0])
    {
        list($response) = $this->adminUsersListWithHttpInfo($token, $team_id, $cursor, $limit, $contentType);
        return $response;
    }

    /**
     * Operation adminUsersListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:read&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  int $limit Limit for how many users to be retrieved per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsersListWithHttpInfo($token, $team_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminUsersList'][0])
    {
        $request = $this->adminUsersListRequest($token, $team_id, $cursor, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsersListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:read&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  int $limit Limit for how many users to be retrieved per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersListAsync($token, $team_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminUsersList'][0])
    {
        return $this->adminUsersListAsyncWithHttpInfo($token, $team_id, $cursor, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsersListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:read&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  int $limit Limit for how many users to be retrieved per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersListAsyncWithHttpInfo($token, $team_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminUsersList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsersListRequest($token, $team_id, $cursor, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsersList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:read&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  int $limit Limit for how many users to be retrieved per page (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsersListRequest($token, $team_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminUsersList'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsersList'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminUsersList'
            );
        }




        $resourcePath = '/admin.users.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_id,
            'team_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsersRemove
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersRemove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsersRemove($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersRemove'][0])
    {
        list($response) = $this->adminUsersRemoveWithHttpInfo($token, $team_id, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation adminUsersRemoveWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersRemove'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsersRemoveWithHttpInfo($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersRemove'][0])
    {
        $request = $this->adminUsersRemoveRequest($token, $team_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsersRemoveAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersRemoveAsync($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersRemove'][0])
    {
        return $this->adminUsersRemoveAsyncWithHttpInfo($token, $team_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsersRemoveAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersRemoveAsyncWithHttpInfo($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersRemove'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsersRemoveRequest($token, $team_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsersRemove'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to remove. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersRemove'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsersRemoveRequest($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersRemove'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsersRemove'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminUsersRemove'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling adminUsersRemove'
            );
        }


        $resourcePath = '/admin.users.remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }
        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = ObjectSerializer::toFormValue($user_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsersSessionInvalidate
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  int $session_id session_id (required)
     * @param  string $team_id ID of the team that the session belongs to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSessionInvalidate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsersSessionInvalidate($token, $session_id, $team_id, string $contentType = self::contentTypes['adminUsersSessionInvalidate'][0])
    {
        list($response) = $this->adminUsersSessionInvalidateWithHttpInfo($token, $session_id, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminUsersSessionInvalidateWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  int $session_id (required)
     * @param  string $team_id ID of the team that the session belongs to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSessionInvalidate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsersSessionInvalidateWithHttpInfo($token, $session_id, $team_id, string $contentType = self::contentTypes['adminUsersSessionInvalidate'][0])
    {
        $request = $this->adminUsersSessionInvalidateRequest($token, $session_id, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsersSessionInvalidateAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  int $session_id (required)
     * @param  string $team_id ID of the team that the session belongs to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSessionInvalidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersSessionInvalidateAsync($token, $session_id, $team_id, string $contentType = self::contentTypes['adminUsersSessionInvalidate'][0])
    {
        return $this->adminUsersSessionInvalidateAsyncWithHttpInfo($token, $session_id, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsersSessionInvalidateAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  int $session_id (required)
     * @param  string $team_id ID of the team that the session belongs to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSessionInvalidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersSessionInvalidateAsyncWithHttpInfo($token, $session_id, $team_id, string $contentType = self::contentTypes['adminUsersSessionInvalidate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsersSessionInvalidateRequest($token, $session_id, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsersSessionInvalidate'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  int $session_id (required)
     * @param  string $team_id ID of the team that the session belongs to (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSessionInvalidate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsersSessionInvalidateRequest($token, $session_id, $team_id, string $contentType = self::contentTypes['adminUsersSessionInvalidate'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsersSessionInvalidate'
            );
        }

        // verify the required parameter 'session_id' is set
        if ($session_id === null || (is_array($session_id) && count($session_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_id when calling adminUsersSessionInvalidate'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminUsersSessionInvalidate'
            );
        }


        $resourcePath = '/admin.users.session.invalidate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($session_id !== null) {
            $formParams['session_id'] = ObjectSerializer::toFormValue($session_id);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsersSessionReset
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $user_id The ID of the user to wipe sessions for (required)
     * @param  bool $mobile_only Only expire mobile sessions (default: false) (optional)
     * @param  bool $web_only Only expire web sessions (default: false) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSessionReset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsersSessionReset($token, $user_id, $mobile_only = null, $web_only = null, string $contentType = self::contentTypes['adminUsersSessionReset'][0])
    {
        list($response) = $this->adminUsersSessionResetWithHttpInfo($token, $user_id, $mobile_only, $web_only, $contentType);
        return $response;
    }

    /**
     * Operation adminUsersSessionResetWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $user_id The ID of the user to wipe sessions for (required)
     * @param  bool $mobile_only Only expire mobile sessions (default: false) (optional)
     * @param  bool $web_only Only expire web sessions (default: false) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSessionReset'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsersSessionResetWithHttpInfo($token, $user_id, $mobile_only = null, $web_only = null, string $contentType = self::contentTypes['adminUsersSessionReset'][0])
    {
        $request = $this->adminUsersSessionResetRequest($token, $user_id, $mobile_only, $web_only, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsersSessionResetAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $user_id The ID of the user to wipe sessions for (required)
     * @param  bool $mobile_only Only expire mobile sessions (default: false) (optional)
     * @param  bool $web_only Only expire web sessions (default: false) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSessionReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersSessionResetAsync($token, $user_id, $mobile_only = null, $web_only = null, string $contentType = self::contentTypes['adminUsersSessionReset'][0])
    {
        return $this->adminUsersSessionResetAsyncWithHttpInfo($token, $user_id, $mobile_only, $web_only, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsersSessionResetAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $user_id The ID of the user to wipe sessions for (required)
     * @param  bool $mobile_only Only expire mobile sessions (default: false) (optional)
     * @param  bool $web_only Only expire web sessions (default: false) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSessionReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersSessionResetAsyncWithHttpInfo($token, $user_id, $mobile_only = null, $web_only = null, string $contentType = self::contentTypes['adminUsersSessionReset'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsersSessionResetRequest($token, $user_id, $mobile_only, $web_only, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsersSessionReset'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $user_id The ID of the user to wipe sessions for (required)
     * @param  bool $mobile_only Only expire mobile sessions (default: false) (optional)
     * @param  bool $web_only Only expire web sessions (default: false) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSessionReset'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsersSessionResetRequest($token, $user_id, $mobile_only = null, $web_only = null, string $contentType = self::contentTypes['adminUsersSessionReset'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsersSessionReset'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling adminUsersSessionReset'
            );
        }




        $resourcePath = '/admin.users.session.reset';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($mobile_only !== null) {
            $formParams['mobile_only'] = ObjectSerializer::toFormValue($mobile_only);
        }
        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = ObjectSerializer::toFormValue($user_id);
        }
        // form params
        if ($web_only !== null) {
            $formParams['web_only'] = ObjectSerializer::toFormValue($web_only);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsersSetAdmin
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to designate as an admin. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetAdmin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsersSetAdmin($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetAdmin'][0])
    {
        list($response) = $this->adminUsersSetAdminWithHttpInfo($token, $team_id, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation adminUsersSetAdminWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to designate as an admin. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetAdmin'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsersSetAdminWithHttpInfo($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetAdmin'][0])
    {
        $request = $this->adminUsersSetAdminRequest($token, $team_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsersSetAdminAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to designate as an admin. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersSetAdminAsync($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetAdmin'][0])
    {
        return $this->adminUsersSetAdminAsyncWithHttpInfo($token, $team_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsersSetAdminAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to designate as an admin. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersSetAdminAsyncWithHttpInfo($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetAdmin'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsersSetAdminRequest($token, $team_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsersSetAdmin'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to designate as an admin. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetAdmin'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsersSetAdminRequest($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetAdmin'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsersSetAdmin'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminUsersSetAdmin'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling adminUsersSetAdmin'
            );
        }


        $resourcePath = '/admin.users.setAdmin';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }
        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = ObjectSerializer::toFormValue($user_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsersSetExpiration
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  int $expiration_ts Timestamp when guest account should be disabled. (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to set an expiration for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetExpiration'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsersSetExpiration($token, $expiration_ts, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetExpiration'][0])
    {
        list($response) = $this->adminUsersSetExpirationWithHttpInfo($token, $expiration_ts, $team_id, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation adminUsersSetExpirationWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  int $expiration_ts Timestamp when guest account should be disabled. (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to set an expiration for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetExpiration'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsersSetExpirationWithHttpInfo($token, $expiration_ts, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetExpiration'][0])
    {
        $request = $this->adminUsersSetExpirationRequest($token, $expiration_ts, $team_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsersSetExpirationAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  int $expiration_ts Timestamp when guest account should be disabled. (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to set an expiration for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetExpiration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersSetExpirationAsync($token, $expiration_ts, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetExpiration'][0])
    {
        return $this->adminUsersSetExpirationAsyncWithHttpInfo($token, $expiration_ts, $team_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsersSetExpirationAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  int $expiration_ts Timestamp when guest account should be disabled. (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to set an expiration for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetExpiration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersSetExpirationAsyncWithHttpInfo($token, $expiration_ts, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetExpiration'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsersSetExpirationRequest($token, $expiration_ts, $team_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsersSetExpiration'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  int $expiration_ts Timestamp when guest account should be disabled. (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to set an expiration for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetExpiration'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsersSetExpirationRequest($token, $expiration_ts, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetExpiration'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsersSetExpiration'
            );
        }

        // verify the required parameter 'expiration_ts' is set
        if ($expiration_ts === null || (is_array($expiration_ts) && count($expiration_ts) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $expiration_ts when calling adminUsersSetExpiration'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminUsersSetExpiration'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling adminUsersSetExpiration'
            );
        }


        $resourcePath = '/admin.users.setExpiration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($expiration_ts !== null) {
            $formParams['expiration_ts'] = ObjectSerializer::toFormValue($expiration_ts);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }
        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = ObjectSerializer::toFormValue($user_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsersSetOwner
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id Id of the user to promote to owner. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetOwner'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsersSetOwner($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetOwner'][0])
    {
        list($response) = $this->adminUsersSetOwnerWithHttpInfo($token, $team_id, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation adminUsersSetOwnerWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id Id of the user to promote to owner. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetOwner'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsersSetOwnerWithHttpInfo($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetOwner'][0])
    {
        $request = $this->adminUsersSetOwnerRequest($token, $team_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsersSetOwnerAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id Id of the user to promote to owner. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetOwner'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersSetOwnerAsync($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetOwner'][0])
    {
        return $this->adminUsersSetOwnerAsyncWithHttpInfo($token, $team_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsersSetOwnerAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id Id of the user to promote to owner. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetOwner'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersSetOwnerAsyncWithHttpInfo($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetOwner'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsersSetOwnerRequest($token, $team_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsersSetOwner'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id Id of the user to promote to owner. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetOwner'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsersSetOwnerRequest($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetOwner'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsersSetOwner'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminUsersSetOwner'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling adminUsersSetOwner'
            );
        }


        $resourcePath = '/admin.users.setOwner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }
        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = ObjectSerializer::toFormValue($user_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminUsersSetRegular
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to designate as a regular user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetRegular'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminUsersSetRegular($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetRegular'][0])
    {
        list($response) = $this->adminUsersSetRegularWithHttpInfo($token, $team_id, $user_id, $contentType);
        return $response;
    }

    /**
     * Operation adminUsersSetRegularWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to designate as a regular user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetRegular'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminUsersSetRegularWithHttpInfo($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetRegular'][0])
    {
        $request = $this->adminUsersSetRegularRequest($token, $team_id, $user_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminUsersSetRegularAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to designate as a regular user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetRegular'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersSetRegularAsync($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetRegular'][0])
    {
        return $this->adminUsersSetRegularAsyncWithHttpInfo($token, $team_id, $user_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminUsersSetRegularAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to designate as a regular user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetRegular'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminUsersSetRegularAsyncWithHttpInfo($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetRegular'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminUsersSetRegularRequest($token, $team_id, $user_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminUsersSetRegular'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.users:write&#x60; (required)
     * @param  string $team_id The ID (&#x60;T1234&#x60;) of the workspace. (required)
     * @param  string $user_id The ID of the user to designate as a regular user. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminUsersSetRegular'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminUsersSetRegularRequest($token, $team_id, $user_id, string $contentType = self::contentTypes['adminUsersSetRegular'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminUsersSetRegular'
            );
        }

        // verify the required parameter 'team_id' is set
        if ($team_id === null || (is_array($team_id) && count($team_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $team_id when calling adminUsersSetRegular'
            );
        }

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling adminUsersSetRegular'
            );
        }


        $resourcePath = '/admin.users.setRegular';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }
        // form params
        if ($user_id !== null) {
            $formParams['user_id'] = ObjectSerializer::toFormValue($user_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
