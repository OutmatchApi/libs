<?php
/**
 * UsergroupsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\slack;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * UsergroupsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UsergroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'usergroupsCreate' => [
            'application/x-www-form-urlencoded',
        ],
        'usergroupsDisable' => [
            'application/x-www-form-urlencoded',
        ],
        'usergroupsEnable' => [
            'application/x-www-form-urlencoded',
        ],
        'usergroupsList' => [
            'application/json',
        ],
        'usergroupsUpdate' => [
            'application/x-www-form-urlencoded',
        ],
        'usergroupsUsersList' => [
            'application/json',
        ],
        'usergroupsUsersUpdate' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation usergroupsCreate
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $name A name for the User Group. Must be unique among User Groups. (required)
     * @param  string $channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param  string $description A short description of the User Group. (optional)
     * @param  string $handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param  bool $include_count Include the number of users in each User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UsergroupsCreateSchema|\OpenAPI\Client\Model\UsergroupsCreateErrorSchema
     */
    public function usergroupsCreate($token, $name, $channels = null, $description = null, $handle = null, $include_count = null, string $contentType = self::contentTypes['usergroupsCreate'][0])
    {
        list($response) = $this->usergroupsCreateWithHttpInfo($token, $name, $channels, $description, $handle, $include_count, $contentType);
        return $response;
    }

    /**
     * Operation usergroupsCreateWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $name A name for the User Group. Must be unique among User Groups. (required)
     * @param  string $channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param  string $description A short description of the User Group. (optional)
     * @param  string $handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param  bool $include_count Include the number of users in each User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UsergroupsCreateSchema|\OpenAPI\Client\Model\UsergroupsCreateErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupsCreateWithHttpInfo($token, $name, $channels = null, $description = null, $handle = null, $include_count = null, string $contentType = self::contentTypes['usergroupsCreate'][0])
    {
        $request = $this->usergroupsCreateRequest($token, $name, $channels, $description, $handle, $include_count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UsergroupsCreateSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsCreateSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsCreateSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\UsergroupsCreateErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsCreateErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsCreateErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UsergroupsCreateSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsCreateSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsCreateErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupsCreateAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $name A name for the User Group. Must be unique among User Groups. (required)
     * @param  string $channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param  string $description A short description of the User Group. (optional)
     * @param  string $handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param  bool $include_count Include the number of users in each User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsCreateAsync($token, $name, $channels = null, $description = null, $handle = null, $include_count = null, string $contentType = self::contentTypes['usergroupsCreate'][0])
    {
        return $this->usergroupsCreateAsyncWithHttpInfo($token, $name, $channels, $description, $handle, $include_count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupsCreateAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $name A name for the User Group. Must be unique among User Groups. (required)
     * @param  string $channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param  string $description A short description of the User Group. (optional)
     * @param  string $handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param  bool $include_count Include the number of users in each User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsCreateAsyncWithHttpInfo($token, $name, $channels = null, $description = null, $handle = null, $include_count = null, string $contentType = self::contentTypes['usergroupsCreate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UsergroupsCreateSchema';
        $request = $this->usergroupsCreateRequest($token, $name, $channels, $description, $handle, $include_count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupsCreate'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $name A name for the User Group. Must be unique among User Groups. (required)
     * @param  string $channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param  string $description A short description of the User Group. (optional)
     * @param  string $handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param  bool $include_count Include the number of users in each User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupsCreateRequest($token, $name, $channels = null, $description = null, $handle = null, $include_count = null, string $contentType = self::contentTypes['usergroupsCreate'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling usergroupsCreate'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling usergroupsCreate'
            );
        }






        $resourcePath = '/usergroups.create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channels !== null) {
            $formParams['channels'] = ObjectSerializer::toFormValue($channels);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($handle !== null) {
            $formParams['handle'] = ObjectSerializer::toFormValue($handle);
        }
        // form params
        if ($include_count !== null) {
            $formParams['include_count'] = ObjectSerializer::toFormValue($include_count);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupsDisable
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to disable. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsDisable'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UsergroupsDisableSchema|\OpenAPI\Client\Model\UsergroupsDisableErrorSchema
     */
    public function usergroupsDisable($token, $usergroup, $include_count = null, string $contentType = self::contentTypes['usergroupsDisable'][0])
    {
        list($response) = $this->usergroupsDisableWithHttpInfo($token, $usergroup, $include_count, $contentType);
        return $response;
    }

    /**
     * Operation usergroupsDisableWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to disable. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsDisable'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UsergroupsDisableSchema|\OpenAPI\Client\Model\UsergroupsDisableErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupsDisableWithHttpInfo($token, $usergroup, $include_count = null, string $contentType = self::contentTypes['usergroupsDisable'][0])
    {
        $request = $this->usergroupsDisableRequest($token, $usergroup, $include_count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UsergroupsDisableSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsDisableSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsDisableSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\UsergroupsDisableErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsDisableErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsDisableErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UsergroupsDisableSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsDisableSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsDisableErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupsDisableAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to disable. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsDisable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsDisableAsync($token, $usergroup, $include_count = null, string $contentType = self::contentTypes['usergroupsDisable'][0])
    {
        return $this->usergroupsDisableAsyncWithHttpInfo($token, $usergroup, $include_count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupsDisableAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to disable. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsDisable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsDisableAsyncWithHttpInfo($token, $usergroup, $include_count = null, string $contentType = self::contentTypes['usergroupsDisable'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UsergroupsDisableSchema';
        $request = $this->usergroupsDisableRequest($token, $usergroup, $include_count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupsDisable'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to disable. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsDisable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupsDisableRequest($token, $usergroup, $include_count = null, string $contentType = self::contentTypes['usergroupsDisable'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling usergroupsDisable'
            );
        }

        // verify the required parameter 'usergroup' is set
        if ($usergroup === null || (is_array($usergroup) && count($usergroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroup when calling usergroupsDisable'
            );
        }



        $resourcePath = '/usergroups.disable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($include_count !== null) {
            $formParams['include_count'] = ObjectSerializer::toFormValue($include_count);
        }
        // form params
        if ($usergroup !== null) {
            $formParams['usergroup'] = ObjectSerializer::toFormValue($usergroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupsEnable
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to enable. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsEnable'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UsergroupsEnableSchema|\OpenAPI\Client\Model\UsergroupsEnableErrorSchema
     */
    public function usergroupsEnable($token, $usergroup, $include_count = null, string $contentType = self::contentTypes['usergroupsEnable'][0])
    {
        list($response) = $this->usergroupsEnableWithHttpInfo($token, $usergroup, $include_count, $contentType);
        return $response;
    }

    /**
     * Operation usergroupsEnableWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to enable. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsEnable'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UsergroupsEnableSchema|\OpenAPI\Client\Model\UsergroupsEnableErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupsEnableWithHttpInfo($token, $usergroup, $include_count = null, string $contentType = self::contentTypes['usergroupsEnable'][0])
    {
        $request = $this->usergroupsEnableRequest($token, $usergroup, $include_count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UsergroupsEnableSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsEnableSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsEnableSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\UsergroupsEnableErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsEnableErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsEnableErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UsergroupsEnableSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsEnableSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsEnableErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupsEnableAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to enable. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsEnable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsEnableAsync($token, $usergroup, $include_count = null, string $contentType = self::contentTypes['usergroupsEnable'][0])
    {
        return $this->usergroupsEnableAsyncWithHttpInfo($token, $usergroup, $include_count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupsEnableAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to enable. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsEnable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsEnableAsyncWithHttpInfo($token, $usergroup, $include_count = null, string $contentType = self::contentTypes['usergroupsEnable'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UsergroupsEnableSchema';
        $request = $this->usergroupsEnableRequest($token, $usergroup, $include_count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupsEnable'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to enable. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsEnable'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupsEnableRequest($token, $usergroup, $include_count = null, string $contentType = self::contentTypes['usergroupsEnable'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling usergroupsEnable'
            );
        }

        // verify the required parameter 'usergroup' is set
        if ($usergroup === null || (is_array($usergroup) && count($usergroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroup when calling usergroupsEnable'
            );
        }



        $resourcePath = '/usergroups.enable';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($include_count !== null) {
            $formParams['include_count'] = ObjectSerializer::toFormValue($include_count);
        }
        // form params
        if ($usergroup !== null) {
            $formParams['usergroup'] = ObjectSerializer::toFormValue($usergroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupsList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param  bool $include_users Include the list of users for each User Group. (optional)
     * @param  bool $include_count Include the number of users in each User Group. (optional)
     * @param  bool $include_disabled Include disabled User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UsergroupsListSchema|\OpenAPI\Client\Model\UsergroupsListErrorSchema
     */
    public function usergroupsList($token, $include_users = null, $include_count = null, $include_disabled = null, string $contentType = self::contentTypes['usergroupsList'][0])
    {
        list($response) = $this->usergroupsListWithHttpInfo($token, $include_users, $include_count, $include_disabled, $contentType);
        return $response;
    }

    /**
     * Operation usergroupsListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param  bool $include_users Include the list of users for each User Group. (optional)
     * @param  bool $include_count Include the number of users in each User Group. (optional)
     * @param  bool $include_disabled Include disabled User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UsergroupsListSchema|\OpenAPI\Client\Model\UsergroupsListErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupsListWithHttpInfo($token, $include_users = null, $include_count = null, $include_disabled = null, string $contentType = self::contentTypes['usergroupsList'][0])
    {
        $request = $this->usergroupsListRequest($token, $include_users, $include_count, $include_disabled, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UsergroupsListSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsListSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsListSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\UsergroupsListErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsListErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsListErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UsergroupsListSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsListSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsListErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupsListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param  bool $include_users Include the list of users for each User Group. (optional)
     * @param  bool $include_count Include the number of users in each User Group. (optional)
     * @param  bool $include_disabled Include disabled User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsListAsync($token, $include_users = null, $include_count = null, $include_disabled = null, string $contentType = self::contentTypes['usergroupsList'][0])
    {
        return $this->usergroupsListAsyncWithHttpInfo($token, $include_users, $include_count, $include_disabled, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupsListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param  bool $include_users Include the list of users for each User Group. (optional)
     * @param  bool $include_count Include the number of users in each User Group. (optional)
     * @param  bool $include_disabled Include disabled User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsListAsyncWithHttpInfo($token, $include_users = null, $include_count = null, $include_disabled = null, string $contentType = self::contentTypes['usergroupsList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UsergroupsListSchema';
        $request = $this->usergroupsListRequest($token, $include_users, $include_count, $include_disabled, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupsList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param  bool $include_users Include the list of users for each User Group. (optional)
     * @param  bool $include_count Include the number of users in each User Group. (optional)
     * @param  bool $include_disabled Include disabled User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupsListRequest($token, $include_users = null, $include_count = null, $include_disabled = null, string $contentType = self::contentTypes['usergroupsList'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling usergroupsList'
            );
        }





        $resourcePath = '/usergroups.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_users,
            'include_users', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_count,
            'include_count', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_disabled,
            'include_disabled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupsUpdate
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  string $channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param  string $description A short description of the User Group. (optional)
     * @param  string $handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $name A name for the User Group. Must be unique among User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UsergroupsUpdateSchema|\OpenAPI\Client\Model\UsergroupsUpdateErrorSchema
     */
    public function usergroupsUpdate($token, $usergroup, $channels = null, $description = null, $handle = null, $include_count = null, $name = null, string $contentType = self::contentTypes['usergroupsUpdate'][0])
    {
        list($response) = $this->usergroupsUpdateWithHttpInfo($token, $usergroup, $channels, $description, $handle, $include_count, $name, $contentType);
        return $response;
    }

    /**
     * Operation usergroupsUpdateWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  string $channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param  string $description A short description of the User Group. (optional)
     * @param  string $handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $name A name for the User Group. Must be unique among User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UsergroupsUpdateSchema|\OpenAPI\Client\Model\UsergroupsUpdateErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupsUpdateWithHttpInfo($token, $usergroup, $channels = null, $description = null, $handle = null, $include_count = null, $name = null, string $contentType = self::contentTypes['usergroupsUpdate'][0])
    {
        $request = $this->usergroupsUpdateRequest($token, $usergroup, $channels, $description, $handle, $include_count, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UsergroupsUpdateSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsUpdateSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsUpdateSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\UsergroupsUpdateErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsUpdateErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsUpdateErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UsergroupsUpdateSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsUpdateSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsUpdateErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupsUpdateAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  string $channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param  string $description A short description of the User Group. (optional)
     * @param  string $handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $name A name for the User Group. Must be unique among User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsUpdateAsync($token, $usergroup, $channels = null, $description = null, $handle = null, $include_count = null, $name = null, string $contentType = self::contentTypes['usergroupsUpdate'][0])
    {
        return $this->usergroupsUpdateAsyncWithHttpInfo($token, $usergroup, $channels, $description, $handle, $include_count, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupsUpdateAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  string $channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param  string $description A short description of the User Group. (optional)
     * @param  string $handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $name A name for the User Group. Must be unique among User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsUpdateAsyncWithHttpInfo($token, $usergroup, $channels = null, $description = null, $handle = null, $include_count = null, $name = null, string $contentType = self::contentTypes['usergroupsUpdate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UsergroupsUpdateSchema';
        $request = $this->usergroupsUpdateRequest($token, $usergroup, $channels, $description, $handle, $include_count, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupsUpdate'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  string $channels A comma separated string of encoded channel IDs for which the User Group uses as a default. (optional)
     * @param  string $description A short description of the User Group. (optional)
     * @param  string $handle A mention handle. Must be unique among channels, users and User Groups. (optional)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $name A name for the User Group. Must be unique among User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupsUpdateRequest($token, $usergroup, $channels = null, $description = null, $handle = null, $include_count = null, $name = null, string $contentType = self::contentTypes['usergroupsUpdate'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling usergroupsUpdate'
            );
        }

        // verify the required parameter 'usergroup' is set
        if ($usergroup === null || (is_array($usergroup) && count($usergroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroup when calling usergroupsUpdate'
            );
        }







        $resourcePath = '/usergroups.update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channels !== null) {
            $formParams['channels'] = ObjectSerializer::toFormValue($channels);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($handle !== null) {
            $formParams['handle'] = ObjectSerializer::toFormValue($handle);
        }
        // form params
        if ($include_count !== null) {
            $formParams['include_count'] = ObjectSerializer::toFormValue($include_count);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($usergroup !== null) {
            $formParams['usergroup'] = ObjectSerializer::toFormValue($usergroup);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupsUsersList
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  bool $include_disabled Allow results that involve disabled User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUsersList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UsergroupsUsersListSchema|\OpenAPI\Client\Model\UsergroupsUsersListErrorSchema
     */
    public function usergroupsUsersList($token, $usergroup, $include_disabled = null, string $contentType = self::contentTypes['usergroupsUsersList'][0])
    {
        list($response) = $this->usergroupsUsersListWithHttpInfo($token, $usergroup, $include_disabled, $contentType);
        return $response;
    }

    /**
     * Operation usergroupsUsersListWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  bool $include_disabled Allow results that involve disabled User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUsersList'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UsergroupsUsersListSchema|\OpenAPI\Client\Model\UsergroupsUsersListErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupsUsersListWithHttpInfo($token, $usergroup, $include_disabled = null, string $contentType = self::contentTypes['usergroupsUsersList'][0])
    {
        $request = $this->usergroupsUsersListRequest($token, $usergroup, $include_disabled, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UsergroupsUsersListSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsUsersListSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsUsersListSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\UsergroupsUsersListErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsUsersListErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsUsersListErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UsergroupsUsersListSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsUsersListSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsUsersListErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupsUsersListAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  bool $include_disabled Allow results that involve disabled User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUsersList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsUsersListAsync($token, $usergroup, $include_disabled = null, string $contentType = self::contentTypes['usergroupsUsersList'][0])
    {
        return $this->usergroupsUsersListAsyncWithHttpInfo($token, $usergroup, $include_disabled, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupsUsersListAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  bool $include_disabled Allow results that involve disabled User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUsersList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsUsersListAsyncWithHttpInfo($token, $usergroup, $include_disabled = null, string $contentType = self::contentTypes['usergroupsUsersList'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UsergroupsUsersListSchema';
        $request = $this->usergroupsUsersListRequest($token, $usergroup, $include_disabled, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupsUsersList'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:read&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  bool $include_disabled Allow results that involve disabled User Groups. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUsersList'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupsUsersListRequest($token, $usergroup, $include_disabled = null, string $contentType = self::contentTypes['usergroupsUsersList'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling usergroupsUsersList'
            );
        }

        // verify the required parameter 'usergroup' is set
        if ($usergroup === null || (is_array($usergroup) && count($usergroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroup when calling usergroupsUsersList'
            );
        }



        $resourcePath = '/usergroups.users.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $token,
            'token', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_disabled,
            'include_disabled', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $usergroup,
            'usergroup', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation usergroupsUsersUpdate
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  string $users A comma separated string of encoded user IDs that represent the entire list of users for the User Group. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUsersUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UsergroupsUsersUpdateSchema|\OpenAPI\Client\Model\UsergroupsUsersUpdateErrorSchema
     */
    public function usergroupsUsersUpdate($token, $usergroup, $users, $include_count = null, string $contentType = self::contentTypes['usergroupsUsersUpdate'][0])
    {
        list($response) = $this->usergroupsUsersUpdateWithHttpInfo($token, $usergroup, $users, $include_count, $contentType);
        return $response;
    }

    /**
     * Operation usergroupsUsersUpdateWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  string $users A comma separated string of encoded user IDs that represent the entire list of users for the User Group. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUsersUpdate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UsergroupsUsersUpdateSchema|\OpenAPI\Client\Model\UsergroupsUsersUpdateErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function usergroupsUsersUpdateWithHttpInfo($token, $usergroup, $users, $include_count = null, string $contentType = self::contentTypes['usergroupsUsersUpdate'][0])
    {
        $request = $this->usergroupsUsersUpdateRequest($token, $usergroup, $users, $include_count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UsergroupsUsersUpdateSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsUsersUpdateSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsUsersUpdateSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\UsergroupsUsersUpdateErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UsergroupsUsersUpdateErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UsergroupsUsersUpdateErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UsergroupsUsersUpdateSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsUsersUpdateSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UsergroupsUsersUpdateErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usergroupsUsersUpdateAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  string $users A comma separated string of encoded user IDs that represent the entire list of users for the User Group. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUsersUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsUsersUpdateAsync($token, $usergroup, $users, $include_count = null, string $contentType = self::contentTypes['usergroupsUsersUpdate'][0])
    {
        return $this->usergroupsUsersUpdateAsyncWithHttpInfo($token, $usergroup, $users, $include_count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usergroupsUsersUpdateAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  string $users A comma separated string of encoded user IDs that represent the entire list of users for the User Group. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUsersUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usergroupsUsersUpdateAsyncWithHttpInfo($token, $usergroup, $users, $include_count = null, string $contentType = self::contentTypes['usergroupsUsersUpdate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UsergroupsUsersUpdateSchema';
        $request = $this->usergroupsUsersUpdateRequest($token, $usergroup, $users, $include_count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'usergroupsUsersUpdate'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;usergroups:write&#x60; (required)
     * @param  string $usergroup The encoded ID of the User Group to update. (required)
     * @param  string $users A comma separated string of encoded user IDs that represent the entire list of users for the User Group. (required)
     * @param  bool $include_count Include the number of users in the User Group. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['usergroupsUsersUpdate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usergroupsUsersUpdateRequest($token, $usergroup, $users, $include_count = null, string $contentType = self::contentTypes['usergroupsUsersUpdate'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling usergroupsUsersUpdate'
            );
        }

        // verify the required parameter 'usergroup' is set
        if ($usergroup === null || (is_array($usergroup) && count($usergroup) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $usergroup when calling usergroupsUsersUpdate'
            );
        }

        // verify the required parameter 'users' is set
        if ($users === null || (is_array($users) && count($users) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $users when calling usergroupsUsersUpdate'
            );
        }



        $resourcePath = '/usergroups.users.update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($include_count !== null) {
            $formParams['include_count'] = ObjectSerializer::toFormValue($include_count);
        }
        // form params
        if ($usergroup !== null) {
            $formParams['usergroup'] = ObjectSerializer::toFormValue($usergroup);
        }
        // form params
        if ($users !== null) {
            $formParams['users'] = ObjectSerializer::toFormValue($users);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
