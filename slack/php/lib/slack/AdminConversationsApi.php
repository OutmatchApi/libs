<?php
/**
 * AdminConversationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\slack;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * AdminConversationsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AdminConversationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'adminConversationsArchive' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsConvertToPrivate' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsCreate' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsDelete' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsDisconnectShared' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsGetConversationPrefs' => [
            'application/json',
        ],
        'adminConversationsGetTeams' => [
            'application/json',
        ],
        'adminConversationsInvite' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsRename' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsSearch' => [
            'application/json',
        ],
        'adminConversationsSetConversationPrefs' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsSetTeams' => [
            'application/x-www-form-urlencoded',
        ],
        'adminConversationsUnarchive' => [
            'application/x-www-form-urlencoded',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation adminConversationsArchive
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsArchive'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsArchiveSchema|\OpenAPI\Client\Model\AdminConversationsArchiveErrorSchema
     */
    public function adminConversationsArchive($token, $channel_id, string $contentType = self::contentTypes['adminConversationsArchive'][0])
    {
        list($response) = $this->adminConversationsArchiveWithHttpInfo($token, $channel_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsArchiveWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsArchive'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsArchiveSchema|\OpenAPI\Client\Model\AdminConversationsArchiveErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsArchiveWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsArchive'][0])
    {
        $request = $this->adminConversationsArchiveRequest($token, $channel_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsArchiveSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsArchiveSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsArchiveSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsArchiveErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsArchiveErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsArchiveErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsArchiveSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsArchiveSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsArchiveErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsArchiveAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsArchiveAsync($token, $channel_id, string $contentType = self::contentTypes['adminConversationsArchive'][0])
    {
        return $this->adminConversationsArchiveAsyncWithHttpInfo($token, $channel_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsArchiveAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsArchiveAsyncWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsArchive'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsArchiveSchema';
        $request = $this->adminConversationsArchiveRequest($token, $channel_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsArchive'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to archive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsArchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsArchiveRequest($token, $channel_id, string $contentType = self::contentTypes['adminConversationsArchive'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsArchive'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsArchive'
            );
        }


        $resourcePath = '/admin.conversations.archive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsConvertToPrivate
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to convert to private. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsConvertToPrivate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema|\OpenAPI\Client\Model\AdminConversationsConvertToPrivateErrorSchema
     */
    public function adminConversationsConvertToPrivate($token, $channel_id, string $contentType = self::contentTypes['adminConversationsConvertToPrivate'][0])
    {
        list($response) = $this->adminConversationsConvertToPrivateWithHttpInfo($token, $channel_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsConvertToPrivateWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to convert to private. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsConvertToPrivate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema|\OpenAPI\Client\Model\AdminConversationsConvertToPrivateErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsConvertToPrivateWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsConvertToPrivate'][0])
    {
        $request = $this->adminConversationsConvertToPrivateRequest($token, $channel_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsConvertToPrivateErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsConvertToPrivateErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsConvertToPrivateErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsConvertToPrivateErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsConvertToPrivateAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to convert to private. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsConvertToPrivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsConvertToPrivateAsync($token, $channel_id, string $contentType = self::contentTypes['adminConversationsConvertToPrivate'][0])
    {
        return $this->adminConversationsConvertToPrivateAsyncWithHttpInfo($token, $channel_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsConvertToPrivateAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to convert to private. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsConvertToPrivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsConvertToPrivateAsyncWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsConvertToPrivate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsConvertToPrivateSchema';
        $request = $this->adminConversationsConvertToPrivateRequest($token, $channel_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsConvertToPrivate'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to convert to private. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsConvertToPrivate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsConvertToPrivateRequest($token, $channel_id, string $contentType = self::contentTypes['adminConversationsConvertToPrivate'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsConvertToPrivate'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsConvertToPrivate'
            );
        }


        $resourcePath = '/admin.conversations.convertToPrivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsCreate
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  bool $is_private When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param  string $name Name of the public or private channel to create. (required)
     * @param  string $description Description of the public or private channel to create. (optional)
     * @param  bool $org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param  string $team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsCreateSchema|\OpenAPI\Client\Model\AdminConversationsCreateErrorSchema
     */
    public function adminConversationsCreate($token, $is_private, $name, $description = null, $org_wide = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsCreate'][0])
    {
        list($response) = $this->adminConversationsCreateWithHttpInfo($token, $is_private, $name, $description, $org_wide, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsCreateWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  bool $is_private When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param  string $name Name of the public or private channel to create. (required)
     * @param  string $description Description of the public or private channel to create. (optional)
     * @param  bool $org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param  string $team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsCreate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsCreateSchema|\OpenAPI\Client\Model\AdminConversationsCreateErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsCreateWithHttpInfo($token, $is_private, $name, $description = null, $org_wide = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsCreate'][0])
    {
        $request = $this->adminConversationsCreateRequest($token, $is_private, $name, $description, $org_wide, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsCreateSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsCreateSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsCreateSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsCreateErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsCreateErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsCreateErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsCreateSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsCreateSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsCreateErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsCreateAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  bool $is_private When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param  string $name Name of the public or private channel to create. (required)
     * @param  string $description Description of the public or private channel to create. (optional)
     * @param  bool $org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param  string $team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsCreateAsync($token, $is_private, $name, $description = null, $org_wide = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsCreate'][0])
    {
        return $this->adminConversationsCreateAsyncWithHttpInfo($token, $is_private, $name, $description, $org_wide, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsCreateAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  bool $is_private When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param  string $name Name of the public or private channel to create. (required)
     * @param  string $description Description of the public or private channel to create. (optional)
     * @param  bool $org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param  string $team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsCreateAsyncWithHttpInfo($token, $is_private, $name, $description = null, $org_wide = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsCreate'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsCreateSchema';
        $request = $this->adminConversationsCreateRequest($token, $is_private, $name, $description, $org_wide, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsCreate'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  bool $is_private When &#x60;true&#x60;, creates a private channel instead of a public channel (required)
     * @param  string $name Name of the public or private channel to create. (required)
     * @param  string $description Description of the public or private channel to create. (optional)
     * @param  bool $org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param  string $team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsCreate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsCreateRequest($token, $is_private, $name, $description = null, $org_wide = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsCreate'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsCreate'
            );
        }

        // verify the required parameter 'is_private' is set
        if ($is_private === null || (is_array($is_private) && count($is_private) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $is_private when calling adminConversationsCreate'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling adminConversationsCreate'
            );
        }





        $resourcePath = '/admin.conversations.create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($is_private !== null) {
            $formParams['is_private'] = ObjectSerializer::toFormValue($is_private);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($org_wide !== null) {
            $formParams['org_wide'] = ObjectSerializer::toFormValue($org_wide);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsDelete
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsDeleteSchema|\OpenAPI\Client\Model\AdminConversationsDeleteErrorSchema
     */
    public function adminConversationsDelete($token, $channel_id, string $contentType = self::contentTypes['adminConversationsDelete'][0])
    {
        list($response) = $this->adminConversationsDeleteWithHttpInfo($token, $channel_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsDeleteWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsDeleteSchema|\OpenAPI\Client\Model\AdminConversationsDeleteErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsDeleteWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsDelete'][0])
    {
        $request = $this->adminConversationsDeleteRequest($token, $channel_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsDeleteSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsDeleteSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsDeleteSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsDeleteErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsDeleteErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsDeleteErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsDeleteSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsDeleteSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsDeleteErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsDeleteAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsDeleteAsync($token, $channel_id, string $contentType = self::contentTypes['adminConversationsDelete'][0])
    {
        return $this->adminConversationsDeleteAsyncWithHttpInfo($token, $channel_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsDeleteAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsDeleteAsyncWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsDelete'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsDeleteSchema';
        $request = $this->adminConversationsDeleteRequest($token, $channel_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsDelete'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to delete. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsDeleteRequest($token, $channel_id, string $contentType = self::contentTypes['adminConversationsDelete'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsDelete'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsDelete'
            );
        }


        $resourcePath = '/admin.conversations.delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsDisconnectShared
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to be disconnected from some workspaces. (required)
     * @param  string $leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDisconnectShared'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsRenameSchema|\OpenAPI\Client\Model\AdminConversationsDisconnectSharedErrorSchema
     */
    public function adminConversationsDisconnectShared($token, $channel_id, $leaving_team_ids = null, string $contentType = self::contentTypes['adminConversationsDisconnectShared'][0])
    {
        list($response) = $this->adminConversationsDisconnectSharedWithHttpInfo($token, $channel_id, $leaving_team_ids, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsDisconnectSharedWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to be disconnected from some workspaces. (required)
     * @param  string $leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDisconnectShared'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsRenameSchema|\OpenAPI\Client\Model\AdminConversationsDisconnectSharedErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsDisconnectSharedWithHttpInfo($token, $channel_id, $leaving_team_ids = null, string $contentType = self::contentTypes['adminConversationsDisconnectShared'][0])
    {
        $request = $this->adminConversationsDisconnectSharedRequest($token, $channel_id, $leaving_team_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsRenameSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsRenameSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsRenameSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsDisconnectSharedErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsDisconnectSharedErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsDisconnectSharedErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsRenameSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsRenameSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsDisconnectSharedErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsDisconnectSharedAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to be disconnected from some workspaces. (required)
     * @param  string $leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDisconnectShared'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsDisconnectSharedAsync($token, $channel_id, $leaving_team_ids = null, string $contentType = self::contentTypes['adminConversationsDisconnectShared'][0])
    {
        return $this->adminConversationsDisconnectSharedAsyncWithHttpInfo($token, $channel_id, $leaving_team_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsDisconnectSharedAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to be disconnected from some workspaces. (required)
     * @param  string $leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDisconnectShared'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsDisconnectSharedAsyncWithHttpInfo($token, $channel_id, $leaving_team_ids = null, string $contentType = self::contentTypes['adminConversationsDisconnectShared'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsRenameSchema';
        $request = $this->adminConversationsDisconnectSharedRequest($token, $channel_id, $leaving_team_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsDisconnectShared'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to be disconnected from some workspaces. (required)
     * @param  string $leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsDisconnectShared'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsDisconnectSharedRequest($token, $channel_id, $leaving_team_ids = null, string $contentType = self::contentTypes['adminConversationsDisconnectShared'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsDisconnectShared'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsDisconnectShared'
            );
        }



        $resourcePath = '/admin.conversations.disconnectShared';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }
        // form params
        if ($leaving_team_ids !== null) {
            $formParams['leaving_team_ids'] = ObjectSerializer::toFormValue($leaving_team_ids);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsGetConversationPrefs
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to get preferences for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema|\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema
     */
    public function adminConversationsGetConversationPrefs($token, $channel_id, string $contentType = self::contentTypes['adminConversationsGetConversationPrefs'][0])
    {
        list($response) = $this->adminConversationsGetConversationPrefsWithHttpInfo($token, $channel_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsGetConversationPrefsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to get preferences for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema|\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsGetConversationPrefsWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsGetConversationPrefs'][0])
    {
        $request = $this->adminConversationsGetConversationPrefsRequest($token, $channel_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsGetConversationPrefsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to get preferences for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsGetConversationPrefsAsync($token, $channel_id, string $contentType = self::contentTypes['adminConversationsGetConversationPrefs'][0])
    {
        return $this->adminConversationsGetConversationPrefsAsyncWithHttpInfo($token, $channel_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsGetConversationPrefsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to get preferences for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsGetConversationPrefsAsyncWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsGetConversationPrefs'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsGetConversationPrefsSchema';
        $request = $this->adminConversationsGetConversationPrefsRequest($token, $channel_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsGetConversationPrefs'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to get preferences for. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsGetConversationPrefsRequest($token, $channel_id, string $contentType = self::contentTypes['adminConversationsGetConversationPrefs'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsGetConversationPrefs'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsGetConversationPrefs'
            );
        }


        $resourcePath = '/admin.conversations.getConversationPrefs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel_id,
            'channel_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsGetTeams
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to determine connected workspaces within the organization for. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetTeams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsGetTeamsSchema|\OpenAPI\Client\Model\AdminConversationsGetTeamsErrorSchema
     */
    public function adminConversationsGetTeams($token, $channel_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminConversationsGetTeams'][0])
    {
        list($response) = $this->adminConversationsGetTeamsWithHttpInfo($token, $channel_id, $cursor, $limit, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsGetTeamsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to determine connected workspaces within the organization for. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetTeams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsGetTeamsSchema|\OpenAPI\Client\Model\AdminConversationsGetTeamsErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsGetTeamsWithHttpInfo($token, $channel_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminConversationsGetTeams'][0])
    {
        $request = $this->adminConversationsGetTeamsRequest($token, $channel_id, $cursor, $limit, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsGetTeamsSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsGetTeamsSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsGetTeamsSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsGetTeamsErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsGetTeamsErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsGetTeamsErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsGetTeamsSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsGetTeamsSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsGetTeamsErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsGetTeamsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to determine connected workspaces within the organization for. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsGetTeamsAsync($token, $channel_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminConversationsGetTeams'][0])
    {
        return $this->adminConversationsGetTeamsAsyncWithHttpInfo($token, $channel_id, $cursor, $limit, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsGetTeamsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to determine connected workspaces within the organization for. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsGetTeamsAsyncWithHttpInfo($token, $channel_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminConversationsGetTeams'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsGetTeamsSchema';
        $request = $this->adminConversationsGetTeamsRequest($token, $channel_id, $cursor, $limit, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsGetTeams'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $channel_id The channel to determine connected workspaces within the organization for. (required)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param  int $limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsGetTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsGetTeamsRequest($token, $channel_id, $cursor = null, $limit = null, string $contentType = self::contentTypes['adminConversationsGetTeams'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsGetTeams'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsGetTeams'
            );
        }




        $resourcePath = '/admin.conversations.getTeams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel_id,
            'channel_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsInvite
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel that the users will be invited to. (required)
     * @param  string $user_ids The users to invite. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsInvite'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsInviteSchema|\OpenAPI\Client\Model\AdminConversationsInviteErrorSchema
     */
    public function adminConversationsInvite($token, $channel_id, $user_ids, string $contentType = self::contentTypes['adminConversationsInvite'][0])
    {
        list($response) = $this->adminConversationsInviteWithHttpInfo($token, $channel_id, $user_ids, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsInviteWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel that the users will be invited to. (required)
     * @param  string $user_ids The users to invite. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsInvite'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsInviteSchema|\OpenAPI\Client\Model\AdminConversationsInviteErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsInviteWithHttpInfo($token, $channel_id, $user_ids, string $contentType = self::contentTypes['adminConversationsInvite'][0])
    {
        $request = $this->adminConversationsInviteRequest($token, $channel_id, $user_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsInviteSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsInviteSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsInviteSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsInviteErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsInviteErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsInviteErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsInviteSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsInviteSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsInviteErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsInviteAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel that the users will be invited to. (required)
     * @param  string $user_ids The users to invite. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsInviteAsync($token, $channel_id, $user_ids, string $contentType = self::contentTypes['adminConversationsInvite'][0])
    {
        return $this->adminConversationsInviteAsyncWithHttpInfo($token, $channel_id, $user_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsInviteAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel that the users will be invited to. (required)
     * @param  string $user_ids The users to invite. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsInviteAsyncWithHttpInfo($token, $channel_id, $user_ids, string $contentType = self::contentTypes['adminConversationsInvite'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsInviteSchema';
        $request = $this->adminConversationsInviteRequest($token, $channel_id, $user_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsInvite'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel that the users will be invited to. (required)
     * @param  string $user_ids The users to invite. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsInvite'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsInviteRequest($token, $channel_id, $user_ids, string $contentType = self::contentTypes['adminConversationsInvite'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsInvite'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsInvite'
            );
        }

        // verify the required parameter 'user_ids' is set
        if ($user_ids === null || (is_array($user_ids) && count($user_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_ids when calling adminConversationsInvite'
            );
        }


        $resourcePath = '/admin.conversations.invite';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }
        // form params
        if ($user_ids !== null) {
            $formParams['user_ids'] = ObjectSerializer::toFormValue($user_ids);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsRename
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to rename. (required)
     * @param  string $name name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRename'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsRenameSchema1|\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema1
     */
    public function adminConversationsRename($token, $channel_id, $name, string $contentType = self::contentTypes['adminConversationsRename'][0])
    {
        list($response) = $this->adminConversationsRenameWithHttpInfo($token, $channel_id, $name, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsRenameWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to rename. (required)
     * @param  string $name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRename'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsRenameSchema1|\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema1, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsRenameWithHttpInfo($token, $channel_id, $name, string $contentType = self::contentTypes['adminConversationsRename'][0])
    {
        $request = $this->adminConversationsRenameRequest($token, $channel_id, $name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsRenameSchema1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsRenameSchema1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsRenameSchema1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema1' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema1' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema1', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsRenameSchema1';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsRenameSchema1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsRenameAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to rename. (required)
     * @param  string $name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsRenameAsync($token, $channel_id, $name, string $contentType = self::contentTypes['adminConversationsRename'][0])
    {
        return $this->adminConversationsRenameAsyncWithHttpInfo($token, $channel_id, $name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsRenameAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to rename. (required)
     * @param  string $name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsRenameAsyncWithHttpInfo($token, $channel_id, $name, string $contentType = self::contentTypes['adminConversationsRename'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsRenameSchema1';
        $request = $this->adminConversationsRenameRequest($token, $channel_id, $name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsRename'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to rename. (required)
     * @param  string $name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsRename'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsRenameRequest($token, $channel_id, $name, string $contentType = self::contentTypes['adminConversationsRename'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsRename'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsRename'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling adminConversationsRename'
            );
        }


        $resourcePath = '/admin.conversations.rename';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsSearch
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $team_ids Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param  string $query Name of the the channel to query by. (optional)
     * @param  int $limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param  string $sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted (optional)
     * @param  string $sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsSearchSchema|\OpenAPI\Client\Model\AdminConversationsSearchErrorSchema
     */
    public function adminConversationsSearch($token, $team_ids = null, $query = null, $limit = null, $cursor = null, $search_channel_types = null, $sort = null, $sort_dir = null, string $contentType = self::contentTypes['adminConversationsSearch'][0])
    {
        list($response) = $this->adminConversationsSearchWithHttpInfo($token, $team_ids, $query, $limit, $cursor, $search_channel_types, $sort, $sort_dir, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsSearchWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $team_ids Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param  string $query Name of the the channel to query by. (optional)
     * @param  int $limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param  string $sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted (optional)
     * @param  string $sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsSearchSchema|\OpenAPI\Client\Model\AdminConversationsSearchErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsSearchWithHttpInfo($token, $team_ids = null, $query = null, $limit = null, $cursor = null, $search_channel_types = null, $sort = null, $sort_dir = null, string $contentType = self::contentTypes['adminConversationsSearch'][0])
    {
        $request = $this->adminConversationsSearchRequest($token, $team_ids, $query, $limit, $cursor, $search_channel_types, $sort, $sort_dir, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsSearchSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsSearchSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsSearchSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsSearchErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsSearchErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsSearchErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsSearchSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsSearchSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsSearchErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsSearchAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $team_ids Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param  string $query Name of the the channel to query by. (optional)
     * @param  int $limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param  string $sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted (optional)
     * @param  string $sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsSearchAsync($token, $team_ids = null, $query = null, $limit = null, $cursor = null, $search_channel_types = null, $sort = null, $sort_dir = null, string $contentType = self::contentTypes['adminConversationsSearch'][0])
    {
        return $this->adminConversationsSearchAsyncWithHttpInfo($token, $team_ids, $query, $limit, $cursor, $search_channel_types, $sort, $sort_dir, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsSearchAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $team_ids Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param  string $query Name of the the channel to query by. (optional)
     * @param  int $limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param  string $sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted (optional)
     * @param  string $sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsSearchAsyncWithHttpInfo($token, $team_ids = null, $query = null, $limit = null, $cursor = null, $search_channel_types = null, $sort = null, $sort_dir = null, string $contentType = self::contentTypes['adminConversationsSearch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsSearchSchema';
        $request = $this->adminConversationsSearchRequest($token, $team_ids, $query, $limit, $cursor, $search_channel_types, $sort, $sort_dir, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsSearch'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60; (required)
     * @param  string $team_ids Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param  string $query Name of the the channel to query by. (optional)
     * @param  int $limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param  string $cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param  string $search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param  string $sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted (optional)
     * @param  string $sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsSearchRequest($token, $team_ids = null, $query = null, $limit = null, $cursor = null, $search_channel_types = null, $sort = null, $sort_dir = null, string $contentType = self::contentTypes['adminConversationsSearch'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsSearch'
            );
        }









        $resourcePath = '/admin.conversations.search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $team_ids,
            'team_ids', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $query,
            'query', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $cursor,
            'cursor', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $search_channel_types,
            'search_channel_types', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort,
            'sort', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sort_dir,
            'sort_dir', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsSetConversationPrefs
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to set the prefs for (required)
     * @param  string $prefs The prefs for this channel in a stringified JSON format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema|\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsErrorSchema
     */
    public function adminConversationsSetConversationPrefs($token, $channel_id, $prefs, string $contentType = self::contentTypes['adminConversationsSetConversationPrefs'][0])
    {
        list($response) = $this->adminConversationsSetConversationPrefsWithHttpInfo($token, $channel_id, $prefs, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsSetConversationPrefsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to set the prefs for (required)
     * @param  string $prefs The prefs for this channel in a stringified JSON format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema|\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsErrorSchema, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsSetConversationPrefsWithHttpInfo($token, $channel_id, $prefs, string $contentType = self::contentTypes['adminConversationsSetConversationPrefs'][0])
    {
        $request = $this->adminConversationsSetConversationPrefsRequest($token, $channel_id, $prefs, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsErrorSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsErrorSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsErrorSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsErrorSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsSetConversationPrefsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to set the prefs for (required)
     * @param  string $prefs The prefs for this channel in a stringified JSON format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsSetConversationPrefsAsync($token, $channel_id, $prefs, string $contentType = self::contentTypes['adminConversationsSetConversationPrefs'][0])
    {
        return $this->adminConversationsSetConversationPrefsAsyncWithHttpInfo($token, $channel_id, $prefs, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsSetConversationPrefsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to set the prefs for (required)
     * @param  string $prefs The prefs for this channel in a stringified JSON format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsSetConversationPrefsAsyncWithHttpInfo($token, $channel_id, $prefs, string $contentType = self::contentTypes['adminConversationsSetConversationPrefs'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsSetConversationPrefsSchema';
        $request = $this->adminConversationsSetConversationPrefsRequest($token, $channel_id, $prefs, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsSetConversationPrefs'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to set the prefs for (required)
     * @param  string $prefs The prefs for this channel in a stringified JSON format. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetConversationPrefs'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsSetConversationPrefsRequest($token, $channel_id, $prefs, string $contentType = self::contentTypes['adminConversationsSetConversationPrefs'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsSetConversationPrefs'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsSetConversationPrefs'
            );
        }

        // verify the required parameter 'prefs' is set
        if ($prefs === null || (is_array($prefs) && count($prefs) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prefs when calling adminConversationsSetConversationPrefs'
            );
        }


        $resourcePath = '/admin.conversations.setConversationPrefs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }
        // form params
        if ($prefs !== null) {
            $formParams['prefs'] = ObjectSerializer::toFormValue($prefs);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsSetTeams
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param  bool $org_channel True if channel has to be converted to an org channel (optional)
     * @param  string $target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param  string $team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetTeams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate
     */
    public function adminConversationsSetTeams($token, $channel_id, $org_channel = null, $target_team_ids = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsSetTeams'][0])
    {
        list($response) = $this->adminConversationsSetTeamsWithHttpInfo($token, $channel_id, $org_channel, $target_team_ids, $team_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsSetTeamsWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param  bool $org_channel True if channel has to be converted to an org channel (optional)
     * @param  string $target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param  string $team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetTeams'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DefaultSuccessTemplate|\OpenAPI\Client\Model\DefaultErrorTemplate, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsSetTeamsWithHttpInfo($token, $channel_id, $org_channel = null, $target_team_ids = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsSetTeams'][0])
    {
        $request = $this->adminConversationsSetTeamsRequest($token, $channel_id, $org_channel, $target_team_ids, $team_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultSuccessTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultSuccessTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\DefaultErrorTemplate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DefaultErrorTemplate' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DefaultErrorTemplate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultSuccessTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DefaultErrorTemplate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsSetTeamsAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param  bool $org_channel True if channel has to be converted to an org channel (optional)
     * @param  string $target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param  string $team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsSetTeamsAsync($token, $channel_id, $org_channel = null, $target_team_ids = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsSetTeams'][0])
    {
        return $this->adminConversationsSetTeamsAsyncWithHttpInfo($token, $channel_id, $org_channel, $target_team_ids, $team_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsSetTeamsAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param  bool $org_channel True if channel has to be converted to an org channel (optional)
     * @param  string $target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param  string $team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsSetTeamsAsyncWithHttpInfo($token, $channel_id, $org_channel = null, $target_team_ids = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsSetTeams'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DefaultSuccessTemplate';
        $request = $this->adminConversationsSetTeamsRequest($token, $channel_id, $org_channel, $target_team_ids, $team_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsSetTeams'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The encoded &#x60;channel_id&#x60; to add or remove to workspaces. (required)
     * @param  bool $org_channel True if channel has to be converted to an org channel (optional)
     * @param  string $target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param  string $team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsSetTeams'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsSetTeamsRequest($token, $channel_id, $org_channel = null, $target_team_ids = null, $team_id = null, string $contentType = self::contentTypes['adminConversationsSetTeams'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsSetTeams'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsSetTeams'
            );
        }





        $resourcePath = '/admin.conversations.setTeams';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }
        // form params
        if ($org_channel !== null) {
            $formParams['org_channel'] = ObjectSerializer::toFormValue($org_channel);
        }
        // form params
        if ($target_team_ids !== null) {
            $formParams['target_team_ids'] = ObjectSerializer::toFormValue($target_team_ids);
        }
        // form params
        if ($team_id !== null) {
            $formParams['team_id'] = ObjectSerializer::toFormValue($team_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation adminConversationsUnarchive
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsUnarchive'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\AdminConversationsUnarchiveSchema|\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema2
     */
    public function adminConversationsUnarchive($token, $channel_id, string $contentType = self::contentTypes['adminConversationsUnarchive'][0])
    {
        list($response) = $this->adminConversationsUnarchiveWithHttpInfo($token, $channel_id, $contentType);
        return $response;
    }

    /**
     * Operation adminConversationsUnarchiveWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsUnarchive'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\AdminConversationsUnarchiveSchema|\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema2, HTTP status code, HTTP response headers (array of strings)
     */
    public function adminConversationsUnarchiveWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsUnarchive'][0])
    {
        $request = $this->adminConversationsUnarchiveRequest($token, $channel_id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveSchema' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveSchema' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsUnarchiveSchema', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema2' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema2' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema2', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\AdminConversationsUnarchiveSchema';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsUnarchiveSchema',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\AdminConversationsUnarchiveErrorSchema2',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation adminConversationsUnarchiveAsync
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsUnarchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsUnarchiveAsync($token, $channel_id, string $contentType = self::contentTypes['adminConversationsUnarchive'][0])
    {
        return $this->adminConversationsUnarchiveAsyncWithHttpInfo($token, $channel_id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation adminConversationsUnarchiveAsyncWithHttpInfo
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsUnarchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function adminConversationsUnarchiveAsyncWithHttpInfo($token, $channel_id, string $contentType = self::contentTypes['adminConversationsUnarchive'][0])
    {
        $returnType = '\OpenAPI\Client\Model\AdminConversationsUnarchiveSchema';
        $request = $this->adminConversationsUnarchiveRequest($token, $channel_id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'adminConversationsUnarchive'
     *
     * @param  string $token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60; (required)
     * @param  string $channel_id The channel to unarchive. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['adminConversationsUnarchive'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function adminConversationsUnarchiveRequest($token, $channel_id, string $contentType = self::contentTypes['adminConversationsUnarchive'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling adminConversationsUnarchive'
            );
        }

        // verify the required parameter 'channel_id' is set
        if ($channel_id === null || (is_array($channel_id) && count($channel_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $channel_id when calling adminConversationsUnarchive'
            );
        }


        $resourcePath = '/admin.conversations.unarchive';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($token !== null) {
            $headerParams['token'] = ObjectSerializer::toHeaderValue($token);
        }


        // form params
        if ($channel_id !== null) {
            $formParams['channel_id'] = ObjectSerializer::toFormValue($channel_id);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
