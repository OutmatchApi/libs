<?php
/**
 * ObjsChannel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ObjsChannel Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ObjsChannel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'objs_channel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accepted_user' => 'string',
        'created' => 'int',
        'creator' => 'string',
        'id' => 'string',
        'is_archived' => 'bool',
        'is_channel' => 'bool',
        'is_frozen' => 'bool',
        'is_general' => 'bool',
        'is_member' => 'bool',
        'is_moved' => 'int',
        'is_mpim' => 'bool',
        'is_non_threadable' => 'bool',
        'is_org_shared' => 'bool',
        'is_pending_ext_shared' => 'bool',
        'is_private' => 'bool',
        'is_read_only' => 'bool',
        'is_shared' => 'bool',
        'is_thread_only' => 'bool',
        'last_read' => 'string',
        'latest' => '\OpenAPI\Client\Model\ObjsChannelLatestInner[]',
        'members' => 'string[]',
        'name' => 'string',
        'name_normalized' => 'string',
        'num_members' => 'int',
        'pending_shared' => 'string[]',
        'previous_names' => 'string[]',
        'priority' => 'float',
        'purpose' => '\OpenAPI\Client\Model\ObjsChannelPurpose',
        'topic' => '\OpenAPI\Client\Model\ObjsChannelPurpose',
        'unlinked' => 'int',
        'unread_count' => 'int',
        'unread_count_display' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accepted_user' => null,
        'created' => null,
        'creator' => null,
        'id' => null,
        'is_archived' => null,
        'is_channel' => null,
        'is_frozen' => null,
        'is_general' => null,
        'is_member' => null,
        'is_moved' => null,
        'is_mpim' => null,
        'is_non_threadable' => null,
        'is_org_shared' => null,
        'is_pending_ext_shared' => null,
        'is_private' => null,
        'is_read_only' => null,
        'is_shared' => null,
        'is_thread_only' => null,
        'last_read' => null,
        'latest' => null,
        'members' => null,
        'name' => null,
        'name_normalized' => null,
        'num_members' => null,
        'pending_shared' => null,
        'previous_names' => null,
        'priority' => null,
        'purpose' => null,
        'topic' => null,
        'unlinked' => null,
        'unread_count' => null,
        'unread_count_display' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accepted_user' => false,
		'created' => false,
		'creator' => false,
		'id' => false,
		'is_archived' => false,
		'is_channel' => false,
		'is_frozen' => false,
		'is_general' => false,
		'is_member' => false,
		'is_moved' => false,
		'is_mpim' => false,
		'is_non_threadable' => false,
		'is_org_shared' => false,
		'is_pending_ext_shared' => false,
		'is_private' => false,
		'is_read_only' => false,
		'is_shared' => false,
		'is_thread_only' => false,
		'last_read' => false,
		'latest' => false,
		'members' => false,
		'name' => false,
		'name_normalized' => false,
		'num_members' => false,
		'pending_shared' => false,
		'previous_names' => false,
		'priority' => false,
		'purpose' => false,
		'topic' => false,
		'unlinked' => false,
		'unread_count' => false,
		'unread_count_display' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accepted_user' => 'accepted_user',
        'created' => 'created',
        'creator' => 'creator',
        'id' => 'id',
        'is_archived' => 'is_archived',
        'is_channel' => 'is_channel',
        'is_frozen' => 'is_frozen',
        'is_general' => 'is_general',
        'is_member' => 'is_member',
        'is_moved' => 'is_moved',
        'is_mpim' => 'is_mpim',
        'is_non_threadable' => 'is_non_threadable',
        'is_org_shared' => 'is_org_shared',
        'is_pending_ext_shared' => 'is_pending_ext_shared',
        'is_private' => 'is_private',
        'is_read_only' => 'is_read_only',
        'is_shared' => 'is_shared',
        'is_thread_only' => 'is_thread_only',
        'last_read' => 'last_read',
        'latest' => 'latest',
        'members' => 'members',
        'name' => 'name',
        'name_normalized' => 'name_normalized',
        'num_members' => 'num_members',
        'pending_shared' => 'pending_shared',
        'previous_names' => 'previous_names',
        'priority' => 'priority',
        'purpose' => 'purpose',
        'topic' => 'topic',
        'unlinked' => 'unlinked',
        'unread_count' => 'unread_count',
        'unread_count_display' => 'unread_count_display'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accepted_user' => 'setAcceptedUser',
        'created' => 'setCreated',
        'creator' => 'setCreator',
        'id' => 'setId',
        'is_archived' => 'setIsArchived',
        'is_channel' => 'setIsChannel',
        'is_frozen' => 'setIsFrozen',
        'is_general' => 'setIsGeneral',
        'is_member' => 'setIsMember',
        'is_moved' => 'setIsMoved',
        'is_mpim' => 'setIsMpim',
        'is_non_threadable' => 'setIsNonThreadable',
        'is_org_shared' => 'setIsOrgShared',
        'is_pending_ext_shared' => 'setIsPendingExtShared',
        'is_private' => 'setIsPrivate',
        'is_read_only' => 'setIsReadOnly',
        'is_shared' => 'setIsShared',
        'is_thread_only' => 'setIsThreadOnly',
        'last_read' => 'setLastRead',
        'latest' => 'setLatest',
        'members' => 'setMembers',
        'name' => 'setName',
        'name_normalized' => 'setNameNormalized',
        'num_members' => 'setNumMembers',
        'pending_shared' => 'setPendingShared',
        'previous_names' => 'setPreviousNames',
        'priority' => 'setPriority',
        'purpose' => 'setPurpose',
        'topic' => 'setTopic',
        'unlinked' => 'setUnlinked',
        'unread_count' => 'setUnreadCount',
        'unread_count_display' => 'setUnreadCountDisplay'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accepted_user' => 'getAcceptedUser',
        'created' => 'getCreated',
        'creator' => 'getCreator',
        'id' => 'getId',
        'is_archived' => 'getIsArchived',
        'is_channel' => 'getIsChannel',
        'is_frozen' => 'getIsFrozen',
        'is_general' => 'getIsGeneral',
        'is_member' => 'getIsMember',
        'is_moved' => 'getIsMoved',
        'is_mpim' => 'getIsMpim',
        'is_non_threadable' => 'getIsNonThreadable',
        'is_org_shared' => 'getIsOrgShared',
        'is_pending_ext_shared' => 'getIsPendingExtShared',
        'is_private' => 'getIsPrivate',
        'is_read_only' => 'getIsReadOnly',
        'is_shared' => 'getIsShared',
        'is_thread_only' => 'getIsThreadOnly',
        'last_read' => 'getLastRead',
        'latest' => 'getLatest',
        'members' => 'getMembers',
        'name' => 'getName',
        'name_normalized' => 'getNameNormalized',
        'num_members' => 'getNumMembers',
        'pending_shared' => 'getPendingShared',
        'previous_names' => 'getPreviousNames',
        'priority' => 'getPriority',
        'purpose' => 'getPurpose',
        'topic' => 'getTopic',
        'unlinked' => 'getUnlinked',
        'unread_count' => 'getUnreadCount',
        'unread_count_display' => 'getUnreadCountDisplay'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('accepted_user', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('creator', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_archived', $data ?? [], null);
        $this->setIfExists('is_channel', $data ?? [], null);
        $this->setIfExists('is_frozen', $data ?? [], null);
        $this->setIfExists('is_general', $data ?? [], null);
        $this->setIfExists('is_member', $data ?? [], null);
        $this->setIfExists('is_moved', $data ?? [], null);
        $this->setIfExists('is_mpim', $data ?? [], null);
        $this->setIfExists('is_non_threadable', $data ?? [], null);
        $this->setIfExists('is_org_shared', $data ?? [], null);
        $this->setIfExists('is_pending_ext_shared', $data ?? [], null);
        $this->setIfExists('is_private', $data ?? [], null);
        $this->setIfExists('is_read_only', $data ?? [], null);
        $this->setIfExists('is_shared', $data ?? [], null);
        $this->setIfExists('is_thread_only', $data ?? [], null);
        $this->setIfExists('last_read', $data ?? [], null);
        $this->setIfExists('latest', $data ?? [], null);
        $this->setIfExists('members', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('name_normalized', $data ?? [], null);
        $this->setIfExists('num_members', $data ?? [], null);
        $this->setIfExists('pending_shared', $data ?? [], null);
        $this->setIfExists('previous_names', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('purpose', $data ?? [], null);
        $this->setIfExists('topic', $data ?? [], null);
        $this->setIfExists('unlinked', $data ?? [], null);
        $this->setIfExists('unread_count', $data ?? [], null);
        $this->setIfExists('unread_count_display', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['accepted_user']) && !preg_match("/^[UW][A-Z0-9]{2,}$/", $this->container['accepted_user'])) {
            $invalidProperties[] = "invalid value for 'accepted_user', must be conform to the pattern /^[UW][A-Z0-9]{2,}$/.";
        }

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['creator'] === null) {
            $invalidProperties[] = "'creator' can't be null";
        }
        if (!preg_match("/^[UW][A-Z0-9]{2,}$/", $this->container['creator'])) {
            $invalidProperties[] = "invalid value for 'creator', must be conform to the pattern /^[UW][A-Z0-9]{2,}$/.";
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^[C][A-Z0-9]{2,}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[C][A-Z0-9]{2,}$/.";
        }

        if ($this->container['is_channel'] === null) {
            $invalidProperties[] = "'is_channel' can't be null";
        }
        if ($this->container['is_mpim'] === null) {
            $invalidProperties[] = "'is_mpim' can't be null";
        }
        if ($this->container['is_org_shared'] === null) {
            $invalidProperties[] = "'is_org_shared' can't be null";
        }
        if ($this->container['is_private'] === null) {
            $invalidProperties[] = "'is_private' can't be null";
        }
        if ($this->container['is_shared'] === null) {
            $invalidProperties[] = "'is_shared' can't be null";
        }
        if (!is_null($this->container['last_read']) && !preg_match("/^\\d{10}\\.\\d{6}$/", $this->container['last_read'])) {
            $invalidProperties[] = "invalid value for 'last_read', must be conform to the pattern /^\\d{10}\\.\\d{6}$/.";
        }

        if ($this->container['members'] === null) {
            $invalidProperties[] = "'members' can't be null";
        }
        if ((count($this->container['members']) < 0)) {
            $invalidProperties[] = "invalid value for 'members', number of items must be greater than or equal to 0.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['name_normalized'] === null) {
            $invalidProperties[] = "'name_normalized' can't be null";
        }
        if (!is_null($this->container['pending_shared']) && (count($this->container['pending_shared']) < 0)) {
            $invalidProperties[] = "invalid value for 'pending_shared', number of items must be greater than or equal to 0.";
        }

        if (!is_null($this->container['previous_names']) && (count($this->container['previous_names']) < 0)) {
            $invalidProperties[] = "invalid value for 'previous_names', number of items must be greater than or equal to 0.";
        }

        if ($this->container['purpose'] === null) {
            $invalidProperties[] = "'purpose' can't be null";
        }
        if ($this->container['topic'] === null) {
            $invalidProperties[] = "'topic' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accepted_user
     *
     * @return string|null
     */
    public function getAcceptedUser()
    {
        return $this->container['accepted_user'];
    }

    /**
     * Sets accepted_user
     *
     * @param string|null $accepted_user accepted_user
     *
     * @return self
     */
    public function setAcceptedUser($accepted_user)
    {

        if (!is_null($accepted_user) && (!preg_match("/^[UW][A-Z0-9]{2,}$/", $accepted_user))) {
            throw new \InvalidArgumentException("invalid value for \$accepted_user when calling ObjsChannel., must conform to the pattern /^[UW][A-Z0-9]{2,}$/.");
        }


        if (is_null($accepted_user)) {
            throw new \InvalidArgumentException('non-nullable accepted_user cannot be null');
        }

        $this->container['accepted_user'] = $accepted_user;

        return $this;
    }

    /**
     * Gets created
     *
     * @return int
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int $created created
     *
     * @return self
     */
    public function setCreated($created)
    {

        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }

        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return string
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param string $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {

        if ((!preg_match("/^[UW][A-Z0-9]{2,}$/", $creator))) {
            throw new \InvalidArgumentException("invalid value for \$creator when calling ObjsChannel., must conform to the pattern /^[UW][A-Z0-9]{2,}$/.");
        }


        if (is_null($creator)) {
            throw new \InvalidArgumentException('non-nullable creator cannot be null');
        }

        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if ((!preg_match("/^[C][A-Z0-9]{2,}$/", $id))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling ObjsChannel., must conform to the pattern /^[C][A-Z0-9]{2,}$/.");
        }


        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool|null
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool|null $is_archived is_archived
     *
     * @return self
     */
    public function setIsArchived($is_archived)
    {

        if (is_null($is_archived)) {
            throw new \InvalidArgumentException('non-nullable is_archived cannot be null');
        }

        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets is_channel
     *
     * @return bool
     */
    public function getIsChannel()
    {
        return $this->container['is_channel'];
    }

    /**
     * Sets is_channel
     *
     * @param bool $is_channel is_channel
     *
     * @return self
     */
    public function setIsChannel($is_channel)
    {

        if (is_null($is_channel)) {
            throw new \InvalidArgumentException('non-nullable is_channel cannot be null');
        }

        $this->container['is_channel'] = $is_channel;

        return $this;
    }

    /**
     * Gets is_frozen
     *
     * @return bool|null
     */
    public function getIsFrozen()
    {
        return $this->container['is_frozen'];
    }

    /**
     * Sets is_frozen
     *
     * @param bool|null $is_frozen is_frozen
     *
     * @return self
     */
    public function setIsFrozen($is_frozen)
    {

        if (is_null($is_frozen)) {
            throw new \InvalidArgumentException('non-nullable is_frozen cannot be null');
        }

        $this->container['is_frozen'] = $is_frozen;

        return $this;
    }

    /**
     * Gets is_general
     *
     * @return bool|null
     */
    public function getIsGeneral()
    {
        return $this->container['is_general'];
    }

    /**
     * Sets is_general
     *
     * @param bool|null $is_general is_general
     *
     * @return self
     */
    public function setIsGeneral($is_general)
    {

        if (is_null($is_general)) {
            throw new \InvalidArgumentException('non-nullable is_general cannot be null');
        }

        $this->container['is_general'] = $is_general;

        return $this;
    }

    /**
     * Gets is_member
     *
     * @return bool|null
     */
    public function getIsMember()
    {
        return $this->container['is_member'];
    }

    /**
     * Sets is_member
     *
     * @param bool|null $is_member is_member
     *
     * @return self
     */
    public function setIsMember($is_member)
    {

        if (is_null($is_member)) {
            throw new \InvalidArgumentException('non-nullable is_member cannot be null');
        }

        $this->container['is_member'] = $is_member;

        return $this;
    }

    /**
     * Gets is_moved
     *
     * @return int|null
     */
    public function getIsMoved()
    {
        return $this->container['is_moved'];
    }

    /**
     * Sets is_moved
     *
     * @param int|null $is_moved is_moved
     *
     * @return self
     */
    public function setIsMoved($is_moved)
    {

        if (is_null($is_moved)) {
            throw new \InvalidArgumentException('non-nullable is_moved cannot be null');
        }

        $this->container['is_moved'] = $is_moved;

        return $this;
    }

    /**
     * Gets is_mpim
     *
     * @return bool
     */
    public function getIsMpim()
    {
        return $this->container['is_mpim'];
    }

    /**
     * Sets is_mpim
     *
     * @param bool $is_mpim is_mpim
     *
     * @return self
     */
    public function setIsMpim($is_mpim)
    {

        if (is_null($is_mpim)) {
            throw new \InvalidArgumentException('non-nullable is_mpim cannot be null');
        }

        $this->container['is_mpim'] = $is_mpim;

        return $this;
    }

    /**
     * Gets is_non_threadable
     *
     * @return bool|null
     */
    public function getIsNonThreadable()
    {
        return $this->container['is_non_threadable'];
    }

    /**
     * Sets is_non_threadable
     *
     * @param bool|null $is_non_threadable is_non_threadable
     *
     * @return self
     */
    public function setIsNonThreadable($is_non_threadable)
    {

        if (is_null($is_non_threadable)) {
            throw new \InvalidArgumentException('non-nullable is_non_threadable cannot be null');
        }

        $this->container['is_non_threadable'] = $is_non_threadable;

        return $this;
    }

    /**
     * Gets is_org_shared
     *
     * @return bool
     */
    public function getIsOrgShared()
    {
        return $this->container['is_org_shared'];
    }

    /**
     * Sets is_org_shared
     *
     * @param bool $is_org_shared is_org_shared
     *
     * @return self
     */
    public function setIsOrgShared($is_org_shared)
    {

        if (is_null($is_org_shared)) {
            throw new \InvalidArgumentException('non-nullable is_org_shared cannot be null');
        }

        $this->container['is_org_shared'] = $is_org_shared;

        return $this;
    }

    /**
     * Gets is_pending_ext_shared
     *
     * @return bool|null
     */
    public function getIsPendingExtShared()
    {
        return $this->container['is_pending_ext_shared'];
    }

    /**
     * Sets is_pending_ext_shared
     *
     * @param bool|null $is_pending_ext_shared is_pending_ext_shared
     *
     * @return self
     */
    public function setIsPendingExtShared($is_pending_ext_shared)
    {

        if (is_null($is_pending_ext_shared)) {
            throw new \InvalidArgumentException('non-nullable is_pending_ext_shared cannot be null');
        }

        $this->container['is_pending_ext_shared'] = $is_pending_ext_shared;

        return $this;
    }

    /**
     * Gets is_private
     *
     * @return bool
     */
    public function getIsPrivate()
    {
        return $this->container['is_private'];
    }

    /**
     * Sets is_private
     *
     * @param bool $is_private is_private
     *
     * @return self
     */
    public function setIsPrivate($is_private)
    {

        if (is_null($is_private)) {
            throw new \InvalidArgumentException('non-nullable is_private cannot be null');
        }

        $this->container['is_private'] = $is_private;

        return $this;
    }

    /**
     * Gets is_read_only
     *
     * @return bool|null
     */
    public function getIsReadOnly()
    {
        return $this->container['is_read_only'];
    }

    /**
     * Sets is_read_only
     *
     * @param bool|null $is_read_only is_read_only
     *
     * @return self
     */
    public function setIsReadOnly($is_read_only)
    {

        if (is_null($is_read_only)) {
            throw new \InvalidArgumentException('non-nullable is_read_only cannot be null');
        }

        $this->container['is_read_only'] = $is_read_only;

        return $this;
    }

    /**
     * Gets is_shared
     *
     * @return bool
     */
    public function getIsShared()
    {
        return $this->container['is_shared'];
    }

    /**
     * Sets is_shared
     *
     * @param bool $is_shared is_shared
     *
     * @return self
     */
    public function setIsShared($is_shared)
    {

        if (is_null($is_shared)) {
            throw new \InvalidArgumentException('non-nullable is_shared cannot be null');
        }

        $this->container['is_shared'] = $is_shared;

        return $this;
    }

    /**
     * Gets is_thread_only
     *
     * @return bool|null
     */
    public function getIsThreadOnly()
    {
        return $this->container['is_thread_only'];
    }

    /**
     * Sets is_thread_only
     *
     * @param bool|null $is_thread_only is_thread_only
     *
     * @return self
     */
    public function setIsThreadOnly($is_thread_only)
    {

        if (is_null($is_thread_only)) {
            throw new \InvalidArgumentException('non-nullable is_thread_only cannot be null');
        }

        $this->container['is_thread_only'] = $is_thread_only;

        return $this;
    }

    /**
     * Gets last_read
     *
     * @return string|null
     */
    public function getLastRead()
    {
        return $this->container['last_read'];
    }

    /**
     * Sets last_read
     *
     * @param string|null $last_read last_read
     *
     * @return self
     */
    public function setLastRead($last_read)
    {

        if (!is_null($last_read) && (!preg_match("/^\\d{10}\\.\\d{6}$/", $last_read))) {
            throw new \InvalidArgumentException("invalid value for \$last_read when calling ObjsChannel., must conform to the pattern /^\\d{10}\\.\\d{6}$/.");
        }


        if (is_null($last_read)) {
            throw new \InvalidArgumentException('non-nullable last_read cannot be null');
        }

        $this->container['last_read'] = $last_read;

        return $this;
    }

    /**
     * Gets latest
     *
     * @return \OpenAPI\Client\Model\ObjsChannelLatestInner[]|null
     */
    public function getLatest()
    {
        return $this->container['latest'];
    }

    /**
     * Sets latest
     *
     * @param \OpenAPI\Client\Model\ObjsChannelLatestInner[]|null $latest latest
     *
     * @return self
     */
    public function setLatest($latest)
    {

        if (is_null($latest)) {
            throw new \InvalidArgumentException('non-nullable latest cannot be null');
        }

        $this->container['latest'] = $latest;

        return $this;
    }

    /**
     * Gets members
     *
     * @return string[]
     */
    public function getMembers()
    {
        return $this->container['members'];
    }

    /**
     * Sets members
     *
     * @param string[] $members members
     *
     * @return self
     */
    public function setMembers($members)
    {


        if ((count($members) < 0)) {
            throw new \InvalidArgumentException('invalid length for $members when calling ObjsChannel., number of items must be greater than or equal to 0.');
        }

        if (is_null($members)) {
            throw new \InvalidArgumentException('non-nullable members cannot be null');
        }

        $this->container['members'] = $members;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_normalized
     *
     * @return string
     */
    public function getNameNormalized()
    {
        return $this->container['name_normalized'];
    }

    /**
     * Sets name_normalized
     *
     * @param string $name_normalized name_normalized
     *
     * @return self
     */
    public function setNameNormalized($name_normalized)
    {

        if (is_null($name_normalized)) {
            throw new \InvalidArgumentException('non-nullable name_normalized cannot be null');
        }

        $this->container['name_normalized'] = $name_normalized;

        return $this;
    }

    /**
     * Gets num_members
     *
     * @return int|null
     */
    public function getNumMembers()
    {
        return $this->container['num_members'];
    }

    /**
     * Sets num_members
     *
     * @param int|null $num_members num_members
     *
     * @return self
     */
    public function setNumMembers($num_members)
    {

        if (is_null($num_members)) {
            throw new \InvalidArgumentException('non-nullable num_members cannot be null');
        }

        $this->container['num_members'] = $num_members;

        return $this;
    }

    /**
     * Gets pending_shared
     *
     * @return string[]|null
     */
    public function getPendingShared()
    {
        return $this->container['pending_shared'];
    }

    /**
     * Sets pending_shared
     *
     * @param string[]|null $pending_shared pending_shared
     *
     * @return self
     */
    public function setPendingShared($pending_shared)
    {


        if (!is_null($pending_shared) && (count($pending_shared) < 0)) {
            throw new \InvalidArgumentException('invalid length for $pending_shared when calling ObjsChannel., number of items must be greater than or equal to 0.');
        }

        if (is_null($pending_shared)) {
            throw new \InvalidArgumentException('non-nullable pending_shared cannot be null');
        }

        $this->container['pending_shared'] = $pending_shared;

        return $this;
    }

    /**
     * Gets previous_names
     *
     * @return string[]|null
     */
    public function getPreviousNames()
    {
        return $this->container['previous_names'];
    }

    /**
     * Sets previous_names
     *
     * @param string[]|null $previous_names previous_names
     *
     * @return self
     */
    public function setPreviousNames($previous_names)
    {


        if (!is_null($previous_names) && (count($previous_names) < 0)) {
            throw new \InvalidArgumentException('invalid length for $previous_names when calling ObjsChannel., number of items must be greater than or equal to 0.');
        }

        if (is_null($previous_names)) {
            throw new \InvalidArgumentException('non-nullable previous_names cannot be null');
        }

        $this->container['previous_names'] = $previous_names;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return float|null
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param float|null $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return \OpenAPI\Client\Model\ObjsChannelPurpose
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param \OpenAPI\Client\Model\ObjsChannelPurpose $purpose purpose
     *
     * @return self
     */
    public function setPurpose($purpose)
    {

        if (is_null($purpose)) {
            throw new \InvalidArgumentException('non-nullable purpose cannot be null');
        }

        $this->container['purpose'] = $purpose;

        return $this;
    }

    /**
     * Gets topic
     *
     * @return \OpenAPI\Client\Model\ObjsChannelPurpose
     */
    public function getTopic()
    {
        return $this->container['topic'];
    }

    /**
     * Sets topic
     *
     * @param \OpenAPI\Client\Model\ObjsChannelPurpose $topic topic
     *
     * @return self
     */
    public function setTopic($topic)
    {

        if (is_null($topic)) {
            throw new \InvalidArgumentException('non-nullable topic cannot be null');
        }

        $this->container['topic'] = $topic;

        return $this;
    }

    /**
     * Gets unlinked
     *
     * @return int|null
     */
    public function getUnlinked()
    {
        return $this->container['unlinked'];
    }

    /**
     * Sets unlinked
     *
     * @param int|null $unlinked unlinked
     *
     * @return self
     */
    public function setUnlinked($unlinked)
    {

        if (is_null($unlinked)) {
            throw new \InvalidArgumentException('non-nullable unlinked cannot be null');
        }

        $this->container['unlinked'] = $unlinked;

        return $this;
    }

    /**
     * Gets unread_count
     *
     * @return int|null
     */
    public function getUnreadCount()
    {
        return $this->container['unread_count'];
    }

    /**
     * Sets unread_count
     *
     * @param int|null $unread_count unread_count
     *
     * @return self
     */
    public function setUnreadCount($unread_count)
    {

        if (is_null($unread_count)) {
            throw new \InvalidArgumentException('non-nullable unread_count cannot be null');
        }

        $this->container['unread_count'] = $unread_count;

        return $this;
    }

    /**
     * Gets unread_count_display
     *
     * @return int|null
     */
    public function getUnreadCountDisplay()
    {
        return $this->container['unread_count_display'];
    }

    /**
     * Sets unread_count_display
     *
     * @param int|null $unread_count_display unread_count_display
     *
     * @return self
     */
    public function setUnreadCountDisplay($unread_count_display)
    {

        if (is_null($unread_count_display)) {
            throw new \InvalidArgumentException('non-nullable unread_count_display cannot be null');
        }

        $this->container['unread_count_display'] = $unread_count_display;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


