<?php
/**
 * ObjsSubteam
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ObjsSubteam Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ObjsSubteam implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'objs_subteam';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auto_provision' => 'bool',
        'auto_type' => '\OpenAPI\Client\Model\ObjsSubteamAutoTypeInner[]',
        'channel_count' => 'int',
        'created_by' => 'string',
        'date_create' => 'int',
        'date_delete' => 'int',
        'date_update' => 'int',
        'deleted_by' => '\OpenAPI\Client\Model\ObjsSubteamDeletedByInner[]',
        'description' => 'string',
        'enterprise_subteam_id' => 'string',
        'handle' => 'string',
        'id' => 'string',
        'is_external' => 'bool',
        'is_subteam' => 'bool',
        'is_usergroup' => 'bool',
        'name' => 'string',
        'prefs' => '\OpenAPI\Client\Model\ObjsSubteamPrefs',
        'team_id' => 'string',
        'updated_by' => 'string',
        'user_count' => 'int',
        'users' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'auto_provision' => null,
        'auto_type' => null,
        'channel_count' => null,
        'created_by' => null,
        'date_create' => null,
        'date_delete' => null,
        'date_update' => null,
        'deleted_by' => null,
        'description' => null,
        'enterprise_subteam_id' => null,
        'handle' => null,
        'id' => null,
        'is_external' => null,
        'is_subteam' => null,
        'is_usergroup' => null,
        'name' => null,
        'prefs' => null,
        'team_id' => null,
        'updated_by' => null,
        'user_count' => null,
        'users' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'auto_provision' => false,
		'auto_type' => false,
		'channel_count' => false,
		'created_by' => false,
		'date_create' => false,
		'date_delete' => false,
		'date_update' => false,
		'deleted_by' => false,
		'description' => false,
		'enterprise_subteam_id' => false,
		'handle' => false,
		'id' => false,
		'is_external' => false,
		'is_subteam' => false,
		'is_usergroup' => false,
		'name' => false,
		'prefs' => false,
		'team_id' => false,
		'updated_by' => false,
		'user_count' => false,
		'users' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_provision' => 'auto_provision',
        'auto_type' => 'auto_type',
        'channel_count' => 'channel_count',
        'created_by' => 'created_by',
        'date_create' => 'date_create',
        'date_delete' => 'date_delete',
        'date_update' => 'date_update',
        'deleted_by' => 'deleted_by',
        'description' => 'description',
        'enterprise_subteam_id' => 'enterprise_subteam_id',
        'handle' => 'handle',
        'id' => 'id',
        'is_external' => 'is_external',
        'is_subteam' => 'is_subteam',
        'is_usergroup' => 'is_usergroup',
        'name' => 'name',
        'prefs' => 'prefs',
        'team_id' => 'team_id',
        'updated_by' => 'updated_by',
        'user_count' => 'user_count',
        'users' => 'users'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_provision' => 'setAutoProvision',
        'auto_type' => 'setAutoType',
        'channel_count' => 'setChannelCount',
        'created_by' => 'setCreatedBy',
        'date_create' => 'setDateCreate',
        'date_delete' => 'setDateDelete',
        'date_update' => 'setDateUpdate',
        'deleted_by' => 'setDeletedBy',
        'description' => 'setDescription',
        'enterprise_subteam_id' => 'setEnterpriseSubteamId',
        'handle' => 'setHandle',
        'id' => 'setId',
        'is_external' => 'setIsExternal',
        'is_subteam' => 'setIsSubteam',
        'is_usergroup' => 'setIsUsergroup',
        'name' => 'setName',
        'prefs' => 'setPrefs',
        'team_id' => 'setTeamId',
        'updated_by' => 'setUpdatedBy',
        'user_count' => 'setUserCount',
        'users' => 'setUsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_provision' => 'getAutoProvision',
        'auto_type' => 'getAutoType',
        'channel_count' => 'getChannelCount',
        'created_by' => 'getCreatedBy',
        'date_create' => 'getDateCreate',
        'date_delete' => 'getDateDelete',
        'date_update' => 'getDateUpdate',
        'deleted_by' => 'getDeletedBy',
        'description' => 'getDescription',
        'enterprise_subteam_id' => 'getEnterpriseSubteamId',
        'handle' => 'getHandle',
        'id' => 'getId',
        'is_external' => 'getIsExternal',
        'is_subteam' => 'getIsSubteam',
        'is_usergroup' => 'getIsUsergroup',
        'name' => 'getName',
        'prefs' => 'getPrefs',
        'team_id' => 'getTeamId',
        'updated_by' => 'getUpdatedBy',
        'user_count' => 'getUserCount',
        'users' => 'getUsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('auto_provision', $data ?? [], null);
        $this->setIfExists('auto_type', $data ?? [], null);
        $this->setIfExists('channel_count', $data ?? [], null);
        $this->setIfExists('created_by', $data ?? [], null);
        $this->setIfExists('date_create', $data ?? [], null);
        $this->setIfExists('date_delete', $data ?? [], null);
        $this->setIfExists('date_update', $data ?? [], null);
        $this->setIfExists('deleted_by', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('enterprise_subteam_id', $data ?? [], null);
        $this->setIfExists('handle', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_external', $data ?? [], null);
        $this->setIfExists('is_subteam', $data ?? [], null);
        $this->setIfExists('is_usergroup', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('prefs', $data ?? [], null);
        $this->setIfExists('team_id', $data ?? [], null);
        $this->setIfExists('updated_by', $data ?? [], null);
        $this->setIfExists('user_count', $data ?? [], null);
        $this->setIfExists('users', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['auto_provision'] === null) {
            $invalidProperties[] = "'auto_provision' can't be null";
        }
        if ($this->container['auto_type'] === null) {
            $invalidProperties[] = "'auto_type' can't be null";
        }
        if ($this->container['created_by'] === null) {
            $invalidProperties[] = "'created_by' can't be null";
        }
        if (!preg_match("/^[UW][A-Z0-9]{2,}$/", $this->container['created_by'])) {
            $invalidProperties[] = "invalid value for 'created_by', must be conform to the pattern /^[UW][A-Z0-9]{2,}$/.";
        }

        if ($this->container['date_create'] === null) {
            $invalidProperties[] = "'date_create' can't be null";
        }
        if ($this->container['date_delete'] === null) {
            $invalidProperties[] = "'date_delete' can't be null";
        }
        if ($this->container['date_update'] === null) {
            $invalidProperties[] = "'date_update' can't be null";
        }
        if ($this->container['deleted_by'] === null) {
            $invalidProperties[] = "'deleted_by' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['enterprise_subteam_id'] === null) {
            $invalidProperties[] = "'enterprise_subteam_id' can't be null";
        }
        if ($this->container['handle'] === null) {
            $invalidProperties[] = "'handle' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^S[A-Z0-9]{2,}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^S[A-Z0-9]{2,}$/.";
        }

        if ($this->container['is_external'] === null) {
            $invalidProperties[] = "'is_external' can't be null";
        }
        if ($this->container['is_subteam'] === null) {
            $invalidProperties[] = "'is_subteam' can't be null";
        }
        if ($this->container['is_usergroup'] === null) {
            $invalidProperties[] = "'is_usergroup' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['prefs'] === null) {
            $invalidProperties[] = "'prefs' can't be null";
        }
        if ($this->container['team_id'] === null) {
            $invalidProperties[] = "'team_id' can't be null";
        }
        if (!preg_match("/^[T][A-Z0-9]{2,}$/", $this->container['team_id'])) {
            $invalidProperties[] = "invalid value for 'team_id', must be conform to the pattern /^[T][A-Z0-9]{2,}$/.";
        }

        if ($this->container['updated_by'] === null) {
            $invalidProperties[] = "'updated_by' can't be null";
        }
        if (!preg_match("/^[UW][A-Z0-9]{2,}$/", $this->container['updated_by'])) {
            $invalidProperties[] = "invalid value for 'updated_by', must be conform to the pattern /^[UW][A-Z0-9]{2,}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_provision
     *
     * @return bool
     */
    public function getAutoProvision()
    {
        return $this->container['auto_provision'];
    }

    /**
     * Sets auto_provision
     *
     * @param bool $auto_provision auto_provision
     *
     * @return self
     */
    public function setAutoProvision($auto_provision)
    {

        if (is_null($auto_provision)) {
            throw new \InvalidArgumentException('non-nullable auto_provision cannot be null');
        }

        $this->container['auto_provision'] = $auto_provision;

        return $this;
    }

    /**
     * Gets auto_type
     *
     * @return \OpenAPI\Client\Model\ObjsSubteamAutoTypeInner[]
     */
    public function getAutoType()
    {
        return $this->container['auto_type'];
    }

    /**
     * Sets auto_type
     *
     * @param \OpenAPI\Client\Model\ObjsSubteamAutoTypeInner[] $auto_type auto_type
     *
     * @return self
     */
    public function setAutoType($auto_type)
    {

        if (is_null($auto_type)) {
            throw new \InvalidArgumentException('non-nullable auto_type cannot be null');
        }

        $this->container['auto_type'] = $auto_type;

        return $this;
    }

    /**
     * Gets channel_count
     *
     * @return int|null
     */
    public function getChannelCount()
    {
        return $this->container['channel_count'];
    }

    /**
     * Sets channel_count
     *
     * @param int|null $channel_count channel_count
     *
     * @return self
     */
    public function setChannelCount($channel_count)
    {

        if (is_null($channel_count)) {
            throw new \InvalidArgumentException('non-nullable channel_count cannot be null');
        }

        $this->container['channel_count'] = $channel_count;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return string
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {

        if ((!preg_match("/^[UW][A-Z0-9]{2,}$/", $created_by))) {
            throw new \InvalidArgumentException("invalid value for \$created_by when calling ObjsSubteam., must conform to the pattern /^[UW][A-Z0-9]{2,}$/.");
        }


        if (is_null($created_by)) {
            throw new \InvalidArgumentException('non-nullable created_by cannot be null');
        }

        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets date_create
     *
     * @return int
     */
    public function getDateCreate()
    {
        return $this->container['date_create'];
    }

    /**
     * Sets date_create
     *
     * @param int $date_create date_create
     *
     * @return self
     */
    public function setDateCreate($date_create)
    {

        if (is_null($date_create)) {
            throw new \InvalidArgumentException('non-nullable date_create cannot be null');
        }

        $this->container['date_create'] = $date_create;

        return $this;
    }

    /**
     * Gets date_delete
     *
     * @return int
     */
    public function getDateDelete()
    {
        return $this->container['date_delete'];
    }

    /**
     * Sets date_delete
     *
     * @param int $date_delete date_delete
     *
     * @return self
     */
    public function setDateDelete($date_delete)
    {

        if (is_null($date_delete)) {
            throw new \InvalidArgumentException('non-nullable date_delete cannot be null');
        }

        $this->container['date_delete'] = $date_delete;

        return $this;
    }

    /**
     * Gets date_update
     *
     * @return int
     */
    public function getDateUpdate()
    {
        return $this->container['date_update'];
    }

    /**
     * Sets date_update
     *
     * @param int $date_update date_update
     *
     * @return self
     */
    public function setDateUpdate($date_update)
    {

        if (is_null($date_update)) {
            throw new \InvalidArgumentException('non-nullable date_update cannot be null');
        }

        $this->container['date_update'] = $date_update;

        return $this;
    }

    /**
     * Gets deleted_by
     *
     * @return \OpenAPI\Client\Model\ObjsSubteamDeletedByInner[]
     */
    public function getDeletedBy()
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     *
     * @param \OpenAPI\Client\Model\ObjsSubteamDeletedByInner[] $deleted_by deleted_by
     *
     * @return self
     */
    public function setDeletedBy($deleted_by)
    {

        if (is_null($deleted_by)) {
            throw new \InvalidArgumentException('non-nullable deleted_by cannot be null');
        }

        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets enterprise_subteam_id
     *
     * @return string
     */
    public function getEnterpriseSubteamId()
    {
        return $this->container['enterprise_subteam_id'];
    }

    /**
     * Sets enterprise_subteam_id
     *
     * @param string $enterprise_subteam_id enterprise_subteam_id
     *
     * @return self
     */
    public function setEnterpriseSubteamId($enterprise_subteam_id)
    {

        if (is_null($enterprise_subteam_id)) {
            throw new \InvalidArgumentException('non-nullable enterprise_subteam_id cannot be null');
        }

        $this->container['enterprise_subteam_id'] = $enterprise_subteam_id;

        return $this;
    }

    /**
     * Gets handle
     *
     * @return string
     */
    public function getHandle()
    {
        return $this->container['handle'];
    }

    /**
     * Sets handle
     *
     * @param string $handle handle
     *
     * @return self
     */
    public function setHandle($handle)
    {

        if (is_null($handle)) {
            throw new \InvalidArgumentException('non-nullable handle cannot be null');
        }

        $this->container['handle'] = $handle;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if ((!preg_match("/^S[A-Z0-9]{2,}$/", $id))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling ObjsSubteam., must conform to the pattern /^S[A-Z0-9]{2,}$/.");
        }


        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_external
     *
     * @return bool
     */
    public function getIsExternal()
    {
        return $this->container['is_external'];
    }

    /**
     * Sets is_external
     *
     * @param bool $is_external is_external
     *
     * @return self
     */
    public function setIsExternal($is_external)
    {

        if (is_null($is_external)) {
            throw new \InvalidArgumentException('non-nullable is_external cannot be null');
        }

        $this->container['is_external'] = $is_external;

        return $this;
    }

    /**
     * Gets is_subteam
     *
     * @return bool
     */
    public function getIsSubteam()
    {
        return $this->container['is_subteam'];
    }

    /**
     * Sets is_subteam
     *
     * @param bool $is_subteam is_subteam
     *
     * @return self
     */
    public function setIsSubteam($is_subteam)
    {

        if (is_null($is_subteam)) {
            throw new \InvalidArgumentException('non-nullable is_subteam cannot be null');
        }

        $this->container['is_subteam'] = $is_subteam;

        return $this;
    }

    /**
     * Gets is_usergroup
     *
     * @return bool
     */
    public function getIsUsergroup()
    {
        return $this->container['is_usergroup'];
    }

    /**
     * Sets is_usergroup
     *
     * @param bool $is_usergroup is_usergroup
     *
     * @return self
     */
    public function setIsUsergroup($is_usergroup)
    {

        if (is_null($is_usergroup)) {
            throw new \InvalidArgumentException('non-nullable is_usergroup cannot be null');
        }

        $this->container['is_usergroup'] = $is_usergroup;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets prefs
     *
     * @return \OpenAPI\Client\Model\ObjsSubteamPrefs
     */
    public function getPrefs()
    {
        return $this->container['prefs'];
    }

    /**
     * Sets prefs
     *
     * @param \OpenAPI\Client\Model\ObjsSubteamPrefs $prefs prefs
     *
     * @return self
     */
    public function setPrefs($prefs)
    {

        if (is_null($prefs)) {
            throw new \InvalidArgumentException('non-nullable prefs cannot be null');
        }

        $this->container['prefs'] = $prefs;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return string
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param string $team_id team_id
     *
     * @return self
     */
    public function setTeamId($team_id)
    {

        if ((!preg_match("/^[T][A-Z0-9]{2,}$/", $team_id))) {
            throw new \InvalidArgumentException("invalid value for \$team_id when calling ObjsSubteam., must conform to the pattern /^[T][A-Z0-9]{2,}$/.");
        }


        if (is_null($team_id)) {
            throw new \InvalidArgumentException('non-nullable team_id cannot be null');
        }

        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {

        if ((!preg_match("/^[UW][A-Z0-9]{2,}$/", $updated_by))) {
            throw new \InvalidArgumentException("invalid value for \$updated_by when calling ObjsSubteam., must conform to the pattern /^[UW][A-Z0-9]{2,}$/.");
        }


        if (is_null($updated_by)) {
            throw new \InvalidArgumentException('non-nullable updated_by cannot be null');
        }

        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets user_count
     *
     * @return int|null
     */
    public function getUserCount()
    {
        return $this->container['user_count'];
    }

    /**
     * Sets user_count
     *
     * @param int|null $user_count user_count
     *
     * @return self
     */
    public function setUserCount($user_count)
    {

        if (is_null($user_count)) {
            throw new \InvalidArgumentException('non-nullable user_count cannot be null');
        }

        $this->container['user_count'] = $user_count;

        return $this;
    }

    /**
     * Gets users
     *
     * @return string[]|null
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param string[]|null $users users
     *
     * @return self
     */
    public function setUsers($users)
    {

        if (is_null($users)) {
            throw new \InvalidArgumentException('non-nullable users cannot be null');
        }

        $this->container['users'] = $users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


