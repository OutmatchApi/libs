<?php
/**
 * UsersIdentitySchemaInnerAnyOf2User
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UsersIdentitySchemaInnerAnyOf2User Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UsersIdentitySchemaInnerAnyOf2User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'users_identity_schema_inner_anyOf_2_user';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'image_192' => 'string',
        'image_24' => 'string',
        'image_32' => 'string',
        'image_48' => 'string',
        'image_512' => 'string',
        'image_72' => 'string',
        'name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'image_192' => 'url',
        'image_24' => 'url',
        'image_32' => 'url',
        'image_48' => 'url',
        'image_512' => 'url',
        'image_72' => 'url',
        'name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'image_192' => false,
		'image_24' => false,
		'image_32' => false,
		'image_48' => false,
		'image_512' => false,
		'image_72' => false,
		'name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'image_192' => 'image_192',
        'image_24' => 'image_24',
        'image_32' => 'image_32',
        'image_48' => 'image_48',
        'image_512' => 'image_512',
        'image_72' => 'image_72',
        'name' => 'name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'image_192' => 'setImage192',
        'image_24' => 'setImage24',
        'image_32' => 'setImage32',
        'image_48' => 'setImage48',
        'image_512' => 'setImage512',
        'image_72' => 'setImage72',
        'name' => 'setName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'image_192' => 'getImage192',
        'image_24' => 'getImage24',
        'image_32' => 'getImage32',
        'image_48' => 'getImage48',
        'image_512' => 'getImage512',
        'image_72' => 'getImage72',
        'name' => 'getName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('image_192', $data ?? [], null);
        $this->setIfExists('image_24', $data ?? [], null);
        $this->setIfExists('image_32', $data ?? [], null);
        $this->setIfExists('image_48', $data ?? [], null);
        $this->setIfExists('image_512', $data ?? [], null);
        $this->setIfExists('image_72', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^[UW][A-Z0-9]{2,}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[UW][A-Z0-9]{2,}$/.";
        }

        if ($this->container['image_192'] === null) {
            $invalidProperties[] = "'image_192' can't be null";
        }
        if ($this->container['image_24'] === null) {
            $invalidProperties[] = "'image_24' can't be null";
        }
        if ($this->container['image_32'] === null) {
            $invalidProperties[] = "'image_32' can't be null";
        }
        if ($this->container['image_48'] === null) {
            $invalidProperties[] = "'image_48' can't be null";
        }
        if ($this->container['image_512'] === null) {
            $invalidProperties[] = "'image_512' can't be null";
        }
        if ($this->container['image_72'] === null) {
            $invalidProperties[] = "'image_72' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if ((!preg_match("/^[UW][A-Z0-9]{2,}$/", $id))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling UsersIdentitySchemaInnerAnyOf2User., must conform to the pattern /^[UW][A-Z0-9]{2,}$/.");
        }


        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_192
     *
     * @return string
     */
    public function getImage192()
    {
        return $this->container['image_192'];
    }

    /**
     * Sets image_192
     *
     * @param string $image_192 image_192
     *
     * @return self
     */
    public function setImage192($image_192)
    {

        if (is_null($image_192)) {
            throw new \InvalidArgumentException('non-nullable image_192 cannot be null');
        }

        $this->container['image_192'] = $image_192;

        return $this;
    }

    /**
     * Gets image_24
     *
     * @return string
     */
    public function getImage24()
    {
        return $this->container['image_24'];
    }

    /**
     * Sets image_24
     *
     * @param string $image_24 image_24
     *
     * @return self
     */
    public function setImage24($image_24)
    {

        if (is_null($image_24)) {
            throw new \InvalidArgumentException('non-nullable image_24 cannot be null');
        }

        $this->container['image_24'] = $image_24;

        return $this;
    }

    /**
     * Gets image_32
     *
     * @return string
     */
    public function getImage32()
    {
        return $this->container['image_32'];
    }

    /**
     * Sets image_32
     *
     * @param string $image_32 image_32
     *
     * @return self
     */
    public function setImage32($image_32)
    {

        if (is_null($image_32)) {
            throw new \InvalidArgumentException('non-nullable image_32 cannot be null');
        }

        $this->container['image_32'] = $image_32;

        return $this;
    }

    /**
     * Gets image_48
     *
     * @return string
     */
    public function getImage48()
    {
        return $this->container['image_48'];
    }

    /**
     * Sets image_48
     *
     * @param string $image_48 image_48
     *
     * @return self
     */
    public function setImage48($image_48)
    {

        if (is_null($image_48)) {
            throw new \InvalidArgumentException('non-nullable image_48 cannot be null');
        }

        $this->container['image_48'] = $image_48;

        return $this;
    }

    /**
     * Gets image_512
     *
     * @return string
     */
    public function getImage512()
    {
        return $this->container['image_512'];
    }

    /**
     * Sets image_512
     *
     * @param string $image_512 image_512
     *
     * @return self
     */
    public function setImage512($image_512)
    {

        if (is_null($image_512)) {
            throw new \InvalidArgumentException('non-nullable image_512 cannot be null');
        }

        $this->container['image_512'] = $image_512;

        return $this;
    }

    /**
     * Gets image_72
     *
     * @return string
     */
    public function getImage72()
    {
        return $this->container['image_72'];
    }

    /**
     * Sets image_72
     *
     * @param string $image_72 image_72
     *
     * @return self
     */
    public function setImage72($image_72)
    {

        if (is_null($image_72)) {
            throw new \InvalidArgumentException('non-nullable image_72 cannot be null');
        }

        $this->container['image_72'] = $image_72;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


