<?php
/**
 * AppsPermissionsInfoSchemaInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AppsPermissionsInfoSchemaInfo Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AppsPermissionsInfoSchemaInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'apps_permissions_info_schema_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'app_home' => '\OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome',
        'channel' => '\OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome',
        'group' => '\OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome',
        'im' => '\OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome',
        'mpim' => '\OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome',
        'team' => '\OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoTeam'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'app_home' => null,
        'channel' => null,
        'group' => null,
        'im' => null,
        'mpim' => null,
        'team' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'app_home' => false,
		'channel' => false,
		'group' => false,
		'im' => false,
		'mpim' => false,
		'team' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_home' => 'app_home',
        'channel' => 'channel',
        'group' => 'group',
        'im' => 'im',
        'mpim' => 'mpim',
        'team' => 'team'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_home' => 'setAppHome',
        'channel' => 'setChannel',
        'group' => 'setGroup',
        'im' => 'setIm',
        'mpim' => 'setMpim',
        'team' => 'setTeam'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_home' => 'getAppHome',
        'channel' => 'getChannel',
        'group' => 'getGroup',
        'im' => 'getIm',
        'mpim' => 'getMpim',
        'team' => 'getTeam'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('app_home', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('im', $data ?? [], null);
        $this->setIfExists('mpim', $data ?? [], null);
        $this->setIfExists('team', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['app_home'] === null) {
            $invalidProperties[] = "'app_home' can't be null";
        }
        if ($this->container['channel'] === null) {
            $invalidProperties[] = "'channel' can't be null";
        }
        if ($this->container['group'] === null) {
            $invalidProperties[] = "'group' can't be null";
        }
        if ($this->container['im'] === null) {
            $invalidProperties[] = "'im' can't be null";
        }
        if ($this->container['mpim'] === null) {
            $invalidProperties[] = "'mpim' can't be null";
        }
        if ($this->container['team'] === null) {
            $invalidProperties[] = "'team' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_home
     *
     * @return \OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome
     */
    public function getAppHome()
    {
        return $this->container['app_home'];
    }

    /**
     * Sets app_home
     *
     * @param \OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome $app_home app_home
     *
     * @return self
     */
    public function setAppHome($app_home)
    {

        if (is_null($app_home)) {
            throw new \InvalidArgumentException('non-nullable app_home cannot be null');
        }

        $this->container['app_home'] = $app_home;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {

        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }

        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome $group group
     *
     * @return self
     */
    public function setGroup($group)
    {

        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }

        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets im
     *
     * @return \OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome
     */
    public function getIm()
    {
        return $this->container['im'];
    }

    /**
     * Sets im
     *
     * @param \OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome $im im
     *
     * @return self
     */
    public function setIm($im)
    {

        if (is_null($im)) {
            throw new \InvalidArgumentException('non-nullable im cannot be null');
        }

        $this->container['im'] = $im;

        return $this;
    }

    /**
     * Gets mpim
     *
     * @return \OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome
     */
    public function getMpim()
    {
        return $this->container['mpim'];
    }

    /**
     * Sets mpim
     *
     * @param \OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoAppHome $mpim mpim
     *
     * @return self
     */
    public function setMpim($mpim)
    {

        if (is_null($mpim)) {
            throw new \InvalidArgumentException('non-nullable mpim cannot be null');
        }

        $this->container['mpim'] = $mpim;

        return $this;
    }

    /**
     * Gets team
     *
     * @return \OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoTeam
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param \OpenAPI\Client\Model\AppsPermissionsInfoSchemaInfoTeam $team team
     *
     * @return self
     */
    public function setTeam($team)
    {

        if (is_null($team)) {
            throw new \InvalidArgumentException('non-nullable team cannot be null');
        }

        $this->container['team'] = $team;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


