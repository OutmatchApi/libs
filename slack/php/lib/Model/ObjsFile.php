<?php
/**
 * ObjsFile
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ObjsFile Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ObjsFile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'objs_file';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'channels' => 'string[]',
        'comments_count' => 'int',
        'created' => 'int',
        'date_delete' => 'int',
        'display_as_bot' => 'bool',
        'editable' => 'bool',
        'editor' => 'string',
        'external_id' => 'string',
        'external_type' => 'string',
        'external_url' => 'string',
        'filetype' => 'string',
        'groups' => 'string[]',
        'has_rich_preview' => 'bool',
        'id' => 'string',
        'image_exif_rotation' => 'int',
        'ims' => 'string[]',
        'is_external' => 'bool',
        'is_public' => 'bool',
        'is_starred' => 'bool',
        'is_tombstoned' => 'bool',
        'last_editor' => 'string',
        'mimetype' => 'string',
        'mode' => 'string',
        'name' => 'string',
        'non_owner_editable' => 'bool',
        'num_stars' => 'int',
        'original_h' => 'int',
        'original_w' => 'int',
        'permalink' => 'string',
        'permalink_public' => 'string',
        'pinned_info' => 'object',
        'pinned_to' => 'string[]',
        'pretty_type' => 'string',
        'preview' => 'string',
        'public_url_shared' => 'bool',
        'reactions' => '\OpenAPI\Client\Model\ObjsReaction[]',
        'shares' => '\OpenAPI\Client\Model\ObjsFileShares',
        'size' => 'int',
        'source_team' => 'string',
        'state' => 'string',
        'thumb_1024' => 'string',
        'thumb_1024_h' => 'int',
        'thumb_1024_w' => 'int',
        'thumb_160' => 'string',
        'thumb_360' => 'string',
        'thumb_360_h' => 'int',
        'thumb_360_w' => 'int',
        'thumb_480' => 'string',
        'thumb_480_h' => 'int',
        'thumb_480_w' => 'int',
        'thumb_64' => 'string',
        'thumb_720' => 'string',
        'thumb_720_h' => 'int',
        'thumb_720_w' => 'int',
        'thumb_80' => 'string',
        'thumb_800' => 'string',
        'thumb_800_h' => 'int',
        'thumb_800_w' => 'int',
        'thumb_960' => 'string',
        'thumb_960_h' => 'int',
        'thumb_960_w' => 'int',
        'thumb_tiny' => 'string',
        'timestamp' => 'int',
        'title' => 'string',
        'updated' => 'int',
        'url_private' => 'string',
        'url_private_download' => 'string',
        'user' => 'string',
        'user_team' => 'string',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'channels' => null,
        'comments_count' => null,
        'created' => null,
        'date_delete' => null,
        'display_as_bot' => null,
        'editable' => null,
        'editor' => null,
        'external_id' => null,
        'external_type' => null,
        'external_url' => 'uri',
        'filetype' => null,
        'groups' => null,
        'has_rich_preview' => null,
        'id' => null,
        'image_exif_rotation' => null,
        'ims' => null,
        'is_external' => null,
        'is_public' => null,
        'is_starred' => null,
        'is_tombstoned' => null,
        'last_editor' => null,
        'mimetype' => null,
        'mode' => null,
        'name' => null,
        'non_owner_editable' => null,
        'num_stars' => null,
        'original_h' => null,
        'original_w' => null,
        'permalink' => 'uri',
        'permalink_public' => 'uri',
        'pinned_info' => null,
        'pinned_to' => null,
        'pretty_type' => null,
        'preview' => null,
        'public_url_shared' => null,
        'reactions' => null,
        'shares' => null,
        'size' => null,
        'source_team' => null,
        'state' => null,
        'thumb_1024' => 'uri',
        'thumb_1024_h' => null,
        'thumb_1024_w' => null,
        'thumb_160' => 'uri',
        'thumb_360' => 'uri',
        'thumb_360_h' => null,
        'thumb_360_w' => null,
        'thumb_480' => 'uri',
        'thumb_480_h' => null,
        'thumb_480_w' => null,
        'thumb_64' => 'uri',
        'thumb_720' => 'uri',
        'thumb_720_h' => null,
        'thumb_720_w' => null,
        'thumb_80' => 'uri',
        'thumb_800' => 'uri',
        'thumb_800_h' => null,
        'thumb_800_w' => null,
        'thumb_960' => 'uri',
        'thumb_960_h' => null,
        'thumb_960_w' => null,
        'thumb_tiny' => null,
        'timestamp' => null,
        'title' => null,
        'updated' => null,
        'url_private' => 'uri',
        'url_private_download' => 'uri',
        'user' => null,
        'user_team' => null,
        'username' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'channels' => false,
		'comments_count' => false,
		'created' => false,
		'date_delete' => false,
		'display_as_bot' => false,
		'editable' => false,
		'editor' => false,
		'external_id' => false,
		'external_type' => false,
		'external_url' => false,
		'filetype' => false,
		'groups' => false,
		'has_rich_preview' => false,
		'id' => false,
		'image_exif_rotation' => false,
		'ims' => false,
		'is_external' => false,
		'is_public' => false,
		'is_starred' => false,
		'is_tombstoned' => false,
		'last_editor' => false,
		'mimetype' => false,
		'mode' => false,
		'name' => false,
		'non_owner_editable' => false,
		'num_stars' => false,
		'original_h' => false,
		'original_w' => false,
		'permalink' => false,
		'permalink_public' => false,
		'pinned_info' => false,
		'pinned_to' => false,
		'pretty_type' => false,
		'preview' => false,
		'public_url_shared' => false,
		'reactions' => false,
		'shares' => false,
		'size' => false,
		'source_team' => false,
		'state' => false,
		'thumb_1024' => false,
		'thumb_1024_h' => false,
		'thumb_1024_w' => false,
		'thumb_160' => false,
		'thumb_360' => false,
		'thumb_360_h' => false,
		'thumb_360_w' => false,
		'thumb_480' => false,
		'thumb_480_h' => false,
		'thumb_480_w' => false,
		'thumb_64' => false,
		'thumb_720' => false,
		'thumb_720_h' => false,
		'thumb_720_w' => false,
		'thumb_80' => false,
		'thumb_800' => false,
		'thumb_800_h' => false,
		'thumb_800_w' => false,
		'thumb_960' => false,
		'thumb_960_h' => false,
		'thumb_960_w' => false,
		'thumb_tiny' => false,
		'timestamp' => false,
		'title' => false,
		'updated' => false,
		'url_private' => false,
		'url_private_download' => false,
		'user' => false,
		'user_team' => false,
		'username' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'channels' => 'channels',
        'comments_count' => 'comments_count',
        'created' => 'created',
        'date_delete' => 'date_delete',
        'display_as_bot' => 'display_as_bot',
        'editable' => 'editable',
        'editor' => 'editor',
        'external_id' => 'external_id',
        'external_type' => 'external_type',
        'external_url' => 'external_url',
        'filetype' => 'filetype',
        'groups' => 'groups',
        'has_rich_preview' => 'has_rich_preview',
        'id' => 'id',
        'image_exif_rotation' => 'image_exif_rotation',
        'ims' => 'ims',
        'is_external' => 'is_external',
        'is_public' => 'is_public',
        'is_starred' => 'is_starred',
        'is_tombstoned' => 'is_tombstoned',
        'last_editor' => 'last_editor',
        'mimetype' => 'mimetype',
        'mode' => 'mode',
        'name' => 'name',
        'non_owner_editable' => 'non_owner_editable',
        'num_stars' => 'num_stars',
        'original_h' => 'original_h',
        'original_w' => 'original_w',
        'permalink' => 'permalink',
        'permalink_public' => 'permalink_public',
        'pinned_info' => 'pinned_info',
        'pinned_to' => 'pinned_to',
        'pretty_type' => 'pretty_type',
        'preview' => 'preview',
        'public_url_shared' => 'public_url_shared',
        'reactions' => 'reactions',
        'shares' => 'shares',
        'size' => 'size',
        'source_team' => 'source_team',
        'state' => 'state',
        'thumb_1024' => 'thumb_1024',
        'thumb_1024_h' => 'thumb_1024_h',
        'thumb_1024_w' => 'thumb_1024_w',
        'thumb_160' => 'thumb_160',
        'thumb_360' => 'thumb_360',
        'thumb_360_h' => 'thumb_360_h',
        'thumb_360_w' => 'thumb_360_w',
        'thumb_480' => 'thumb_480',
        'thumb_480_h' => 'thumb_480_h',
        'thumb_480_w' => 'thumb_480_w',
        'thumb_64' => 'thumb_64',
        'thumb_720' => 'thumb_720',
        'thumb_720_h' => 'thumb_720_h',
        'thumb_720_w' => 'thumb_720_w',
        'thumb_80' => 'thumb_80',
        'thumb_800' => 'thumb_800',
        'thumb_800_h' => 'thumb_800_h',
        'thumb_800_w' => 'thumb_800_w',
        'thumb_960' => 'thumb_960',
        'thumb_960_h' => 'thumb_960_h',
        'thumb_960_w' => 'thumb_960_w',
        'thumb_tiny' => 'thumb_tiny',
        'timestamp' => 'timestamp',
        'title' => 'title',
        'updated' => 'updated',
        'url_private' => 'url_private',
        'url_private_download' => 'url_private_download',
        'user' => 'user',
        'user_team' => 'user_team',
        'username' => 'username'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'channels' => 'setChannels',
        'comments_count' => 'setCommentsCount',
        'created' => 'setCreated',
        'date_delete' => 'setDateDelete',
        'display_as_bot' => 'setDisplayAsBot',
        'editable' => 'setEditable',
        'editor' => 'setEditor',
        'external_id' => 'setExternalId',
        'external_type' => 'setExternalType',
        'external_url' => 'setExternalUrl',
        'filetype' => 'setFiletype',
        'groups' => 'setGroups',
        'has_rich_preview' => 'setHasRichPreview',
        'id' => 'setId',
        'image_exif_rotation' => 'setImageExifRotation',
        'ims' => 'setIms',
        'is_external' => 'setIsExternal',
        'is_public' => 'setIsPublic',
        'is_starred' => 'setIsStarred',
        'is_tombstoned' => 'setIsTombstoned',
        'last_editor' => 'setLastEditor',
        'mimetype' => 'setMimetype',
        'mode' => 'setMode',
        'name' => 'setName',
        'non_owner_editable' => 'setNonOwnerEditable',
        'num_stars' => 'setNumStars',
        'original_h' => 'setOriginalH',
        'original_w' => 'setOriginalW',
        'permalink' => 'setPermalink',
        'permalink_public' => 'setPermalinkPublic',
        'pinned_info' => 'setPinnedInfo',
        'pinned_to' => 'setPinnedTo',
        'pretty_type' => 'setPrettyType',
        'preview' => 'setPreview',
        'public_url_shared' => 'setPublicUrlShared',
        'reactions' => 'setReactions',
        'shares' => 'setShares',
        'size' => 'setSize',
        'source_team' => 'setSourceTeam',
        'state' => 'setState',
        'thumb_1024' => 'setThumb1024',
        'thumb_1024_h' => 'setThumb1024H',
        'thumb_1024_w' => 'setThumb1024W',
        'thumb_160' => 'setThumb160',
        'thumb_360' => 'setThumb360',
        'thumb_360_h' => 'setThumb360H',
        'thumb_360_w' => 'setThumb360W',
        'thumb_480' => 'setThumb480',
        'thumb_480_h' => 'setThumb480H',
        'thumb_480_w' => 'setThumb480W',
        'thumb_64' => 'setThumb64',
        'thumb_720' => 'setThumb720',
        'thumb_720_h' => 'setThumb720H',
        'thumb_720_w' => 'setThumb720W',
        'thumb_80' => 'setThumb80',
        'thumb_800' => 'setThumb800',
        'thumb_800_h' => 'setThumb800H',
        'thumb_800_w' => 'setThumb800W',
        'thumb_960' => 'setThumb960',
        'thumb_960_h' => 'setThumb960H',
        'thumb_960_w' => 'setThumb960W',
        'thumb_tiny' => 'setThumbTiny',
        'timestamp' => 'setTimestamp',
        'title' => 'setTitle',
        'updated' => 'setUpdated',
        'url_private' => 'setUrlPrivate',
        'url_private_download' => 'setUrlPrivateDownload',
        'user' => 'setUser',
        'user_team' => 'setUserTeam',
        'username' => 'setUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'channels' => 'getChannels',
        'comments_count' => 'getCommentsCount',
        'created' => 'getCreated',
        'date_delete' => 'getDateDelete',
        'display_as_bot' => 'getDisplayAsBot',
        'editable' => 'getEditable',
        'editor' => 'getEditor',
        'external_id' => 'getExternalId',
        'external_type' => 'getExternalType',
        'external_url' => 'getExternalUrl',
        'filetype' => 'getFiletype',
        'groups' => 'getGroups',
        'has_rich_preview' => 'getHasRichPreview',
        'id' => 'getId',
        'image_exif_rotation' => 'getImageExifRotation',
        'ims' => 'getIms',
        'is_external' => 'getIsExternal',
        'is_public' => 'getIsPublic',
        'is_starred' => 'getIsStarred',
        'is_tombstoned' => 'getIsTombstoned',
        'last_editor' => 'getLastEditor',
        'mimetype' => 'getMimetype',
        'mode' => 'getMode',
        'name' => 'getName',
        'non_owner_editable' => 'getNonOwnerEditable',
        'num_stars' => 'getNumStars',
        'original_h' => 'getOriginalH',
        'original_w' => 'getOriginalW',
        'permalink' => 'getPermalink',
        'permalink_public' => 'getPermalinkPublic',
        'pinned_info' => 'getPinnedInfo',
        'pinned_to' => 'getPinnedTo',
        'pretty_type' => 'getPrettyType',
        'preview' => 'getPreview',
        'public_url_shared' => 'getPublicUrlShared',
        'reactions' => 'getReactions',
        'shares' => 'getShares',
        'size' => 'getSize',
        'source_team' => 'getSourceTeam',
        'state' => 'getState',
        'thumb_1024' => 'getThumb1024',
        'thumb_1024_h' => 'getThumb1024H',
        'thumb_1024_w' => 'getThumb1024W',
        'thumb_160' => 'getThumb160',
        'thumb_360' => 'getThumb360',
        'thumb_360_h' => 'getThumb360H',
        'thumb_360_w' => 'getThumb360W',
        'thumb_480' => 'getThumb480',
        'thumb_480_h' => 'getThumb480H',
        'thumb_480_w' => 'getThumb480W',
        'thumb_64' => 'getThumb64',
        'thumb_720' => 'getThumb720',
        'thumb_720_h' => 'getThumb720H',
        'thumb_720_w' => 'getThumb720W',
        'thumb_80' => 'getThumb80',
        'thumb_800' => 'getThumb800',
        'thumb_800_h' => 'getThumb800H',
        'thumb_800_w' => 'getThumb800W',
        'thumb_960' => 'getThumb960',
        'thumb_960_h' => 'getThumb960H',
        'thumb_960_w' => 'getThumb960W',
        'thumb_tiny' => 'getThumbTiny',
        'timestamp' => 'getTimestamp',
        'title' => 'getTitle',
        'updated' => 'getUpdated',
        'url_private' => 'getUrlPrivate',
        'url_private_download' => 'getUrlPrivateDownload',
        'user' => 'getUser',
        'user_team' => 'getUserTeam',
        'username' => 'getUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('channels', $data ?? [], null);
        $this->setIfExists('comments_count', $data ?? [], null);
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('date_delete', $data ?? [], null);
        $this->setIfExists('display_as_bot', $data ?? [], null);
        $this->setIfExists('editable', $data ?? [], null);
        $this->setIfExists('editor', $data ?? [], null);
        $this->setIfExists('external_id', $data ?? [], null);
        $this->setIfExists('external_type', $data ?? [], null);
        $this->setIfExists('external_url', $data ?? [], null);
        $this->setIfExists('filetype', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('has_rich_preview', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('image_exif_rotation', $data ?? [], null);
        $this->setIfExists('ims', $data ?? [], null);
        $this->setIfExists('is_external', $data ?? [], null);
        $this->setIfExists('is_public', $data ?? [], null);
        $this->setIfExists('is_starred', $data ?? [], null);
        $this->setIfExists('is_tombstoned', $data ?? [], null);
        $this->setIfExists('last_editor', $data ?? [], null);
        $this->setIfExists('mimetype', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('non_owner_editable', $data ?? [], null);
        $this->setIfExists('num_stars', $data ?? [], null);
        $this->setIfExists('original_h', $data ?? [], null);
        $this->setIfExists('original_w', $data ?? [], null);
        $this->setIfExists('permalink', $data ?? [], null);
        $this->setIfExists('permalink_public', $data ?? [], null);
        $this->setIfExists('pinned_info', $data ?? [], null);
        $this->setIfExists('pinned_to', $data ?? [], null);
        $this->setIfExists('pretty_type', $data ?? [], null);
        $this->setIfExists('preview', $data ?? [], null);
        $this->setIfExists('public_url_shared', $data ?? [], null);
        $this->setIfExists('reactions', $data ?? [], null);
        $this->setIfExists('shares', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('source_team', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('thumb_1024', $data ?? [], null);
        $this->setIfExists('thumb_1024_h', $data ?? [], null);
        $this->setIfExists('thumb_1024_w', $data ?? [], null);
        $this->setIfExists('thumb_160', $data ?? [], null);
        $this->setIfExists('thumb_360', $data ?? [], null);
        $this->setIfExists('thumb_360_h', $data ?? [], null);
        $this->setIfExists('thumb_360_w', $data ?? [], null);
        $this->setIfExists('thumb_480', $data ?? [], null);
        $this->setIfExists('thumb_480_h', $data ?? [], null);
        $this->setIfExists('thumb_480_w', $data ?? [], null);
        $this->setIfExists('thumb_64', $data ?? [], null);
        $this->setIfExists('thumb_720', $data ?? [], null);
        $this->setIfExists('thumb_720_h', $data ?? [], null);
        $this->setIfExists('thumb_720_w', $data ?? [], null);
        $this->setIfExists('thumb_80', $data ?? [], null);
        $this->setIfExists('thumb_800', $data ?? [], null);
        $this->setIfExists('thumb_800_h', $data ?? [], null);
        $this->setIfExists('thumb_800_w', $data ?? [], null);
        $this->setIfExists('thumb_960', $data ?? [], null);
        $this->setIfExists('thumb_960_h', $data ?? [], null);
        $this->setIfExists('thumb_960_w', $data ?? [], null);
        $this->setIfExists('thumb_tiny', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('url_private', $data ?? [], null);
        $this->setIfExists('url_private_download', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('user_team', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['editor']) && !preg_match("/^[UW][A-Z0-9]{2,}$/", $this->container['editor'])) {
            $invalidProperties[] = "invalid value for 'editor', must be conform to the pattern /^[UW][A-Z0-9]{2,}$/.";
        }

        if (!is_null($this->container['id']) && !preg_match("/^[F][A-Z0-9]{8,}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[F][A-Z0-9]{8,}$/.";
        }

        if (!is_null($this->container['last_editor']) && !preg_match("/^[UW][A-Z0-9]{2,}$/", $this->container['last_editor'])) {
            $invalidProperties[] = "invalid value for 'last_editor', must be conform to the pattern /^[UW][A-Z0-9]{2,}$/.";
        }

        if (!is_null($this->container['source_team']) && !preg_match("/^[T][A-Z0-9]{2,}$/", $this->container['source_team'])) {
            $invalidProperties[] = "invalid value for 'source_team', must be conform to the pattern /^[T][A-Z0-9]{2,}$/.";
        }

        if (!is_null($this->container['user_team']) && !preg_match("/^[T][A-Z0-9]{2,}$/", $this->container['user_team'])) {
            $invalidProperties[] = "invalid value for 'user_team', must be conform to the pattern /^[T][A-Z0-9]{2,}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets channels
     *
     * @return string[]|null
     */
    public function getChannels()
    {
        return $this->container['channels'];
    }

    /**
     * Sets channels
     *
     * @param string[]|null $channels channels
     *
     * @return self
     */
    public function setChannels($channels)
    {



        if (is_null($channels)) {
            throw new \InvalidArgumentException('non-nullable channels cannot be null');
        }

        $this->container['channels'] = $channels;

        return $this;
    }

    /**
     * Gets comments_count
     *
     * @return int|null
     */
    public function getCommentsCount()
    {
        return $this->container['comments_count'];
    }

    /**
     * Sets comments_count
     *
     * @param int|null $comments_count comments_count
     *
     * @return self
     */
    public function setCommentsCount($comments_count)
    {

        if (is_null($comments_count)) {
            throw new \InvalidArgumentException('non-nullable comments_count cannot be null');
        }

        $this->container['comments_count'] = $comments_count;

        return $this;
    }

    /**
     * Gets created
     *
     * @return int|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int|null $created created
     *
     * @return self
     */
    public function setCreated($created)
    {

        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }

        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets date_delete
     *
     * @return int|null
     */
    public function getDateDelete()
    {
        return $this->container['date_delete'];
    }

    /**
     * Sets date_delete
     *
     * @param int|null $date_delete date_delete
     *
     * @return self
     */
    public function setDateDelete($date_delete)
    {

        if (is_null($date_delete)) {
            throw new \InvalidArgumentException('non-nullable date_delete cannot be null');
        }

        $this->container['date_delete'] = $date_delete;

        return $this;
    }

    /**
     * Gets display_as_bot
     *
     * @return bool|null
     */
    public function getDisplayAsBot()
    {
        return $this->container['display_as_bot'];
    }

    /**
     * Sets display_as_bot
     *
     * @param bool|null $display_as_bot display_as_bot
     *
     * @return self
     */
    public function setDisplayAsBot($display_as_bot)
    {

        if (is_null($display_as_bot)) {
            throw new \InvalidArgumentException('non-nullable display_as_bot cannot be null');
        }

        $this->container['display_as_bot'] = $display_as_bot;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool|null
     */
    public function getEditable()
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool|null $editable editable
     *
     * @return self
     */
    public function setEditable($editable)
    {

        if (is_null($editable)) {
            throw new \InvalidArgumentException('non-nullable editable cannot be null');
        }

        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets editor
     *
     * @return string|null
     */
    public function getEditor()
    {
        return $this->container['editor'];
    }

    /**
     * Sets editor
     *
     * @param string|null $editor editor
     *
     * @return self
     */
    public function setEditor($editor)
    {

        if (!is_null($editor) && (!preg_match("/^[UW][A-Z0-9]{2,}$/", $editor))) {
            throw new \InvalidArgumentException("invalid value for \$editor when calling ObjsFile., must conform to the pattern /^[UW][A-Z0-9]{2,}$/.");
        }


        if (is_null($editor)) {
            throw new \InvalidArgumentException('non-nullable editor cannot be null');
        }

        $this->container['editor'] = $editor;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {

        if (is_null($external_id)) {
            throw new \InvalidArgumentException('non-nullable external_id cannot be null');
        }

        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets external_type
     *
     * @return string|null
     */
    public function getExternalType()
    {
        return $this->container['external_type'];
    }

    /**
     * Sets external_type
     *
     * @param string|null $external_type external_type
     *
     * @return self
     */
    public function setExternalType($external_type)
    {

        if (is_null($external_type)) {
            throw new \InvalidArgumentException('non-nullable external_type cannot be null');
        }

        $this->container['external_type'] = $external_type;

        return $this;
    }

    /**
     * Gets external_url
     *
     * @return string|null
     */
    public function getExternalUrl()
    {
        return $this->container['external_url'];
    }

    /**
     * Sets external_url
     *
     * @param string|null $external_url external_url
     *
     * @return self
     */
    public function setExternalUrl($external_url)
    {

        if (is_null($external_url)) {
            throw new \InvalidArgumentException('non-nullable external_url cannot be null');
        }

        $this->container['external_url'] = $external_url;

        return $this;
    }

    /**
     * Gets filetype
     *
     * @return string|null
     */
    public function getFiletype()
    {
        return $this->container['filetype'];
    }

    /**
     * Sets filetype
     *
     * @param string|null $filetype filetype
     *
     * @return self
     */
    public function setFiletype($filetype)
    {

        if (is_null($filetype)) {
            throw new \InvalidArgumentException('non-nullable filetype cannot be null');
        }

        $this->container['filetype'] = $filetype;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return string[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param string[]|null $groups groups
     *
     * @return self
     */
    public function setGroups($groups)
    {



        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }

        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets has_rich_preview
     *
     * @return bool|null
     */
    public function getHasRichPreview()
    {
        return $this->container['has_rich_preview'];
    }

    /**
     * Sets has_rich_preview
     *
     * @param bool|null $has_rich_preview has_rich_preview
     *
     * @return self
     */
    public function setHasRichPreview($has_rich_preview)
    {

        if (is_null($has_rich_preview)) {
            throw new \InvalidArgumentException('non-nullable has_rich_preview cannot be null');
        }

        $this->container['has_rich_preview'] = $has_rich_preview;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (!is_null($id) && (!preg_match("/^[F][A-Z0-9]{8,}$/", $id))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling ObjsFile., must conform to the pattern /^[F][A-Z0-9]{8,}$/.");
        }


        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_exif_rotation
     *
     * @return int|null
     */
    public function getImageExifRotation()
    {
        return $this->container['image_exif_rotation'];
    }

    /**
     * Sets image_exif_rotation
     *
     * @param int|null $image_exif_rotation image_exif_rotation
     *
     * @return self
     */
    public function setImageExifRotation($image_exif_rotation)
    {

        if (is_null($image_exif_rotation)) {
            throw new \InvalidArgumentException('non-nullable image_exif_rotation cannot be null');
        }

        $this->container['image_exif_rotation'] = $image_exif_rotation;

        return $this;
    }

    /**
     * Gets ims
     *
     * @return string[]|null
     */
    public function getIms()
    {
        return $this->container['ims'];
    }

    /**
     * Sets ims
     *
     * @param string[]|null $ims ims
     *
     * @return self
     */
    public function setIms($ims)
    {



        if (is_null($ims)) {
            throw new \InvalidArgumentException('non-nullable ims cannot be null');
        }

        $this->container['ims'] = $ims;

        return $this;
    }

    /**
     * Gets is_external
     *
     * @return bool|null
     */
    public function getIsExternal()
    {
        return $this->container['is_external'];
    }

    /**
     * Sets is_external
     *
     * @param bool|null $is_external is_external
     *
     * @return self
     */
    public function setIsExternal($is_external)
    {

        if (is_null($is_external)) {
            throw new \InvalidArgumentException('non-nullable is_external cannot be null');
        }

        $this->container['is_external'] = $is_external;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public is_public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {

        if (is_null($is_public)) {
            throw new \InvalidArgumentException('non-nullable is_public cannot be null');
        }

        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets is_starred
     *
     * @return bool|null
     */
    public function getIsStarred()
    {
        return $this->container['is_starred'];
    }

    /**
     * Sets is_starred
     *
     * @param bool|null $is_starred is_starred
     *
     * @return self
     */
    public function setIsStarred($is_starred)
    {

        if (is_null($is_starred)) {
            throw new \InvalidArgumentException('non-nullable is_starred cannot be null');
        }

        $this->container['is_starred'] = $is_starred;

        return $this;
    }

    /**
     * Gets is_tombstoned
     *
     * @return bool|null
     */
    public function getIsTombstoned()
    {
        return $this->container['is_tombstoned'];
    }

    /**
     * Sets is_tombstoned
     *
     * @param bool|null $is_tombstoned is_tombstoned
     *
     * @return self
     */
    public function setIsTombstoned($is_tombstoned)
    {

        if (is_null($is_tombstoned)) {
            throw new \InvalidArgumentException('non-nullable is_tombstoned cannot be null');
        }

        $this->container['is_tombstoned'] = $is_tombstoned;

        return $this;
    }

    /**
     * Gets last_editor
     *
     * @return string|null
     */
    public function getLastEditor()
    {
        return $this->container['last_editor'];
    }

    /**
     * Sets last_editor
     *
     * @param string|null $last_editor last_editor
     *
     * @return self
     */
    public function setLastEditor($last_editor)
    {

        if (!is_null($last_editor) && (!preg_match("/^[UW][A-Z0-9]{2,}$/", $last_editor))) {
            throw new \InvalidArgumentException("invalid value for \$last_editor when calling ObjsFile., must conform to the pattern /^[UW][A-Z0-9]{2,}$/.");
        }


        if (is_null($last_editor)) {
            throw new \InvalidArgumentException('non-nullable last_editor cannot be null');
        }

        $this->container['last_editor'] = $last_editor;

        return $this;
    }

    /**
     * Gets mimetype
     *
     * @return string|null
     */
    public function getMimetype()
    {
        return $this->container['mimetype'];
    }

    /**
     * Sets mimetype
     *
     * @param string|null $mimetype mimetype
     *
     * @return self
     */
    public function setMimetype($mimetype)
    {

        if (is_null($mimetype)) {
            throw new \InvalidArgumentException('non-nullable mimetype cannot be null');
        }

        $this->container['mimetype'] = $mimetype;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {

        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }

        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets non_owner_editable
     *
     * @return bool|null
     */
    public function getNonOwnerEditable()
    {
        return $this->container['non_owner_editable'];
    }

    /**
     * Sets non_owner_editable
     *
     * @param bool|null $non_owner_editable non_owner_editable
     *
     * @return self
     */
    public function setNonOwnerEditable($non_owner_editable)
    {

        if (is_null($non_owner_editable)) {
            throw new \InvalidArgumentException('non-nullable non_owner_editable cannot be null');
        }

        $this->container['non_owner_editable'] = $non_owner_editable;

        return $this;
    }

    /**
     * Gets num_stars
     *
     * @return int|null
     */
    public function getNumStars()
    {
        return $this->container['num_stars'];
    }

    /**
     * Sets num_stars
     *
     * @param int|null $num_stars num_stars
     *
     * @return self
     */
    public function setNumStars($num_stars)
    {

        if (is_null($num_stars)) {
            throw new \InvalidArgumentException('non-nullable num_stars cannot be null');
        }

        $this->container['num_stars'] = $num_stars;

        return $this;
    }

    /**
     * Gets original_h
     *
     * @return int|null
     */
    public function getOriginalH()
    {
        return $this->container['original_h'];
    }

    /**
     * Sets original_h
     *
     * @param int|null $original_h original_h
     *
     * @return self
     */
    public function setOriginalH($original_h)
    {

        if (is_null($original_h)) {
            throw new \InvalidArgumentException('non-nullable original_h cannot be null');
        }

        $this->container['original_h'] = $original_h;

        return $this;
    }

    /**
     * Gets original_w
     *
     * @return int|null
     */
    public function getOriginalW()
    {
        return $this->container['original_w'];
    }

    /**
     * Sets original_w
     *
     * @param int|null $original_w original_w
     *
     * @return self
     */
    public function setOriginalW($original_w)
    {

        if (is_null($original_w)) {
            throw new \InvalidArgumentException('non-nullable original_w cannot be null');
        }

        $this->container['original_w'] = $original_w;

        return $this;
    }

    /**
     * Gets permalink
     *
     * @return string|null
     */
    public function getPermalink()
    {
        return $this->container['permalink'];
    }

    /**
     * Sets permalink
     *
     * @param string|null $permalink permalink
     *
     * @return self
     */
    public function setPermalink($permalink)
    {

        if (is_null($permalink)) {
            throw new \InvalidArgumentException('non-nullable permalink cannot be null');
        }

        $this->container['permalink'] = $permalink;

        return $this;
    }

    /**
     * Gets permalink_public
     *
     * @return string|null
     */
    public function getPermalinkPublic()
    {
        return $this->container['permalink_public'];
    }

    /**
     * Sets permalink_public
     *
     * @param string|null $permalink_public permalink_public
     *
     * @return self
     */
    public function setPermalinkPublic($permalink_public)
    {

        if (is_null($permalink_public)) {
            throw new \InvalidArgumentException('non-nullable permalink_public cannot be null');
        }

        $this->container['permalink_public'] = $permalink_public;

        return $this;
    }

    /**
     * Gets pinned_info
     *
     * @return object|null
     */
    public function getPinnedInfo()
    {
        return $this->container['pinned_info'];
    }

    /**
     * Sets pinned_info
     *
     * @param object|null $pinned_info pinned_info
     *
     * @return self
     */
    public function setPinnedInfo($pinned_info)
    {

        if (is_null($pinned_info)) {
            throw new \InvalidArgumentException('non-nullable pinned_info cannot be null');
        }

        $this->container['pinned_info'] = $pinned_info;

        return $this;
    }

    /**
     * Gets pinned_to
     *
     * @return string[]|null
     */
    public function getPinnedTo()
    {
        return $this->container['pinned_to'];
    }

    /**
     * Sets pinned_to
     *
     * @param string[]|null $pinned_to pinned_to
     *
     * @return self
     */
    public function setPinnedTo($pinned_to)
    {

        if (is_null($pinned_to)) {
            throw new \InvalidArgumentException('non-nullable pinned_to cannot be null');
        }

        $this->container['pinned_to'] = $pinned_to;

        return $this;
    }

    /**
     * Gets pretty_type
     *
     * @return string|null
     */
    public function getPrettyType()
    {
        return $this->container['pretty_type'];
    }

    /**
     * Sets pretty_type
     *
     * @param string|null $pretty_type pretty_type
     *
     * @return self
     */
    public function setPrettyType($pretty_type)
    {

        if (is_null($pretty_type)) {
            throw new \InvalidArgumentException('non-nullable pretty_type cannot be null');
        }

        $this->container['pretty_type'] = $pretty_type;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return string|null
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param string|null $preview preview
     *
     * @return self
     */
    public function setPreview($preview)
    {

        if (is_null($preview)) {
            throw new \InvalidArgumentException('non-nullable preview cannot be null');
        }

        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets public_url_shared
     *
     * @return bool|null
     */
    public function getPublicUrlShared()
    {
        return $this->container['public_url_shared'];
    }

    /**
     * Sets public_url_shared
     *
     * @param bool|null $public_url_shared public_url_shared
     *
     * @return self
     */
    public function setPublicUrlShared($public_url_shared)
    {

        if (is_null($public_url_shared)) {
            throw new \InvalidArgumentException('non-nullable public_url_shared cannot be null');
        }

        $this->container['public_url_shared'] = $public_url_shared;

        return $this;
    }

    /**
     * Gets reactions
     *
     * @return \OpenAPI\Client\Model\ObjsReaction[]|null
     */
    public function getReactions()
    {
        return $this->container['reactions'];
    }

    /**
     * Sets reactions
     *
     * @param \OpenAPI\Client\Model\ObjsReaction[]|null $reactions reactions
     *
     * @return self
     */
    public function setReactions($reactions)
    {

        if (is_null($reactions)) {
            throw new \InvalidArgumentException('non-nullable reactions cannot be null');
        }

        $this->container['reactions'] = $reactions;

        return $this;
    }

    /**
     * Gets shares
     *
     * @return \OpenAPI\Client\Model\ObjsFileShares|null
     */
    public function getShares()
    {
        return $this->container['shares'];
    }

    /**
     * Sets shares
     *
     * @param \OpenAPI\Client\Model\ObjsFileShares|null $shares shares
     *
     * @return self
     */
    public function setShares($shares)
    {

        if (is_null($shares)) {
            throw new \InvalidArgumentException('non-nullable shares cannot be null');
        }

        $this->container['shares'] = $shares;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {

        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }

        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets source_team
     *
     * @return string|null
     */
    public function getSourceTeam()
    {
        return $this->container['source_team'];
    }

    /**
     * Sets source_team
     *
     * @param string|null $source_team source_team
     *
     * @return self
     */
    public function setSourceTeam($source_team)
    {

        if (!is_null($source_team) && (!preg_match("/^[T][A-Z0-9]{2,}$/", $source_team))) {
            throw new \InvalidArgumentException("invalid value for \$source_team when calling ObjsFile., must conform to the pattern /^[T][A-Z0-9]{2,}$/.");
        }


        if (is_null($source_team)) {
            throw new \InvalidArgumentException('non-nullable source_team cannot be null');
        }

        $this->container['source_team'] = $source_team;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state state
     *
     * @return self
     */
    public function setState($state)
    {

        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets thumb_1024
     *
     * @return string|null
     */
    public function getThumb1024()
    {
        return $this->container['thumb_1024'];
    }

    /**
     * Sets thumb_1024
     *
     * @param string|null $thumb_1024 thumb_1024
     *
     * @return self
     */
    public function setThumb1024($thumb_1024)
    {

        if (is_null($thumb_1024)) {
            throw new \InvalidArgumentException('non-nullable thumb_1024 cannot be null');
        }

        $this->container['thumb_1024'] = $thumb_1024;

        return $this;
    }

    /**
     * Gets thumb_1024_h
     *
     * @return int|null
     */
    public function getThumb1024H()
    {
        return $this->container['thumb_1024_h'];
    }

    /**
     * Sets thumb_1024_h
     *
     * @param int|null $thumb_1024_h thumb_1024_h
     *
     * @return self
     */
    public function setThumb1024H($thumb_1024_h)
    {

        if (is_null($thumb_1024_h)) {
            throw new \InvalidArgumentException('non-nullable thumb_1024_h cannot be null');
        }

        $this->container['thumb_1024_h'] = $thumb_1024_h;

        return $this;
    }

    /**
     * Gets thumb_1024_w
     *
     * @return int|null
     */
    public function getThumb1024W()
    {
        return $this->container['thumb_1024_w'];
    }

    /**
     * Sets thumb_1024_w
     *
     * @param int|null $thumb_1024_w thumb_1024_w
     *
     * @return self
     */
    public function setThumb1024W($thumb_1024_w)
    {

        if (is_null($thumb_1024_w)) {
            throw new \InvalidArgumentException('non-nullable thumb_1024_w cannot be null');
        }

        $this->container['thumb_1024_w'] = $thumb_1024_w;

        return $this;
    }

    /**
     * Gets thumb_160
     *
     * @return string|null
     */
    public function getThumb160()
    {
        return $this->container['thumb_160'];
    }

    /**
     * Sets thumb_160
     *
     * @param string|null $thumb_160 thumb_160
     *
     * @return self
     */
    public function setThumb160($thumb_160)
    {

        if (is_null($thumb_160)) {
            throw new \InvalidArgumentException('non-nullable thumb_160 cannot be null');
        }

        $this->container['thumb_160'] = $thumb_160;

        return $this;
    }

    /**
     * Gets thumb_360
     *
     * @return string|null
     */
    public function getThumb360()
    {
        return $this->container['thumb_360'];
    }

    /**
     * Sets thumb_360
     *
     * @param string|null $thumb_360 thumb_360
     *
     * @return self
     */
    public function setThumb360($thumb_360)
    {

        if (is_null($thumb_360)) {
            throw new \InvalidArgumentException('non-nullable thumb_360 cannot be null');
        }

        $this->container['thumb_360'] = $thumb_360;

        return $this;
    }

    /**
     * Gets thumb_360_h
     *
     * @return int|null
     */
    public function getThumb360H()
    {
        return $this->container['thumb_360_h'];
    }

    /**
     * Sets thumb_360_h
     *
     * @param int|null $thumb_360_h thumb_360_h
     *
     * @return self
     */
    public function setThumb360H($thumb_360_h)
    {

        if (is_null($thumb_360_h)) {
            throw new \InvalidArgumentException('non-nullable thumb_360_h cannot be null');
        }

        $this->container['thumb_360_h'] = $thumb_360_h;

        return $this;
    }

    /**
     * Gets thumb_360_w
     *
     * @return int|null
     */
    public function getThumb360W()
    {
        return $this->container['thumb_360_w'];
    }

    /**
     * Sets thumb_360_w
     *
     * @param int|null $thumb_360_w thumb_360_w
     *
     * @return self
     */
    public function setThumb360W($thumb_360_w)
    {

        if (is_null($thumb_360_w)) {
            throw new \InvalidArgumentException('non-nullable thumb_360_w cannot be null');
        }

        $this->container['thumb_360_w'] = $thumb_360_w;

        return $this;
    }

    /**
     * Gets thumb_480
     *
     * @return string|null
     */
    public function getThumb480()
    {
        return $this->container['thumb_480'];
    }

    /**
     * Sets thumb_480
     *
     * @param string|null $thumb_480 thumb_480
     *
     * @return self
     */
    public function setThumb480($thumb_480)
    {

        if (is_null($thumb_480)) {
            throw new \InvalidArgumentException('non-nullable thumb_480 cannot be null');
        }

        $this->container['thumb_480'] = $thumb_480;

        return $this;
    }

    /**
     * Gets thumb_480_h
     *
     * @return int|null
     */
    public function getThumb480H()
    {
        return $this->container['thumb_480_h'];
    }

    /**
     * Sets thumb_480_h
     *
     * @param int|null $thumb_480_h thumb_480_h
     *
     * @return self
     */
    public function setThumb480H($thumb_480_h)
    {

        if (is_null($thumb_480_h)) {
            throw new \InvalidArgumentException('non-nullable thumb_480_h cannot be null');
        }

        $this->container['thumb_480_h'] = $thumb_480_h;

        return $this;
    }

    /**
     * Gets thumb_480_w
     *
     * @return int|null
     */
    public function getThumb480W()
    {
        return $this->container['thumb_480_w'];
    }

    /**
     * Sets thumb_480_w
     *
     * @param int|null $thumb_480_w thumb_480_w
     *
     * @return self
     */
    public function setThumb480W($thumb_480_w)
    {

        if (is_null($thumb_480_w)) {
            throw new \InvalidArgumentException('non-nullable thumb_480_w cannot be null');
        }

        $this->container['thumb_480_w'] = $thumb_480_w;

        return $this;
    }

    /**
     * Gets thumb_64
     *
     * @return string|null
     */
    public function getThumb64()
    {
        return $this->container['thumb_64'];
    }

    /**
     * Sets thumb_64
     *
     * @param string|null $thumb_64 thumb_64
     *
     * @return self
     */
    public function setThumb64($thumb_64)
    {

        if (is_null($thumb_64)) {
            throw new \InvalidArgumentException('non-nullable thumb_64 cannot be null');
        }

        $this->container['thumb_64'] = $thumb_64;

        return $this;
    }

    /**
     * Gets thumb_720
     *
     * @return string|null
     */
    public function getThumb720()
    {
        return $this->container['thumb_720'];
    }

    /**
     * Sets thumb_720
     *
     * @param string|null $thumb_720 thumb_720
     *
     * @return self
     */
    public function setThumb720($thumb_720)
    {

        if (is_null($thumb_720)) {
            throw new \InvalidArgumentException('non-nullable thumb_720 cannot be null');
        }

        $this->container['thumb_720'] = $thumb_720;

        return $this;
    }

    /**
     * Gets thumb_720_h
     *
     * @return int|null
     */
    public function getThumb720H()
    {
        return $this->container['thumb_720_h'];
    }

    /**
     * Sets thumb_720_h
     *
     * @param int|null $thumb_720_h thumb_720_h
     *
     * @return self
     */
    public function setThumb720H($thumb_720_h)
    {

        if (is_null($thumb_720_h)) {
            throw new \InvalidArgumentException('non-nullable thumb_720_h cannot be null');
        }

        $this->container['thumb_720_h'] = $thumb_720_h;

        return $this;
    }

    /**
     * Gets thumb_720_w
     *
     * @return int|null
     */
    public function getThumb720W()
    {
        return $this->container['thumb_720_w'];
    }

    /**
     * Sets thumb_720_w
     *
     * @param int|null $thumb_720_w thumb_720_w
     *
     * @return self
     */
    public function setThumb720W($thumb_720_w)
    {

        if (is_null($thumb_720_w)) {
            throw new \InvalidArgumentException('non-nullable thumb_720_w cannot be null');
        }

        $this->container['thumb_720_w'] = $thumb_720_w;

        return $this;
    }

    /**
     * Gets thumb_80
     *
     * @return string|null
     */
    public function getThumb80()
    {
        return $this->container['thumb_80'];
    }

    /**
     * Sets thumb_80
     *
     * @param string|null $thumb_80 thumb_80
     *
     * @return self
     */
    public function setThumb80($thumb_80)
    {

        if (is_null($thumb_80)) {
            throw new \InvalidArgumentException('non-nullable thumb_80 cannot be null');
        }

        $this->container['thumb_80'] = $thumb_80;

        return $this;
    }

    /**
     * Gets thumb_800
     *
     * @return string|null
     */
    public function getThumb800()
    {
        return $this->container['thumb_800'];
    }

    /**
     * Sets thumb_800
     *
     * @param string|null $thumb_800 thumb_800
     *
     * @return self
     */
    public function setThumb800($thumb_800)
    {

        if (is_null($thumb_800)) {
            throw new \InvalidArgumentException('non-nullable thumb_800 cannot be null');
        }

        $this->container['thumb_800'] = $thumb_800;

        return $this;
    }

    /**
     * Gets thumb_800_h
     *
     * @return int|null
     */
    public function getThumb800H()
    {
        return $this->container['thumb_800_h'];
    }

    /**
     * Sets thumb_800_h
     *
     * @param int|null $thumb_800_h thumb_800_h
     *
     * @return self
     */
    public function setThumb800H($thumb_800_h)
    {

        if (is_null($thumb_800_h)) {
            throw new \InvalidArgumentException('non-nullable thumb_800_h cannot be null');
        }

        $this->container['thumb_800_h'] = $thumb_800_h;

        return $this;
    }

    /**
     * Gets thumb_800_w
     *
     * @return int|null
     */
    public function getThumb800W()
    {
        return $this->container['thumb_800_w'];
    }

    /**
     * Sets thumb_800_w
     *
     * @param int|null $thumb_800_w thumb_800_w
     *
     * @return self
     */
    public function setThumb800W($thumb_800_w)
    {

        if (is_null($thumb_800_w)) {
            throw new \InvalidArgumentException('non-nullable thumb_800_w cannot be null');
        }

        $this->container['thumb_800_w'] = $thumb_800_w;

        return $this;
    }

    /**
     * Gets thumb_960
     *
     * @return string|null
     */
    public function getThumb960()
    {
        return $this->container['thumb_960'];
    }

    /**
     * Sets thumb_960
     *
     * @param string|null $thumb_960 thumb_960
     *
     * @return self
     */
    public function setThumb960($thumb_960)
    {

        if (is_null($thumb_960)) {
            throw new \InvalidArgumentException('non-nullable thumb_960 cannot be null');
        }

        $this->container['thumb_960'] = $thumb_960;

        return $this;
    }

    /**
     * Gets thumb_960_h
     *
     * @return int|null
     */
    public function getThumb960H()
    {
        return $this->container['thumb_960_h'];
    }

    /**
     * Sets thumb_960_h
     *
     * @param int|null $thumb_960_h thumb_960_h
     *
     * @return self
     */
    public function setThumb960H($thumb_960_h)
    {

        if (is_null($thumb_960_h)) {
            throw new \InvalidArgumentException('non-nullable thumb_960_h cannot be null');
        }

        $this->container['thumb_960_h'] = $thumb_960_h;

        return $this;
    }

    /**
     * Gets thumb_960_w
     *
     * @return int|null
     */
    public function getThumb960W()
    {
        return $this->container['thumb_960_w'];
    }

    /**
     * Sets thumb_960_w
     *
     * @param int|null $thumb_960_w thumb_960_w
     *
     * @return self
     */
    public function setThumb960W($thumb_960_w)
    {

        if (is_null($thumb_960_w)) {
            throw new \InvalidArgumentException('non-nullable thumb_960_w cannot be null');
        }

        $this->container['thumb_960_w'] = $thumb_960_w;

        return $this;
    }

    /**
     * Gets thumb_tiny
     *
     * @return string|null
     */
    public function getThumbTiny()
    {
        return $this->container['thumb_tiny'];
    }

    /**
     * Sets thumb_tiny
     *
     * @param string|null $thumb_tiny thumb_tiny
     *
     * @return self
     */
    public function setThumbTiny($thumb_tiny)
    {

        if (is_null($thumb_tiny)) {
            throw new \InvalidArgumentException('non-nullable thumb_tiny cannot be null');
        }

        $this->container['thumb_tiny'] = $thumb_tiny;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {

        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }

        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title title
     *
     * @return self
     */
    public function setTitle($title)
    {

        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return int|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param int|null $updated updated
     *
     * @return self
     */
    public function setUpdated($updated)
    {

        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }

        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets url_private
     *
     * @return string|null
     */
    public function getUrlPrivate()
    {
        return $this->container['url_private'];
    }

    /**
     * Sets url_private
     *
     * @param string|null $url_private url_private
     *
     * @return self
     */
    public function setUrlPrivate($url_private)
    {

        if (is_null($url_private)) {
            throw new \InvalidArgumentException('non-nullable url_private cannot be null');
        }

        $this->container['url_private'] = $url_private;

        return $this;
    }

    /**
     * Gets url_private_download
     *
     * @return string|null
     */
    public function getUrlPrivateDownload()
    {
        return $this->container['url_private_download'];
    }

    /**
     * Sets url_private_download
     *
     * @param string|null $url_private_download url_private_download
     *
     * @return self
     */
    public function setUrlPrivateDownload($url_private_download)
    {

        if (is_null($url_private_download)) {
            throw new \InvalidArgumentException('non-nullable url_private_download cannot be null');
        }

        $this->container['url_private_download'] = $url_private_download;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {

        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }

        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets user_team
     *
     * @return string|null
     */
    public function getUserTeam()
    {
        return $this->container['user_team'];
    }

    /**
     * Sets user_team
     *
     * @param string|null $user_team user_team
     *
     * @return self
     */
    public function setUserTeam($user_team)
    {

        if (!is_null($user_team) && (!preg_match("/^[T][A-Z0-9]{2,}$/", $user_team))) {
            throw new \InvalidArgumentException("invalid value for \$user_team when calling ObjsFile., must conform to the pattern /^[T][A-Z0-9]{2,}$/.");
        }


        if (is_null($user_team)) {
            throw new \InvalidArgumentException('non-nullable user_team cannot be null');
        }

        $this->container['user_team'] = $user_team;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {

        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }

        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


