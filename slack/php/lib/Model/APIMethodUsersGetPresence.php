<?php
/**
 * APIMethodUsersGetPresence
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * APIMethodUsersGetPresence Class Doc Comment
 *
 * @category Class
 * @description Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class APIMethodUsersGetPresence implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'API_method__users_getPresence';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'auto_away' => 'bool',
        'connection_count' => 'int',
        'last_activity' => 'int',
        'manual_away' => 'bool',
        'ok' => '\OpenAPI\Client\Model\DefsOkTrue',
        'online' => 'bool',
        'presence' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'auto_away' => null,
        'connection_count' => null,
        'last_activity' => null,
        'manual_away' => null,
        'ok' => null,
        'online' => null,
        'presence' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'auto_away' => false,
		'connection_count' => false,
		'last_activity' => false,
		'manual_away' => false,
		'ok' => false,
		'online' => false,
		'presence' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'auto_away' => 'auto_away',
        'connection_count' => 'connection_count',
        'last_activity' => 'last_activity',
        'manual_away' => 'manual_away',
        'ok' => 'ok',
        'online' => 'online',
        'presence' => 'presence'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'auto_away' => 'setAutoAway',
        'connection_count' => 'setConnectionCount',
        'last_activity' => 'setLastActivity',
        'manual_away' => 'setManualAway',
        'ok' => 'setOk',
        'online' => 'setOnline',
        'presence' => 'setPresence'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'auto_away' => 'getAutoAway',
        'connection_count' => 'getConnectionCount',
        'last_activity' => 'getLastActivity',
        'manual_away' => 'getManualAway',
        'ok' => 'getOk',
        'online' => 'getOnline',
        'presence' => 'getPresence'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('auto_away', $data ?? [], null);
        $this->setIfExists('connection_count', $data ?? [], null);
        $this->setIfExists('last_activity', $data ?? [], null);
        $this->setIfExists('manual_away', $data ?? [], null);
        $this->setIfExists('ok', $data ?? [], null);
        $this->setIfExists('online', $data ?? [], null);
        $this->setIfExists('presence', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ok'] === null) {
            $invalidProperties[] = "'ok' can't be null";
        }
        if ($this->container['presence'] === null) {
            $invalidProperties[] = "'presence' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets auto_away
     *
     * @return bool|null
     */
    public function getAutoAway()
    {
        return $this->container['auto_away'];
    }

    /**
     * Sets auto_away
     *
     * @param bool|null $auto_away auto_away
     *
     * @return self
     */
    public function setAutoAway($auto_away)
    {

        if (is_null($auto_away)) {
            throw new \InvalidArgumentException('non-nullable auto_away cannot be null');
        }

        $this->container['auto_away'] = $auto_away;

        return $this;
    }

    /**
     * Gets connection_count
     *
     * @return int|null
     */
    public function getConnectionCount()
    {
        return $this->container['connection_count'];
    }

    /**
     * Sets connection_count
     *
     * @param int|null $connection_count connection_count
     *
     * @return self
     */
    public function setConnectionCount($connection_count)
    {

        if (is_null($connection_count)) {
            throw new \InvalidArgumentException('non-nullable connection_count cannot be null');
        }

        $this->container['connection_count'] = $connection_count;

        return $this;
    }

    /**
     * Gets last_activity
     *
     * @return int|null
     */
    public function getLastActivity()
    {
        return $this->container['last_activity'];
    }

    /**
     * Sets last_activity
     *
     * @param int|null $last_activity last_activity
     *
     * @return self
     */
    public function setLastActivity($last_activity)
    {

        if (is_null($last_activity)) {
            throw new \InvalidArgumentException('non-nullable last_activity cannot be null');
        }

        $this->container['last_activity'] = $last_activity;

        return $this;
    }

    /**
     * Gets manual_away
     *
     * @return bool|null
     */
    public function getManualAway()
    {
        return $this->container['manual_away'];
    }

    /**
     * Sets manual_away
     *
     * @param bool|null $manual_away manual_away
     *
     * @return self
     */
    public function setManualAway($manual_away)
    {

        if (is_null($manual_away)) {
            throw new \InvalidArgumentException('non-nullable manual_away cannot be null');
        }

        $this->container['manual_away'] = $manual_away;

        return $this;
    }

    /**
     * Gets ok
     *
     * @return \OpenAPI\Client\Model\DefsOkTrue
     */
    public function getOk()
    {
        return $this->container['ok'];
    }

    /**
     * Sets ok
     *
     * @param \OpenAPI\Client\Model\DefsOkTrue $ok ok
     *
     * @return self
     */
    public function setOk($ok)
    {

        if (is_null($ok)) {
            throw new \InvalidArgumentException('non-nullable ok cannot be null');
        }

        $this->container['ok'] = $ok;

        return $this;
    }

    /**
     * Gets online
     *
     * @return bool|null
     */
    public function getOnline()
    {
        return $this->container['online'];
    }

    /**
     * Sets online
     *
     * @param bool|null $online online
     *
     * @return self
     */
    public function setOnline($online)
    {

        if (is_null($online)) {
            throw new \InvalidArgumentException('non-nullable online cannot be null');
        }

        $this->container['online'] = $online;

        return $this;
    }

    /**
     * Gets presence
     *
     * @return string
     */
    public function getPresence()
    {
        return $this->container['presence'];
    }

    /**
     * Sets presence
     *
     * @param string $presence presence
     *
     * @return self
     */
    public function setPresence($presence)
    {

        if (is_null($presence)) {
            throw new \InvalidArgumentException('non-nullable presence cannot be null');
        }

        $this->container['presence'] = $presence;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


