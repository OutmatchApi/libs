<?php
/**
 * ObjsUserProfile
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ObjsUserProfile Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ObjsUserProfile implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'objs_user_profile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'always_active' => 'bool',
        'api_app_id' => 'string',
        'avatar_hash' => 'string',
        'bot_id' => 'string',
        'display_name' => 'string',
        'display_name_normalized' => 'string',
        'email' => 'string',
        'fields' => 'object[]',
        'first_name' => 'string',
        'guest_expiration_ts' => 'int',
        'guest_invited_by' => 'string',
        'image_1024' => 'string',
        'image_192' => 'string',
        'image_24' => 'string',
        'image_32' => 'string',
        'image_48' => 'string',
        'image_512' => 'string',
        'image_72' => 'string',
        'image_original' => 'string',
        'is_app_user' => 'bool',
        'is_custom_image' => 'bool',
        'is_restricted' => 'bool',
        'is_ultra_restricted' => 'bool',
        'last_avatar_image_hash' => 'string',
        'last_name' => 'string',
        'memberships_count' => 'int',
        'name' => 'string',
        'phone' => 'string',
        'pronouns' => 'string',
        'real_name' => 'string',
        'real_name_normalized' => 'string',
        'skype' => 'string',
        'status_default_emoji' => 'string',
        'status_default_text' => 'string',
        'status_default_text_canonical' => 'string',
        'status_emoji' => 'string',
        'status_expiration' => 'int',
        'status_text' => 'string',
        'status_text_canonical' => 'string',
        'team' => 'string',
        'title' => 'string',
        'updated' => 'int',
        'user_id' => 'string',
        'username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'always_active' => null,
        'api_app_id' => null,
        'avatar_hash' => null,
        'bot_id' => null,
        'display_name' => null,
        'display_name_normalized' => null,
        'email' => 'email',
        'fields' => null,
        'first_name' => null,
        'guest_expiration_ts' => null,
        'guest_invited_by' => null,
        'image_1024' => 'uri',
        'image_192' => 'uri',
        'image_24' => 'uri',
        'image_32' => 'uri',
        'image_48' => 'uri',
        'image_512' => 'uri',
        'image_72' => 'uri',
        'image_original' => 'uri',
        'is_app_user' => null,
        'is_custom_image' => null,
        'is_restricted' => null,
        'is_ultra_restricted' => null,
        'last_avatar_image_hash' => null,
        'last_name' => null,
        'memberships_count' => null,
        'name' => null,
        'phone' => null,
        'pronouns' => null,
        'real_name' => null,
        'real_name_normalized' => null,
        'skype' => null,
        'status_default_emoji' => null,
        'status_default_text' => null,
        'status_default_text_canonical' => null,
        'status_emoji' => null,
        'status_expiration' => null,
        'status_text' => null,
        'status_text_canonical' => null,
        'team' => null,
        'title' => null,
        'updated' => null,
        'user_id' => null,
        'username' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'always_active' => false,
		'api_app_id' => false,
		'avatar_hash' => false,
		'bot_id' => false,
		'display_name' => false,
		'display_name_normalized' => false,
		'email' => true,
		'fields' => true,
		'first_name' => true,
		'guest_expiration_ts' => true,
		'guest_invited_by' => true,
		'image_1024' => true,
		'image_192' => true,
		'image_24' => true,
		'image_32' => true,
		'image_48' => true,
		'image_512' => true,
		'image_72' => true,
		'image_original' => true,
		'is_app_user' => false,
		'is_custom_image' => false,
		'is_restricted' => true,
		'is_ultra_restricted' => true,
		'last_avatar_image_hash' => false,
		'last_name' => true,
		'memberships_count' => false,
		'name' => true,
		'phone' => false,
		'pronouns' => false,
		'real_name' => false,
		'real_name_normalized' => false,
		'skype' => false,
		'status_default_emoji' => false,
		'status_default_text' => false,
		'status_default_text_canonical' => true,
		'status_emoji' => false,
		'status_expiration' => false,
		'status_text' => false,
		'status_text_canonical' => true,
		'team' => false,
		'title' => false,
		'updated' => false,
		'user_id' => false,
		'username' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'always_active' => 'always_active',
        'api_app_id' => 'api_app_id',
        'avatar_hash' => 'avatar_hash',
        'bot_id' => 'bot_id',
        'display_name' => 'display_name',
        'display_name_normalized' => 'display_name_normalized',
        'email' => 'email',
        'fields' => 'fields',
        'first_name' => 'first_name',
        'guest_expiration_ts' => 'guest_expiration_ts',
        'guest_invited_by' => 'guest_invited_by',
        'image_1024' => 'image_1024',
        'image_192' => 'image_192',
        'image_24' => 'image_24',
        'image_32' => 'image_32',
        'image_48' => 'image_48',
        'image_512' => 'image_512',
        'image_72' => 'image_72',
        'image_original' => 'image_original',
        'is_app_user' => 'is_app_user',
        'is_custom_image' => 'is_custom_image',
        'is_restricted' => 'is_restricted',
        'is_ultra_restricted' => 'is_ultra_restricted',
        'last_avatar_image_hash' => 'last_avatar_image_hash',
        'last_name' => 'last_name',
        'memberships_count' => 'memberships_count',
        'name' => 'name',
        'phone' => 'phone',
        'pronouns' => 'pronouns',
        'real_name' => 'real_name',
        'real_name_normalized' => 'real_name_normalized',
        'skype' => 'skype',
        'status_default_emoji' => 'status_default_emoji',
        'status_default_text' => 'status_default_text',
        'status_default_text_canonical' => 'status_default_text_canonical',
        'status_emoji' => 'status_emoji',
        'status_expiration' => 'status_expiration',
        'status_text' => 'status_text',
        'status_text_canonical' => 'status_text_canonical',
        'team' => 'team',
        'title' => 'title',
        'updated' => 'updated',
        'user_id' => 'user_id',
        'username' => 'username'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'always_active' => 'setAlwaysActive',
        'api_app_id' => 'setApiAppId',
        'avatar_hash' => 'setAvatarHash',
        'bot_id' => 'setBotId',
        'display_name' => 'setDisplayName',
        'display_name_normalized' => 'setDisplayNameNormalized',
        'email' => 'setEmail',
        'fields' => 'setFields',
        'first_name' => 'setFirstName',
        'guest_expiration_ts' => 'setGuestExpirationTs',
        'guest_invited_by' => 'setGuestInvitedBy',
        'image_1024' => 'setImage1024',
        'image_192' => 'setImage192',
        'image_24' => 'setImage24',
        'image_32' => 'setImage32',
        'image_48' => 'setImage48',
        'image_512' => 'setImage512',
        'image_72' => 'setImage72',
        'image_original' => 'setImageOriginal',
        'is_app_user' => 'setIsAppUser',
        'is_custom_image' => 'setIsCustomImage',
        'is_restricted' => 'setIsRestricted',
        'is_ultra_restricted' => 'setIsUltraRestricted',
        'last_avatar_image_hash' => 'setLastAvatarImageHash',
        'last_name' => 'setLastName',
        'memberships_count' => 'setMembershipsCount',
        'name' => 'setName',
        'phone' => 'setPhone',
        'pronouns' => 'setPronouns',
        'real_name' => 'setRealName',
        'real_name_normalized' => 'setRealNameNormalized',
        'skype' => 'setSkype',
        'status_default_emoji' => 'setStatusDefaultEmoji',
        'status_default_text' => 'setStatusDefaultText',
        'status_default_text_canonical' => 'setStatusDefaultTextCanonical',
        'status_emoji' => 'setStatusEmoji',
        'status_expiration' => 'setStatusExpiration',
        'status_text' => 'setStatusText',
        'status_text_canonical' => 'setStatusTextCanonical',
        'team' => 'setTeam',
        'title' => 'setTitle',
        'updated' => 'setUpdated',
        'user_id' => 'setUserId',
        'username' => 'setUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'always_active' => 'getAlwaysActive',
        'api_app_id' => 'getApiAppId',
        'avatar_hash' => 'getAvatarHash',
        'bot_id' => 'getBotId',
        'display_name' => 'getDisplayName',
        'display_name_normalized' => 'getDisplayNameNormalized',
        'email' => 'getEmail',
        'fields' => 'getFields',
        'first_name' => 'getFirstName',
        'guest_expiration_ts' => 'getGuestExpirationTs',
        'guest_invited_by' => 'getGuestInvitedBy',
        'image_1024' => 'getImage1024',
        'image_192' => 'getImage192',
        'image_24' => 'getImage24',
        'image_32' => 'getImage32',
        'image_48' => 'getImage48',
        'image_512' => 'getImage512',
        'image_72' => 'getImage72',
        'image_original' => 'getImageOriginal',
        'is_app_user' => 'getIsAppUser',
        'is_custom_image' => 'getIsCustomImage',
        'is_restricted' => 'getIsRestricted',
        'is_ultra_restricted' => 'getIsUltraRestricted',
        'last_avatar_image_hash' => 'getLastAvatarImageHash',
        'last_name' => 'getLastName',
        'memberships_count' => 'getMembershipsCount',
        'name' => 'getName',
        'phone' => 'getPhone',
        'pronouns' => 'getPronouns',
        'real_name' => 'getRealName',
        'real_name_normalized' => 'getRealNameNormalized',
        'skype' => 'getSkype',
        'status_default_emoji' => 'getStatusDefaultEmoji',
        'status_default_text' => 'getStatusDefaultText',
        'status_default_text_canonical' => 'getStatusDefaultTextCanonical',
        'status_emoji' => 'getStatusEmoji',
        'status_expiration' => 'getStatusExpiration',
        'status_text' => 'getStatusText',
        'status_text_canonical' => 'getStatusTextCanonical',
        'team' => 'getTeam',
        'title' => 'getTitle',
        'updated' => 'getUpdated',
        'user_id' => 'getUserId',
        'username' => 'getUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('always_active', $data ?? [], null);
        $this->setIfExists('api_app_id', $data ?? [], null);
        $this->setIfExists('avatar_hash', $data ?? [], null);
        $this->setIfExists('bot_id', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('display_name_normalized', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
        $this->setIfExists('first_name', $data ?? [], null);
        $this->setIfExists('guest_expiration_ts', $data ?? [], null);
        $this->setIfExists('guest_invited_by', $data ?? [], null);
        $this->setIfExists('image_1024', $data ?? [], null);
        $this->setIfExists('image_192', $data ?? [], null);
        $this->setIfExists('image_24', $data ?? [], null);
        $this->setIfExists('image_32', $data ?? [], null);
        $this->setIfExists('image_48', $data ?? [], null);
        $this->setIfExists('image_512', $data ?? [], null);
        $this->setIfExists('image_72', $data ?? [], null);
        $this->setIfExists('image_original', $data ?? [], null);
        $this->setIfExists('is_app_user', $data ?? [], null);
        $this->setIfExists('is_custom_image', $data ?? [], null);
        $this->setIfExists('is_restricted', $data ?? [], null);
        $this->setIfExists('is_ultra_restricted', $data ?? [], null);
        $this->setIfExists('last_avatar_image_hash', $data ?? [], null);
        $this->setIfExists('last_name', $data ?? [], null);
        $this->setIfExists('memberships_count', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('pronouns', $data ?? [], null);
        $this->setIfExists('real_name', $data ?? [], null);
        $this->setIfExists('real_name_normalized', $data ?? [], null);
        $this->setIfExists('skype', $data ?? [], null);
        $this->setIfExists('status_default_emoji', $data ?? [], null);
        $this->setIfExists('status_default_text', $data ?? [], null);
        $this->setIfExists('status_default_text_canonical', $data ?? [], null);
        $this->setIfExists('status_emoji', $data ?? [], null);
        $this->setIfExists('status_expiration', $data ?? [], null);
        $this->setIfExists('status_text', $data ?? [], null);
        $this->setIfExists('status_text_canonical', $data ?? [], null);
        $this->setIfExists('team', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('updated', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['api_app_id']) && !preg_match("/^(A[A-Z0-9]{1,})?$/", $this->container['api_app_id'])) {
            $invalidProperties[] = "invalid value for 'api_app_id', must be conform to the pattern /^(A[A-Z0-9]{1,})?$/.";
        }

        if ($this->container['avatar_hash'] === null) {
            $invalidProperties[] = "'avatar_hash' can't be null";
        }
        if (!is_null($this->container['bot_id']) && !preg_match("/^B[A-Z0-9]{8,}$/", $this->container['bot_id'])) {
            $invalidProperties[] = "invalid value for 'bot_id', must be conform to the pattern /^B[A-Z0-9]{8,}$/.";
        }

        if ($this->container['display_name'] === null) {
            $invalidProperties[] = "'display_name' can't be null";
        }
        if ($this->container['display_name_normalized'] === null) {
            $invalidProperties[] = "'display_name_normalized' can't be null";
        }
        if ($this->container['fields'] === null) {
            $invalidProperties[] = "'fields' can't be null";
        }
        if ($this->container['phone'] === null) {
            $invalidProperties[] = "'phone' can't be null";
        }
        if ($this->container['real_name'] === null) {
            $invalidProperties[] = "'real_name' can't be null";
        }
        if ($this->container['real_name_normalized'] === null) {
            $invalidProperties[] = "'real_name_normalized' can't be null";
        }
        if ($this->container['skype'] === null) {
            $invalidProperties[] = "'skype' can't be null";
        }
        if ($this->container['status_emoji'] === null) {
            $invalidProperties[] = "'status_emoji' can't be null";
        }
        if ($this->container['status_text'] === null) {
            $invalidProperties[] = "'status_text' can't be null";
        }
        if (!is_null($this->container['team']) && !preg_match("/^[TE][A-Z0-9]{8,}$/", $this->container['team'])) {
            $invalidProperties[] = "invalid value for 'team', must be conform to the pattern /^[TE][A-Z0-9]{8,}$/.";
        }

        if ($this->container['title'] === null) {
            $invalidProperties[] = "'title' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets always_active
     *
     * @return bool|null
     */
    public function getAlwaysActive()
    {
        return $this->container['always_active'];
    }

    /**
     * Sets always_active
     *
     * @param bool|null $always_active always_active
     *
     * @return self
     */
    public function setAlwaysActive($always_active)
    {

        if (is_null($always_active)) {
            throw new \InvalidArgumentException('non-nullable always_active cannot be null');
        }

        $this->container['always_active'] = $always_active;

        return $this;
    }

    /**
     * Gets api_app_id
     *
     * @return string|null
     */
    public function getApiAppId()
    {
        return $this->container['api_app_id'];
    }

    /**
     * Sets api_app_id
     *
     * @param string|null $api_app_id api_app_id
     *
     * @return self
     */
    public function setApiAppId($api_app_id)
    {

        if (!is_null($api_app_id) && (!preg_match("/^(A[A-Z0-9]{1,})?$/", $api_app_id))) {
            throw new \InvalidArgumentException("invalid value for \$api_app_id when calling ObjsUserProfile., must conform to the pattern /^(A[A-Z0-9]{1,})?$/.");
        }


        if (is_null($api_app_id)) {
            throw new \InvalidArgumentException('non-nullable api_app_id cannot be null');
        }

        $this->container['api_app_id'] = $api_app_id;

        return $this;
    }

    /**
     * Gets avatar_hash
     *
     * @return string
     */
    public function getAvatarHash()
    {
        return $this->container['avatar_hash'];
    }

    /**
     * Sets avatar_hash
     *
     * @param string $avatar_hash avatar_hash
     *
     * @return self
     */
    public function setAvatarHash($avatar_hash)
    {

        if (is_null($avatar_hash)) {
            throw new \InvalidArgumentException('non-nullable avatar_hash cannot be null');
        }

        $this->container['avatar_hash'] = $avatar_hash;

        return $this;
    }

    /**
     * Gets bot_id
     *
     * @return string|null
     */
    public function getBotId()
    {
        return $this->container['bot_id'];
    }

    /**
     * Sets bot_id
     *
     * @param string|null $bot_id bot_id
     *
     * @return self
     */
    public function setBotId($bot_id)
    {

        if (!is_null($bot_id) && (!preg_match("/^B[A-Z0-9]{8,}$/", $bot_id))) {
            throw new \InvalidArgumentException("invalid value for \$bot_id when calling ObjsUserProfile., must conform to the pattern /^B[A-Z0-9]{8,}$/.");
        }


        if (is_null($bot_id)) {
            throw new \InvalidArgumentException('non-nullable bot_id cannot be null');
        }

        $this->container['bot_id'] = $bot_id;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {

        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets display_name_normalized
     *
     * @return string
     */
    public function getDisplayNameNormalized()
    {
        return $this->container['display_name_normalized'];
    }

    /**
     * Sets display_name_normalized
     *
     * @param string $display_name_normalized display_name_normalized
     *
     * @return self
     */
    public function setDisplayNameNormalized($display_name_normalized)
    {

        if (is_null($display_name_normalized)) {
            throw new \InvalidArgumentException('non-nullable display_name_normalized cannot be null');
        }

        $this->container['display_name_normalized'] = $display_name_normalized;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {

        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return object[]
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param object[] $fields fields
     *
     * @return self
     */
    public function setFields($fields)
    {

        if (is_null($fields)) {
            array_push($this->openAPINullablesSetToNull, 'fields');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fields', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {

        if (is_null($first_name)) {
            array_push($this->openAPINullablesSetToNull, 'first_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('first_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets guest_expiration_ts
     *
     * @return int|null
     */
    public function getGuestExpirationTs()
    {
        return $this->container['guest_expiration_ts'];
    }

    /**
     * Sets guest_expiration_ts
     *
     * @param int|null $guest_expiration_ts guest_expiration_ts
     *
     * @return self
     */
    public function setGuestExpirationTs($guest_expiration_ts)
    {

        if (is_null($guest_expiration_ts)) {
            array_push($this->openAPINullablesSetToNull, 'guest_expiration_ts');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guest_expiration_ts', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['guest_expiration_ts'] = $guest_expiration_ts;

        return $this;
    }

    /**
     * Gets guest_invited_by
     *
     * @return string|null
     */
    public function getGuestInvitedBy()
    {
        return $this->container['guest_invited_by'];
    }

    /**
     * Sets guest_invited_by
     *
     * @param string|null $guest_invited_by guest_invited_by
     *
     * @return self
     */
    public function setGuestInvitedBy($guest_invited_by)
    {

        if (is_null($guest_invited_by)) {
            array_push($this->openAPINullablesSetToNull, 'guest_invited_by');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('guest_invited_by', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['guest_invited_by'] = $guest_invited_by;

        return $this;
    }

    /**
     * Gets image_1024
     *
     * @return string|null
     */
    public function getImage1024()
    {
        return $this->container['image_1024'];
    }

    /**
     * Sets image_1024
     *
     * @param string|null $image_1024 image_1024
     *
     * @return self
     */
    public function setImage1024($image_1024)
    {

        if (is_null($image_1024)) {
            array_push($this->openAPINullablesSetToNull, 'image_1024');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_1024', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['image_1024'] = $image_1024;

        return $this;
    }

    /**
     * Gets image_192
     *
     * @return string|null
     */
    public function getImage192()
    {
        return $this->container['image_192'];
    }

    /**
     * Sets image_192
     *
     * @param string|null $image_192 image_192
     *
     * @return self
     */
    public function setImage192($image_192)
    {

        if (is_null($image_192)) {
            array_push($this->openAPINullablesSetToNull, 'image_192');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_192', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['image_192'] = $image_192;

        return $this;
    }

    /**
     * Gets image_24
     *
     * @return string|null
     */
    public function getImage24()
    {
        return $this->container['image_24'];
    }

    /**
     * Sets image_24
     *
     * @param string|null $image_24 image_24
     *
     * @return self
     */
    public function setImage24($image_24)
    {

        if (is_null($image_24)) {
            array_push($this->openAPINullablesSetToNull, 'image_24');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_24', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['image_24'] = $image_24;

        return $this;
    }

    /**
     * Gets image_32
     *
     * @return string|null
     */
    public function getImage32()
    {
        return $this->container['image_32'];
    }

    /**
     * Sets image_32
     *
     * @param string|null $image_32 image_32
     *
     * @return self
     */
    public function setImage32($image_32)
    {

        if (is_null($image_32)) {
            array_push($this->openAPINullablesSetToNull, 'image_32');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_32', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['image_32'] = $image_32;

        return $this;
    }

    /**
     * Gets image_48
     *
     * @return string|null
     */
    public function getImage48()
    {
        return $this->container['image_48'];
    }

    /**
     * Sets image_48
     *
     * @param string|null $image_48 image_48
     *
     * @return self
     */
    public function setImage48($image_48)
    {

        if (is_null($image_48)) {
            array_push($this->openAPINullablesSetToNull, 'image_48');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_48', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['image_48'] = $image_48;

        return $this;
    }

    /**
     * Gets image_512
     *
     * @return string|null
     */
    public function getImage512()
    {
        return $this->container['image_512'];
    }

    /**
     * Sets image_512
     *
     * @param string|null $image_512 image_512
     *
     * @return self
     */
    public function setImage512($image_512)
    {

        if (is_null($image_512)) {
            array_push($this->openAPINullablesSetToNull, 'image_512');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_512', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['image_512'] = $image_512;

        return $this;
    }

    /**
     * Gets image_72
     *
     * @return string|null
     */
    public function getImage72()
    {
        return $this->container['image_72'];
    }

    /**
     * Sets image_72
     *
     * @param string|null $image_72 image_72
     *
     * @return self
     */
    public function setImage72($image_72)
    {

        if (is_null($image_72)) {
            array_push($this->openAPINullablesSetToNull, 'image_72');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_72', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['image_72'] = $image_72;

        return $this;
    }

    /**
     * Gets image_original
     *
     * @return string|null
     */
    public function getImageOriginal()
    {
        return $this->container['image_original'];
    }

    /**
     * Sets image_original
     *
     * @param string|null $image_original image_original
     *
     * @return self
     */
    public function setImageOriginal($image_original)
    {

        if (is_null($image_original)) {
            array_push($this->openAPINullablesSetToNull, 'image_original');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('image_original', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['image_original'] = $image_original;

        return $this;
    }

    /**
     * Gets is_app_user
     *
     * @return bool|null
     */
    public function getIsAppUser()
    {
        return $this->container['is_app_user'];
    }

    /**
     * Sets is_app_user
     *
     * @param bool|null $is_app_user is_app_user
     *
     * @return self
     */
    public function setIsAppUser($is_app_user)
    {

        if (is_null($is_app_user)) {
            throw new \InvalidArgumentException('non-nullable is_app_user cannot be null');
        }

        $this->container['is_app_user'] = $is_app_user;

        return $this;
    }

    /**
     * Gets is_custom_image
     *
     * @return bool|null
     */
    public function getIsCustomImage()
    {
        return $this->container['is_custom_image'];
    }

    /**
     * Sets is_custom_image
     *
     * @param bool|null $is_custom_image is_custom_image
     *
     * @return self
     */
    public function setIsCustomImage($is_custom_image)
    {

        if (is_null($is_custom_image)) {
            throw new \InvalidArgumentException('non-nullable is_custom_image cannot be null');
        }

        $this->container['is_custom_image'] = $is_custom_image;

        return $this;
    }

    /**
     * Gets is_restricted
     *
     * @return bool|null
     */
    public function getIsRestricted()
    {
        return $this->container['is_restricted'];
    }

    /**
     * Sets is_restricted
     *
     * @param bool|null $is_restricted is_restricted
     *
     * @return self
     */
    public function setIsRestricted($is_restricted)
    {

        if (is_null($is_restricted)) {
            array_push($this->openAPINullablesSetToNull, 'is_restricted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_restricted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['is_restricted'] = $is_restricted;

        return $this;
    }

    /**
     * Gets is_ultra_restricted
     *
     * @return bool|null
     */
    public function getIsUltraRestricted()
    {
        return $this->container['is_ultra_restricted'];
    }

    /**
     * Sets is_ultra_restricted
     *
     * @param bool|null $is_ultra_restricted is_ultra_restricted
     *
     * @return self
     */
    public function setIsUltraRestricted($is_ultra_restricted)
    {

        if (is_null($is_ultra_restricted)) {
            array_push($this->openAPINullablesSetToNull, 'is_ultra_restricted');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_ultra_restricted', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['is_ultra_restricted'] = $is_ultra_restricted;

        return $this;
    }

    /**
     * Gets last_avatar_image_hash
     *
     * @return string|null
     */
    public function getLastAvatarImageHash()
    {
        return $this->container['last_avatar_image_hash'];
    }

    /**
     * Sets last_avatar_image_hash
     *
     * @param string|null $last_avatar_image_hash last_avatar_image_hash
     *
     * @return self
     */
    public function setLastAvatarImageHash($last_avatar_image_hash)
    {

        if (is_null($last_avatar_image_hash)) {
            throw new \InvalidArgumentException('non-nullable last_avatar_image_hash cannot be null');
        }

        $this->container['last_avatar_image_hash'] = $last_avatar_image_hash;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {

        if (is_null($last_name)) {
            array_push($this->openAPINullablesSetToNull, 'last_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets memberships_count
     *
     * @return int|null
     */
    public function getMembershipsCount()
    {
        return $this->container['memberships_count'];
    }

    /**
     * Sets memberships_count
     *
     * @param int|null $memberships_count memberships_count
     *
     * @return self
     */
    public function setMembershipsCount($memberships_count)
    {

        if (is_null($memberships_count)) {
            throw new \InvalidArgumentException('non-nullable memberships_count cannot be null');
        }

        $this->container['memberships_count'] = $memberships_count;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {

        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets pronouns
     *
     * @return string|null
     */
    public function getPronouns()
    {
        return $this->container['pronouns'];
    }

    /**
     * Sets pronouns
     *
     * @param string|null $pronouns pronouns
     *
     * @return self
     */
    public function setPronouns($pronouns)
    {

        if (is_null($pronouns)) {
            throw new \InvalidArgumentException('non-nullable pronouns cannot be null');
        }

        $this->container['pronouns'] = $pronouns;

        return $this;
    }

    /**
     * Gets real_name
     *
     * @return string
     */
    public function getRealName()
    {
        return $this->container['real_name'];
    }

    /**
     * Sets real_name
     *
     * @param string $real_name real_name
     *
     * @return self
     */
    public function setRealName($real_name)
    {

        if (is_null($real_name)) {
            throw new \InvalidArgumentException('non-nullable real_name cannot be null');
        }

        $this->container['real_name'] = $real_name;

        return $this;
    }

    /**
     * Gets real_name_normalized
     *
     * @return string
     */
    public function getRealNameNormalized()
    {
        return $this->container['real_name_normalized'];
    }

    /**
     * Sets real_name_normalized
     *
     * @param string $real_name_normalized real_name_normalized
     *
     * @return self
     */
    public function setRealNameNormalized($real_name_normalized)
    {

        if (is_null($real_name_normalized)) {
            throw new \InvalidArgumentException('non-nullable real_name_normalized cannot be null');
        }

        $this->container['real_name_normalized'] = $real_name_normalized;

        return $this;
    }

    /**
     * Gets skype
     *
     * @return string
     */
    public function getSkype()
    {
        return $this->container['skype'];
    }

    /**
     * Sets skype
     *
     * @param string $skype skype
     *
     * @return self
     */
    public function setSkype($skype)
    {

        if (is_null($skype)) {
            throw new \InvalidArgumentException('non-nullable skype cannot be null');
        }

        $this->container['skype'] = $skype;

        return $this;
    }

    /**
     * Gets status_default_emoji
     *
     * @return string|null
     */
    public function getStatusDefaultEmoji()
    {
        return $this->container['status_default_emoji'];
    }

    /**
     * Sets status_default_emoji
     *
     * @param string|null $status_default_emoji status_default_emoji
     *
     * @return self
     */
    public function setStatusDefaultEmoji($status_default_emoji)
    {

        if (is_null($status_default_emoji)) {
            throw new \InvalidArgumentException('non-nullable status_default_emoji cannot be null');
        }

        $this->container['status_default_emoji'] = $status_default_emoji;

        return $this;
    }

    /**
     * Gets status_default_text
     *
     * @return string|null
     */
    public function getStatusDefaultText()
    {
        return $this->container['status_default_text'];
    }

    /**
     * Sets status_default_text
     *
     * @param string|null $status_default_text status_default_text
     *
     * @return self
     */
    public function setStatusDefaultText($status_default_text)
    {

        if (is_null($status_default_text)) {
            throw new \InvalidArgumentException('non-nullable status_default_text cannot be null');
        }

        $this->container['status_default_text'] = $status_default_text;

        return $this;
    }

    /**
     * Gets status_default_text_canonical
     *
     * @return string|null
     */
    public function getStatusDefaultTextCanonical()
    {
        return $this->container['status_default_text_canonical'];
    }

    /**
     * Sets status_default_text_canonical
     *
     * @param string|null $status_default_text_canonical status_default_text_canonical
     *
     * @return self
     */
    public function setStatusDefaultTextCanonical($status_default_text_canonical)
    {

        if (is_null($status_default_text_canonical)) {
            array_push($this->openAPINullablesSetToNull, 'status_default_text_canonical');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_default_text_canonical', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['status_default_text_canonical'] = $status_default_text_canonical;

        return $this;
    }

    /**
     * Gets status_emoji
     *
     * @return string
     */
    public function getStatusEmoji()
    {
        return $this->container['status_emoji'];
    }

    /**
     * Sets status_emoji
     *
     * @param string $status_emoji status_emoji
     *
     * @return self
     */
    public function setStatusEmoji($status_emoji)
    {

        if (is_null($status_emoji)) {
            throw new \InvalidArgumentException('non-nullable status_emoji cannot be null');
        }

        $this->container['status_emoji'] = $status_emoji;

        return $this;
    }

    /**
     * Gets status_expiration
     *
     * @return int|null
     */
    public function getStatusExpiration()
    {
        return $this->container['status_expiration'];
    }

    /**
     * Sets status_expiration
     *
     * @param int|null $status_expiration status_expiration
     *
     * @return self
     */
    public function setStatusExpiration($status_expiration)
    {

        if (is_null($status_expiration)) {
            throw new \InvalidArgumentException('non-nullable status_expiration cannot be null');
        }

        $this->container['status_expiration'] = $status_expiration;

        return $this;
    }

    /**
     * Gets status_text
     *
     * @return string
     */
    public function getStatusText()
    {
        return $this->container['status_text'];
    }

    /**
     * Sets status_text
     *
     * @param string $status_text status_text
     *
     * @return self
     */
    public function setStatusText($status_text)
    {

        if (is_null($status_text)) {
            throw new \InvalidArgumentException('non-nullable status_text cannot be null');
        }

        $this->container['status_text'] = $status_text;

        return $this;
    }

    /**
     * Gets status_text_canonical
     *
     * @return string|null
     */
    public function getStatusTextCanonical()
    {
        return $this->container['status_text_canonical'];
    }

    /**
     * Sets status_text_canonical
     *
     * @param string|null $status_text_canonical status_text_canonical
     *
     * @return self
     */
    public function setStatusTextCanonical($status_text_canonical)
    {

        if (is_null($status_text_canonical)) {
            array_push($this->openAPINullablesSetToNull, 'status_text_canonical');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status_text_canonical', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['status_text_canonical'] = $status_text_canonical;

        return $this;
    }

    /**
     * Gets team
     *
     * @return string|null
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param string|null $team team
     *
     * @return self
     */
    public function setTeam($team)
    {

        if (!is_null($team) && (!preg_match("/^[TE][A-Z0-9]{8,}$/", $team))) {
            throw new \InvalidArgumentException("invalid value for \$team when calling ObjsUserProfile., must conform to the pattern /^[TE][A-Z0-9]{8,}$/.");
        }


        if (is_null($team)) {
            throw new \InvalidArgumentException('non-nullable team cannot be null');
        }

        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return self
     */
    public function setTitle($title)
    {

        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }

        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return int|null
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param int|null $updated updated
     *
     * @return self
     */
    public function setUpdated($updated)
    {

        if (is_null($updated)) {
            throw new \InvalidArgumentException('non-nullable updated cannot be null');
        }

        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {

        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }

        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username username
     *
     * @return self
     */
    public function setUsername($username)
    {

        if (is_null($username)) {
            array_push($this->openAPINullablesSetToNull, 'username');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('username', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


