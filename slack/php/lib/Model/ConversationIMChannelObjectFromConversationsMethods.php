<?php
/**
 * ConversationIMChannelObjectFromConversationsMethods
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ConversationIMChannelObjectFromConversationsMethods Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConversationIMChannelObjectFromConversationsMethods implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Conversation_IM_Channel_Object_from_conversations___methods';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created' => 'int',
        'has_pins' => 'bool',
        'id' => 'string',
        'is_archived' => 'bool',
        'is_ext_shared' => 'bool',
        'is_frozen' => 'bool',
        'is_im' => 'bool',
        'is_open' => 'bool',
        'is_org_shared' => 'bool',
        'is_shared' => 'bool',
        'is_starred' => 'bool',
        'is_user_deleted' => 'bool',
        'last_read' => 'string',
        'latest' => '\OpenAPI\Client\Model\ObjsChannelLatestInner[]',
        'parent_conversation' => '\OpenAPI\Client\Model\ConversationObjectParentConversationInner[]',
        'pin_count' => 'int',
        'priority' => 'float',
        'shares' => '\OpenAPI\Client\Model\ConversationIMChannelObjectFromConversationsMethodsSharesInner[]',
        'unread_count' => 'int',
        'unread_count_display' => 'int',
        'user' => 'string',
        'version' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created' => null,
        'has_pins' => null,
        'id' => null,
        'is_archived' => null,
        'is_ext_shared' => null,
        'is_frozen' => null,
        'is_im' => null,
        'is_open' => null,
        'is_org_shared' => null,
        'is_shared' => null,
        'is_starred' => null,
        'is_user_deleted' => null,
        'last_read' => null,
        'latest' => null,
        'parent_conversation' => null,
        'pin_count' => null,
        'priority' => null,
        'shares' => null,
        'unread_count' => null,
        'unread_count_display' => null,
        'user' => null,
        'version' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'created' => false,
		'has_pins' => false,
		'id' => false,
		'is_archived' => false,
		'is_ext_shared' => false,
		'is_frozen' => false,
		'is_im' => false,
		'is_open' => false,
		'is_org_shared' => false,
		'is_shared' => false,
		'is_starred' => false,
		'is_user_deleted' => false,
		'last_read' => false,
		'latest' => false,
		'parent_conversation' => false,
		'pin_count' => false,
		'priority' => false,
		'shares' => false,
		'unread_count' => false,
		'unread_count_display' => false,
		'user' => false,
		'version' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'has_pins' => 'has_pins',
        'id' => 'id',
        'is_archived' => 'is_archived',
        'is_ext_shared' => 'is_ext_shared',
        'is_frozen' => 'is_frozen',
        'is_im' => 'is_im',
        'is_open' => 'is_open',
        'is_org_shared' => 'is_org_shared',
        'is_shared' => 'is_shared',
        'is_starred' => 'is_starred',
        'is_user_deleted' => 'is_user_deleted',
        'last_read' => 'last_read',
        'latest' => 'latest',
        'parent_conversation' => 'parent_conversation',
        'pin_count' => 'pin_count',
        'priority' => 'priority',
        'shares' => 'shares',
        'unread_count' => 'unread_count',
        'unread_count_display' => 'unread_count_display',
        'user' => 'user',
        'version' => 'version'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'has_pins' => 'setHasPins',
        'id' => 'setId',
        'is_archived' => 'setIsArchived',
        'is_ext_shared' => 'setIsExtShared',
        'is_frozen' => 'setIsFrozen',
        'is_im' => 'setIsIm',
        'is_open' => 'setIsOpen',
        'is_org_shared' => 'setIsOrgShared',
        'is_shared' => 'setIsShared',
        'is_starred' => 'setIsStarred',
        'is_user_deleted' => 'setIsUserDeleted',
        'last_read' => 'setLastRead',
        'latest' => 'setLatest',
        'parent_conversation' => 'setParentConversation',
        'pin_count' => 'setPinCount',
        'priority' => 'setPriority',
        'shares' => 'setShares',
        'unread_count' => 'setUnreadCount',
        'unread_count_display' => 'setUnreadCountDisplay',
        'user' => 'setUser',
        'version' => 'setVersion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'has_pins' => 'getHasPins',
        'id' => 'getId',
        'is_archived' => 'getIsArchived',
        'is_ext_shared' => 'getIsExtShared',
        'is_frozen' => 'getIsFrozen',
        'is_im' => 'getIsIm',
        'is_open' => 'getIsOpen',
        'is_org_shared' => 'getIsOrgShared',
        'is_shared' => 'getIsShared',
        'is_starred' => 'getIsStarred',
        'is_user_deleted' => 'getIsUserDeleted',
        'last_read' => 'getLastRead',
        'latest' => 'getLatest',
        'parent_conversation' => 'getParentConversation',
        'pin_count' => 'getPinCount',
        'priority' => 'getPriority',
        'shares' => 'getShares',
        'unread_count' => 'getUnreadCount',
        'unread_count_display' => 'getUnreadCountDisplay',
        'user' => 'getUser',
        'version' => 'getVersion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('has_pins', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('is_archived', $data ?? [], null);
        $this->setIfExists('is_ext_shared', $data ?? [], null);
        $this->setIfExists('is_frozen', $data ?? [], null);
        $this->setIfExists('is_im', $data ?? [], null);
        $this->setIfExists('is_open', $data ?? [], null);
        $this->setIfExists('is_org_shared', $data ?? [], null);
        $this->setIfExists('is_shared', $data ?? [], null);
        $this->setIfExists('is_starred', $data ?? [], null);
        $this->setIfExists('is_user_deleted', $data ?? [], null);
        $this->setIfExists('last_read', $data ?? [], null);
        $this->setIfExists('latest', $data ?? [], null);
        $this->setIfExists('parent_conversation', $data ?? [], null);
        $this->setIfExists('pin_count', $data ?? [], null);
        $this->setIfExists('priority', $data ?? [], null);
        $this->setIfExists('shares', $data ?? [], null);
        $this->setIfExists('unread_count', $data ?? [], null);
        $this->setIfExists('unread_count_display', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('version', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['created'] === null) {
            $invalidProperties[] = "'created' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!preg_match("/^[D][A-Z0-9]{8,}$/", $this->container['id'])) {
            $invalidProperties[] = "invalid value for 'id', must be conform to the pattern /^[D][A-Z0-9]{8,}$/.";
        }

        if ($this->container['is_im'] === null) {
            $invalidProperties[] = "'is_im' can't be null";
        }
        if ($this->container['is_org_shared'] === null) {
            $invalidProperties[] = "'is_org_shared' can't be null";
        }
        if (!is_null($this->container['last_read']) && !preg_match("/^\\d{10}\\.\\d{6}$/", $this->container['last_read'])) {
            $invalidProperties[] = "invalid value for 'last_read', must be conform to the pattern /^\\d{10}\\.\\d{6}$/.";
        }

        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if (!is_null($this->container['shares']) && (count($this->container['shares']) < 0)) {
            $invalidProperties[] = "invalid value for 'shares', number of items must be greater than or equal to 0.";
        }

        if ($this->container['user'] === null) {
            $invalidProperties[] = "'user' can't be null";
        }
        if (!preg_match("/^[UW][A-Z0-9]{2,}$/", $this->container['user'])) {
            $invalidProperties[] = "invalid value for 'user', must be conform to the pattern /^[UW][A-Z0-9]{2,}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return int
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int $created created
     *
     * @return self
     */
    public function setCreated($created)
    {

        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }

        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets has_pins
     *
     * @return bool|null
     */
    public function getHasPins()
    {
        return $this->container['has_pins'];
    }

    /**
     * Sets has_pins
     *
     * @param bool|null $has_pins has_pins
     *
     * @return self
     */
    public function setHasPins($has_pins)
    {

        if (is_null($has_pins)) {
            throw new \InvalidArgumentException('non-nullable has_pins cannot be null');
        }

        $this->container['has_pins'] = $has_pins;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if ((!preg_match("/^[D][A-Z0-9]{8,}$/", $id))) {
            throw new \InvalidArgumentException("invalid value for \$id when calling ConversationIMChannelObjectFromConversationsMethods., must conform to the pattern /^[D][A-Z0-9]{8,}$/.");
        }


        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_archived
     *
     * @return bool|null
     */
    public function getIsArchived()
    {
        return $this->container['is_archived'];
    }

    /**
     * Sets is_archived
     *
     * @param bool|null $is_archived is_archived
     *
     * @return self
     */
    public function setIsArchived($is_archived)
    {

        if (is_null($is_archived)) {
            throw new \InvalidArgumentException('non-nullable is_archived cannot be null');
        }

        $this->container['is_archived'] = $is_archived;

        return $this;
    }

    /**
     * Gets is_ext_shared
     *
     * @return bool|null
     */
    public function getIsExtShared()
    {
        return $this->container['is_ext_shared'];
    }

    /**
     * Sets is_ext_shared
     *
     * @param bool|null $is_ext_shared is_ext_shared
     *
     * @return self
     */
    public function setIsExtShared($is_ext_shared)
    {

        if (is_null($is_ext_shared)) {
            throw new \InvalidArgumentException('non-nullable is_ext_shared cannot be null');
        }

        $this->container['is_ext_shared'] = $is_ext_shared;

        return $this;
    }

    /**
     * Gets is_frozen
     *
     * @return bool|null
     */
    public function getIsFrozen()
    {
        return $this->container['is_frozen'];
    }

    /**
     * Sets is_frozen
     *
     * @param bool|null $is_frozen is_frozen
     *
     * @return self
     */
    public function setIsFrozen($is_frozen)
    {

        if (is_null($is_frozen)) {
            throw new \InvalidArgumentException('non-nullable is_frozen cannot be null');
        }

        $this->container['is_frozen'] = $is_frozen;

        return $this;
    }

    /**
     * Gets is_im
     *
     * @return bool
     */
    public function getIsIm()
    {
        return $this->container['is_im'];
    }

    /**
     * Sets is_im
     *
     * @param bool $is_im is_im
     *
     * @return self
     */
    public function setIsIm($is_im)
    {

        if (is_null($is_im)) {
            throw new \InvalidArgumentException('non-nullable is_im cannot be null');
        }

        $this->container['is_im'] = $is_im;

        return $this;
    }

    /**
     * Gets is_open
     *
     * @return bool|null
     */
    public function getIsOpen()
    {
        return $this->container['is_open'];
    }

    /**
     * Sets is_open
     *
     * @param bool|null $is_open is_open
     *
     * @return self
     */
    public function setIsOpen($is_open)
    {

        if (is_null($is_open)) {
            throw new \InvalidArgumentException('non-nullable is_open cannot be null');
        }

        $this->container['is_open'] = $is_open;

        return $this;
    }

    /**
     * Gets is_org_shared
     *
     * @return bool
     */
    public function getIsOrgShared()
    {
        return $this->container['is_org_shared'];
    }

    /**
     * Sets is_org_shared
     *
     * @param bool $is_org_shared is_org_shared
     *
     * @return self
     */
    public function setIsOrgShared($is_org_shared)
    {

        if (is_null($is_org_shared)) {
            throw new \InvalidArgumentException('non-nullable is_org_shared cannot be null');
        }

        $this->container['is_org_shared'] = $is_org_shared;

        return $this;
    }

    /**
     * Gets is_shared
     *
     * @return bool|null
     */
    public function getIsShared()
    {
        return $this->container['is_shared'];
    }

    /**
     * Sets is_shared
     *
     * @param bool|null $is_shared is_shared
     *
     * @return self
     */
    public function setIsShared($is_shared)
    {

        if (is_null($is_shared)) {
            throw new \InvalidArgumentException('non-nullable is_shared cannot be null');
        }

        $this->container['is_shared'] = $is_shared;

        return $this;
    }

    /**
     * Gets is_starred
     *
     * @return bool|null
     */
    public function getIsStarred()
    {
        return $this->container['is_starred'];
    }

    /**
     * Sets is_starred
     *
     * @param bool|null $is_starred is_starred
     *
     * @return self
     */
    public function setIsStarred($is_starred)
    {

        if (is_null($is_starred)) {
            throw new \InvalidArgumentException('non-nullable is_starred cannot be null');
        }

        $this->container['is_starred'] = $is_starred;

        return $this;
    }

    /**
     * Gets is_user_deleted
     *
     * @return bool|null
     */
    public function getIsUserDeleted()
    {
        return $this->container['is_user_deleted'];
    }

    /**
     * Sets is_user_deleted
     *
     * @param bool|null $is_user_deleted is_user_deleted
     *
     * @return self
     */
    public function setIsUserDeleted($is_user_deleted)
    {

        if (is_null($is_user_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_user_deleted cannot be null');
        }

        $this->container['is_user_deleted'] = $is_user_deleted;

        return $this;
    }

    /**
     * Gets last_read
     *
     * @return string|null
     */
    public function getLastRead()
    {
        return $this->container['last_read'];
    }

    /**
     * Sets last_read
     *
     * @param string|null $last_read last_read
     *
     * @return self
     */
    public function setLastRead($last_read)
    {

        if (!is_null($last_read) && (!preg_match("/^\\d{10}\\.\\d{6}$/", $last_read))) {
            throw new \InvalidArgumentException("invalid value for \$last_read when calling ConversationIMChannelObjectFromConversationsMethods., must conform to the pattern /^\\d{10}\\.\\d{6}$/.");
        }


        if (is_null($last_read)) {
            throw new \InvalidArgumentException('non-nullable last_read cannot be null');
        }

        $this->container['last_read'] = $last_read;

        return $this;
    }

    /**
     * Gets latest
     *
     * @return \OpenAPI\Client\Model\ObjsChannelLatestInner[]|null
     */
    public function getLatest()
    {
        return $this->container['latest'];
    }

    /**
     * Sets latest
     *
     * @param \OpenAPI\Client\Model\ObjsChannelLatestInner[]|null $latest latest
     *
     * @return self
     */
    public function setLatest($latest)
    {

        if (is_null($latest)) {
            throw new \InvalidArgumentException('non-nullable latest cannot be null');
        }

        $this->container['latest'] = $latest;

        return $this;
    }

    /**
     * Gets parent_conversation
     *
     * @return \OpenAPI\Client\Model\ConversationObjectParentConversationInner[]|null
     */
    public function getParentConversation()
    {
        return $this->container['parent_conversation'];
    }

    /**
     * Sets parent_conversation
     *
     * @param \OpenAPI\Client\Model\ConversationObjectParentConversationInner[]|null $parent_conversation parent_conversation
     *
     * @return self
     */
    public function setParentConversation($parent_conversation)
    {

        if (is_null($parent_conversation)) {
            throw new \InvalidArgumentException('non-nullable parent_conversation cannot be null');
        }

        $this->container['parent_conversation'] = $parent_conversation;

        return $this;
    }

    /**
     * Gets pin_count
     *
     * @return int|null
     */
    public function getPinCount()
    {
        return $this->container['pin_count'];
    }

    /**
     * Sets pin_count
     *
     * @param int|null $pin_count pin_count
     *
     * @return self
     */
    public function setPinCount($pin_count)
    {

        if (is_null($pin_count)) {
            throw new \InvalidArgumentException('non-nullable pin_count cannot be null');
        }

        $this->container['pin_count'] = $pin_count;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return float
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param float $priority priority
     *
     * @return self
     */
    public function setPriority($priority)
    {

        if (is_null($priority)) {
            throw new \InvalidArgumentException('non-nullable priority cannot be null');
        }

        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets shares
     *
     * @return \OpenAPI\Client\Model\ConversationIMChannelObjectFromConversationsMethodsSharesInner[]|null
     */
    public function getShares()
    {
        return $this->container['shares'];
    }

    /**
     * Sets shares
     *
     * @param \OpenAPI\Client\Model\ConversationIMChannelObjectFromConversationsMethodsSharesInner[]|null $shares shares
     *
     * @return self
     */
    public function setShares($shares)
    {


        if (!is_null($shares) && (count($shares) < 0)) {
            throw new \InvalidArgumentException('invalid length for $shares when calling ConversationIMChannelObjectFromConversationsMethods., number of items must be greater than or equal to 0.');
        }

        if (is_null($shares)) {
            throw new \InvalidArgumentException('non-nullable shares cannot be null');
        }

        $this->container['shares'] = $shares;

        return $this;
    }

    /**
     * Gets unread_count
     *
     * @return int|null
     */
    public function getUnreadCount()
    {
        return $this->container['unread_count'];
    }

    /**
     * Sets unread_count
     *
     * @param int|null $unread_count unread_count
     *
     * @return self
     */
    public function setUnreadCount($unread_count)
    {

        if (is_null($unread_count)) {
            throw new \InvalidArgumentException('non-nullable unread_count cannot be null');
        }

        $this->container['unread_count'] = $unread_count;

        return $this;
    }

    /**
     * Gets unread_count_display
     *
     * @return int|null
     */
    public function getUnreadCountDisplay()
    {
        return $this->container['unread_count_display'];
    }

    /**
     * Sets unread_count_display
     *
     * @param int|null $unread_count_display unread_count_display
     *
     * @return self
     */
    public function setUnreadCountDisplay($unread_count_display)
    {

        if (is_null($unread_count_display)) {
            throw new \InvalidArgumentException('non-nullable unread_count_display cannot be null');
        }

        $this->container['unread_count_display'] = $unread_count_display;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user user
     *
     * @return self
     */
    public function setUser($user)
    {

        if ((!preg_match("/^[UW][A-Z0-9]{2,}$/", $user))) {
            throw new \InvalidArgumentException("invalid value for \$user when calling ConversationIMChannelObjectFromConversationsMethods., must conform to the pattern /^[UW][A-Z0-9]{2,}$/.");
        }


        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }

        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets version
     *
     * @return int|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param int|null $version version
     *
     * @return self
     */
    public function setVersion($version)
    {

        if (is_null($version)) {
            throw new \InvalidArgumentException('non-nullable version cannot be null');
        }

        $this->container['version'] = $version;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


