# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from slack import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack import schemas  # noqa: F401

from slack.model.defs_dm_id import DefsDmId
from slack.model.objs_paging import ObjsPaging
from slack.model.objs_message import ObjsMessage
from slack.model.defs_ok_false import DefsOkFalse
from slack.model.objs_file import ObjsFile
from slack.model.objs_comment import ObjsComment
from slack.model.defs_ok_true import DefsOkTrue
from slack.model.defs_channel import DefsChannel
from slack.model.defs_group_id import DefsGroupId

# Query params
TokenSchema = schemas.StrSchema
CountSchema = schemas.StrSchema
PageSchema = schemas.StrSchema
CursorSchema = schemas.StrSchema
LimitSchema = schemas.IntSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'token': typing.Union[TokenSchema, str, ],
        'count': typing.Union[CountSchema, str, ],
        'page': typing.Union[PageSchema, str, ],
        'cursor': typing.Union[CursorSchema, str, ],
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_token = api_client.QueryParameter(
    name="token",
    style=api_client.ParameterStyle.FORM,
    schema=TokenSchema,
    explode=True,
)
request_query_count = api_client.QueryParameter(
    name="count",
    style=api_client.ParameterStyle.FORM,
    schema=CountSchema,
    explode=True,
)
request_query_page = api_client.QueryParameter(
    name="page",
    style=api_client.ParameterStyle.FORM,
    schema=PageSchema,
    explode=True,
)
request_query_cursor = api_client.QueryParameter(
    name="cursor",
    style=api_client.ParameterStyle.FORM,
    schema=CursorSchema,
    explode=True,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "ok",
            "items",
        }
        
        class properties:
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.ComposedSchema,
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class any_of_0(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            required = {
                                                "date_create",
                                                "channel",
                                                "message",
                                                "type",
                                            }
                                            
                                            class properties:
                                            
                                                @staticmethod
                                                def channel() -> typing.Type['DefsChannel']:
                                                    return DefsChannel
                                                date_create = schemas.IntSchema
                                            
                                                @staticmethod
                                                def message() -> typing.Type['ObjsMessage']:
                                                    return ObjsMessage
                                                
                                                
                                                class type(
                                                    schemas.EnumBase,
                                                    schemas.StrSchema
                                                ):
                                                    
                                                    @schemas.classproperty
                                                    def MESSAGE(cls):
                                                        return cls("message")
                                                __annotations__ = {
                                                    "channel": channel,
                                                    "date_create": date_create,
                                                    "message": message,
                                                    "type": type,
                                                }
                                            additional_properties = schemas.NotAnyTypeSchema
                                        
                                        date_create: MetaOapg.properties.date_create
                                        channel: 'DefsChannel'
                                        message: 'ObjsMessage'
                                        type: MetaOapg.properties.type
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'DefsChannel': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["message"]) -> 'ObjsMessage': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["date_create"], typing_extensions.Literal["channel"], typing_extensions.Literal["message"], typing_extensions.Literal["type"], ]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> 'DefsChannel': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> 'ObjsMessage': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date_create"], typing_extensions.Literal["channel"], typing_extensions.Literal["message"], typing_extensions.Literal["type"], ]):
                                            return super().get_item_oapg(name)
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, ],
                                            channel: 'DefsChannel',
                                            message: 'ObjsMessage',
                                            type: typing.Union[MetaOapg.properties.type, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'any_of_0':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                date_create=date_create,
                                                channel=channel,
                                                message=message,
                                                type=type,
                                                _configuration=_configuration,
                                            )
                                    
                                    
                                    class any_of_1(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            required = {
                                                "file",
                                                "date_create",
                                                "type",
                                            }
                                            
                                            class properties:
                                                date_create = schemas.IntSchema
                                            
                                                @staticmethod
                                                def file() -> typing.Type['ObjsFile']:
                                                    return ObjsFile
                                                
                                                
                                                class type(
                                                    schemas.EnumBase,
                                                    schemas.StrSchema
                                                ):
                                                    
                                                    @schemas.classproperty
                                                    def FILE(cls):
                                                        return cls("file")
                                                __annotations__ = {
                                                    "date_create": date_create,
                                                    "file": file,
                                                    "type": type,
                                                }
                                            additional_properties = schemas.NotAnyTypeSchema
                                        
                                        file: 'ObjsFile'
                                        date_create: MetaOapg.properties.date_create
                                        type: MetaOapg.properties.type
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["file"]) -> 'ObjsFile': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["file"], typing_extensions.Literal["date_create"], typing_extensions.Literal["type"], ]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> 'ObjsFile': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["file"], typing_extensions.Literal["date_create"], typing_extensions.Literal["type"], ]):
                                            return super().get_item_oapg(name)
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            file: 'ObjsFile',
                                            date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, ],
                                            type: typing.Union[MetaOapg.properties.type, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'any_of_1':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                file=file,
                                                date_create=date_create,
                                                type=type,
                                                _configuration=_configuration,
                                            )
                                    
                                    
                                    class any_of_2(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            required = {
                                                "file",
                                                "date_create",
                                                "comment",
                                                "type",
                                            }
                                            
                                            class properties:
                                            
                                                @staticmethod
                                                def comment() -> typing.Type['ObjsComment']:
                                                    return ObjsComment
                                                date_create = schemas.IntSchema
                                            
                                                @staticmethod
                                                def file() -> typing.Type['ObjsFile']:
                                                    return ObjsFile
                                                
                                                
                                                class type(
                                                    schemas.EnumBase,
                                                    schemas.StrSchema
                                                ):
                                                    
                                                    @schemas.classproperty
                                                    def FILE_COMMENT(cls):
                                                        return cls("file_comment")
                                                __annotations__ = {
                                                    "comment": comment,
                                                    "date_create": date_create,
                                                    "file": file,
                                                    "type": type,
                                                }
                                            additional_properties = schemas.NotAnyTypeSchema
                                        
                                        file: 'ObjsFile'
                                        date_create: MetaOapg.properties.date_create
                                        comment: 'ObjsComment'
                                        type: MetaOapg.properties.type
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["file"]) -> 'ObjsFile': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["comment"]) -> 'ObjsComment': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["file"], typing_extensions.Literal["date_create"], typing_extensions.Literal["comment"], typing_extensions.Literal["type"], ]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["file"]) -> 'ObjsFile': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["comment"]) -> 'ObjsComment': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["file"], typing_extensions.Literal["date_create"], typing_extensions.Literal["comment"], typing_extensions.Literal["type"], ]):
                                            return super().get_item_oapg(name)
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            file: 'ObjsFile',
                                            date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, ],
                                            comment: 'ObjsComment',
                                            type: typing.Union[MetaOapg.properties.type, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'any_of_2':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                file=file,
                                                date_create=date_create,
                                                comment=comment,
                                                type=type,
                                                _configuration=_configuration,
                                            )
                                    
                                    
                                    class any_of_3(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            required = {
                                                "date_create",
                                                "channel",
                                                "type",
                                            }
                                            
                                            class properties:
                                            
                                                @staticmethod
                                                def channel() -> typing.Type['DefsChannel']:
                                                    return DefsChannel
                                                date_create = schemas.IntSchema
                                                
                                                
                                                class type(
                                                    schemas.EnumBase,
                                                    schemas.StrSchema
                                                ):
                                                    
                                                    @schemas.classproperty
                                                    def CHANNEL(cls):
                                                        return cls("channel")
                                                __annotations__ = {
                                                    "channel": channel,
                                                    "date_create": date_create,
                                                    "type": type,
                                                }
                                            additional_properties = schemas.NotAnyTypeSchema
                                        
                                        date_create: MetaOapg.properties.date_create
                                        channel: 'DefsChannel'
                                        type: MetaOapg.properties.type
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'DefsChannel': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["date_create"], typing_extensions.Literal["channel"], typing_extensions.Literal["type"], ]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> 'DefsChannel': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date_create"], typing_extensions.Literal["channel"], typing_extensions.Literal["type"], ]):
                                            return super().get_item_oapg(name)
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, ],
                                            channel: 'DefsChannel',
                                            type: typing.Union[MetaOapg.properties.type, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'any_of_3':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                date_create=date_create,
                                                channel=channel,
                                                type=type,
                                                _configuration=_configuration,
                                            )
                                    
                                    
                                    class any_of_4(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            required = {
                                                "date_create",
                                                "channel",
                                                "type",
                                            }
                                            
                                            class properties:
                                            
                                                @staticmethod
                                                def channel() -> typing.Type['DefsDmId']:
                                                    return DefsDmId
                                                date_create = schemas.IntSchema
                                                
                                                
                                                class type(
                                                    schemas.EnumBase,
                                                    schemas.StrSchema
                                                ):
                                                    
                                                    @schemas.classproperty
                                                    def IM(cls):
                                                        return cls("im")
                                                __annotations__ = {
                                                    "channel": channel,
                                                    "date_create": date_create,
                                                    "type": type,
                                                }
                                            additional_properties = schemas.NotAnyTypeSchema
                                        
                                        date_create: MetaOapg.properties.date_create
                                        channel: 'DefsDmId'
                                        type: MetaOapg.properties.type
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'DefsDmId': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["date_create"], typing_extensions.Literal["channel"], typing_extensions.Literal["type"], ]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> 'DefsDmId': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date_create"], typing_extensions.Literal["channel"], typing_extensions.Literal["type"], ]):
                                            return super().get_item_oapg(name)
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, ],
                                            channel: 'DefsDmId',
                                            type: typing.Union[MetaOapg.properties.type, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'any_of_4':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                date_create=date_create,
                                                channel=channel,
                                                type=type,
                                                _configuration=_configuration,
                                            )
                                    
                                    
                                    class any_of_5(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            required = {
                                                "date_create",
                                                "channel",
                                                "type",
                                            }
                                            
                                            class properties:
                                            
                                                @staticmethod
                                                def channel() -> typing.Type['DefsGroupId']:
                                                    return DefsGroupId
                                                date_create = schemas.IntSchema
                                                
                                                
                                                class type(
                                                    schemas.EnumBase,
                                                    schemas.StrSchema
                                                ):
                                                    
                                                    @schemas.classproperty
                                                    def GROUP(cls):
                                                        return cls("group")
                                                __annotations__ = {
                                                    "channel": channel,
                                                    "date_create": date_create,
                                                    "type": type,
                                                }
                                            additional_properties = schemas.NotAnyTypeSchema
                                        
                                        date_create: MetaOapg.properties.date_create
                                        channel: 'DefsGroupId'
                                        type: MetaOapg.properties.type
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'DefsGroupId': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["date_create"], typing_extensions.Literal["channel"], typing_extensions.Literal["type"], ]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["date_create"]) -> MetaOapg.properties.date_create: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> 'DefsGroupId': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date_create"], typing_extensions.Literal["channel"], typing_extensions.Literal["type"], ]):
                                            return super().get_item_oapg(name)
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            date_create: typing.Union[MetaOapg.properties.date_create, decimal.Decimal, int, ],
                                            channel: 'DefsGroupId',
                                            type: typing.Union[MetaOapg.properties.type, str, ],
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'any_of_5':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                date_create=date_create,
                                                channel=channel,
                                                type=type,
                                                _configuration=_configuration,
                                            )
                                    
                                    @classmethod
                                    @functools.lru_cache()
                                    def any_of(cls):
                                        # we need this here to make our import statements work
                                        # we must store _composed_schemas in here so the code is only run
                                        # when we invoke this method. If we kept this at the class
                                        # level we would get an error because the class level
                                        # code would be run when this module is imported, and these composed
                                        # classes don't exist yet because their module has not finished
                                        # loading
                                        return [
                                            cls.any_of_0,
                                            cls.any_of_1,
                                            cls.any_of_2,
                                            cls.any_of_3,
                                            cls.any_of_4,
                                            cls.any_of_5,
                                        ]
                            
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def ok() -> typing.Type['DefsOkTrue']:
                return DefsOkTrue
        
            @staticmethod
            def paging() -> typing.Type['ObjsPaging']:
                return ObjsPaging
            __annotations__ = {
                "items": items,
                "ok": ok,
                "paging": paging,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    ok: 'DefsOkTrue'
    items: MetaOapg.properties.items
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paging"]) -> 'ObjsPaging': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ok"], typing_extensions.Literal["items"], typing_extensions.Literal["paging"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paging"]) -> typing.Union['ObjsPaging', schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ok"], typing_extensions.Literal["items"], typing_extensions.Literal["paging"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ok: 'DefsOkTrue',
        items: typing.Union[MetaOapg.properties.items, list, tuple, ],
        paging: typing.Union['ObjsPaging', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            ok=ok,
            items=items,
            paging=paging,
            _configuration=_configuration,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


class SchemaFor0ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "error",
            "ok",
        }
        
        class properties:
            callstack = schemas.StrSchema
            
            
            class error(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NOT_AUTHED(cls):
                    return cls("not_authed")
                
                @schemas.classproperty
                def INVALID_AUTH(cls):
                    return cls("invalid_auth")
                
                @schemas.classproperty
                def ACCOUNT_INACTIVE(cls):
                    return cls("account_inactive")
                
                @schemas.classproperty
                def TOKEN_REVOKED(cls):
                    return cls("token_revoked")
                
                @schemas.classproperty
                def NO_PERMISSION(cls):
                    return cls("no_permission")
                
                @schemas.classproperty
                def ORG_LOGIN_REQUIRED(cls):
                    return cls("org_login_required")
                
                @schemas.classproperty
                def USER_IS_BOT(cls):
                    return cls("user_is_bot")
                
                @schemas.classproperty
                def INVALID_ARG_NAME(cls):
                    return cls("invalid_arg_name")
                
                @schemas.classproperty
                def INVALID_ARRAY_ARG(cls):
                    return cls("invalid_array_arg")
                
                @schemas.classproperty
                def INVALID_CHARSET(cls):
                    return cls("invalid_charset")
                
                @schemas.classproperty
                def INVALID_FORM_DATA(cls):
                    return cls("invalid_form_data")
                
                @schemas.classproperty
                def INVALID_POST_TYPE(cls):
                    return cls("invalid_post_type")
                
                @schemas.classproperty
                def MISSING_POST_TYPE(cls):
                    return cls("missing_post_type")
                
                @schemas.classproperty
                def TEAM_ADDED_TO_ORG(cls):
                    return cls("team_added_to_org")
                
                @schemas.classproperty
                def INVALID_JSON(cls):
                    return cls("invalid_json")
                
                @schemas.classproperty
                def JSON_NOT_OBJECT(cls):
                    return cls("json_not_object")
                
                @schemas.classproperty
                def REQUEST_TIMEOUT(cls):
                    return cls("request_timeout")
                
                @schemas.classproperty
                def UPGRADE_REQUIRED(cls):
                    return cls("upgrade_required")
                
                @schemas.classproperty
                def FATAL_ERROR(cls):
                    return cls("fatal_error")
        
            @staticmethod
            def ok() -> typing.Type['DefsOkFalse']:
                return DefsOkFalse
            __annotations__ = {
                "callstack": callstack,
                "error": error,
                "ok": ok,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    error: MetaOapg.properties.error
    ok: 'DefsOkFalse'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkFalse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callstack"]) -> MetaOapg.properties.callstack: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["error"], typing_extensions.Literal["ok"], typing_extensions.Literal["callstack"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkFalse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callstack"]) -> typing.Union[MetaOapg.properties.callstack, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["error"], typing_extensions.Literal["ok"], typing_extensions.Literal["callstack"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        error: typing.Union[MetaOapg.properties.error, str, ],
        ok: 'DefsOkFalse',
        callstack: typing.Union[MetaOapg.properties.callstack, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor0ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            error=error,
            ok=ok,
            callstack=callstack,
            _configuration=_configuration,
        )


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor0ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _stars_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def _stars_list_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _stars_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _stars_list_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_token,
            request_query_count,
            request_query_page,
            request_query_cursor,
            request_query_limit,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                default_response = _status_code_to_response.get('default')
                if default_response:
                    api_response = default_response.deserialize(response, self.api_client.configuration)
                else:
                    api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class StarsList(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def stars_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def stars_list(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def stars_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def stars_list(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._stars_list_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._stars_list_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


