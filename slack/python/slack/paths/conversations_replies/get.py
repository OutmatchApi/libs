# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from slack import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack import schemas  # noqa: F401

from slack.model.defs_ts import DefsTs
from slack.model.defs_team import DefsTeam
from slack.model.defs_ok_false import DefsOkFalse
from slack.model.objs_user_profile_short import ObjsUserProfileShort
from slack.model.defs_ok_true import DefsOkTrue
from slack.model.defs_user_id import DefsUserId

from . import path

# Query params
TokenSchema = schemas.StrSchema
ChannelSchema = schemas.StrSchema
TsSchema = schemas.NumberSchema
LatestSchema = schemas.NumberSchema
OldestSchema = schemas.NumberSchema
InclusiveSchema = schemas.BoolSchema
LimitSchema = schemas.IntSchema
CursorSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'token': typing.Union[TokenSchema, str, ],
        'channel': typing.Union[ChannelSchema, str, ],
        'ts': typing.Union[TsSchema, decimal.Decimal, int, float, ],
        'latest': typing.Union[LatestSchema, decimal.Decimal, int, float, ],
        'oldest': typing.Union[OldestSchema, decimal.Decimal, int, float, ],
        'inclusive': typing.Union[InclusiveSchema, bool, ],
        'limit': typing.Union[LimitSchema, decimal.Decimal, int, ],
        'cursor': typing.Union[CursorSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_token = api_client.QueryParameter(
    name="token",
    style=api_client.ParameterStyle.FORM,
    schema=TokenSchema,
    explode=True,
)
request_query_channel = api_client.QueryParameter(
    name="channel",
    style=api_client.ParameterStyle.FORM,
    schema=ChannelSchema,
    explode=True,
)
request_query_ts = api_client.QueryParameter(
    name="ts",
    style=api_client.ParameterStyle.FORM,
    schema=TsSchema,
    explode=True,
)
request_query_latest = api_client.QueryParameter(
    name="latest",
    style=api_client.ParameterStyle.FORM,
    schema=LatestSchema,
    explode=True,
)
request_query_oldest = api_client.QueryParameter(
    name="oldest",
    style=api_client.ParameterStyle.FORM,
    schema=OldestSchema,
    explode=True,
)
request_query_inclusive = api_client.QueryParameter(
    name="inclusive",
    style=api_client.ParameterStyle.FORM,
    schema=InclusiveSchema,
    explode=True,
)
request_query_limit = api_client.QueryParameter(
    name="limit",
    style=api_client.ParameterStyle.FORM,
    schema=LimitSchema,
    explode=True,
)
request_query_cursor = api_client.QueryParameter(
    name="cursor",
    style=api_client.ParameterStyle.FORM,
    schema=CursorSchema,
    explode=True,
)
_auth = [
    'slackAuth',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "messages",
            "ok",
        }
        
        class properties:
            has_more = schemas.BoolSchema
            
            
            class messages(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.ComposedSchema,
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    
                                    class any_of_0(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            required = {
                                                "subscribed",
                                                "thread_ts",
                                                "text",
                                                "reply_count",
                                                "type",
                                                "user",
                                                "ts",
                                            }
                                            
                                            class properties:
                                            
                                                @staticmethod
                                                def last_read() -> typing.Type['DefsTs']:
                                                    return DefsTs
                                            
                                                @staticmethod
                                                def latest_reply() -> typing.Type['DefsTs']:
                                                    return DefsTs
                                                reply_count = schemas.IntSchema
                                                
                                                
                                                class reply_users(
                                                    schemas.ListSchema
                                                ):
                                                
                                                
                                                    class MetaOapg:
                                                        unique_items = True
                                                        
                                                        @staticmethod
                                                        def items() -> typing.Type['DefsUserId']:
                                                            return DefsUserId
                                                
                                                    def __new__(
                                                        cls,
                                                        arg: typing.Union[typing.Tuple['DefsUserId'], typing.List['DefsUserId']],
                                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                                    ) -> 'reply_users':
                                                        return super().__new__(
                                                            cls,
                                                            arg,
                                                            _configuration=_configuration,
                                                        )
                                                
                                                    def __getitem__(self, i: int) -> 'DefsUserId':
                                                        return super().__getitem__(i)
                                                reply_users_count = schemas.IntSchema
                                            
                                                @staticmethod
                                                def source_team() -> typing.Type['DefsTeam']:
                                                    return DefsTeam
                                                subscribed = schemas.BoolSchema
                                            
                                                @staticmethod
                                                def team() -> typing.Type['DefsTeam']:
                                                    return DefsTeam
                                                text = schemas.StrSchema
                                            
                                                @staticmethod
                                                def thread_ts() -> typing.Type['DefsTs']:
                                                    return DefsTs
                                            
                                                @staticmethod
                                                def ts() -> typing.Type['DefsTs']:
                                                    return DefsTs
                                                type = schemas.StrSchema
                                                unread_count = schemas.IntSchema
                                            
                                                @staticmethod
                                                def user() -> typing.Type['DefsUserId']:
                                                    return DefsUserId
                                            
                                                @staticmethod
                                                def user_profile() -> typing.Type['ObjsUserProfileShort']:
                                                    return ObjsUserProfileShort
                                            
                                                @staticmethod
                                                def user_team() -> typing.Type['DefsTeam']:
                                                    return DefsTeam
                                                __annotations__ = {
                                                    "last_read": last_read,
                                                    "latest_reply": latest_reply,
                                                    "reply_count": reply_count,
                                                    "reply_users": reply_users,
                                                    "reply_users_count": reply_users_count,
                                                    "source_team": source_team,
                                                    "subscribed": subscribed,
                                                    "team": team,
                                                    "text": text,
                                                    "thread_ts": thread_ts,
                                                    "ts": ts,
                                                    "type": type,
                                                    "unread_count": unread_count,
                                                    "user": user,
                                                    "user_profile": user_profile,
                                                    "user_team": user_team,
                                                }
                                            additional_properties = schemas.NotAnyTypeSchema
                                        
                                        subscribed: MetaOapg.properties.subscribed
                                        thread_ts: 'DefsTs'
                                        text: MetaOapg.properties.text
                                        reply_count: MetaOapg.properties.reply_count
                                        type: MetaOapg.properties.type
                                        user: 'DefsUserId'
                                        ts: 'DefsTs'
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["subscribed"]) -> MetaOapg.properties.subscribed: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["thread_ts"]) -> 'DefsTs': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["reply_count"]) -> MetaOapg.properties.reply_count: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["ts"]) -> 'DefsTs': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["last_read"]) -> 'DefsTs': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["latest_reply"]) -> 'DefsTs': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["reply_users"]) -> MetaOapg.properties.reply_users: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["reply_users_count"]) -> MetaOapg.properties.reply_users_count: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["source_team"]) -> 'DefsTeam': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'DefsTeam': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["unread_count"]) -> MetaOapg.properties.unread_count: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["user_profile"]) -> 'ObjsUserProfileShort': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["user_team"]) -> 'DefsTeam': ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["subscribed"], typing_extensions.Literal["thread_ts"], typing_extensions.Literal["text"], typing_extensions.Literal["reply_count"], typing_extensions.Literal["type"], typing_extensions.Literal["user"], typing_extensions.Literal["ts"], typing_extensions.Literal["last_read"], typing_extensions.Literal["latest_reply"], typing_extensions.Literal["reply_users"], typing_extensions.Literal["reply_users_count"], typing_extensions.Literal["source_team"], typing_extensions.Literal["team"], typing_extensions.Literal["unread_count"], typing_extensions.Literal["user_profile"], typing_extensions.Literal["user_team"], ]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["subscribed"]) -> MetaOapg.properties.subscribed: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["thread_ts"]) -> 'DefsTs': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["reply_count"]) -> MetaOapg.properties.reply_count: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["ts"]) -> 'DefsTs': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["last_read"]) -> typing.Union['DefsTs', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["latest_reply"]) -> typing.Union['DefsTs', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["reply_users"]) -> typing.Union[MetaOapg.properties.reply_users, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["reply_users_count"]) -> typing.Union[MetaOapg.properties.reply_users_count, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["source_team"]) -> typing.Union['DefsTeam', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union['DefsTeam', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["unread_count"]) -> typing.Union[MetaOapg.properties.unread_count, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["user_profile"]) -> typing.Union['ObjsUserProfileShort', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["user_team"]) -> typing.Union['DefsTeam', schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subscribed"], typing_extensions.Literal["thread_ts"], typing_extensions.Literal["text"], typing_extensions.Literal["reply_count"], typing_extensions.Literal["type"], typing_extensions.Literal["user"], typing_extensions.Literal["ts"], typing_extensions.Literal["last_read"], typing_extensions.Literal["latest_reply"], typing_extensions.Literal["reply_users"], typing_extensions.Literal["reply_users_count"], typing_extensions.Literal["source_team"], typing_extensions.Literal["team"], typing_extensions.Literal["unread_count"], typing_extensions.Literal["user_profile"], typing_extensions.Literal["user_team"], ]):
                                            return super().get_item_oapg(name)
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            subscribed: typing.Union[MetaOapg.properties.subscribed, bool, ],
                                            thread_ts: 'DefsTs',
                                            text: typing.Union[MetaOapg.properties.text, str, ],
                                            reply_count: typing.Union[MetaOapg.properties.reply_count, decimal.Decimal, int, ],
                                            type: typing.Union[MetaOapg.properties.type, str, ],
                                            user: 'DefsUserId',
                                            ts: 'DefsTs',
                                            last_read: typing.Union['DefsTs', schemas.Unset] = schemas.unset,
                                            latest_reply: typing.Union['DefsTs', schemas.Unset] = schemas.unset,
                                            reply_users: typing.Union[MetaOapg.properties.reply_users, list, tuple, schemas.Unset] = schemas.unset,
                                            reply_users_count: typing.Union[MetaOapg.properties.reply_users_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                            source_team: typing.Union['DefsTeam', schemas.Unset] = schemas.unset,
                                            team: typing.Union['DefsTeam', schemas.Unset] = schemas.unset,
                                            unread_count: typing.Union[MetaOapg.properties.unread_count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                            user_profile: typing.Union['ObjsUserProfileShort', schemas.Unset] = schemas.unset,
                                            user_team: typing.Union['DefsTeam', schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'any_of_0':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                subscribed=subscribed,
                                                thread_ts=thread_ts,
                                                text=text,
                                                reply_count=reply_count,
                                                type=type,
                                                user=user,
                                                ts=ts,
                                                last_read=last_read,
                                                latest_reply=latest_reply,
                                                reply_users=reply_users,
                                                reply_users_count=reply_users_count,
                                                source_team=source_team,
                                                team=team,
                                                unread_count=unread_count,
                                                user_profile=user_profile,
                                                user_team=user_team,
                                                _configuration=_configuration,
                                            )
                                    
                                    
                                    class any_of_1(
                                        schemas.DictSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            required = {
                                                "parent_user_id",
                                                "thread_ts",
                                                "text",
                                                "type",
                                                "user",
                                                "ts",
                                            }
                                            
                                            class properties:
                                                is_starred = schemas.BoolSchema
                                            
                                                @staticmethod
                                                def parent_user_id() -> typing.Type['DefsUserId']:
                                                    return DefsUserId
                                            
                                                @staticmethod
                                                def source_team() -> typing.Type['DefsTeam']:
                                                    return DefsTeam
                                            
                                                @staticmethod
                                                def team() -> typing.Type['DefsTeam']:
                                                    return DefsTeam
                                                text = schemas.StrSchema
                                            
                                                @staticmethod
                                                def thread_ts() -> typing.Type['DefsTs']:
                                                    return DefsTs
                                            
                                                @staticmethod
                                                def ts() -> typing.Type['DefsTs']:
                                                    return DefsTs
                                                type = schemas.StrSchema
                                            
                                                @staticmethod
                                                def user() -> typing.Type['DefsUserId']:
                                                    return DefsUserId
                                            
                                                @staticmethod
                                                def user_profile() -> typing.Type['ObjsUserProfileShort']:
                                                    return ObjsUserProfileShort
                                            
                                                @staticmethod
                                                def user_team() -> typing.Type['DefsTeam']:
                                                    return DefsTeam
                                                __annotations__ = {
                                                    "is_starred": is_starred,
                                                    "parent_user_id": parent_user_id,
                                                    "source_team": source_team,
                                                    "team": team,
                                                    "text": text,
                                                    "thread_ts": thread_ts,
                                                    "ts": ts,
                                                    "type": type,
                                                    "user": user,
                                                    "user_profile": user_profile,
                                                    "user_team": user_team,
                                                }
                                            additional_properties = schemas.NotAnyTypeSchema
                                        
                                        parent_user_id: 'DefsUserId'
                                        thread_ts: 'DefsTs'
                                        text: MetaOapg.properties.text
                                        type: MetaOapg.properties.type
                                        user: 'DefsUserId'
                                        ts: 'DefsTs'
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["parent_user_id"]) -> 'DefsUserId': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["thread_ts"]) -> 'DefsTs': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["ts"]) -> 'DefsTs': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["is_starred"]) -> MetaOapg.properties.is_starred: ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["source_team"]) -> 'DefsTeam': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["team"]) -> 'DefsTeam': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["user_profile"]) -> 'ObjsUserProfileShort': ...
                                        
                                        @typing.overload
                                        def __getitem__(self, name: typing_extensions.Literal["user_team"]) -> 'DefsTeam': ...
                                        
                                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["parent_user_id"], typing_extensions.Literal["thread_ts"], typing_extensions.Literal["text"], typing_extensions.Literal["type"], typing_extensions.Literal["user"], typing_extensions.Literal["ts"], typing_extensions.Literal["is_starred"], typing_extensions.Literal["source_team"], typing_extensions.Literal["team"], typing_extensions.Literal["user_profile"], typing_extensions.Literal["user_team"], ]):
                                            # dict_instance[name] accessor
                                            return super().__getitem__(name)
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["parent_user_id"]) -> 'DefsUserId': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["thread_ts"]) -> 'DefsTs': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["ts"]) -> 'DefsTs': ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["is_starred"]) -> typing.Union[MetaOapg.properties.is_starred, schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["source_team"]) -> typing.Union['DefsTeam', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> typing.Union['DefsTeam', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["user_profile"]) -> typing.Union['ObjsUserProfileShort', schemas.Unset]: ...
                                        
                                        @typing.overload
                                        def get_item_oapg(self, name: typing_extensions.Literal["user_team"]) -> typing.Union['DefsTeam', schemas.Unset]: ...
                                        
                                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["parent_user_id"], typing_extensions.Literal["thread_ts"], typing_extensions.Literal["text"], typing_extensions.Literal["type"], typing_extensions.Literal["user"], typing_extensions.Literal["ts"], typing_extensions.Literal["is_starred"], typing_extensions.Literal["source_team"], typing_extensions.Literal["team"], typing_extensions.Literal["user_profile"], typing_extensions.Literal["user_team"], ]):
                                            return super().get_item_oapg(name)
                                    
                                        def __new__(
                                            cls,
                                            *args: typing.Union[dict, frozendict.frozendict, ],
                                            parent_user_id: 'DefsUserId',
                                            thread_ts: 'DefsTs',
                                            text: typing.Union[MetaOapg.properties.text, str, ],
                                            type: typing.Union[MetaOapg.properties.type, str, ],
                                            user: 'DefsUserId',
                                            ts: 'DefsTs',
                                            is_starred: typing.Union[MetaOapg.properties.is_starred, bool, schemas.Unset] = schemas.unset,
                                            source_team: typing.Union['DefsTeam', schemas.Unset] = schemas.unset,
                                            team: typing.Union['DefsTeam', schemas.Unset] = schemas.unset,
                                            user_profile: typing.Union['ObjsUserProfileShort', schemas.Unset] = schemas.unset,
                                            user_team: typing.Union['DefsTeam', schemas.Unset] = schemas.unset,
                                            _configuration: typing.Optional[schemas.Configuration] = None,
                                        ) -> 'any_of_1':
                                            return super().__new__(
                                                cls,
                                                *args,
                                                parent_user_id=parent_user_id,
                                                thread_ts=thread_ts,
                                                text=text,
                                                type=type,
                                                user=user,
                                                ts=ts,
                                                is_starred=is_starred,
                                                source_team=source_team,
                                                team=team,
                                                user_profile=user_profile,
                                                user_team=user_team,
                                                _configuration=_configuration,
                                            )
                                    
                                    @classmethod
                                    @functools.lru_cache()
                                    def any_of(cls):
                                        # we need this here to make our import statements work
                                        # we must store _composed_schemas in here so the code is only run
                                        # when we invoke this method. If we kept this at the class
                                        # level we would get an error because the class level
                                        # code would be run when this module is imported, and these composed
                                        # classes don't exist yet because their module has not finished
                                        # loading
                                        return [
                                            cls.any_of_0,
                                            cls.any_of_1,
                                        ]
                            
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'messages':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def ok() -> typing.Type['DefsOkTrue']:
                return DefsOkTrue
            __annotations__ = {
                "has_more": has_more,
                "messages": messages,
                "ok": ok,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    messages: MetaOapg.properties.messages
    ok: 'DefsOkTrue'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["messages"]) -> MetaOapg.properties.messages: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_more"]) -> MetaOapg.properties.has_more: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["messages"], typing_extensions.Literal["ok"], typing_extensions.Literal["has_more"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["messages"]) -> MetaOapg.properties.messages: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_more"]) -> typing.Union[MetaOapg.properties.has_more, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["messages"], typing_extensions.Literal["ok"], typing_extensions.Literal["has_more"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        messages: typing.Union[MetaOapg.properties.messages, list, tuple, ],
        ok: 'DefsOkTrue',
        has_more: typing.Union[MetaOapg.properties.has_more, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            messages=messages,
            ok=ok,
            has_more=has_more,
            _configuration=_configuration,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


class SchemaFor0ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "error",
            "ok",
        }
        
        class properties:
            callstack = schemas.StrSchema
            
            
            class error(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "missing_scope": "MISSING_SCOPE",
                        "channel_not_found": "CHANNEL_NOT_FOUND",
                        "thread_not_found": "THREAD_NOT_FOUND",
                        "not_authed": "NOT_AUTHED",
                        "invalid_auth": "INVALID_AUTH",
                        "account_inactive": "ACCOUNT_INACTIVE",
                        "invalid_arg_name": "INVALID_ARG_NAME",
                        "invalid_array_arg": "INVALID_ARRAY_ARG",
                        "invalid_charset": "INVALID_CHARSET",
                        "invalid_form_data": "INVALID_FORM_DATA",
                        "invalid_post_type": "INVALID_POST_TYPE",
                        "missing_post_type": "MISSING_POST_TYPE",
                        "team_added_to_org": "TEAM_ADDED_TO_ORG",
                        "invalid_json": "INVALID_JSON",
                        "json_not_object": "JSON_NOT_OBJECT",
                        "request_timeout": "REQUEST_TIMEOUT",
                        "upgrade_required": "UPGRADE_REQUIRED",
                    }
                
                @schemas.classproperty
                def MISSING_SCOPE(cls):
                    return cls("missing_scope")
                
                @schemas.classproperty
                def CHANNEL_NOT_FOUND(cls):
                    return cls("channel_not_found")
                
                @schemas.classproperty
                def THREAD_NOT_FOUND(cls):
                    return cls("thread_not_found")
                
                @schemas.classproperty
                def NOT_AUTHED(cls):
                    return cls("not_authed")
                
                @schemas.classproperty
                def INVALID_AUTH(cls):
                    return cls("invalid_auth")
                
                @schemas.classproperty
                def ACCOUNT_INACTIVE(cls):
                    return cls("account_inactive")
                
                @schemas.classproperty
                def INVALID_ARG_NAME(cls):
                    return cls("invalid_arg_name")
                
                @schemas.classproperty
                def INVALID_ARRAY_ARG(cls):
                    return cls("invalid_array_arg")
                
                @schemas.classproperty
                def INVALID_CHARSET(cls):
                    return cls("invalid_charset")
                
                @schemas.classproperty
                def INVALID_FORM_DATA(cls):
                    return cls("invalid_form_data")
                
                @schemas.classproperty
                def INVALID_POST_TYPE(cls):
                    return cls("invalid_post_type")
                
                @schemas.classproperty
                def MISSING_POST_TYPE(cls):
                    return cls("missing_post_type")
                
                @schemas.classproperty
                def TEAM_ADDED_TO_ORG(cls):
                    return cls("team_added_to_org")
                
                @schemas.classproperty
                def INVALID_JSON(cls):
                    return cls("invalid_json")
                
                @schemas.classproperty
                def JSON_NOT_OBJECT(cls):
                    return cls("json_not_object")
                
                @schemas.classproperty
                def REQUEST_TIMEOUT(cls):
                    return cls("request_timeout")
                
                @schemas.classproperty
                def UPGRADE_REQUIRED(cls):
                    return cls("upgrade_required")
            needed = schemas.StrSchema
        
            @staticmethod
            def ok() -> typing.Type['DefsOkFalse']:
                return DefsOkFalse
            provided = schemas.StrSchema
            __annotations__ = {
                "callstack": callstack,
                "error": error,
                "needed": needed,
                "ok": ok,
                "provided": provided,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    error: MetaOapg.properties.error
    ok: 'DefsOkFalse'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkFalse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callstack"]) -> MetaOapg.properties.callstack: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["needed"]) -> MetaOapg.properties.needed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provided"]) -> MetaOapg.properties.provided: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["error"], typing_extensions.Literal["ok"], typing_extensions.Literal["callstack"], typing_extensions.Literal["needed"], typing_extensions.Literal["provided"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkFalse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callstack"]) -> typing.Union[MetaOapg.properties.callstack, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["needed"]) -> typing.Union[MetaOapg.properties.needed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provided"]) -> typing.Union[MetaOapg.properties.provided, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["error"], typing_extensions.Literal["ok"], typing_extensions.Literal["callstack"], typing_extensions.Literal["needed"], typing_extensions.Literal["provided"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        error: typing.Union[MetaOapg.properties.error, str, ],
        ok: 'DefsOkFalse',
        callstack: typing.Union[MetaOapg.properties.callstack, str, schemas.Unset] = schemas.unset,
        needed: typing.Union[MetaOapg.properties.needed, str, schemas.Unset] = schemas.unset,
        provided: typing.Union[MetaOapg.properties.provided, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor0ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            error=error,
            ok=ok,
            callstack=callstack,
            needed=needed,
            provided=provided,
            _configuration=_configuration,
        )


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor0ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _conversations_replies_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def _conversations_replies_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _conversations_replies_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _conversations_replies_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_token,
            request_query_channel,
            request_query_ts,
            request_query_latest,
            request_query_oldest,
            request_query_inclusive,
            request_query_limit,
            request_query_cursor,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                default_response = _status_code_to_response.get('default')
                if default_response:
                    api_response = default_response.deserialize(response, self.api_client.configuration)
                else:
                    api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class ConversationsReplies(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def conversations_replies(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def conversations_replies(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def conversations_replies(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def conversations_replies(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._conversations_replies_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._conversations_replies_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


