# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from slack import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack import schemas  # noqa: F401

from slack.model.objs_resources import ObjsResources
from slack.model.objs_scopes import ObjsScopes
from slack.model.defs_ok_false import DefsOkFalse
from slack.model.defs_ok_true import DefsOkTrue

# Query params
TokenSchema = schemas.StrSchema
RequestRequiredQueryParams = typing_extensions.TypedDict(
    'RequestRequiredQueryParams',
    {
    }
)
RequestOptionalQueryParams = typing_extensions.TypedDict(
    'RequestOptionalQueryParams',
    {
        'token': typing.Union[TokenSchema, str, ],
    },
    total=False
)


class RequestQueryParams(RequestRequiredQueryParams, RequestOptionalQueryParams):
    pass


request_query_token = api_client.QueryParameter(
    name="token",
    style=api_client.ParameterStyle.FORM,
    schema=TokenSchema,
    explode=True,
)


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "ok",
            "info",
        }
        
        class properties:
            
            
            class info(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "im",
                        "mpim",
                        "channel",
                        "app_home",
                        "team",
                        "group",
                    }
                    
                    class properties:
                        
                        
                        class app_home(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                
                                    @staticmethod
                                    def resources() -> typing.Type['ObjsResources']:
                                        return ObjsResources
                                
                                    @staticmethod
                                    def scopes() -> typing.Type['ObjsScopes']:
                                        return ObjsScopes
                                    __annotations__ = {
                                        "resources": resources,
                                        "scopes": scopes,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["resources"]) -> 'ObjsResources': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'ObjsScopes': ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["resources", "scopes", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["resources"]) -> typing.Union['ObjsResources', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union['ObjsScopes', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resources", "scopes", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                resources: typing.Union['ObjsResources', schemas.Unset] = schemas.unset,
                                scopes: typing.Union['ObjsScopes', schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'app_home':
                                return super().__new__(
                                    cls,
                                    *args,
                                    resources=resources,
                                    scopes=scopes,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class channel(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                
                                    @staticmethod
                                    def resources() -> typing.Type['ObjsResources']:
                                        return ObjsResources
                                
                                    @staticmethod
                                    def scopes() -> typing.Type['ObjsScopes']:
                                        return ObjsScopes
                                    __annotations__ = {
                                        "resources": resources,
                                        "scopes": scopes,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["resources"]) -> 'ObjsResources': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'ObjsScopes': ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["resources", "scopes", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["resources"]) -> typing.Union['ObjsResources', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union['ObjsScopes', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resources", "scopes", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                resources: typing.Union['ObjsResources', schemas.Unset] = schemas.unset,
                                scopes: typing.Union['ObjsScopes', schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'channel':
                                return super().__new__(
                                    cls,
                                    *args,
                                    resources=resources,
                                    scopes=scopes,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class group(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                
                                    @staticmethod
                                    def resources() -> typing.Type['ObjsResources']:
                                        return ObjsResources
                                
                                    @staticmethod
                                    def scopes() -> typing.Type['ObjsScopes']:
                                        return ObjsScopes
                                    __annotations__ = {
                                        "resources": resources,
                                        "scopes": scopes,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["resources"]) -> 'ObjsResources': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'ObjsScopes': ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["resources", "scopes", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["resources"]) -> typing.Union['ObjsResources', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union['ObjsScopes', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resources", "scopes", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                resources: typing.Union['ObjsResources', schemas.Unset] = schemas.unset,
                                scopes: typing.Union['ObjsScopes', schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'group':
                                return super().__new__(
                                    cls,
                                    *args,
                                    resources=resources,
                                    scopes=scopes,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class im(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                
                                    @staticmethod
                                    def resources() -> typing.Type['ObjsResources']:
                                        return ObjsResources
                                
                                    @staticmethod
                                    def scopes() -> typing.Type['ObjsScopes']:
                                        return ObjsScopes
                                    __annotations__ = {
                                        "resources": resources,
                                        "scopes": scopes,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["resources"]) -> 'ObjsResources': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'ObjsScopes': ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["resources", "scopes", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["resources"]) -> typing.Union['ObjsResources', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union['ObjsScopes', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resources", "scopes", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                resources: typing.Union['ObjsResources', schemas.Unset] = schemas.unset,
                                scopes: typing.Union['ObjsScopes', schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'im':
                                return super().__new__(
                                    cls,
                                    *args,
                                    resources=resources,
                                    scopes=scopes,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class mpim(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                
                                class properties:
                                
                                    @staticmethod
                                    def resources() -> typing.Type['ObjsResources']:
                                        return ObjsResources
                                
                                    @staticmethod
                                    def scopes() -> typing.Type['ObjsScopes']:
                                        return ObjsScopes
                                    __annotations__ = {
                                        "resources": resources,
                                        "scopes": scopes,
                                    }
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["resources"]) -> 'ObjsResources': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'ObjsScopes': ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["resources", "scopes", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["resources"]) -> typing.Union['ObjsResources', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> typing.Union['ObjsScopes', schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resources", "scopes", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                resources: typing.Union['ObjsResources', schemas.Unset] = schemas.unset,
                                scopes: typing.Union['ObjsScopes', schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'mpim':
                                return super().__new__(
                                    cls,
                                    *args,
                                    resources=resources,
                                    scopes=scopes,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class team(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "resources",
                                    "scopes",
                                }
                                
                                class properties:
                                
                                    @staticmethod
                                    def resources() -> typing.Type['ObjsResources']:
                                        return ObjsResources
                                
                                    @staticmethod
                                    def scopes() -> typing.Type['ObjsScopes']:
                                        return ObjsScopes
                                    __annotations__ = {
                                        "resources": resources,
                                        "scopes": scopes,
                                    }
                            
                            resources: 'ObjsResources'
                            scopes: 'ObjsScopes'
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["resources"]) -> 'ObjsResources': ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["scopes"]) -> 'ObjsScopes': ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["resources", "scopes", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["resources"]) -> 'ObjsResources': ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["scopes"]) -> 'ObjsScopes': ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["resources", "scopes", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *args: typing.Union[dict, frozendict.frozendict, ],
                                resources: 'ObjsResources',
                                scopes: 'ObjsScopes',
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'team':
                                return super().__new__(
                                    cls,
                                    *args,
                                    resources=resources,
                                    scopes=scopes,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "app_home": app_home,
                            "channel": channel,
                            "group": group,
                            "im": im,
                            "mpim": mpim,
                            "team": team,
                        }
                
                im: MetaOapg.properties.im
                mpim: MetaOapg.properties.mpim
                channel: MetaOapg.properties.channel
                app_home: MetaOapg.properties.app_home
                team: MetaOapg.properties.team
                group: MetaOapg.properties.group
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["app_home"]) -> MetaOapg.properties.app_home: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["im"]) -> MetaOapg.properties.im: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["mpim"]) -> MetaOapg.properties.mpim: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["app_home", "channel", "group", "im", "mpim", "team", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["app_home"]) -> MetaOapg.properties.app_home: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["im"]) -> MetaOapg.properties.im: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["mpim"]) -> MetaOapg.properties.mpim: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["team"]) -> MetaOapg.properties.team: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["app_home", "channel", "group", "im", "mpim", "team", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    im: typing.Union[MetaOapg.properties.im, dict, frozendict.frozendict, ],
                    mpim: typing.Union[MetaOapg.properties.mpim, dict, frozendict.frozendict, ],
                    channel: typing.Union[MetaOapg.properties.channel, dict, frozendict.frozendict, ],
                    app_home: typing.Union[MetaOapg.properties.app_home, dict, frozendict.frozendict, ],
                    team: typing.Union[MetaOapg.properties.team, dict, frozendict.frozendict, ],
                    group: typing.Union[MetaOapg.properties.group, dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'info':
                    return super().__new__(
                        cls,
                        *args,
                        im=im,
                        mpim=mpim,
                        channel=channel,
                        app_home=app_home,
                        team=team,
                        group=group,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def ok() -> typing.Type['DefsOkTrue']:
                return DefsOkTrue
            __annotations__ = {
                "info": info,
                "ok": ok,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    ok: 'DefsOkTrue'
    info: MetaOapg.properties.info
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["info"]) -> MetaOapg.properties.info: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ok"], typing_extensions.Literal["info"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["info"]) -> MetaOapg.properties.info: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ok"], typing_extensions.Literal["info"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ok: 'DefsOkTrue',
        info: typing.Union[MetaOapg.properties.info, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            ok=ok,
            info=info,
            _configuration=_configuration,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


class SchemaFor0ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "error",
            "ok",
        }
        
        class properties:
            callstack = schemas.StrSchema
            
            
            class error(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NOT_AUTHED(cls):
                    return cls("not_authed")
                
                @schemas.classproperty
                def INVALID_AUTH(cls):
                    return cls("invalid_auth")
                
                @schemas.classproperty
                def ACCOUNT_INACTIVE(cls):
                    return cls("account_inactive")
                
                @schemas.classproperty
                def TOKEN_REVOKED(cls):
                    return cls("token_revoked")
                
                @schemas.classproperty
                def NO_PERMISSION(cls):
                    return cls("no_permission")
                
                @schemas.classproperty
                def ORG_LOGIN_REQUIRED(cls):
                    return cls("org_login_required")
                
                @schemas.classproperty
                def USER_IS_BOT(cls):
                    return cls("user_is_bot")
                
                @schemas.classproperty
                def INVALID_ARG_NAME(cls):
                    return cls("invalid_arg_name")
                
                @schemas.classproperty
                def INVALID_ARRAY_ARG(cls):
                    return cls("invalid_array_arg")
                
                @schemas.classproperty
                def INVALID_CHARSET(cls):
                    return cls("invalid_charset")
                
                @schemas.classproperty
                def INVALID_FORM_DATA(cls):
                    return cls("invalid_form_data")
                
                @schemas.classproperty
                def INVALID_POST_TYPE(cls):
                    return cls("invalid_post_type")
                
                @schemas.classproperty
                def MISSING_POST_TYPE(cls):
                    return cls("missing_post_type")
                
                @schemas.classproperty
                def TEAM_ADDED_TO_ORG(cls):
                    return cls("team_added_to_org")
                
                @schemas.classproperty
                def INVALID_JSON(cls):
                    return cls("invalid_json")
                
                @schemas.classproperty
                def JSON_NOT_OBJECT(cls):
                    return cls("json_not_object")
                
                @schemas.classproperty
                def REQUEST_TIMEOUT(cls):
                    return cls("request_timeout")
                
                @schemas.classproperty
                def UPGRADE_REQUIRED(cls):
                    return cls("upgrade_required")
                
                @schemas.classproperty
                def FATAL_ERROR(cls):
                    return cls("fatal_error")
        
            @staticmethod
            def ok() -> typing.Type['DefsOkFalse']:
                return DefsOkFalse
            __annotations__ = {
                "callstack": callstack,
                "error": error,
                "ok": ok,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    error: MetaOapg.properties.error
    ok: 'DefsOkFalse'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkFalse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callstack"]) -> MetaOapg.properties.callstack: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["error"], typing_extensions.Literal["ok"], typing_extensions.Literal["callstack"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkFalse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callstack"]) -> typing.Union[MetaOapg.properties.callstack, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["error"], typing_extensions.Literal["ok"], typing_extensions.Literal["callstack"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        error: typing.Union[MetaOapg.properties.error, str, ],
        ok: 'DefsOkFalse',
        callstack: typing.Union[MetaOapg.properties.callstack, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor0ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            error=error,
            ok=ok,
            callstack=callstack,
            _configuration=_configuration,
        )


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor0ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _apps_permissions_info_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def _apps_permissions_info_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _apps_permissions_info_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _apps_permissions_info_oapg(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestQueryParams, query_params)
        used_path = path.value

        prefix_separator_iterator = None
        for parameter in (
            request_query_token,
        ):
            parameter_data = query_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            if prefix_separator_iterator is None:
                prefix_separator_iterator = parameter.get_prefix_separator_iterator()
            serialized_data = parameter.serialize(parameter_data, prefix_separator_iterator)
            for serialized_value in serialized_data.values():
                used_path += serialized_value

        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        response = self.api_client.call_api(
            resource_path=used_path,
            method='get'.upper(),
            headers=_headers,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                default_response = _status_code_to_response.get('default')
                if default_response:
                    api_response = default_response.deserialize(response, self.api_client.configuration)
                else:
                    api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class AppsPermissionsInfo(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def apps_permissions_info(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def apps_permissions_info(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def apps_permissions_info(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def apps_permissions_info(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._apps_permissions_info_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForget(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def get(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def get(
        self,
        query_params: RequestQueryParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._apps_permissions_info_oapg(
            query_params=query_params,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


