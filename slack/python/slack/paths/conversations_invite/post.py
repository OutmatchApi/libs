# coding: utf-8

"""


    Generated by: https://openapi-generator.tech
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from urllib3._collections import HTTPHeaderDict

from slack import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack import schemas  # noqa: F401

from slack.model.objs_conversation import ObjsConversation
from slack.model.defs_ok_false import DefsOkFalse
from slack.model.defs_ok_true import DefsOkTrue
from slack.model.defs_user_id import DefsUserId

from . import path

# Header params
TokenSchema = schemas.StrSchema
RequestRequiredHeaderParams = typing_extensions.TypedDict(
    'RequestRequiredHeaderParams',
    {
    }
)
RequestOptionalHeaderParams = typing_extensions.TypedDict(
    'RequestOptionalHeaderParams',
    {
        'token': typing.Union[TokenSchema, str, ],
    },
    total=False
)


class RequestHeaderParams(RequestRequiredHeaderParams, RequestOptionalHeaderParams):
    pass


request_header_token = api_client.HeaderParameter(
    name="token",
    style=api_client.ParameterStyle.SIMPLE,
    schema=TokenSchema,
)
# body param


class SchemaForRequestBodyApplicationXWwwFormUrlencoded(
    schemas.DictSchema
):


    class MetaOapg:
        
        class properties:
            channel = schemas.StrSchema
            users = schemas.StrSchema
            __annotations__ = {
                "channel": channel,
                "users": users,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> MetaOapg.properties.channel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> MetaOapg.properties.users: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel", "users", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union[MetaOapg.properties.channel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> typing.Union[MetaOapg.properties.users, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel", "users", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        channel: typing.Union[MetaOapg.properties.channel, str, schemas.Unset] = schemas.unset,
        users: typing.Union[MetaOapg.properties.users, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SchemaForRequestBodyApplicationXWwwFormUrlencoded':
        return super().__new__(
            cls,
            *args,
            channel=channel,
            users=users,
            _configuration=_configuration,
            **kwargs,
        )


request_body_body = api_client.RequestBody(
    content={
        'application/x-www-form-urlencoded': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationXWwwFormUrlencoded),
    },
)
_auth = [
    'slackAuth',
]


class SchemaFor200ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "channel",
            "ok",
        }
        
        class properties:
        
            @staticmethod
            def channel() -> typing.Type['ObjsConversation']:
                return ObjsConversation
        
            @staticmethod
            def ok() -> typing.Type['DefsOkTrue']:
                return DefsOkTrue
            __annotations__ = {
                "channel": channel,
                "ok": ok,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    channel: 'ObjsConversation'
    ok: 'DefsOkTrue'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'ObjsConversation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["channel"], typing_extensions.Literal["ok"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> 'ObjsConversation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkTrue': ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channel"], typing_extensions.Literal["ok"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        channel: 'ObjsConversation',
        ok: 'DefsOkTrue',
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor200ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            channel=channel,
            ok=ok,
            _configuration=_configuration,
        )


@dataclass
class ApiResponseFor200(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor200ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_200 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor200,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor200ResponseBodyApplicationJson),
    },
)


class SchemaFor0ResponseBodyApplicationJson(
    schemas.DictSchema
):


    class MetaOapg:
        required = {
            "ok",
        }
        
        class properties:
            callstack = schemas.StrSchema
            
            
            class error(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "method_not_supported_for_channel_type": "METHOD_NOT_SUPPORTED_FOR_CHANNEL_TYPE",
                        "missing_scope": "MISSING_SCOPE",
                        "channel_not_found": "CHANNEL_NOT_FOUND",
                        "user_not_found": "USER_NOT_FOUND",
                        "no_user": "NO_USER",
                        "cant_invite_self": "CANT_INVITE_SELF",
                        "not_in_channel": "NOT_IN_CHANNEL",
                        "already_in_channel": "ALREADY_IN_CHANNEL",
                        "is_archived": "IS_ARCHIVED",
                        "cant_invite": "CANT_INVITE",
                        "too_many_users": "TOO_MANY_USERS",
                        "ura_max_channels": "URA_MAX_CHANNELS",
                        "not_authed": "NOT_AUTHED",
                        "invalid_auth": "INVALID_AUTH",
                        "account_inactive": "ACCOUNT_INACTIVE",
                        "user_is_bot": "USER_IS_BOT",
                        "user_is_restricted": "USER_IS_RESTRICTED",
                        "user_is_ultra_restricted": "USER_IS_ULTRA_RESTRICTED",
                        "invalid_arg_name": "INVALID_ARG_NAME",
                        "invalid_array_arg": "INVALID_ARRAY_ARG",
                        "invalid_charset": "INVALID_CHARSET",
                        "invalid_form_data": "INVALID_FORM_DATA",
                        "invalid_post_type": "INVALID_POST_TYPE",
                        "missing_post_type": "MISSING_POST_TYPE",
                        "invalid_json": "INVALID_JSON",
                        "json_not_object": "JSON_NOT_OBJECT",
                        "request_timeout": "REQUEST_TIMEOUT",
                        "upgrade_required": "UPGRADE_REQUIRED",
                        "team_added_to_org": "TEAM_ADDED_TO_ORG",
                        "missing_charset": "MISSING_CHARSET",
                        "superfluous_charset": "SUPERFLUOUS_CHARSET",
                    }
                
                @schemas.classproperty
                def METHOD_NOT_SUPPORTED_FOR_CHANNEL_TYPE(cls):
                    return cls("method_not_supported_for_channel_type")
                
                @schemas.classproperty
                def MISSING_SCOPE(cls):
                    return cls("missing_scope")
                
                @schemas.classproperty
                def CHANNEL_NOT_FOUND(cls):
                    return cls("channel_not_found")
                
                @schemas.classproperty
                def USER_NOT_FOUND(cls):
                    return cls("user_not_found")
                
                @schemas.classproperty
                def NO_USER(cls):
                    return cls("no_user")
                
                @schemas.classproperty
                def CANT_INVITE_SELF(cls):
                    return cls("cant_invite_self")
                
                @schemas.classproperty
                def NOT_IN_CHANNEL(cls):
                    return cls("not_in_channel")
                
                @schemas.classproperty
                def ALREADY_IN_CHANNEL(cls):
                    return cls("already_in_channel")
                
                @schemas.classproperty
                def IS_ARCHIVED(cls):
                    return cls("is_archived")
                
                @schemas.classproperty
                def CANT_INVITE(cls):
                    return cls("cant_invite")
                
                @schemas.classproperty
                def TOO_MANY_USERS(cls):
                    return cls("too_many_users")
                
                @schemas.classproperty
                def URA_MAX_CHANNELS(cls):
                    return cls("ura_max_channels")
                
                @schemas.classproperty
                def NOT_AUTHED(cls):
                    return cls("not_authed")
                
                @schemas.classproperty
                def INVALID_AUTH(cls):
                    return cls("invalid_auth")
                
                @schemas.classproperty
                def ACCOUNT_INACTIVE(cls):
                    return cls("account_inactive")
                
                @schemas.classproperty
                def USER_IS_BOT(cls):
                    return cls("user_is_bot")
                
                @schemas.classproperty
                def USER_IS_RESTRICTED(cls):
                    return cls("user_is_restricted")
                
                @schemas.classproperty
                def USER_IS_ULTRA_RESTRICTED(cls):
                    return cls("user_is_ultra_restricted")
                
                @schemas.classproperty
                def INVALID_ARG_NAME(cls):
                    return cls("invalid_arg_name")
                
                @schemas.classproperty
                def INVALID_ARRAY_ARG(cls):
                    return cls("invalid_array_arg")
                
                @schemas.classproperty
                def INVALID_CHARSET(cls):
                    return cls("invalid_charset")
                
                @schemas.classproperty
                def INVALID_FORM_DATA(cls):
                    return cls("invalid_form_data")
                
                @schemas.classproperty
                def INVALID_POST_TYPE(cls):
                    return cls("invalid_post_type")
                
                @schemas.classproperty
                def MISSING_POST_TYPE(cls):
                    return cls("missing_post_type")
                
                @schemas.classproperty
                def INVALID_JSON(cls):
                    return cls("invalid_json")
                
                @schemas.classproperty
                def JSON_NOT_OBJECT(cls):
                    return cls("json_not_object")
                
                @schemas.classproperty
                def REQUEST_TIMEOUT(cls):
                    return cls("request_timeout")
                
                @schemas.classproperty
                def UPGRADE_REQUIRED(cls):
                    return cls("upgrade_required")
                
                @schemas.classproperty
                def TEAM_ADDED_TO_ORG(cls):
                    return cls("team_added_to_org")
                
                @schemas.classproperty
                def MISSING_CHARSET(cls):
                    return cls("missing_charset")
                
                @schemas.classproperty
                def SUPERFLUOUS_CHARSET(cls):
                    return cls("superfluous_charset")
            
            
            class errors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    min_items = 1
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "error",
                                "ok",
                            }
                            
                            class properties:
                                
                                
                                class error(
                                    schemas.EnumBase,
                                    schemas.StrSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        enum_value_to_name = {
                                            "method_not_supported_for_channel_type": "METHOD_NOT_SUPPORTED_FOR_CHANNEL_TYPE",
                                            "missing_scope": "MISSING_SCOPE",
                                            "channel_not_found": "CHANNEL_NOT_FOUND",
                                            "user_not_found": "USER_NOT_FOUND",
                                            "no_user": "NO_USER",
                                            "cant_invite_self": "CANT_INVITE_SELF",
                                            "not_in_channel": "NOT_IN_CHANNEL",
                                            "already_in_channel": "ALREADY_IN_CHANNEL",
                                            "is_archived": "IS_ARCHIVED",
                                            "cant_invite": "CANT_INVITE",
                                            "too_many_users": "TOO_MANY_USERS",
                                            "ura_max_channels": "URA_MAX_CHANNELS",
                                            "not_authed": "NOT_AUTHED",
                                            "invalid_auth": "INVALID_AUTH",
                                            "account_inactive": "ACCOUNT_INACTIVE",
                                            "user_is_bot": "USER_IS_BOT",
                                            "user_is_restricted": "USER_IS_RESTRICTED",
                                            "user_is_ultra_restricted": "USER_IS_ULTRA_RESTRICTED",
                                            "invalid_arg_name": "INVALID_ARG_NAME",
                                            "invalid_array_arg": "INVALID_ARRAY_ARG",
                                            "invalid_charset": "INVALID_CHARSET",
                                            "invalid_form_data": "INVALID_FORM_DATA",
                                            "invalid_post_type": "INVALID_POST_TYPE",
                                            "missing_post_type": "MISSING_POST_TYPE",
                                            "invalid_json": "INVALID_JSON",
                                            "json_not_object": "JSON_NOT_OBJECT",
                                            "request_timeout": "REQUEST_TIMEOUT",
                                            "upgrade_required": "UPGRADE_REQUIRED",
                                            "team_added_to_org": "TEAM_ADDED_TO_ORG",
                                            "missing_charset": "MISSING_CHARSET",
                                            "superfluous_charset": "SUPERFLUOUS_CHARSET",
                                        }
                                    
                                    @schemas.classproperty
                                    def METHOD_NOT_SUPPORTED_FOR_CHANNEL_TYPE(cls):
                                        return cls("method_not_supported_for_channel_type")
                                    
                                    @schemas.classproperty
                                    def MISSING_SCOPE(cls):
                                        return cls("missing_scope")
                                    
                                    @schemas.classproperty
                                    def CHANNEL_NOT_FOUND(cls):
                                        return cls("channel_not_found")
                                    
                                    @schemas.classproperty
                                    def USER_NOT_FOUND(cls):
                                        return cls("user_not_found")
                                    
                                    @schemas.classproperty
                                    def NO_USER(cls):
                                        return cls("no_user")
                                    
                                    @schemas.classproperty
                                    def CANT_INVITE_SELF(cls):
                                        return cls("cant_invite_self")
                                    
                                    @schemas.classproperty
                                    def NOT_IN_CHANNEL(cls):
                                        return cls("not_in_channel")
                                    
                                    @schemas.classproperty
                                    def ALREADY_IN_CHANNEL(cls):
                                        return cls("already_in_channel")
                                    
                                    @schemas.classproperty
                                    def IS_ARCHIVED(cls):
                                        return cls("is_archived")
                                    
                                    @schemas.classproperty
                                    def CANT_INVITE(cls):
                                        return cls("cant_invite")
                                    
                                    @schemas.classproperty
                                    def TOO_MANY_USERS(cls):
                                        return cls("too_many_users")
                                    
                                    @schemas.classproperty
                                    def URA_MAX_CHANNELS(cls):
                                        return cls("ura_max_channels")
                                    
                                    @schemas.classproperty
                                    def NOT_AUTHED(cls):
                                        return cls("not_authed")
                                    
                                    @schemas.classproperty
                                    def INVALID_AUTH(cls):
                                        return cls("invalid_auth")
                                    
                                    @schemas.classproperty
                                    def ACCOUNT_INACTIVE(cls):
                                        return cls("account_inactive")
                                    
                                    @schemas.classproperty
                                    def USER_IS_BOT(cls):
                                        return cls("user_is_bot")
                                    
                                    @schemas.classproperty
                                    def USER_IS_RESTRICTED(cls):
                                        return cls("user_is_restricted")
                                    
                                    @schemas.classproperty
                                    def USER_IS_ULTRA_RESTRICTED(cls):
                                        return cls("user_is_ultra_restricted")
                                    
                                    @schemas.classproperty
                                    def INVALID_ARG_NAME(cls):
                                        return cls("invalid_arg_name")
                                    
                                    @schemas.classproperty
                                    def INVALID_ARRAY_ARG(cls):
                                        return cls("invalid_array_arg")
                                    
                                    @schemas.classproperty
                                    def INVALID_CHARSET(cls):
                                        return cls("invalid_charset")
                                    
                                    @schemas.classproperty
                                    def INVALID_FORM_DATA(cls):
                                        return cls("invalid_form_data")
                                    
                                    @schemas.classproperty
                                    def INVALID_POST_TYPE(cls):
                                        return cls("invalid_post_type")
                                    
                                    @schemas.classproperty
                                    def MISSING_POST_TYPE(cls):
                                        return cls("missing_post_type")
                                    
                                    @schemas.classproperty
                                    def INVALID_JSON(cls):
                                        return cls("invalid_json")
                                    
                                    @schemas.classproperty
                                    def JSON_NOT_OBJECT(cls):
                                        return cls("json_not_object")
                                    
                                    @schemas.classproperty
                                    def REQUEST_TIMEOUT(cls):
                                        return cls("request_timeout")
                                    
                                    @schemas.classproperty
                                    def UPGRADE_REQUIRED(cls):
                                        return cls("upgrade_required")
                                    
                                    @schemas.classproperty
                                    def TEAM_ADDED_TO_ORG(cls):
                                        return cls("team_added_to_org")
                                    
                                    @schemas.classproperty
                                    def MISSING_CHARSET(cls):
                                        return cls("missing_charset")
                                    
                                    @schemas.classproperty
                                    def SUPERFLUOUS_CHARSET(cls):
                                        return cls("superfluous_charset")
                            
                                @staticmethod
                                def ok() -> typing.Type['DefsOkFalse']:
                                    return DefsOkFalse
                            
                                @staticmethod
                                def user() -> typing.Type['DefsUserId']:
                                    return DefsUserId
                                __annotations__ = {
                                    "error": error,
                                    "ok": ok,
                                    "user": user,
                                }
                            additional_properties = schemas.NotAnyTypeSchema
                        
                        error: MetaOapg.properties.error
                        ok: 'DefsOkFalse'
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkFalse': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["error"], typing_extensions.Literal["ok"], typing_extensions.Literal["user"], ]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkFalse': ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['DefsUserId', schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["error"], typing_extensions.Literal["ok"], typing_extensions.Literal["user"], ]):
                            return super().get_item_oapg(name)
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            error: typing.Union[MetaOapg.properties.error, str, ],
                            ok: 'DefsOkFalse',
                            user: typing.Union['DefsUserId', schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                error=error,
                                ok=ok,
                                user=user,
                                _configuration=_configuration,
                            )
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'errors':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            needed = schemas.StrSchema
        
            @staticmethod
            def ok() -> typing.Type['DefsOkFalse']:
                return DefsOkFalse
            provided = schemas.StrSchema
            __annotations__ = {
                "callstack": callstack,
                "error": error,
                "errors": errors,
                "needed": needed,
                "ok": ok,
                "provided": provided,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    ok: 'DefsOkFalse'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkFalse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["callstack"]) -> MetaOapg.properties.callstack: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errors"]) -> MetaOapg.properties.errors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["needed"]) -> MetaOapg.properties.needed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provided"]) -> MetaOapg.properties.provided: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ok"], typing_extensions.Literal["callstack"], typing_extensions.Literal["error"], typing_extensions.Literal["errors"], typing_extensions.Literal["needed"], typing_extensions.Literal["provided"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ok"]) -> 'DefsOkFalse': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["callstack"]) -> typing.Union[MetaOapg.properties.callstack, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> typing.Union[MetaOapg.properties.error, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errors"]) -> typing.Union[MetaOapg.properties.errors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["needed"]) -> typing.Union[MetaOapg.properties.needed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provided"]) -> typing.Union[MetaOapg.properties.provided, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ok"], typing_extensions.Literal["callstack"], typing_extensions.Literal["error"], typing_extensions.Literal["errors"], typing_extensions.Literal["needed"], typing_extensions.Literal["provided"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ok: 'DefsOkFalse',
        callstack: typing.Union[MetaOapg.properties.callstack, str, schemas.Unset] = schemas.unset,
        error: typing.Union[MetaOapg.properties.error, str, schemas.Unset] = schemas.unset,
        errors: typing.Union[MetaOapg.properties.errors, list, tuple, schemas.Unset] = schemas.unset,
        needed: typing.Union[MetaOapg.properties.needed, str, schemas.Unset] = schemas.unset,
        provided: typing.Union[MetaOapg.properties.provided, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'SchemaFor0ResponseBodyApplicationJson':
        return super().__new__(
            cls,
            *args,
            ok=ok,
            callstack=callstack,
            error=error,
            errors=errors,
            needed=needed,
            provided=provided,
            _configuration=_configuration,
        )


@dataclass
class ApiResponseForDefault(api_client.ApiResponse):
    response: urllib3.HTTPResponse
    body: typing.Union[
        SchemaFor0ResponseBodyApplicationJson,
    ]
    headers: schemas.Unset = schemas.unset


_response_for_default = api_client.OpenApiResponse(
    response_cls=ApiResponseForDefault,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor0ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '200': _response_for_200,
    'default': _response_for_default,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):
    @typing.overload
    def _conversations_invite_oapg(
        self,
        content_type: typing_extensions.Literal["application/x-www-form-urlencoded"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def _conversations_invite_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...


    @typing.overload
    def _conversations_invite_oapg(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def _conversations_invite_oapg(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def _conversations_invite_oapg(
        self,
        content_type: str = 'application/x-www-form-urlencoded',
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        """
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestHeaderParams, header_params)
        used_path = path.value

        _headers = HTTPHeaderDict()
        for parameter in (
            request_header_token,
        ):
            parameter_data = header_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _headers.extend(serialized_data)
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)

        _fields = None
        _body = None
        if body is not schemas.unset:
            serialized_data = request_body_body.serialize(body, content_type)
            _headers.add('Content-Type', content_type)
            if 'fields' in serialized_data:
                _fields = serialized_data['fields']
            elif 'body' in serialized_data:
                _body = serialized_data['body']
        response = self.api_client.call_api(
            resource_path=used_path,
            method='post'.upper(),
            headers=_headers,
            fields=_fields,
            body=_body,
            auth_settings=_auth,
            stream=stream,
            timeout=timeout,
        )

        if skip_deserialization:
            api_response = api_client.ApiResponseWithoutDeserialization(response=response)
        else:
            response_for_status = _status_code_to_response.get(str(response.status))
            if response_for_status:
                api_response = response_for_status.deserialize(response, self.api_client.configuration)
            else:
                default_response = _status_code_to_response.get('default')
                if default_response:
                    api_response = default_response.deserialize(response, self.api_client.configuration)
                else:
                    api_response = api_client.ApiResponseWithoutDeserialization(response=response)

        if not 200 <= response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)

        return api_response


class ConversationsInvite(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    @typing.overload
    def conversations_invite(
        self,
        content_type: typing_extensions.Literal["application/x-www-form-urlencoded"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def conversations_invite(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...


    @typing.overload
    def conversations_invite(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def conversations_invite(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def conversations_invite(
        self,
        content_type: str = 'application/x-www-form-urlencoded',
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._conversations_invite_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    @typing.overload
    def post(
        self,
        content_type: typing_extensions.Literal["application/x-www-form-urlencoded"] = ...,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...

    @typing.overload
    def post(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: typing_extensions.Literal[False] = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
    ]: ...


    @typing.overload
    def post(
        self,
        skip_deserialization: typing_extensions.Literal[True],
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
    ) -> api_client.ApiResponseWithoutDeserialization: ...

    @typing.overload
    def post(
        self,
        content_type: str = ...,
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = ...,
    ) -> typing.Union[
        ApiResponseFor200,
        ApiResponseForDefault,
        api_client.ApiResponseWithoutDeserialization,
    ]: ...

    def post(
        self,
        content_type: str = 'application/x-www-form-urlencoded',
        body: typing.Union[SchemaForRequestBodyApplicationXWwwFormUrlencoded, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        header_params: RequestHeaderParams = frozendict.frozendict(),
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        stream: bool = False,
        timeout: typing.Optional[typing.Union[int, typing.Tuple]] = None,
        skip_deserialization: bool = False,
    ):
        return self._conversations_invite_oapg(
            body=body,
            header_params=header_params,
            content_type=content_type,
            accept_content_types=accept_content_types,
            stream=stream,
            timeout=timeout,
            skip_deserialization=skip_deserialization
        )


