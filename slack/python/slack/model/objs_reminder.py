# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.  # noqa: E501

    The version of the OpenAPI document: 1.7.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack import schemas  # noqa: F401


class ObjsReminder(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "creator",
            "recurring",
            "id",
            "text",
            "user",
        }
        
        class properties:
        
            @staticmethod
            def creator() -> typing.Type['DefsUserId']:
                return DefsUserId
        
            @staticmethod
            def id() -> typing.Type['DefsReminderId']:
                return DefsReminderId
            recurring = schemas.BoolSchema
            text = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['DefsUserId']:
                return DefsUserId
            complete_ts = schemas.IntSchema
            time = schemas.IntSchema
            __annotations__ = {
                "creator": creator,
                "id": id,
                "recurring": recurring,
                "text": text,
                "user": user,
                "complete_ts": complete_ts,
                "time": time,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    creator: 'DefsUserId'
    recurring: MetaOapg.properties.recurring
    id: 'DefsReminderId'
    text: MetaOapg.properties.text
    user: 'DefsUserId'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator"]) -> 'DefsUserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurring"]) -> MetaOapg.properties.recurring: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsReminderId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complete_ts"]) -> MetaOapg.properties.complete_ts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["creator"], typing_extensions.Literal["recurring"], typing_extensions.Literal["id"], typing_extensions.Literal["text"], typing_extensions.Literal["user"], typing_extensions.Literal["complete_ts"], typing_extensions.Literal["time"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator"]) -> 'DefsUserId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurring"]) -> MetaOapg.properties.recurring: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsReminderId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text"]) -> MetaOapg.properties.text: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'DefsUserId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complete_ts"]) -> typing.Union[MetaOapg.properties.complete_ts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["creator"], typing_extensions.Literal["recurring"], typing_extensions.Literal["id"], typing_extensions.Literal["text"], typing_extensions.Literal["user"], typing_extensions.Literal["complete_ts"], typing_extensions.Literal["time"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        creator: 'DefsUserId',
        recurring: typing.Union[MetaOapg.properties.recurring, bool, ],
        id: 'DefsReminderId',
        text: typing.Union[MetaOapg.properties.text, str, ],
        user: 'DefsUserId',
        complete_ts: typing.Union[MetaOapg.properties.complete_ts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        time: typing.Union[MetaOapg.properties.time, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ObjsReminder':
        return super().__new__(
            cls,
            *args,
            creator=creator,
            recurring=recurring,
            id=id,
            text=text,
            user=user,
            complete_ts=complete_ts,
            time=time,
            _configuration=_configuration,
        )

from slack.model.defs_reminder_id import DefsReminderId
from slack.model.defs_user_id import DefsUserId
