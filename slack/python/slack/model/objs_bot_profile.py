# coding: utf-8

"""
    Slack Web API

    One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.  # noqa: E501

    The version of the OpenAPI document: 1.7.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from slack import schemas  # noqa: F401


class ObjsBotProfile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "deleted",
            "name",
            "id",
            "team_id",
            "icons",
            "app_id",
            "updated",
        }
        
        class properties:
        
            @staticmethod
            def app_id() -> typing.Type['DefsAppId']:
                return DefsAppId
            deleted = schemas.BoolSchema
            
            
            class icons(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "image_36",
                        "image_48",
                        "image_72",
                    }
                    
                    class properties:
                        image_36 = schemas.StrSchema
                        image_48 = schemas.StrSchema
                        image_72 = schemas.StrSchema
                        __annotations__ = {
                            "image_36": image_36,
                            "image_48": image_48,
                            "image_72": image_72,
                        }
                    additional_properties = schemas.NotAnyTypeSchema
                
                image_36: MetaOapg.properties.image_36
                image_48: MetaOapg.properties.image_48
                image_72: MetaOapg.properties.image_72
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["image_36"]) -> MetaOapg.properties.image_36: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["image_48"]) -> MetaOapg.properties.image_48: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["image_72"]) -> MetaOapg.properties.image_72: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["image_36"], typing_extensions.Literal["image_48"], typing_extensions.Literal["image_72"], ]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["image_36"]) -> MetaOapg.properties.image_36: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["image_48"]) -> MetaOapg.properties.image_48: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["image_72"]) -> MetaOapg.properties.image_72: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["image_36"], typing_extensions.Literal["image_48"], typing_extensions.Literal["image_72"], ]):
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    image_36: typing.Union[MetaOapg.properties.image_36, str, ],
                    image_48: typing.Union[MetaOapg.properties.image_48, str, ],
                    image_72: typing.Union[MetaOapg.properties.image_72, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'icons':
                    return super().__new__(
                        cls,
                        *args,
                        image_36=image_36,
                        image_48=image_48,
                        image_72=image_72,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def id() -> typing.Type['DefsBotId']:
                return DefsBotId
            name = schemas.StrSchema
        
            @staticmethod
            def team_id() -> typing.Type['DefsTeam']:
                return DefsTeam
            updated = schemas.IntSchema
            __annotations__ = {
                "app_id": app_id,
                "deleted": deleted,
                "icons": icons,
                "id": id,
                "name": name,
                "team_id": team_id,
                "updated": updated,
            }
        additional_properties = schemas.NotAnyTypeSchema
    
    deleted: MetaOapg.properties.deleted
    name: MetaOapg.properties.name
    id: 'DefsBotId'
    team_id: 'DefsTeam'
    icons: MetaOapg.properties.icons
    app_id: 'DefsAppId'
    updated: MetaOapg.properties.updated
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> 'DefsBotId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_id"]) -> 'DefsTeam': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icons"]) -> MetaOapg.properties.icons: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app_id"]) -> 'DefsAppId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["deleted"], typing_extensions.Literal["name"], typing_extensions.Literal["id"], typing_extensions.Literal["team_id"], typing_extensions.Literal["icons"], typing_extensions.Literal["app_id"], typing_extensions.Literal["updated"], ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deleted"]) -> MetaOapg.properties.deleted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> 'DefsBotId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_id"]) -> 'DefsTeam': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icons"]) -> MetaOapg.properties.icons: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app_id"]) -> 'DefsAppId': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["deleted"], typing_extensions.Literal["name"], typing_extensions.Literal["id"], typing_extensions.Literal["team_id"], typing_extensions.Literal["icons"], typing_extensions.Literal["app_id"], typing_extensions.Literal["updated"], ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        deleted: typing.Union[MetaOapg.properties.deleted, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: 'DefsBotId',
        team_id: 'DefsTeam',
        icons: typing.Union[MetaOapg.properties.icons, dict, frozendict.frozendict, ],
        app_id: 'DefsAppId',
        updated: typing.Union[MetaOapg.properties.updated, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ObjsBotProfile':
        return super().__new__(
            cls,
            *args,
            deleted=deleted,
            name=name,
            id=id,
            team_id=team_id,
            icons=icons,
            app_id=app_id,
            updated=updated,
            _configuration=_configuration,
        )

from slack.model.defs_app_id import DefsAppId
from slack.model.defs_bot_id import DefsBotId
from slack.model.defs_team import DefsTeam
