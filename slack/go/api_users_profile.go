/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// UsersProfileApiService UsersProfileApi service
type UsersProfileApiService service

type ApiUsersProfileGetRequest struct {
	ctx context.Context
	ApiService *UsersProfileApiService
	token *string
	includeLabels *bool
	user *string
}

// Authentication token. Requires scope: &#x60;users.profile:read&#x60;
func (r ApiUsersProfileGetRequest) Token(token string) ApiUsersProfileGetRequest {
	r.token = &token
	return r
}

// Include labels for each ID in custom profile fields
func (r ApiUsersProfileGetRequest) IncludeLabels(includeLabels bool) ApiUsersProfileGetRequest {
	r.includeLabels = &includeLabels
	return r
}

// User to retrieve profile info for
func (r ApiUsersProfileGetRequest) User(user string) ApiUsersProfileGetRequest {
	r.user = &user
	return r
}

func (r ApiUsersProfileGetRequest) Execute() (*UsersProfileGetSchema, *http.Response, error) {
	return r.ApiService.UsersProfileGetExecute(r)
}

/*
UsersProfileGet Method for UsersProfileGet

Retrieves a user's profile information.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsersProfileGetRequest
*/
func (a *UsersProfileApiService) UsersProfileGet(ctx context.Context) ApiUsersProfileGetRequest {
	return ApiUsersProfileGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsersProfileGetSchema
func (a *UsersProfileApiService) UsersProfileGetExecute(r ApiUsersProfileGetRequest) (*UsersProfileGetSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsersProfileGetSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersProfileApiService.UsersProfileGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users.profile.get"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	if r.includeLabels != nil {
		localVarQueryParams.Add("include_labels", parameterToString(*r.includeLabels, ""))
	}
	if r.user != nil {
		localVarQueryParams.Add("user", parameterToString(*r.user, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v UsersProfileGetErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersProfileSetRequest struct {
	ctx context.Context
	ApiService *UsersProfileApiService
	token *string
	name *string
	profile *string
	user *string
	value *string
}

// Authentication token. Requires scope: &#x60;users.profile:write&#x60;
func (r ApiUsersProfileSetRequest) Token(token string) ApiUsersProfileSetRequest {
	r.token = &token
	return r
}

// Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed.
func (r ApiUsersProfileSetRequest) Name(name string) ApiUsersProfileSetRequest {
	r.name = &name
	return r
}

// Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.
func (r ApiUsersProfileSetRequest) Profile(profile string) ApiUsersProfileSetRequest {
	r.profile = &profile
	return r
}

// ID of user to change. This argument may only be specified by team admins on paid teams.
func (r ApiUsersProfileSetRequest) User(user string) ApiUsersProfileSetRequest {
	r.user = &user
	return r
}

// Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed.
func (r ApiUsersProfileSetRequest) Value(value string) ApiUsersProfileSetRequest {
	r.value = &value
	return r
}

func (r ApiUsersProfileSetRequest) Execute() (*UsersProfileSetSchema, *http.Response, error) {
	return r.ApiService.UsersProfileSetExecute(r)
}

/*
UsersProfileSet Method for UsersProfileSet

Set the profile information for a user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsersProfileSetRequest
*/
func (a *UsersProfileApiService) UsersProfileSet(ctx context.Context) ApiUsersProfileSetRequest {
	return ApiUsersProfileSetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsersProfileSetSchema
func (a *UsersProfileApiService) UsersProfileSetExecute(r ApiUsersProfileSetRequest) (*UsersProfileSetSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsersProfileSetSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersProfileApiService.UsersProfileSet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users.profile.set"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.name != nil {
		localVarFormParams.Add("name", parameterToString(*r.name, ""))
	}
	if r.profile != nil {
		localVarFormParams.Add("profile", parameterToString(*r.profile, ""))
	}
	if r.user != nil {
		localVarFormParams.Add("user", parameterToString(*r.user, ""))
	}
	if r.value != nil {
		localVarFormParams.Add("value", parameterToString(*r.value, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v UsersProfileSetErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
