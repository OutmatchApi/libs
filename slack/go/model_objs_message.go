/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ObjsMessage struct for ObjsMessage
type ObjsMessage struct {
	Attachments []ObjsMessageAttachmentsInner `json:"attachments,omitempty"`
	// This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.
	Blocks []BlocksInner `json:"blocks,omitempty"`
	BotId []ObjsMessageBotIdInner `json:"bot_id,omitempty"`
	BotProfile *ObjsBotProfile `json:"bot_profile,omitempty"`
	ClientMsgId *string `json:"client_msg_id,omitempty"`
	Comment *ObjsComment `json:"comment,omitempty"`
	DisplayAsBot *bool `json:"display_as_bot,omitempty"`
	File *ObjsFile `json:"file,omitempty"`
	Files []ObjsFile `json:"files,omitempty"`
	Icons *ObjsMessageIcons `json:"icons,omitempty"`
	Inviter *string `json:"inviter,omitempty"`
	IsDelayedMessage *bool `json:"is_delayed_message,omitempty"`
	IsIntro *bool `json:"is_intro,omitempty"`
	IsStarred *bool `json:"is_starred,omitempty"`
	LastRead *string `json:"last_read,omitempty"`
	LatestReply *string `json:"latest_reply,omitempty"`
	Name *string `json:"name,omitempty"`
	OldName *string `json:"old_name,omitempty"`
	ParentUserId *string `json:"parent_user_id,omitempty"`
	Permalink *string `json:"permalink,omitempty"`
	PinnedTo []string `json:"pinned_to,omitempty"`
	Purpose *string `json:"purpose,omitempty"`
	Reactions []ObjsReaction `json:"reactions,omitempty"`
	ReplyCount *int32 `json:"reply_count,omitempty"`
	ReplyUsers []string `json:"reply_users,omitempty"`
	ReplyUsersCount *int32 `json:"reply_users_count,omitempty"`
	SourceTeam *string `json:"source_team,omitempty"`
	Subscribed *bool `json:"subscribed,omitempty"`
	Subtype *string `json:"subtype,omitempty"`
	Team *string `json:"team,omitempty"`
	Text string `json:"text"`
	ThreadTs *string `json:"thread_ts,omitempty"`
	Topic *string `json:"topic,omitempty"`
	Ts string `json:"ts"`
	Type string `json:"type"`
	UnreadCount *int32 `json:"unread_count,omitempty"`
	Upload *bool `json:"upload,omitempty"`
	User *string `json:"user,omitempty"`
	UserProfile *ObjsUserProfileShort `json:"user_profile,omitempty"`
	UserTeam *string `json:"user_team,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewObjsMessage instantiates a new ObjsMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjsMessage(text string, ts string, type_ string) *ObjsMessage {
	this := ObjsMessage{}
	this.Text = text
	this.Ts = ts
	this.Type = type_
	return &this
}

// NewObjsMessageWithDefaults instantiates a new ObjsMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjsMessageWithDefaults() *ObjsMessage {
	this := ObjsMessage{}
	return &this
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *ObjsMessage) GetAttachments() []ObjsMessageAttachmentsInner {
	if o == nil || isNil(o.Attachments) {
		var ret []ObjsMessageAttachmentsInner
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetAttachmentsOk() ([]ObjsMessageAttachmentsInner, bool) {
	if o == nil || isNil(o.Attachments) {
    return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *ObjsMessage) HasAttachments() bool {
	if o != nil && !isNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []ObjsMessageAttachmentsInner and assigns it to the Attachments field.
func (o *ObjsMessage) SetAttachments(v []ObjsMessageAttachmentsInner) {
	o.Attachments = v
}

// GetBlocks returns the Blocks field value if set, zero value otherwise.
func (o *ObjsMessage) GetBlocks() []BlocksInner {
	if o == nil || isNil(o.Blocks) {
		var ret []BlocksInner
		return ret
	}
	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetBlocksOk() ([]BlocksInner, bool) {
	if o == nil || isNil(o.Blocks) {
    return nil, false
	}
	return o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *ObjsMessage) HasBlocks() bool {
	if o != nil && !isNil(o.Blocks) {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given []BlocksInner and assigns it to the Blocks field.
func (o *ObjsMessage) SetBlocks(v []BlocksInner) {
	o.Blocks = v
}

// GetBotId returns the BotId field value if set, zero value otherwise.
func (o *ObjsMessage) GetBotId() []ObjsMessageBotIdInner {
	if o == nil || isNil(o.BotId) {
		var ret []ObjsMessageBotIdInner
		return ret
	}
	return o.BotId
}

// GetBotIdOk returns a tuple with the BotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetBotIdOk() ([]ObjsMessageBotIdInner, bool) {
	if o == nil || isNil(o.BotId) {
    return nil, false
	}
	return o.BotId, true
}

// HasBotId returns a boolean if a field has been set.
func (o *ObjsMessage) HasBotId() bool {
	if o != nil && !isNil(o.BotId) {
		return true
	}

	return false
}

// SetBotId gets a reference to the given []ObjsMessageBotIdInner and assigns it to the BotId field.
func (o *ObjsMessage) SetBotId(v []ObjsMessageBotIdInner) {
	o.BotId = v
}

// GetBotProfile returns the BotProfile field value if set, zero value otherwise.
func (o *ObjsMessage) GetBotProfile() ObjsBotProfile {
	if o == nil || isNil(o.BotProfile) {
		var ret ObjsBotProfile
		return ret
	}
	return *o.BotProfile
}

// GetBotProfileOk returns a tuple with the BotProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetBotProfileOk() (*ObjsBotProfile, bool) {
	if o == nil || isNil(o.BotProfile) {
    return nil, false
	}
	return o.BotProfile, true
}

// HasBotProfile returns a boolean if a field has been set.
func (o *ObjsMessage) HasBotProfile() bool {
	if o != nil && !isNil(o.BotProfile) {
		return true
	}

	return false
}

// SetBotProfile gets a reference to the given ObjsBotProfile and assigns it to the BotProfile field.
func (o *ObjsMessage) SetBotProfile(v ObjsBotProfile) {
	o.BotProfile = &v
}

// GetClientMsgId returns the ClientMsgId field value if set, zero value otherwise.
func (o *ObjsMessage) GetClientMsgId() string {
	if o == nil || isNil(o.ClientMsgId) {
		var ret string
		return ret
	}
	return *o.ClientMsgId
}

// GetClientMsgIdOk returns a tuple with the ClientMsgId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetClientMsgIdOk() (*string, bool) {
	if o == nil || isNil(o.ClientMsgId) {
    return nil, false
	}
	return o.ClientMsgId, true
}

// HasClientMsgId returns a boolean if a field has been set.
func (o *ObjsMessage) HasClientMsgId() bool {
	if o != nil && !isNil(o.ClientMsgId) {
		return true
	}

	return false
}

// SetClientMsgId gets a reference to the given string and assigns it to the ClientMsgId field.
func (o *ObjsMessage) SetClientMsgId(v string) {
	o.ClientMsgId = &v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *ObjsMessage) GetComment() ObjsComment {
	if o == nil || isNil(o.Comment) {
		var ret ObjsComment
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetCommentOk() (*ObjsComment, bool) {
	if o == nil || isNil(o.Comment) {
    return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *ObjsMessage) HasComment() bool {
	if o != nil && !isNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given ObjsComment and assigns it to the Comment field.
func (o *ObjsMessage) SetComment(v ObjsComment) {
	o.Comment = &v
}

// GetDisplayAsBot returns the DisplayAsBot field value if set, zero value otherwise.
func (o *ObjsMessage) GetDisplayAsBot() bool {
	if o == nil || isNil(o.DisplayAsBot) {
		var ret bool
		return ret
	}
	return *o.DisplayAsBot
}

// GetDisplayAsBotOk returns a tuple with the DisplayAsBot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetDisplayAsBotOk() (*bool, bool) {
	if o == nil || isNil(o.DisplayAsBot) {
    return nil, false
	}
	return o.DisplayAsBot, true
}

// HasDisplayAsBot returns a boolean if a field has been set.
func (o *ObjsMessage) HasDisplayAsBot() bool {
	if o != nil && !isNil(o.DisplayAsBot) {
		return true
	}

	return false
}

// SetDisplayAsBot gets a reference to the given bool and assigns it to the DisplayAsBot field.
func (o *ObjsMessage) SetDisplayAsBot(v bool) {
	o.DisplayAsBot = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *ObjsMessage) GetFile() ObjsFile {
	if o == nil || isNil(o.File) {
		var ret ObjsFile
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetFileOk() (*ObjsFile, bool) {
	if o == nil || isNil(o.File) {
    return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *ObjsMessage) HasFile() bool {
	if o != nil && !isNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given ObjsFile and assigns it to the File field.
func (o *ObjsMessage) SetFile(v ObjsFile) {
	o.File = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *ObjsMessage) GetFiles() []ObjsFile {
	if o == nil || isNil(o.Files) {
		var ret []ObjsFile
		return ret
	}
	return o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetFilesOk() ([]ObjsFile, bool) {
	if o == nil || isNil(o.Files) {
    return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *ObjsMessage) HasFiles() bool {
	if o != nil && !isNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given []ObjsFile and assigns it to the Files field.
func (o *ObjsMessage) SetFiles(v []ObjsFile) {
	o.Files = v
}

// GetIcons returns the Icons field value if set, zero value otherwise.
func (o *ObjsMessage) GetIcons() ObjsMessageIcons {
	if o == nil || isNil(o.Icons) {
		var ret ObjsMessageIcons
		return ret
	}
	return *o.Icons
}

// GetIconsOk returns a tuple with the Icons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetIconsOk() (*ObjsMessageIcons, bool) {
	if o == nil || isNil(o.Icons) {
    return nil, false
	}
	return o.Icons, true
}

// HasIcons returns a boolean if a field has been set.
func (o *ObjsMessage) HasIcons() bool {
	if o != nil && !isNil(o.Icons) {
		return true
	}

	return false
}

// SetIcons gets a reference to the given ObjsMessageIcons and assigns it to the Icons field.
func (o *ObjsMessage) SetIcons(v ObjsMessageIcons) {
	o.Icons = &v
}

// GetInviter returns the Inviter field value if set, zero value otherwise.
func (o *ObjsMessage) GetInviter() string {
	if o == nil || isNil(o.Inviter) {
		var ret string
		return ret
	}
	return *o.Inviter
}

// GetInviterOk returns a tuple with the Inviter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetInviterOk() (*string, bool) {
	if o == nil || isNil(o.Inviter) {
    return nil, false
	}
	return o.Inviter, true
}

// HasInviter returns a boolean if a field has been set.
func (o *ObjsMessage) HasInviter() bool {
	if o != nil && !isNil(o.Inviter) {
		return true
	}

	return false
}

// SetInviter gets a reference to the given string and assigns it to the Inviter field.
func (o *ObjsMessage) SetInviter(v string) {
	o.Inviter = &v
}

// GetIsDelayedMessage returns the IsDelayedMessage field value if set, zero value otherwise.
func (o *ObjsMessage) GetIsDelayedMessage() bool {
	if o == nil || isNil(o.IsDelayedMessage) {
		var ret bool
		return ret
	}
	return *o.IsDelayedMessage
}

// GetIsDelayedMessageOk returns a tuple with the IsDelayedMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetIsDelayedMessageOk() (*bool, bool) {
	if o == nil || isNil(o.IsDelayedMessage) {
    return nil, false
	}
	return o.IsDelayedMessage, true
}

// HasIsDelayedMessage returns a boolean if a field has been set.
func (o *ObjsMessage) HasIsDelayedMessage() bool {
	if o != nil && !isNil(o.IsDelayedMessage) {
		return true
	}

	return false
}

// SetIsDelayedMessage gets a reference to the given bool and assigns it to the IsDelayedMessage field.
func (o *ObjsMessage) SetIsDelayedMessage(v bool) {
	o.IsDelayedMessage = &v
}

// GetIsIntro returns the IsIntro field value if set, zero value otherwise.
func (o *ObjsMessage) GetIsIntro() bool {
	if o == nil || isNil(o.IsIntro) {
		var ret bool
		return ret
	}
	return *o.IsIntro
}

// GetIsIntroOk returns a tuple with the IsIntro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetIsIntroOk() (*bool, bool) {
	if o == nil || isNil(o.IsIntro) {
    return nil, false
	}
	return o.IsIntro, true
}

// HasIsIntro returns a boolean if a field has been set.
func (o *ObjsMessage) HasIsIntro() bool {
	if o != nil && !isNil(o.IsIntro) {
		return true
	}

	return false
}

// SetIsIntro gets a reference to the given bool and assigns it to the IsIntro field.
func (o *ObjsMessage) SetIsIntro(v bool) {
	o.IsIntro = &v
}

// GetIsStarred returns the IsStarred field value if set, zero value otherwise.
func (o *ObjsMessage) GetIsStarred() bool {
	if o == nil || isNil(o.IsStarred) {
		var ret bool
		return ret
	}
	return *o.IsStarred
}

// GetIsStarredOk returns a tuple with the IsStarred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetIsStarredOk() (*bool, bool) {
	if o == nil || isNil(o.IsStarred) {
    return nil, false
	}
	return o.IsStarred, true
}

// HasIsStarred returns a boolean if a field has been set.
func (o *ObjsMessage) HasIsStarred() bool {
	if o != nil && !isNil(o.IsStarred) {
		return true
	}

	return false
}

// SetIsStarred gets a reference to the given bool and assigns it to the IsStarred field.
func (o *ObjsMessage) SetIsStarred(v bool) {
	o.IsStarred = &v
}

// GetLastRead returns the LastRead field value if set, zero value otherwise.
func (o *ObjsMessage) GetLastRead() string {
	if o == nil || isNil(o.LastRead) {
		var ret string
		return ret
	}
	return *o.LastRead
}

// GetLastReadOk returns a tuple with the LastRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetLastReadOk() (*string, bool) {
	if o == nil || isNil(o.LastRead) {
    return nil, false
	}
	return o.LastRead, true
}

// HasLastRead returns a boolean if a field has been set.
func (o *ObjsMessage) HasLastRead() bool {
	if o != nil && !isNil(o.LastRead) {
		return true
	}

	return false
}

// SetLastRead gets a reference to the given string and assigns it to the LastRead field.
func (o *ObjsMessage) SetLastRead(v string) {
	o.LastRead = &v
}

// GetLatestReply returns the LatestReply field value if set, zero value otherwise.
func (o *ObjsMessage) GetLatestReply() string {
	if o == nil || isNil(o.LatestReply) {
		var ret string
		return ret
	}
	return *o.LatestReply
}

// GetLatestReplyOk returns a tuple with the LatestReply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetLatestReplyOk() (*string, bool) {
	if o == nil || isNil(o.LatestReply) {
    return nil, false
	}
	return o.LatestReply, true
}

// HasLatestReply returns a boolean if a field has been set.
func (o *ObjsMessage) HasLatestReply() bool {
	if o != nil && !isNil(o.LatestReply) {
		return true
	}

	return false
}

// SetLatestReply gets a reference to the given string and assigns it to the LatestReply field.
func (o *ObjsMessage) SetLatestReply(v string) {
	o.LatestReply = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ObjsMessage) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ObjsMessage) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ObjsMessage) SetName(v string) {
	o.Name = &v
}

// GetOldName returns the OldName field value if set, zero value otherwise.
func (o *ObjsMessage) GetOldName() string {
	if o == nil || isNil(o.OldName) {
		var ret string
		return ret
	}
	return *o.OldName
}

// GetOldNameOk returns a tuple with the OldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetOldNameOk() (*string, bool) {
	if o == nil || isNil(o.OldName) {
    return nil, false
	}
	return o.OldName, true
}

// HasOldName returns a boolean if a field has been set.
func (o *ObjsMessage) HasOldName() bool {
	if o != nil && !isNil(o.OldName) {
		return true
	}

	return false
}

// SetOldName gets a reference to the given string and assigns it to the OldName field.
func (o *ObjsMessage) SetOldName(v string) {
	o.OldName = &v
}

// GetParentUserId returns the ParentUserId field value if set, zero value otherwise.
func (o *ObjsMessage) GetParentUserId() string {
	if o == nil || isNil(o.ParentUserId) {
		var ret string
		return ret
	}
	return *o.ParentUserId
}

// GetParentUserIdOk returns a tuple with the ParentUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetParentUserIdOk() (*string, bool) {
	if o == nil || isNil(o.ParentUserId) {
    return nil, false
	}
	return o.ParentUserId, true
}

// HasParentUserId returns a boolean if a field has been set.
func (o *ObjsMessage) HasParentUserId() bool {
	if o != nil && !isNil(o.ParentUserId) {
		return true
	}

	return false
}

// SetParentUserId gets a reference to the given string and assigns it to the ParentUserId field.
func (o *ObjsMessage) SetParentUserId(v string) {
	o.ParentUserId = &v
}

// GetPermalink returns the Permalink field value if set, zero value otherwise.
func (o *ObjsMessage) GetPermalink() string {
	if o == nil || isNil(o.Permalink) {
		var ret string
		return ret
	}
	return *o.Permalink
}

// GetPermalinkOk returns a tuple with the Permalink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetPermalinkOk() (*string, bool) {
	if o == nil || isNil(o.Permalink) {
    return nil, false
	}
	return o.Permalink, true
}

// HasPermalink returns a boolean if a field has been set.
func (o *ObjsMessage) HasPermalink() bool {
	if o != nil && !isNil(o.Permalink) {
		return true
	}

	return false
}

// SetPermalink gets a reference to the given string and assigns it to the Permalink field.
func (o *ObjsMessage) SetPermalink(v string) {
	o.Permalink = &v
}

// GetPinnedTo returns the PinnedTo field value if set, zero value otherwise.
func (o *ObjsMessage) GetPinnedTo() []string {
	if o == nil || isNil(o.PinnedTo) {
		var ret []string
		return ret
	}
	return o.PinnedTo
}

// GetPinnedToOk returns a tuple with the PinnedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetPinnedToOk() ([]string, bool) {
	if o == nil || isNil(o.PinnedTo) {
    return nil, false
	}
	return o.PinnedTo, true
}

// HasPinnedTo returns a boolean if a field has been set.
func (o *ObjsMessage) HasPinnedTo() bool {
	if o != nil && !isNil(o.PinnedTo) {
		return true
	}

	return false
}

// SetPinnedTo gets a reference to the given []string and assigns it to the PinnedTo field.
func (o *ObjsMessage) SetPinnedTo(v []string) {
	o.PinnedTo = v
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *ObjsMessage) GetPurpose() string {
	if o == nil || isNil(o.Purpose) {
		var ret string
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetPurposeOk() (*string, bool) {
	if o == nil || isNil(o.Purpose) {
    return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *ObjsMessage) HasPurpose() bool {
	if o != nil && !isNil(o.Purpose) {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given string and assigns it to the Purpose field.
func (o *ObjsMessage) SetPurpose(v string) {
	o.Purpose = &v
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
func (o *ObjsMessage) GetReactions() []ObjsReaction {
	if o == nil || isNil(o.Reactions) {
		var ret []ObjsReaction
		return ret
	}
	return o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetReactionsOk() ([]ObjsReaction, bool) {
	if o == nil || isNil(o.Reactions) {
    return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *ObjsMessage) HasReactions() bool {
	if o != nil && !isNil(o.Reactions) {
		return true
	}

	return false
}

// SetReactions gets a reference to the given []ObjsReaction and assigns it to the Reactions field.
func (o *ObjsMessage) SetReactions(v []ObjsReaction) {
	o.Reactions = v
}

// GetReplyCount returns the ReplyCount field value if set, zero value otherwise.
func (o *ObjsMessage) GetReplyCount() int32 {
	if o == nil || isNil(o.ReplyCount) {
		var ret int32
		return ret
	}
	return *o.ReplyCount
}

// GetReplyCountOk returns a tuple with the ReplyCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetReplyCountOk() (*int32, bool) {
	if o == nil || isNil(o.ReplyCount) {
    return nil, false
	}
	return o.ReplyCount, true
}

// HasReplyCount returns a boolean if a field has been set.
func (o *ObjsMessage) HasReplyCount() bool {
	if o != nil && !isNil(o.ReplyCount) {
		return true
	}

	return false
}

// SetReplyCount gets a reference to the given int32 and assigns it to the ReplyCount field.
func (o *ObjsMessage) SetReplyCount(v int32) {
	o.ReplyCount = &v
}

// GetReplyUsers returns the ReplyUsers field value if set, zero value otherwise.
func (o *ObjsMessage) GetReplyUsers() []string {
	if o == nil || isNil(o.ReplyUsers) {
		var ret []string
		return ret
	}
	return o.ReplyUsers
}

// GetReplyUsersOk returns a tuple with the ReplyUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetReplyUsersOk() ([]string, bool) {
	if o == nil || isNil(o.ReplyUsers) {
    return nil, false
	}
	return o.ReplyUsers, true
}

// HasReplyUsers returns a boolean if a field has been set.
func (o *ObjsMessage) HasReplyUsers() bool {
	if o != nil && !isNil(o.ReplyUsers) {
		return true
	}

	return false
}

// SetReplyUsers gets a reference to the given []string and assigns it to the ReplyUsers field.
func (o *ObjsMessage) SetReplyUsers(v []string) {
	o.ReplyUsers = v
}

// GetReplyUsersCount returns the ReplyUsersCount field value if set, zero value otherwise.
func (o *ObjsMessage) GetReplyUsersCount() int32 {
	if o == nil || isNil(o.ReplyUsersCount) {
		var ret int32
		return ret
	}
	return *o.ReplyUsersCount
}

// GetReplyUsersCountOk returns a tuple with the ReplyUsersCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetReplyUsersCountOk() (*int32, bool) {
	if o == nil || isNil(o.ReplyUsersCount) {
    return nil, false
	}
	return o.ReplyUsersCount, true
}

// HasReplyUsersCount returns a boolean if a field has been set.
func (o *ObjsMessage) HasReplyUsersCount() bool {
	if o != nil && !isNil(o.ReplyUsersCount) {
		return true
	}

	return false
}

// SetReplyUsersCount gets a reference to the given int32 and assigns it to the ReplyUsersCount field.
func (o *ObjsMessage) SetReplyUsersCount(v int32) {
	o.ReplyUsersCount = &v
}

// GetSourceTeam returns the SourceTeam field value if set, zero value otherwise.
func (o *ObjsMessage) GetSourceTeam() string {
	if o == nil || isNil(o.SourceTeam) {
		var ret string
		return ret
	}
	return *o.SourceTeam
}

// GetSourceTeamOk returns a tuple with the SourceTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetSourceTeamOk() (*string, bool) {
	if o == nil || isNil(o.SourceTeam) {
    return nil, false
	}
	return o.SourceTeam, true
}

// HasSourceTeam returns a boolean if a field has been set.
func (o *ObjsMessage) HasSourceTeam() bool {
	if o != nil && !isNil(o.SourceTeam) {
		return true
	}

	return false
}

// SetSourceTeam gets a reference to the given string and assigns it to the SourceTeam field.
func (o *ObjsMessage) SetSourceTeam(v string) {
	o.SourceTeam = &v
}

// GetSubscribed returns the Subscribed field value if set, zero value otherwise.
func (o *ObjsMessage) GetSubscribed() bool {
	if o == nil || isNil(o.Subscribed) {
		var ret bool
		return ret
	}
	return *o.Subscribed
}

// GetSubscribedOk returns a tuple with the Subscribed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetSubscribedOk() (*bool, bool) {
	if o == nil || isNil(o.Subscribed) {
    return nil, false
	}
	return o.Subscribed, true
}

// HasSubscribed returns a boolean if a field has been set.
func (o *ObjsMessage) HasSubscribed() bool {
	if o != nil && !isNil(o.Subscribed) {
		return true
	}

	return false
}

// SetSubscribed gets a reference to the given bool and assigns it to the Subscribed field.
func (o *ObjsMessage) SetSubscribed(v bool) {
	o.Subscribed = &v
}

// GetSubtype returns the Subtype field value if set, zero value otherwise.
func (o *ObjsMessage) GetSubtype() string {
	if o == nil || isNil(o.Subtype) {
		var ret string
		return ret
	}
	return *o.Subtype
}

// GetSubtypeOk returns a tuple with the Subtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetSubtypeOk() (*string, bool) {
	if o == nil || isNil(o.Subtype) {
    return nil, false
	}
	return o.Subtype, true
}

// HasSubtype returns a boolean if a field has been set.
func (o *ObjsMessage) HasSubtype() bool {
	if o != nil && !isNil(o.Subtype) {
		return true
	}

	return false
}

// SetSubtype gets a reference to the given string and assigns it to the Subtype field.
func (o *ObjsMessage) SetSubtype(v string) {
	o.Subtype = &v
}

// GetTeam returns the Team field value if set, zero value otherwise.
func (o *ObjsMessage) GetTeam() string {
	if o == nil || isNil(o.Team) {
		var ret string
		return ret
	}
	return *o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetTeamOk() (*string, bool) {
	if o == nil || isNil(o.Team) {
    return nil, false
	}
	return o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *ObjsMessage) HasTeam() bool {
	if o != nil && !isNil(o.Team) {
		return true
	}

	return false
}

// SetTeam gets a reference to the given string and assigns it to the Team field.
func (o *ObjsMessage) SetTeam(v string) {
	o.Team = &v
}

// GetText returns the Text field value
func (o *ObjsMessage) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetTextOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *ObjsMessage) SetText(v string) {
	o.Text = v
}

// GetThreadTs returns the ThreadTs field value if set, zero value otherwise.
func (o *ObjsMessage) GetThreadTs() string {
	if o == nil || isNil(o.ThreadTs) {
		var ret string
		return ret
	}
	return *o.ThreadTs
}

// GetThreadTsOk returns a tuple with the ThreadTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetThreadTsOk() (*string, bool) {
	if o == nil || isNil(o.ThreadTs) {
    return nil, false
	}
	return o.ThreadTs, true
}

// HasThreadTs returns a boolean if a field has been set.
func (o *ObjsMessage) HasThreadTs() bool {
	if o != nil && !isNil(o.ThreadTs) {
		return true
	}

	return false
}

// SetThreadTs gets a reference to the given string and assigns it to the ThreadTs field.
func (o *ObjsMessage) SetThreadTs(v string) {
	o.ThreadTs = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *ObjsMessage) GetTopic() string {
	if o == nil || isNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetTopicOk() (*string, bool) {
	if o == nil || isNil(o.Topic) {
    return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *ObjsMessage) HasTopic() bool {
	if o != nil && !isNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *ObjsMessage) SetTopic(v string) {
	o.Topic = &v
}

// GetTs returns the Ts field value
func (o *ObjsMessage) GetTs() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ts
}

// GetTsOk returns a tuple with the Ts field value
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetTsOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ts, true
}

// SetTs sets field value
func (o *ObjsMessage) SetTs(v string) {
	o.Ts = v
}

// GetType returns the Type field value
func (o *ObjsMessage) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ObjsMessage) SetType(v string) {
	o.Type = v
}

// GetUnreadCount returns the UnreadCount field value if set, zero value otherwise.
func (o *ObjsMessage) GetUnreadCount() int32 {
	if o == nil || isNil(o.UnreadCount) {
		var ret int32
		return ret
	}
	return *o.UnreadCount
}

// GetUnreadCountOk returns a tuple with the UnreadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetUnreadCountOk() (*int32, bool) {
	if o == nil || isNil(o.UnreadCount) {
    return nil, false
	}
	return o.UnreadCount, true
}

// HasUnreadCount returns a boolean if a field has been set.
func (o *ObjsMessage) HasUnreadCount() bool {
	if o != nil && !isNil(o.UnreadCount) {
		return true
	}

	return false
}

// SetUnreadCount gets a reference to the given int32 and assigns it to the UnreadCount field.
func (o *ObjsMessage) SetUnreadCount(v int32) {
	o.UnreadCount = &v
}

// GetUpload returns the Upload field value if set, zero value otherwise.
func (o *ObjsMessage) GetUpload() bool {
	if o == nil || isNil(o.Upload) {
		var ret bool
		return ret
	}
	return *o.Upload
}

// GetUploadOk returns a tuple with the Upload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetUploadOk() (*bool, bool) {
	if o == nil || isNil(o.Upload) {
    return nil, false
	}
	return o.Upload, true
}

// HasUpload returns a boolean if a field has been set.
func (o *ObjsMessage) HasUpload() bool {
	if o != nil && !isNil(o.Upload) {
		return true
	}

	return false
}

// SetUpload gets a reference to the given bool and assigns it to the Upload field.
func (o *ObjsMessage) SetUpload(v bool) {
	o.Upload = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ObjsMessage) GetUser() string {
	if o == nil || isNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetUserOk() (*string, bool) {
	if o == nil || isNil(o.User) {
    return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ObjsMessage) HasUser() bool {
	if o != nil && !isNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *ObjsMessage) SetUser(v string) {
	o.User = &v
}

// GetUserProfile returns the UserProfile field value if set, zero value otherwise.
func (o *ObjsMessage) GetUserProfile() ObjsUserProfileShort {
	if o == nil || isNil(o.UserProfile) {
		var ret ObjsUserProfileShort
		return ret
	}
	return *o.UserProfile
}

// GetUserProfileOk returns a tuple with the UserProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetUserProfileOk() (*ObjsUserProfileShort, bool) {
	if o == nil || isNil(o.UserProfile) {
    return nil, false
	}
	return o.UserProfile, true
}

// HasUserProfile returns a boolean if a field has been set.
func (o *ObjsMessage) HasUserProfile() bool {
	if o != nil && !isNil(o.UserProfile) {
		return true
	}

	return false
}

// SetUserProfile gets a reference to the given ObjsUserProfileShort and assigns it to the UserProfile field.
func (o *ObjsMessage) SetUserProfile(v ObjsUserProfileShort) {
	o.UserProfile = &v
}

// GetUserTeam returns the UserTeam field value if set, zero value otherwise.
func (o *ObjsMessage) GetUserTeam() string {
	if o == nil || isNil(o.UserTeam) {
		var ret string
		return ret
	}
	return *o.UserTeam
}

// GetUserTeamOk returns a tuple with the UserTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetUserTeamOk() (*string, bool) {
	if o == nil || isNil(o.UserTeam) {
    return nil, false
	}
	return o.UserTeam, true
}

// HasUserTeam returns a boolean if a field has been set.
func (o *ObjsMessage) HasUserTeam() bool {
	if o != nil && !isNil(o.UserTeam) {
		return true
	}

	return false
}

// SetUserTeam gets a reference to the given string and assigns it to the UserTeam field.
func (o *ObjsMessage) SetUserTeam(v string) {
	o.UserTeam = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ObjsMessage) GetUsername() string {
	if o == nil || isNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessage) GetUsernameOk() (*string, bool) {
	if o == nil || isNil(o.Username) {
    return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ObjsMessage) HasUsername() bool {
	if o != nil && !isNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ObjsMessage) SetUsername(v string) {
	o.Username = &v
}

func (o ObjsMessage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !isNil(o.Blocks) {
		toSerialize["blocks"] = o.Blocks
	}
	if !isNil(o.BotId) {
		toSerialize["bot_id"] = o.BotId
	}
	if !isNil(o.BotProfile) {
		toSerialize["bot_profile"] = o.BotProfile
	}
	if !isNil(o.ClientMsgId) {
		toSerialize["client_msg_id"] = o.ClientMsgId
	}
	if !isNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !isNil(o.DisplayAsBot) {
		toSerialize["display_as_bot"] = o.DisplayAsBot
	}
	if !isNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !isNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !isNil(o.Icons) {
		toSerialize["icons"] = o.Icons
	}
	if !isNil(o.Inviter) {
		toSerialize["inviter"] = o.Inviter
	}
	if !isNil(o.IsDelayedMessage) {
		toSerialize["is_delayed_message"] = o.IsDelayedMessage
	}
	if !isNil(o.IsIntro) {
		toSerialize["is_intro"] = o.IsIntro
	}
	if !isNil(o.IsStarred) {
		toSerialize["is_starred"] = o.IsStarred
	}
	if !isNil(o.LastRead) {
		toSerialize["last_read"] = o.LastRead
	}
	if !isNil(o.LatestReply) {
		toSerialize["latest_reply"] = o.LatestReply
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.OldName) {
		toSerialize["old_name"] = o.OldName
	}
	if !isNil(o.ParentUserId) {
		toSerialize["parent_user_id"] = o.ParentUserId
	}
	if !isNil(o.Permalink) {
		toSerialize["permalink"] = o.Permalink
	}
	if !isNil(o.PinnedTo) {
		toSerialize["pinned_to"] = o.PinnedTo
	}
	if !isNil(o.Purpose) {
		toSerialize["purpose"] = o.Purpose
	}
	if !isNil(o.Reactions) {
		toSerialize["reactions"] = o.Reactions
	}
	if !isNil(o.ReplyCount) {
		toSerialize["reply_count"] = o.ReplyCount
	}
	if !isNil(o.ReplyUsers) {
		toSerialize["reply_users"] = o.ReplyUsers
	}
	if !isNil(o.ReplyUsersCount) {
		toSerialize["reply_users_count"] = o.ReplyUsersCount
	}
	if !isNil(o.SourceTeam) {
		toSerialize["source_team"] = o.SourceTeam
	}
	if !isNil(o.Subscribed) {
		toSerialize["subscribed"] = o.Subscribed
	}
	if !isNil(o.Subtype) {
		toSerialize["subtype"] = o.Subtype
	}
	if !isNil(o.Team) {
		toSerialize["team"] = o.Team
	}
	if true {
		toSerialize["text"] = o.Text
	}
	if !isNil(o.ThreadTs) {
		toSerialize["thread_ts"] = o.ThreadTs
	}
	if !isNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if true {
		toSerialize["ts"] = o.Ts
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.UnreadCount) {
		toSerialize["unread_count"] = o.UnreadCount
	}
	if !isNil(o.Upload) {
		toSerialize["upload"] = o.Upload
	}
	if !isNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !isNil(o.UserProfile) {
		toSerialize["user_profile"] = o.UserProfile
	}
	if !isNil(o.UserTeam) {
		toSerialize["user_team"] = o.UserTeam
	}
	if !isNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableObjsMessage struct {
	value *ObjsMessage
	isSet bool
}

func (v NullableObjsMessage) Get() *ObjsMessage {
	return v.value
}

func (v *NullableObjsMessage) Set(val *ObjsMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableObjsMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableObjsMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjsMessage(val *ObjsMessage) *NullableObjsMessage {
	return &NullableObjsMessage{value: val, isSet: true}
}

func (v NullableObjsMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjsMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


