/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// DndSetSnoozeSchema Schema for successful response from dnd.setSnooze method
type DndSetSnoozeSchema struct {
	Ok DefsOkTrue `json:"ok"`
	SnoozeEnabled bool `json:"snooze_enabled"`
	SnoozeEndtime int32 `json:"snooze_endtime"`
	SnoozeRemaining int32 `json:"snooze_remaining"`
}

// NewDndSetSnoozeSchema instantiates a new DndSetSnoozeSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDndSetSnoozeSchema(ok DefsOkTrue, snoozeEnabled bool, snoozeEndtime int32, snoozeRemaining int32) *DndSetSnoozeSchema {
	this := DndSetSnoozeSchema{}
	this.Ok = ok
	this.SnoozeEnabled = snoozeEnabled
	this.SnoozeEndtime = snoozeEndtime
	this.SnoozeRemaining = snoozeRemaining
	return &this
}

// NewDndSetSnoozeSchemaWithDefaults instantiates a new DndSetSnoozeSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDndSetSnoozeSchemaWithDefaults() *DndSetSnoozeSchema {
	this := DndSetSnoozeSchema{}
	return &this
}

// GetOk returns the Ok field value
func (o *DndSetSnoozeSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *DndSetSnoozeSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *DndSetSnoozeSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetSnoozeEnabled returns the SnoozeEnabled field value
func (o *DndSetSnoozeSchema) GetSnoozeEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SnoozeEnabled
}

// GetSnoozeEnabledOk returns a tuple with the SnoozeEnabled field value
// and a boolean to check if the value has been set.
func (o *DndSetSnoozeSchema) GetSnoozeEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SnoozeEnabled, true
}

// SetSnoozeEnabled sets field value
func (o *DndSetSnoozeSchema) SetSnoozeEnabled(v bool) {
	o.SnoozeEnabled = v
}

// GetSnoozeEndtime returns the SnoozeEndtime field value
func (o *DndSetSnoozeSchema) GetSnoozeEndtime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SnoozeEndtime
}

// GetSnoozeEndtimeOk returns a tuple with the SnoozeEndtime field value
// and a boolean to check if the value has been set.
func (o *DndSetSnoozeSchema) GetSnoozeEndtimeOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SnoozeEndtime, true
}

// SetSnoozeEndtime sets field value
func (o *DndSetSnoozeSchema) SetSnoozeEndtime(v int32) {
	o.SnoozeEndtime = v
}

// GetSnoozeRemaining returns the SnoozeRemaining field value
func (o *DndSetSnoozeSchema) GetSnoozeRemaining() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SnoozeRemaining
}

// GetSnoozeRemainingOk returns a tuple with the SnoozeRemaining field value
// and a boolean to check if the value has been set.
func (o *DndSetSnoozeSchema) GetSnoozeRemainingOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SnoozeRemaining, true
}

// SetSnoozeRemaining sets field value
func (o *DndSetSnoozeSchema) SetSnoozeRemaining(v int32) {
	o.SnoozeRemaining = v
}

func (o DndSetSnoozeSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if true {
		toSerialize["snooze_enabled"] = o.SnoozeEnabled
	}
	if true {
		toSerialize["snooze_endtime"] = o.SnoozeEndtime
	}
	if true {
		toSerialize["snooze_remaining"] = o.SnoozeRemaining
	}
	return json.Marshal(toSerialize)
}

type NullableDndSetSnoozeSchema struct {
	value *DndSetSnoozeSchema
	isSet bool
}

func (v NullableDndSetSnoozeSchema) Get() *DndSetSnoozeSchema {
	return v.value
}

func (v *NullableDndSetSnoozeSchema) Set(val *DndSetSnoozeSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableDndSetSnoozeSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableDndSetSnoozeSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDndSetSnoozeSchema(val *DndSetSnoozeSchema) *NullableDndSetSnoozeSchema {
	return &NullableDndSetSnoozeSchema{value: val, isSet: true}
}

func (v NullableDndSetSnoozeSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDndSetSnoozeSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


