/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ConversationObjectSharesInner struct for ConversationObjectSharesInner
type ConversationObjectSharesInner struct {
	AcceptedUser *string `json:"accepted_user,omitempty"`
	IsActive bool `json:"is_active"`
	Team ObjsTeam `json:"team"`
	User string `json:"user"`
}

// NewConversationObjectSharesInner instantiates a new ConversationObjectSharesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversationObjectSharesInner(isActive bool, team ObjsTeam, user string) *ConversationObjectSharesInner {
	this := ConversationObjectSharesInner{}
	this.IsActive = isActive
	this.Team = team
	this.User = user
	return &this
}

// NewConversationObjectSharesInnerWithDefaults instantiates a new ConversationObjectSharesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationObjectSharesInnerWithDefaults() *ConversationObjectSharesInner {
	this := ConversationObjectSharesInner{}
	return &this
}

// GetAcceptedUser returns the AcceptedUser field value if set, zero value otherwise.
func (o *ConversationObjectSharesInner) GetAcceptedUser() string {
	if o == nil || isNil(o.AcceptedUser) {
		var ret string
		return ret
	}
	return *o.AcceptedUser
}

// GetAcceptedUserOk returns a tuple with the AcceptedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObjectSharesInner) GetAcceptedUserOk() (*string, bool) {
	if o == nil || isNil(o.AcceptedUser) {
    return nil, false
	}
	return o.AcceptedUser, true
}

// HasAcceptedUser returns a boolean if a field has been set.
func (o *ConversationObjectSharesInner) HasAcceptedUser() bool {
	if o != nil && !isNil(o.AcceptedUser) {
		return true
	}

	return false
}

// SetAcceptedUser gets a reference to the given string and assigns it to the AcceptedUser field.
func (o *ConversationObjectSharesInner) SetAcceptedUser(v string) {
	o.AcceptedUser = &v
}

// GetIsActive returns the IsActive field value
func (o *ConversationObjectSharesInner) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *ConversationObjectSharesInner) GetIsActiveOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *ConversationObjectSharesInner) SetIsActive(v bool) {
	o.IsActive = v
}

// GetTeam returns the Team field value
func (o *ConversationObjectSharesInner) GetTeam() ObjsTeam {
	if o == nil {
		var ret ObjsTeam
		return ret
	}

	return o.Team
}

// GetTeamOk returns a tuple with the Team field value
// and a boolean to check if the value has been set.
func (o *ConversationObjectSharesInner) GetTeamOk() (*ObjsTeam, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Team, true
}

// SetTeam sets field value
func (o *ConversationObjectSharesInner) SetTeam(v ObjsTeam) {
	o.Team = v
}

// GetUser returns the User field value
func (o *ConversationObjectSharesInner) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *ConversationObjectSharesInner) GetUserOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *ConversationObjectSharesInner) SetUser(v string) {
	o.User = v
}

func (o ConversationObjectSharesInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AcceptedUser) {
		toSerialize["accepted_user"] = o.AcceptedUser
	}
	if true {
		toSerialize["is_active"] = o.IsActive
	}
	if true {
		toSerialize["team"] = o.Team
	}
	if true {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableConversationObjectSharesInner struct {
	value *ConversationObjectSharesInner
	isSet bool
}

func (v NullableConversationObjectSharesInner) Get() *ConversationObjectSharesInner {
	return v.value
}

func (v *NullableConversationObjectSharesInner) Set(val *ConversationObjectSharesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationObjectSharesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationObjectSharesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationObjectSharesInner(val *ConversationObjectSharesInner) *NullableConversationObjectSharesInner {
	return &NullableConversationObjectSharesInner{value: val, isSet: true}
}

func (v NullableConversationObjectSharesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationObjectSharesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


