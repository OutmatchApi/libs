/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// AdminUsergroupsApiService AdminUsergroupsApi service
type AdminUsergroupsApiService service

type ApiAdminUsergroupsAddChannelsRequest struct {
	ctx context.Context
	ApiService *AdminUsergroupsApiService
	token *string
	channelIds *string
	usergroupId *string
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
func (r ApiAdminUsergroupsAddChannelsRequest) Token(token string) ApiAdminUsergroupsAddChannelsRequest {
	r.token = &token
	return r
}

// Comma separated string of channel IDs.
func (r ApiAdminUsergroupsAddChannelsRequest) ChannelIds(channelIds string) ApiAdminUsergroupsAddChannelsRequest {
	r.channelIds = &channelIds
	return r
}

// ID of the IDP group to add default channels for.
func (r ApiAdminUsergroupsAddChannelsRequest) UsergroupId(usergroupId string) ApiAdminUsergroupsAddChannelsRequest {
	r.usergroupId = &usergroupId
	return r
}

// The workspace to add default channels in.
func (r ApiAdminUsergroupsAddChannelsRequest) TeamId(teamId string) ApiAdminUsergroupsAddChannelsRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminUsergroupsAddChannelsRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsergroupsAddChannelsExecute(r)
}

/*
AdminUsergroupsAddChannels Method for AdminUsergroupsAddChannels

Add one or more default channels to an IDP group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsergroupsAddChannelsRequest
*/
func (a *AdminUsergroupsApiService) AdminUsergroupsAddChannels(ctx context.Context) ApiAdminUsergroupsAddChannelsRequest {
	return ApiAdminUsergroupsAddChannelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsergroupsApiService) AdminUsergroupsAddChannelsExecute(r ApiAdminUsergroupsAddChannelsRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsergroupsApiService.AdminUsergroupsAddChannels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.usergroups.addChannels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelIds == nil {
		return localVarReturnValue, nil, reportError("channelIds is required and must be specified")
	}
	if r.usergroupId == nil {
		return localVarReturnValue, nil, reportError("usergroupId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_ids", parameterToString(*r.channelIds, ""))
	if r.teamId != nil {
		localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	localVarFormParams.Add("usergroup_id", parameterToString(*r.usergroupId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsergroupsAddTeamsRequest struct {
	ctx context.Context
	ApiService *AdminUsergroupsApiService
	token *string
	teamIds *string
	usergroupId *string
	autoProvision *bool
}

// Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
func (r ApiAdminUsergroupsAddTeamsRequest) Token(token string) ApiAdminUsergroupsAddTeamsRequest {
	r.token = &token
	return r
}

// A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
func (r ApiAdminUsergroupsAddTeamsRequest) TeamIds(teamIds string) ApiAdminUsergroupsAddTeamsRequest {
	r.teamIds = &teamIds
	return r
}

// An encoded usergroup (IDP Group) ID.
func (r ApiAdminUsergroupsAddTeamsRequest) UsergroupId(usergroupId string) ApiAdminUsergroupsAddTeamsRequest {
	r.usergroupId = &usergroupId
	return r
}

// When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members.
func (r ApiAdminUsergroupsAddTeamsRequest) AutoProvision(autoProvision bool) ApiAdminUsergroupsAddTeamsRequest {
	r.autoProvision = &autoProvision
	return r
}

func (r ApiAdminUsergroupsAddTeamsRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsergroupsAddTeamsExecute(r)
}

/*
AdminUsergroupsAddTeams Method for AdminUsergroupsAddTeams

Associate one or more default workspaces with an organization-wide IDP group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsergroupsAddTeamsRequest
*/
func (a *AdminUsergroupsApiService) AdminUsergroupsAddTeams(ctx context.Context) ApiAdminUsergroupsAddTeamsRequest {
	return ApiAdminUsergroupsAddTeamsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsergroupsApiService) AdminUsergroupsAddTeamsExecute(r ApiAdminUsergroupsAddTeamsRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsergroupsApiService.AdminUsergroupsAddTeams")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.usergroups.addTeams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamIds == nil {
		return localVarReturnValue, nil, reportError("teamIds is required and must be specified")
	}
	if r.usergroupId == nil {
		return localVarReturnValue, nil, reportError("usergroupId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.autoProvision != nil {
		localVarFormParams.Add("auto_provision", parameterToString(*r.autoProvision, ""))
	}
	localVarFormParams.Add("team_ids", parameterToString(*r.teamIds, ""))
	localVarFormParams.Add("usergroup_id", parameterToString(*r.usergroupId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsergroupsListChannelsRequest struct {
	ctx context.Context
	ApiService *AdminUsergroupsApiService
	token *string
	usergroupId *string
	teamId *string
	includeNumMembers *bool
}

// Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60;
func (r ApiAdminUsergroupsListChannelsRequest) Token(token string) ApiAdminUsergroupsListChannelsRequest {
	r.token = &token
	return r
}

// ID of the IDP group to list default channels for.
func (r ApiAdminUsergroupsListChannelsRequest) UsergroupId(usergroupId string) ApiAdminUsergroupsListChannelsRequest {
	r.usergroupId = &usergroupId
	return r
}

// ID of the the workspace.
func (r ApiAdminUsergroupsListChannelsRequest) TeamId(teamId string) ApiAdminUsergroupsListChannelsRequest {
	r.teamId = &teamId
	return r
}

// Flag to include or exclude the count of members per channel.
func (r ApiAdminUsergroupsListChannelsRequest) IncludeNumMembers(includeNumMembers bool) ApiAdminUsergroupsListChannelsRequest {
	r.includeNumMembers = &includeNumMembers
	return r
}

func (r ApiAdminUsergroupsListChannelsRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsergroupsListChannelsExecute(r)
}

/*
AdminUsergroupsListChannels Method for AdminUsergroupsListChannels

List the channels linked to an org-level IDP group (user group).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsergroupsListChannelsRequest
*/
func (a *AdminUsergroupsApiService) AdminUsergroupsListChannels(ctx context.Context) ApiAdminUsergroupsListChannelsRequest {
	return ApiAdminUsergroupsListChannelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsergroupsApiService) AdminUsergroupsListChannelsExecute(r ApiAdminUsergroupsListChannelsRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsergroupsApiService.AdminUsergroupsListChannels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.usergroups.listChannels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.usergroupId == nil {
		return localVarReturnValue, nil, reportError("usergroupId is required and must be specified")
	}

	localVarQueryParams.Add("usergroup_id", parameterToString(*r.usergroupId, ""))
	if r.teamId != nil {
		localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	if r.includeNumMembers != nil {
		localVarQueryParams.Add("include_num_members", parameterToString(*r.includeNumMembers, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsergroupsRemoveChannelsRequest struct {
	ctx context.Context
	ApiService *AdminUsergroupsApiService
	token *string
	channelIds *string
	usergroupId *string
}

// Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
func (r ApiAdminUsergroupsRemoveChannelsRequest) Token(token string) ApiAdminUsergroupsRemoveChannelsRequest {
	r.token = &token
	return r
}

// Comma-separated string of channel IDs
func (r ApiAdminUsergroupsRemoveChannelsRequest) ChannelIds(channelIds string) ApiAdminUsergroupsRemoveChannelsRequest {
	r.channelIds = &channelIds
	return r
}

// ID of the IDP Group
func (r ApiAdminUsergroupsRemoveChannelsRequest) UsergroupId(usergroupId string) ApiAdminUsergroupsRemoveChannelsRequest {
	r.usergroupId = &usergroupId
	return r
}

func (r ApiAdminUsergroupsRemoveChannelsRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsergroupsRemoveChannelsExecute(r)
}

/*
AdminUsergroupsRemoveChannels Method for AdminUsergroupsRemoveChannels

Remove one or more default channels from an org-level IDP group (user group).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsergroupsRemoveChannelsRequest
*/
func (a *AdminUsergroupsApiService) AdminUsergroupsRemoveChannels(ctx context.Context) ApiAdminUsergroupsRemoveChannelsRequest {
	return ApiAdminUsergroupsRemoveChannelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsergroupsApiService) AdminUsergroupsRemoveChannelsExecute(r ApiAdminUsergroupsRemoveChannelsRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsergroupsApiService.AdminUsergroupsRemoveChannels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.usergroups.removeChannels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelIds == nil {
		return localVarReturnValue, nil, reportError("channelIds is required and must be specified")
	}
	if r.usergroupId == nil {
		return localVarReturnValue, nil, reportError("usergroupId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_ids", parameterToString(*r.channelIds, ""))
	localVarFormParams.Add("usergroup_id", parameterToString(*r.usergroupId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
