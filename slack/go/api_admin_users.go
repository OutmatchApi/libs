/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// AdminUsersApiService AdminUsersApi service
type AdminUsersApiService service

type ApiAdminUsersAssignRequest struct {
	ctx context.Context
	ApiService *AdminUsersApiService
	token *string
	teamId *string
	userId *string
	channelIds *string
	isRestricted *bool
	isUltraRestricted *bool
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersAssignRequest) Token(token string) ApiAdminUsersAssignRequest {
	r.token = &token
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersAssignRequest) TeamId(teamId string) ApiAdminUsersAssignRequest {
	r.teamId = &teamId
	return r
}

// The ID of the user to add to the workspace.
func (r ApiAdminUsersAssignRequest) UserId(userId string) ApiAdminUsersAssignRequest {
	r.userId = &userId
	return r
}

// Comma separated values of channel IDs to add user in the new workspace.
func (r ApiAdminUsersAssignRequest) ChannelIds(channelIds string) ApiAdminUsersAssignRequest {
	r.channelIds = &channelIds
	return r
}

// True if user should be added to the workspace as a guest.
func (r ApiAdminUsersAssignRequest) IsRestricted(isRestricted bool) ApiAdminUsersAssignRequest {
	r.isRestricted = &isRestricted
	return r
}

// True if user should be added to the workspace as a single-channel guest.
func (r ApiAdminUsersAssignRequest) IsUltraRestricted(isUltraRestricted bool) ApiAdminUsersAssignRequest {
	r.isUltraRestricted = &isUltraRestricted
	return r
}

func (r ApiAdminUsersAssignRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersAssignExecute(r)
}

/*
AdminUsersAssign Method for AdminUsersAssign

Add an Enterprise user to a workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersAssignRequest
*/
func (a *AdminUsersApiService) AdminUsersAssign(ctx context.Context) ApiAdminUsersAssignRequest {
	return ApiAdminUsersAssignRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsersApiService) AdminUsersAssignExecute(r ApiAdminUsersAssignRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsersApiService.AdminUsersAssign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.assign"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.channelIds != nil {
		localVarFormParams.Add("channel_ids", parameterToString(*r.channelIds, ""))
	}
	if r.isRestricted != nil {
		localVarFormParams.Add("is_restricted", parameterToString(*r.isRestricted, ""))
	}
	if r.isUltraRestricted != nil {
		localVarFormParams.Add("is_ultra_restricted", parameterToString(*r.isUltraRestricted, ""))
	}
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersInviteRequest struct {
	ctx context.Context
	ApiService *AdminUsersApiService
	token *string
	channelIds *string
	email *string
	teamId *string
	customMessage *string
	guestExpirationTs *string
	isRestricted *bool
	isUltraRestricted *bool
	realName *string
	resend *bool
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersInviteRequest) Token(token string) ApiAdminUsersInviteRequest {
	r.token = &token
	return r
}

// A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required.
func (r ApiAdminUsersInviteRequest) ChannelIds(channelIds string) ApiAdminUsersInviteRequest {
	r.channelIds = &channelIds
	return r
}

// The email address of the person to invite.
func (r ApiAdminUsersInviteRequest) Email(email string) ApiAdminUsersInviteRequest {
	r.email = &email
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersInviteRequest) TeamId(teamId string) ApiAdminUsersInviteRequest {
	r.teamId = &teamId
	return r
}

// An optional message to send to the user in the invite email.
func (r ApiAdminUsersInviteRequest) CustomMessage(customMessage string) ApiAdminUsersInviteRequest {
	r.customMessage = &customMessage
	return r
}

// Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
func (r ApiAdminUsersInviteRequest) GuestExpirationTs(guestExpirationTs string) ApiAdminUsersInviteRequest {
	r.guestExpirationTs = &guestExpirationTs
	return r
}

// Is this user a multi-channel guest user? (default: false)
func (r ApiAdminUsersInviteRequest) IsRestricted(isRestricted bool) ApiAdminUsersInviteRequest {
	r.isRestricted = &isRestricted
	return r
}

// Is this user a single channel guest user? (default: false)
func (r ApiAdminUsersInviteRequest) IsUltraRestricted(isUltraRestricted bool) ApiAdminUsersInviteRequest {
	r.isUltraRestricted = &isUltraRestricted
	return r
}

// Full name of the user.
func (r ApiAdminUsersInviteRequest) RealName(realName string) ApiAdminUsersInviteRequest {
	r.realName = &realName
	return r
}

// Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
func (r ApiAdminUsersInviteRequest) Resend(resend bool) ApiAdminUsersInviteRequest {
	r.resend = &resend
	return r
}

func (r ApiAdminUsersInviteRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersInviteExecute(r)
}

/*
AdminUsersInvite Method for AdminUsersInvite

Invite a user to a workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersInviteRequest
*/
func (a *AdminUsersApiService) AdminUsersInvite(ctx context.Context) ApiAdminUsersInviteRequest {
	return ApiAdminUsersInviteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsersApiService) AdminUsersInviteExecute(r ApiAdminUsersInviteRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsersApiService.AdminUsersInvite")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.invite"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelIds == nil {
		return localVarReturnValue, nil, reportError("channelIds is required and must be specified")
	}
	if r.email == nil {
		return localVarReturnValue, nil, reportError("email is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_ids", parameterToString(*r.channelIds, ""))
	if r.customMessage != nil {
		localVarFormParams.Add("custom_message", parameterToString(*r.customMessage, ""))
	}
	localVarFormParams.Add("email", parameterToString(*r.email, ""))
	if r.guestExpirationTs != nil {
		localVarFormParams.Add("guest_expiration_ts", parameterToString(*r.guestExpirationTs, ""))
	}
	if r.isRestricted != nil {
		localVarFormParams.Add("is_restricted", parameterToString(*r.isRestricted, ""))
	}
	if r.isUltraRestricted != nil {
		localVarFormParams.Add("is_ultra_restricted", parameterToString(*r.isUltraRestricted, ""))
	}
	if r.realName != nil {
		localVarFormParams.Add("real_name", parameterToString(*r.realName, ""))
	}
	if r.resend != nil {
		localVarFormParams.Add("resend", parameterToString(*r.resend, ""))
	}
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersListRequest struct {
	ctx context.Context
	ApiService *AdminUsersApiService
	token *string
	teamId *string
	cursor *string
	limit *int32
}

// Authentication token. Requires scope: &#x60;admin.users:read&#x60;
func (r ApiAdminUsersListRequest) Token(token string) ApiAdminUsersListRequest {
	r.token = &token
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersListRequest) TeamId(teamId string) ApiAdminUsersListRequest {
	r.teamId = &teamId
	return r
}

// Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
func (r ApiAdminUsersListRequest) Cursor(cursor string) ApiAdminUsersListRequest {
	r.cursor = &cursor
	return r
}

// Limit for how many users to be retrieved per page
func (r ApiAdminUsersListRequest) Limit(limit int32) ApiAdminUsersListRequest {
	r.limit = &limit
	return r
}

func (r ApiAdminUsersListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersListExecute(r)
}

/*
AdminUsersList Method for AdminUsersList

List users on a workspace

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersListRequest
*/
func (a *AdminUsersApiService) AdminUsersList(ctx context.Context) ApiAdminUsersListRequest {
	return ApiAdminUsersListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsersApiService) AdminUsersListExecute(r ApiAdminUsersListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsersApiService.AdminUsersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}

	localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersRemoveRequest struct {
	ctx context.Context
	ApiService *AdminUsersApiService
	token *string
	teamId *string
	userId *string
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersRemoveRequest) Token(token string) ApiAdminUsersRemoveRequest {
	r.token = &token
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersRemoveRequest) TeamId(teamId string) ApiAdminUsersRemoveRequest {
	r.teamId = &teamId
	return r
}

// The ID of the user to remove.
func (r ApiAdminUsersRemoveRequest) UserId(userId string) ApiAdminUsersRemoveRequest {
	r.userId = &userId
	return r
}

func (r ApiAdminUsersRemoveRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersRemoveExecute(r)
}

/*
AdminUsersRemove Method for AdminUsersRemove

Remove a user from a workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersRemoveRequest
*/
func (a *AdminUsersApiService) AdminUsersRemove(ctx context.Context) ApiAdminUsersRemoveRequest {
	return ApiAdminUsersRemoveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsersApiService) AdminUsersRemoveExecute(r ApiAdminUsersRemoveRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsersApiService.AdminUsersRemove")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.remove"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersSetAdminRequest struct {
	ctx context.Context
	ApiService *AdminUsersApiService
	token *string
	teamId *string
	userId *string
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersSetAdminRequest) Token(token string) ApiAdminUsersSetAdminRequest {
	r.token = &token
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersSetAdminRequest) TeamId(teamId string) ApiAdminUsersSetAdminRequest {
	r.teamId = &teamId
	return r
}

// The ID of the user to designate as an admin.
func (r ApiAdminUsersSetAdminRequest) UserId(userId string) ApiAdminUsersSetAdminRequest {
	r.userId = &userId
	return r
}

func (r ApiAdminUsersSetAdminRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersSetAdminExecute(r)
}

/*
AdminUsersSetAdmin Method for AdminUsersSetAdmin

Set an existing guest, regular user, or owner to be an admin user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersSetAdminRequest
*/
func (a *AdminUsersApiService) AdminUsersSetAdmin(ctx context.Context) ApiAdminUsersSetAdminRequest {
	return ApiAdminUsersSetAdminRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsersApiService) AdminUsersSetAdminExecute(r ApiAdminUsersSetAdminRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsersApiService.AdminUsersSetAdmin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.setAdmin"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersSetExpirationRequest struct {
	ctx context.Context
	ApiService *AdminUsersApiService
	token *string
	expirationTs *int32
	teamId *string
	userId *string
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersSetExpirationRequest) Token(token string) ApiAdminUsersSetExpirationRequest {
	r.token = &token
	return r
}

// Timestamp when guest account should be disabled.
func (r ApiAdminUsersSetExpirationRequest) ExpirationTs(expirationTs int32) ApiAdminUsersSetExpirationRequest {
	r.expirationTs = &expirationTs
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersSetExpirationRequest) TeamId(teamId string) ApiAdminUsersSetExpirationRequest {
	r.teamId = &teamId
	return r
}

// The ID of the user to set an expiration for.
func (r ApiAdminUsersSetExpirationRequest) UserId(userId string) ApiAdminUsersSetExpirationRequest {
	r.userId = &userId
	return r
}

func (r ApiAdminUsersSetExpirationRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersSetExpirationExecute(r)
}

/*
AdminUsersSetExpiration Method for AdminUsersSetExpiration

Set an expiration for a guest user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersSetExpirationRequest
*/
func (a *AdminUsersApiService) AdminUsersSetExpiration(ctx context.Context) ApiAdminUsersSetExpirationRequest {
	return ApiAdminUsersSetExpirationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsersApiService) AdminUsersSetExpirationExecute(r ApiAdminUsersSetExpirationRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsersApiService.AdminUsersSetExpiration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.setExpiration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.expirationTs == nil {
		return localVarReturnValue, nil, reportError("expirationTs is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("expiration_ts", parameterToString(*r.expirationTs, ""))
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersSetOwnerRequest struct {
	ctx context.Context
	ApiService *AdminUsersApiService
	token *string
	teamId *string
	userId *string
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersSetOwnerRequest) Token(token string) ApiAdminUsersSetOwnerRequest {
	r.token = &token
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersSetOwnerRequest) TeamId(teamId string) ApiAdminUsersSetOwnerRequest {
	r.teamId = &teamId
	return r
}

// Id of the user to promote to owner.
func (r ApiAdminUsersSetOwnerRequest) UserId(userId string) ApiAdminUsersSetOwnerRequest {
	r.userId = &userId
	return r
}

func (r ApiAdminUsersSetOwnerRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersSetOwnerExecute(r)
}

/*
AdminUsersSetOwner Method for AdminUsersSetOwner

Set an existing guest, regular user, or admin user to be a workspace owner.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersSetOwnerRequest
*/
func (a *AdminUsersApiService) AdminUsersSetOwner(ctx context.Context) ApiAdminUsersSetOwnerRequest {
	return ApiAdminUsersSetOwnerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsersApiService) AdminUsersSetOwnerExecute(r ApiAdminUsersSetOwnerRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsersApiService.AdminUsersSetOwner")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.setOwner"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersSetRegularRequest struct {
	ctx context.Context
	ApiService *AdminUsersApiService
	token *string
	teamId *string
	userId *string
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersSetRegularRequest) Token(token string) ApiAdminUsersSetRegularRequest {
	r.token = &token
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersSetRegularRequest) TeamId(teamId string) ApiAdminUsersSetRegularRequest {
	r.teamId = &teamId
	return r
}

// The ID of the user to designate as a regular user.
func (r ApiAdminUsersSetRegularRequest) UserId(userId string) ApiAdminUsersSetRegularRequest {
	r.userId = &userId
	return r
}

func (r ApiAdminUsersSetRegularRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersSetRegularExecute(r)
}

/*
AdminUsersSetRegular Method for AdminUsersSetRegular

Set an existing guest user, admin user, or owner to be a regular user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersSetRegularRequest
*/
func (a *AdminUsersApiService) AdminUsersSetRegular(ctx context.Context) ApiAdminUsersSetRegularRequest {
	return ApiAdminUsersSetRegularRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsersApiService) AdminUsersSetRegularExecute(r ApiAdminUsersSetRegularRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsersApiService.AdminUsersSetRegular")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.setRegular"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
