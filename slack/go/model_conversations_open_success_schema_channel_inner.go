/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
	"fmt"
)

// ConversationsOpenSuccessSchemaChannelInner struct for ConversationsOpenSuccessSchemaChannelInner
type ConversationsOpenSuccessSchemaChannelInner struct {
	ConversationsOpenSuccessSchemaChannelInnerAnyOf *ConversationsOpenSuccessSchemaChannelInnerAnyOf
	[]ObjsConversationInner *[]ObjsConversationInner
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ConversationsOpenSuccessSchemaChannelInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ConversationsOpenSuccessSchemaChannelInnerAnyOf
	err = json.Unmarshal(data, &dst.ConversationsOpenSuccessSchemaChannelInnerAnyOf);
	if err == nil {
		jsonConversationsOpenSuccessSchemaChannelInnerAnyOf, _ := json.Marshal(dst.ConversationsOpenSuccessSchemaChannelInnerAnyOf)
		if string(jsonConversationsOpenSuccessSchemaChannelInnerAnyOf) == "{}" { // empty struct
			dst.ConversationsOpenSuccessSchemaChannelInnerAnyOf = nil
		} else {
			return nil // data stored in dst.ConversationsOpenSuccessSchemaChannelInnerAnyOf, return on the first match
		}
	} else {
		dst.ConversationsOpenSuccessSchemaChannelInnerAnyOf = nil
	}

	// try to unmarshal JSON data into []ObjsConversationInner
	err = json.Unmarshal(data, &dst.[]ObjsConversationInner);
	if err == nil {
		json[]ObjsConversationInner, _ := json.Marshal(dst.[]ObjsConversationInner)
		if string(json[]ObjsConversationInner) == "{}" { // empty struct
			dst.[]ObjsConversationInner = nil
		} else {
			return nil // data stored in dst.[]ObjsConversationInner, return on the first match
		}
	} else {
		dst.[]ObjsConversationInner = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ConversationsOpenSuccessSchemaChannelInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ConversationsOpenSuccessSchemaChannelInner) MarshalJSON() ([]byte, error) {
	if src.ConversationsOpenSuccessSchemaChannelInnerAnyOf != nil {
		return json.Marshal(&src.ConversationsOpenSuccessSchemaChannelInnerAnyOf)
	}

	if src.[]ObjsConversationInner != nil {
		return json.Marshal(&src.[]ObjsConversationInner)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableConversationsOpenSuccessSchemaChannelInner struct {
	value *ConversationsOpenSuccessSchemaChannelInner
	isSet bool
}

func (v NullableConversationsOpenSuccessSchemaChannelInner) Get() *ConversationsOpenSuccessSchemaChannelInner {
	return v.value
}

func (v *NullableConversationsOpenSuccessSchemaChannelInner) Set(val *ConversationsOpenSuccessSchemaChannelInner) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationsOpenSuccessSchemaChannelInner) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationsOpenSuccessSchemaChannelInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationsOpenSuccessSchemaChannelInner(val *ConversationsOpenSuccessSchemaChannelInner) *NullableConversationsOpenSuccessSchemaChannelInner {
	return &NullableConversationsOpenSuccessSchemaChannelInner{value: val, isSet: true}
}

func (v NullableConversationsOpenSuccessSchemaChannelInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationsOpenSuccessSchemaChannelInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


