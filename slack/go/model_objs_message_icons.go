/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ObjsMessageIcons struct for ObjsMessageIcons
type ObjsMessageIcons struct {
	Emoji *string `json:"emoji,omitempty"`
	Image64 *string `json:"image_64,omitempty"`
}

// NewObjsMessageIcons instantiates a new ObjsMessageIcons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjsMessageIcons() *ObjsMessageIcons {
	this := ObjsMessageIcons{}
	return &this
}

// NewObjsMessageIconsWithDefaults instantiates a new ObjsMessageIcons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjsMessageIconsWithDefaults() *ObjsMessageIcons {
	this := ObjsMessageIcons{}
	return &this
}

// GetEmoji returns the Emoji field value if set, zero value otherwise.
func (o *ObjsMessageIcons) GetEmoji() string {
	if o == nil || isNil(o.Emoji) {
		var ret string
		return ret
	}
	return *o.Emoji
}

// GetEmojiOk returns a tuple with the Emoji field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessageIcons) GetEmojiOk() (*string, bool) {
	if o == nil || isNil(o.Emoji) {
    return nil, false
	}
	return o.Emoji, true
}

// HasEmoji returns a boolean if a field has been set.
func (o *ObjsMessageIcons) HasEmoji() bool {
	if o != nil && !isNil(o.Emoji) {
		return true
	}

	return false
}

// SetEmoji gets a reference to the given string and assigns it to the Emoji field.
func (o *ObjsMessageIcons) SetEmoji(v string) {
	o.Emoji = &v
}

// GetImage64 returns the Image64 field value if set, zero value otherwise.
func (o *ObjsMessageIcons) GetImage64() string {
	if o == nil || isNil(o.Image64) {
		var ret string
		return ret
	}
	return *o.Image64
}

// GetImage64Ok returns a tuple with the Image64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsMessageIcons) GetImage64Ok() (*string, bool) {
	if o == nil || isNil(o.Image64) {
    return nil, false
	}
	return o.Image64, true
}

// HasImage64 returns a boolean if a field has been set.
func (o *ObjsMessageIcons) HasImage64() bool {
	if o != nil && !isNil(o.Image64) {
		return true
	}

	return false
}

// SetImage64 gets a reference to the given string and assigns it to the Image64 field.
func (o *ObjsMessageIcons) SetImage64(v string) {
	o.Image64 = &v
}

func (o ObjsMessageIcons) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Emoji) {
		toSerialize["emoji"] = o.Emoji
	}
	if !isNil(o.Image64) {
		toSerialize["image_64"] = o.Image64
	}
	return json.Marshal(toSerialize)
}

type NullableObjsMessageIcons struct {
	value *ObjsMessageIcons
	isSet bool
}

func (v NullableObjsMessageIcons) Get() *ObjsMessageIcons {
	return v.value
}

func (v *NullableObjsMessageIcons) Set(val *ObjsMessageIcons) {
	v.value = val
	v.isSet = true
}

func (v NullableObjsMessageIcons) IsSet() bool {
	return v.isSet
}

func (v *NullableObjsMessageIcons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjsMessageIcons(val *ObjsMessageIcons) *NullableObjsMessageIcons {
	return &NullableObjsMessageIcons{value: val, isSet: true}
}

func (v NullableObjsMessageIcons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjsMessageIcons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


