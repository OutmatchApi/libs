/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// UsersIdentitySchemaInnerAnyOf1 Schema for 'identity.basic,identity.email' scopes
type UsersIdentitySchemaInnerAnyOf1 struct {
	Ok DefsOkTrue `json:"ok"`
	Team UsersIdentitySchemaInnerAnyOfTeam `json:"team"`
	User UsersIdentitySchemaInnerAnyOf1User `json:"user"`
}

// NewUsersIdentitySchemaInnerAnyOf1 instantiates a new UsersIdentitySchemaInnerAnyOf1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersIdentitySchemaInnerAnyOf1(ok DefsOkTrue, team UsersIdentitySchemaInnerAnyOfTeam, user UsersIdentitySchemaInnerAnyOf1User) *UsersIdentitySchemaInnerAnyOf1 {
	this := UsersIdentitySchemaInnerAnyOf1{}
	this.Ok = ok
	this.Team = team
	this.User = user
	return &this
}

// NewUsersIdentitySchemaInnerAnyOf1WithDefaults instantiates a new UsersIdentitySchemaInnerAnyOf1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersIdentitySchemaInnerAnyOf1WithDefaults() *UsersIdentitySchemaInnerAnyOf1 {
	this := UsersIdentitySchemaInnerAnyOf1{}
	return &this
}

// GetOk returns the Ok field value
func (o *UsersIdentitySchemaInnerAnyOf1) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *UsersIdentitySchemaInnerAnyOf1) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *UsersIdentitySchemaInnerAnyOf1) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetTeam returns the Team field value
func (o *UsersIdentitySchemaInnerAnyOf1) GetTeam() UsersIdentitySchemaInnerAnyOfTeam {
	if o == nil {
		var ret UsersIdentitySchemaInnerAnyOfTeam
		return ret
	}

	return o.Team
}

// GetTeamOk returns a tuple with the Team field value
// and a boolean to check if the value has been set.
func (o *UsersIdentitySchemaInnerAnyOf1) GetTeamOk() (*UsersIdentitySchemaInnerAnyOfTeam, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Team, true
}

// SetTeam sets field value
func (o *UsersIdentitySchemaInnerAnyOf1) SetTeam(v UsersIdentitySchemaInnerAnyOfTeam) {
	o.Team = v
}

// GetUser returns the User field value
func (o *UsersIdentitySchemaInnerAnyOf1) GetUser() UsersIdentitySchemaInnerAnyOf1User {
	if o == nil {
		var ret UsersIdentitySchemaInnerAnyOf1User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *UsersIdentitySchemaInnerAnyOf1) GetUserOk() (*UsersIdentitySchemaInnerAnyOf1User, bool) {
	if o == nil {
    return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *UsersIdentitySchemaInnerAnyOf1) SetUser(v UsersIdentitySchemaInnerAnyOf1User) {
	o.User = v
}

func (o UsersIdentitySchemaInnerAnyOf1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if true {
		toSerialize["team"] = o.Team
	}
	if true {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableUsersIdentitySchemaInnerAnyOf1 struct {
	value *UsersIdentitySchemaInnerAnyOf1
	isSet bool
}

func (v NullableUsersIdentitySchemaInnerAnyOf1) Get() *UsersIdentitySchemaInnerAnyOf1 {
	return v.value
}

func (v *NullableUsersIdentitySchemaInnerAnyOf1) Set(val *UsersIdentitySchemaInnerAnyOf1) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersIdentitySchemaInnerAnyOf1) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersIdentitySchemaInnerAnyOf1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersIdentitySchemaInnerAnyOf1(val *UsersIdentitySchemaInnerAnyOf1) *NullableUsersIdentitySchemaInnerAnyOf1 {
	return &NullableUsersIdentitySchemaInnerAnyOf1{value: val, isSet: true}
}

func (v NullableUsersIdentitySchemaInnerAnyOf1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersIdentitySchemaInnerAnyOf1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


