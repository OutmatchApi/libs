/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// DndEndSnoozeSchema Schema for successful response from dnd.endSnooze method
type DndEndSnoozeSchema struct {
	DndEnabled bool `json:"dnd_enabled"`
	NextDndEndTs int32 `json:"next_dnd_end_ts"`
	NextDndStartTs int32 `json:"next_dnd_start_ts"`
	Ok DefsOkTrue `json:"ok"`
	SnoozeEnabled bool `json:"snooze_enabled"`
}

// NewDndEndSnoozeSchema instantiates a new DndEndSnoozeSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDndEndSnoozeSchema(dndEnabled bool, nextDndEndTs int32, nextDndStartTs int32, ok DefsOkTrue, snoozeEnabled bool) *DndEndSnoozeSchema {
	this := DndEndSnoozeSchema{}
	this.DndEnabled = dndEnabled
	this.NextDndEndTs = nextDndEndTs
	this.NextDndStartTs = nextDndStartTs
	this.Ok = ok
	this.SnoozeEnabled = snoozeEnabled
	return &this
}

// NewDndEndSnoozeSchemaWithDefaults instantiates a new DndEndSnoozeSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDndEndSnoozeSchemaWithDefaults() *DndEndSnoozeSchema {
	this := DndEndSnoozeSchema{}
	return &this
}

// GetDndEnabled returns the DndEnabled field value
func (o *DndEndSnoozeSchema) GetDndEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DndEnabled
}

// GetDndEnabledOk returns a tuple with the DndEnabled field value
// and a boolean to check if the value has been set.
func (o *DndEndSnoozeSchema) GetDndEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DndEnabled, true
}

// SetDndEnabled sets field value
func (o *DndEndSnoozeSchema) SetDndEnabled(v bool) {
	o.DndEnabled = v
}

// GetNextDndEndTs returns the NextDndEndTs field value
func (o *DndEndSnoozeSchema) GetNextDndEndTs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NextDndEndTs
}

// GetNextDndEndTsOk returns a tuple with the NextDndEndTs field value
// and a boolean to check if the value has been set.
func (o *DndEndSnoozeSchema) GetNextDndEndTsOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.NextDndEndTs, true
}

// SetNextDndEndTs sets field value
func (o *DndEndSnoozeSchema) SetNextDndEndTs(v int32) {
	o.NextDndEndTs = v
}

// GetNextDndStartTs returns the NextDndStartTs field value
func (o *DndEndSnoozeSchema) GetNextDndStartTs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NextDndStartTs
}

// GetNextDndStartTsOk returns a tuple with the NextDndStartTs field value
// and a boolean to check if the value has been set.
func (o *DndEndSnoozeSchema) GetNextDndStartTsOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.NextDndStartTs, true
}

// SetNextDndStartTs sets field value
func (o *DndEndSnoozeSchema) SetNextDndStartTs(v int32) {
	o.NextDndStartTs = v
}

// GetOk returns the Ok field value
func (o *DndEndSnoozeSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *DndEndSnoozeSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *DndEndSnoozeSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetSnoozeEnabled returns the SnoozeEnabled field value
func (o *DndEndSnoozeSchema) GetSnoozeEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SnoozeEnabled
}

// GetSnoozeEnabledOk returns a tuple with the SnoozeEnabled field value
// and a boolean to check if the value has been set.
func (o *DndEndSnoozeSchema) GetSnoozeEnabledOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.SnoozeEnabled, true
}

// SetSnoozeEnabled sets field value
func (o *DndEndSnoozeSchema) SetSnoozeEnabled(v bool) {
	o.SnoozeEnabled = v
}

func (o DndEndSnoozeSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dnd_enabled"] = o.DndEnabled
	}
	if true {
		toSerialize["next_dnd_end_ts"] = o.NextDndEndTs
	}
	if true {
		toSerialize["next_dnd_start_ts"] = o.NextDndStartTs
	}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if true {
		toSerialize["snooze_enabled"] = o.SnoozeEnabled
	}
	return json.Marshal(toSerialize)
}

type NullableDndEndSnoozeSchema struct {
	value *DndEndSnoozeSchema
	isSet bool
}

func (v NullableDndEndSnoozeSchema) Get() *DndEndSnoozeSchema {
	return v.value
}

func (v *NullableDndEndSnoozeSchema) Set(val *DndEndSnoozeSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableDndEndSnoozeSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableDndEndSnoozeSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDndEndSnoozeSchema(val *DndEndSnoozeSchema) *NullableDndEndSnoozeSchema {
	return &NullableDndEndSnoozeSchema{value: val, isSet: true}
}

func (v NullableDndEndSnoozeSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDndEndSnoozeSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


