/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// UsergroupsUsersApiService UsergroupsUsersApi service
type UsergroupsUsersApiService service

type ApiUsergroupsUsersListRequest struct {
	ctx context.Context
	ApiService *UsergroupsUsersApiService
	token *string
	usergroup *string
	includeDisabled *bool
}

// Authentication token. Requires scope: &#x60;usergroups:read&#x60;
func (r ApiUsergroupsUsersListRequest) Token(token string) ApiUsergroupsUsersListRequest {
	r.token = &token
	return r
}

// The encoded ID of the User Group to update.
func (r ApiUsergroupsUsersListRequest) Usergroup(usergroup string) ApiUsergroupsUsersListRequest {
	r.usergroup = &usergroup
	return r
}

// Allow results that involve disabled User Groups.
func (r ApiUsergroupsUsersListRequest) IncludeDisabled(includeDisabled bool) ApiUsergroupsUsersListRequest {
	r.includeDisabled = &includeDisabled
	return r
}

func (r ApiUsergroupsUsersListRequest) Execute() (*UsergroupsUsersListSchema, *http.Response, error) {
	return r.ApiService.UsergroupsUsersListExecute(r)
}

/*
UsergroupsUsersList Method for UsergroupsUsersList

List all users in a User Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsergroupsUsersListRequest
*/
func (a *UsergroupsUsersApiService) UsergroupsUsersList(ctx context.Context) ApiUsergroupsUsersListRequest {
	return ApiUsergroupsUsersListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsergroupsUsersListSchema
func (a *UsergroupsUsersApiService) UsergroupsUsersListExecute(r ApiUsergroupsUsersListRequest) (*UsergroupsUsersListSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupsUsersListSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsergroupsUsersApiService.UsergroupsUsersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usergroups.users.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.usergroup == nil {
		return localVarReturnValue, nil, reportError("usergroup is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	if r.includeDisabled != nil {
		localVarQueryParams.Add("include_disabled", parameterToString(*r.includeDisabled, ""))
	}
	localVarQueryParams.Add("usergroup", parameterToString(*r.usergroup, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v UsergroupsUsersListErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupsUsersUpdateRequest struct {
	ctx context.Context
	ApiService *UsergroupsUsersApiService
	token *string
	usergroup *string
	users *string
	includeCount *bool
}

// Authentication token. Requires scope: &#x60;usergroups:write&#x60;
func (r ApiUsergroupsUsersUpdateRequest) Token(token string) ApiUsergroupsUsersUpdateRequest {
	r.token = &token
	return r
}

// The encoded ID of the User Group to update.
func (r ApiUsergroupsUsersUpdateRequest) Usergroup(usergroup string) ApiUsergroupsUsersUpdateRequest {
	r.usergroup = &usergroup
	return r
}

// A comma separated string of encoded user IDs that represent the entire list of users for the User Group.
func (r ApiUsergroupsUsersUpdateRequest) Users(users string) ApiUsergroupsUsersUpdateRequest {
	r.users = &users
	return r
}

// Include the number of users in the User Group.
func (r ApiUsergroupsUsersUpdateRequest) IncludeCount(includeCount bool) ApiUsergroupsUsersUpdateRequest {
	r.includeCount = &includeCount
	return r
}

func (r ApiUsergroupsUsersUpdateRequest) Execute() (*UsergroupsUsersUpdateSchema, *http.Response, error) {
	return r.ApiService.UsergroupsUsersUpdateExecute(r)
}

/*
UsergroupsUsersUpdate Method for UsergroupsUsersUpdate

Update the list of users for a User Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsergroupsUsersUpdateRequest
*/
func (a *UsergroupsUsersApiService) UsergroupsUsersUpdate(ctx context.Context) ApiUsergroupsUsersUpdateRequest {
	return ApiUsergroupsUsersUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsergroupsUsersUpdateSchema
func (a *UsergroupsUsersApiService) UsergroupsUsersUpdateExecute(r ApiUsergroupsUsersUpdateRequest) (*UsergroupsUsersUpdateSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupsUsersUpdateSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsergroupsUsersApiService.UsergroupsUsersUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usergroups.users.update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.usergroup == nil {
		return localVarReturnValue, nil, reportError("usergroup is required and must be specified")
	}
	if r.users == nil {
		return localVarReturnValue, nil, reportError("users is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.includeCount != nil {
		localVarFormParams.Add("include_count", parameterToString(*r.includeCount, ""))
	}
	localVarFormParams.Add("usergroup", parameterToString(*r.usergroup, ""))
	localVarFormParams.Add("users", parameterToString(*r.users, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v UsergroupsUsersUpdateErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
