/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
	"fmt"
)

// ObjsChannelLatestInner struct for ObjsChannelLatestInner
type ObjsChannelLatestInner struct {
	ObjsMessage *ObjsMessage
	interface{} *interface{}
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ObjsChannelLatestInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ObjsMessage
	err = json.Unmarshal(data, &dst.ObjsMessage);
	if err == nil {
		jsonObjsMessage, _ := json.Marshal(dst.ObjsMessage)
		if string(jsonObjsMessage) == "{}" { // empty struct
			dst.ObjsMessage = nil
		} else {
			return nil // data stored in dst.ObjsMessage, return on the first match
		}
	} else {
		dst.ObjsMessage = nil
	}

	// try to unmarshal JSON data into interface{}
	err = json.Unmarshal(data, &dst.interface{});
	if err == nil {
		jsoninterface{}, _ := json.Marshal(dst.interface{})
		if string(jsoninterface{}) == "{}" { // empty struct
			dst.interface{} = nil
		} else {
			return nil // data stored in dst.interface{}, return on the first match
		}
	} else {
		dst.interface{} = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ObjsChannelLatestInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ObjsChannelLatestInner) MarshalJSON() ([]byte, error) {
	if src.ObjsMessage != nil {
		return json.Marshal(&src.ObjsMessage)
	}

	if src.interface{} != nil {
		return json.Marshal(&src.interface{})
	}

	return nil, nil // no data in anyOf schemas
}

type NullableObjsChannelLatestInner struct {
	value *ObjsChannelLatestInner
	isSet bool
}

func (v NullableObjsChannelLatestInner) Get() *ObjsChannelLatestInner {
	return v.value
}

func (v *NullableObjsChannelLatestInner) Set(val *ObjsChannelLatestInner) {
	v.value = val
	v.isSet = true
}

func (v NullableObjsChannelLatestInner) IsSet() bool {
	return v.isSet
}

func (v *NullableObjsChannelLatestInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjsChannelLatestInner(val *ObjsChannelLatestInner) *NullableObjsChannelLatestInner {
	return &NullableObjsChannelLatestInner{value: val, isSet: true}
}

func (v NullableObjsChannelLatestInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjsChannelLatestInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


