/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ConversationsOpenSuccessSchema Schema for successful response from conversations.open method when opening channels, ims, mpims
type ConversationsOpenSuccessSchema struct {
	AlreadyOpen *bool `json:"already_open,omitempty"`
	Channel []ConversationsOpenSuccessSchemaChannelInner `json:"channel"`
	NoOp *bool `json:"no_op,omitempty"`
	Ok DefsOkTrue `json:"ok"`
}

// NewConversationsOpenSuccessSchema instantiates a new ConversationsOpenSuccessSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversationsOpenSuccessSchema(channel []ConversationsOpenSuccessSchemaChannelInner, ok DefsOkTrue) *ConversationsOpenSuccessSchema {
	this := ConversationsOpenSuccessSchema{}
	this.Channel = channel
	this.Ok = ok
	return &this
}

// NewConversationsOpenSuccessSchemaWithDefaults instantiates a new ConversationsOpenSuccessSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationsOpenSuccessSchemaWithDefaults() *ConversationsOpenSuccessSchema {
	this := ConversationsOpenSuccessSchema{}
	return &this
}

// GetAlreadyOpen returns the AlreadyOpen field value if set, zero value otherwise.
func (o *ConversationsOpenSuccessSchema) GetAlreadyOpen() bool {
	if o == nil || isNil(o.AlreadyOpen) {
		var ret bool
		return ret
	}
	return *o.AlreadyOpen
}

// GetAlreadyOpenOk returns a tuple with the AlreadyOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationsOpenSuccessSchema) GetAlreadyOpenOk() (*bool, bool) {
	if o == nil || isNil(o.AlreadyOpen) {
    return nil, false
	}
	return o.AlreadyOpen, true
}

// HasAlreadyOpen returns a boolean if a field has been set.
func (o *ConversationsOpenSuccessSchema) HasAlreadyOpen() bool {
	if o != nil && !isNil(o.AlreadyOpen) {
		return true
	}

	return false
}

// SetAlreadyOpen gets a reference to the given bool and assigns it to the AlreadyOpen field.
func (o *ConversationsOpenSuccessSchema) SetAlreadyOpen(v bool) {
	o.AlreadyOpen = &v
}

// GetChannel returns the Channel field value
func (o *ConversationsOpenSuccessSchema) GetChannel() []ConversationsOpenSuccessSchemaChannelInner {
	if o == nil {
		var ret []ConversationsOpenSuccessSchemaChannelInner
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *ConversationsOpenSuccessSchema) GetChannelOk() ([]ConversationsOpenSuccessSchemaChannelInner, bool) {
	if o == nil {
    return nil, false
	}
	return o.Channel, true
}

// SetChannel sets field value
func (o *ConversationsOpenSuccessSchema) SetChannel(v []ConversationsOpenSuccessSchemaChannelInner) {
	o.Channel = v
}

// GetNoOp returns the NoOp field value if set, zero value otherwise.
func (o *ConversationsOpenSuccessSchema) GetNoOp() bool {
	if o == nil || isNil(o.NoOp) {
		var ret bool
		return ret
	}
	return *o.NoOp
}

// GetNoOpOk returns a tuple with the NoOp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationsOpenSuccessSchema) GetNoOpOk() (*bool, bool) {
	if o == nil || isNil(o.NoOp) {
    return nil, false
	}
	return o.NoOp, true
}

// HasNoOp returns a boolean if a field has been set.
func (o *ConversationsOpenSuccessSchema) HasNoOp() bool {
	if o != nil && !isNil(o.NoOp) {
		return true
	}

	return false
}

// SetNoOp gets a reference to the given bool and assigns it to the NoOp field.
func (o *ConversationsOpenSuccessSchema) SetNoOp(v bool) {
	o.NoOp = &v
}

// GetOk returns the Ok field value
func (o *ConversationsOpenSuccessSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *ConversationsOpenSuccessSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *ConversationsOpenSuccessSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

func (o ConversationsOpenSuccessSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AlreadyOpen) {
		toSerialize["already_open"] = o.AlreadyOpen
	}
	if true {
		toSerialize["channel"] = o.Channel
	}
	if !isNil(o.NoOp) {
		toSerialize["no_op"] = o.NoOp
	}
	if true {
		toSerialize["ok"] = o.Ok
	}
	return json.Marshal(toSerialize)
}

type NullableConversationsOpenSuccessSchema struct {
	value *ConversationsOpenSuccessSchema
	isSet bool
}

func (v NullableConversationsOpenSuccessSchema) Get() *ConversationsOpenSuccessSchema {
	return v.value
}

func (v *NullableConversationsOpenSuccessSchema) Set(val *ConversationsOpenSuccessSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationsOpenSuccessSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationsOpenSuccessSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationsOpenSuccessSchema(val *ConversationsOpenSuccessSchema) *NullableConversationsOpenSuccessSchema {
	return &NullableConversationsOpenSuccessSchema{value: val, isSet: true}
}

func (v NullableConversationsOpenSuccessSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationsOpenSuccessSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


