/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ObjsTeamSsoProvider struct for ObjsTeamSsoProvider
type ObjsTeamSsoProvider struct {
	Label *string `json:"label,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewObjsTeamSsoProvider instantiates a new ObjsTeamSsoProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjsTeamSsoProvider() *ObjsTeamSsoProvider {
	this := ObjsTeamSsoProvider{}
	return &this
}

// NewObjsTeamSsoProviderWithDefaults instantiates a new ObjsTeamSsoProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjsTeamSsoProviderWithDefaults() *ObjsTeamSsoProvider {
	this := ObjsTeamSsoProvider{}
	return &this
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ObjsTeamSsoProvider) GetLabel() string {
	if o == nil || isNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeamSsoProvider) GetLabelOk() (*string, bool) {
	if o == nil || isNil(o.Label) {
    return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ObjsTeamSsoProvider) HasLabel() bool {
	if o != nil && !isNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ObjsTeamSsoProvider) SetLabel(v string) {
	o.Label = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ObjsTeamSsoProvider) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeamSsoProvider) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ObjsTeamSsoProvider) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ObjsTeamSsoProvider) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ObjsTeamSsoProvider) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeamSsoProvider) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ObjsTeamSsoProvider) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ObjsTeamSsoProvider) SetType(v string) {
	o.Type = &v
}

func (o ObjsTeamSsoProvider) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableObjsTeamSsoProvider struct {
	value *ObjsTeamSsoProvider
	isSet bool
}

func (v NullableObjsTeamSsoProvider) Get() *ObjsTeamSsoProvider {
	return v.value
}

func (v *NullableObjsTeamSsoProvider) Set(val *ObjsTeamSsoProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableObjsTeamSsoProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableObjsTeamSsoProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjsTeamSsoProvider(val *ObjsTeamSsoProvider) *NullableObjsTeamSsoProvider {
	return &NullableObjsTeamSsoProvider{value: val, isSet: true}
}

func (v NullableObjsTeamSsoProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjsTeamSsoProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


