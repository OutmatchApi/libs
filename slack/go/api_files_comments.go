/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// FilesCommentsApiService FilesCommentsApi service
type FilesCommentsApiService service

type ApiFilesCommentsDeleteRequest struct {
	ctx context.Context
	ApiService *FilesCommentsApiService
	token *string
	file *string
	id *string
}

// Authentication token. Requires scope: &#x60;files:write:user&#x60;
func (r ApiFilesCommentsDeleteRequest) Token(token string) ApiFilesCommentsDeleteRequest {
	r.token = &token
	return r
}

// File to delete a comment from.
func (r ApiFilesCommentsDeleteRequest) File(file string) ApiFilesCommentsDeleteRequest {
	r.file = &file
	return r
}

// The comment to delete.
func (r ApiFilesCommentsDeleteRequest) Id(id string) ApiFilesCommentsDeleteRequest {
	r.id = &id
	return r
}

func (r ApiFilesCommentsDeleteRequest) Execute() (*FilesCommentsDeleteSchema, *http.Response, error) {
	return r.ApiService.FilesCommentsDeleteExecute(r)
}

/*
FilesCommentsDelete Method for FilesCommentsDelete

Deletes an existing comment on a file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesCommentsDeleteRequest
*/
func (a *FilesCommentsApiService) FilesCommentsDelete(ctx context.Context) ApiFilesCommentsDeleteRequest {
	return ApiFilesCommentsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesCommentsDeleteSchema
func (a *FilesCommentsApiService) FilesCommentsDeleteExecute(r ApiFilesCommentsDeleteRequest) (*FilesCommentsDeleteSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesCommentsDeleteSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesCommentsApiService.FilesCommentsDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.comments.delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.token != nil {
		localVarHeaderParams["token"] = parameterToString(*r.token, "")
	}
	if r.file != nil {
		localVarFormParams.Add("file", parameterToString(*r.file, ""))
	}
	if r.id != nil {
		localVarFormParams.Add("id", parameterToString(*r.id, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v FilesCommentsDeleteErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
