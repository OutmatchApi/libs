/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// RtmConnectSchema Schema for successful response from rtm.connect method
type RtmConnectSchema struct {
	Ok DefsOkTrue `json:"ok"`
	Self RtmConnectSchemaSelf `json:"self"`
	Team RtmConnectSchemaTeam `json:"team"`
	Url string `json:"url"`
}

// NewRtmConnectSchema instantiates a new RtmConnectSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRtmConnectSchema(ok DefsOkTrue, self RtmConnectSchemaSelf, team RtmConnectSchemaTeam, url string) *RtmConnectSchema {
	this := RtmConnectSchema{}
	this.Ok = ok
	this.Self = self
	this.Team = team
	this.Url = url
	return &this
}

// NewRtmConnectSchemaWithDefaults instantiates a new RtmConnectSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRtmConnectSchemaWithDefaults() *RtmConnectSchema {
	this := RtmConnectSchema{}
	return &this
}

// GetOk returns the Ok field value
func (o *RtmConnectSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *RtmConnectSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *RtmConnectSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetSelf returns the Self field value
func (o *RtmConnectSchema) GetSelf() RtmConnectSchemaSelf {
	if o == nil {
		var ret RtmConnectSchemaSelf
		return ret
	}

	return o.Self
}

// GetSelfOk returns a tuple with the Self field value
// and a boolean to check if the value has been set.
func (o *RtmConnectSchema) GetSelfOk() (*RtmConnectSchemaSelf, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Self, true
}

// SetSelf sets field value
func (o *RtmConnectSchema) SetSelf(v RtmConnectSchemaSelf) {
	o.Self = v
}

// GetTeam returns the Team field value
func (o *RtmConnectSchema) GetTeam() RtmConnectSchemaTeam {
	if o == nil {
		var ret RtmConnectSchemaTeam
		return ret
	}

	return o.Team
}

// GetTeamOk returns a tuple with the Team field value
// and a boolean to check if the value has been set.
func (o *RtmConnectSchema) GetTeamOk() (*RtmConnectSchemaTeam, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Team, true
}

// SetTeam sets field value
func (o *RtmConnectSchema) SetTeam(v RtmConnectSchemaTeam) {
	o.Team = v
}

// GetUrl returns the Url field value
func (o *RtmConnectSchema) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *RtmConnectSchema) GetUrlOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *RtmConnectSchema) SetUrl(v string) {
	o.Url = v
}

func (o RtmConnectSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if true {
		toSerialize["self"] = o.Self
	}
	if true {
		toSerialize["team"] = o.Team
	}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableRtmConnectSchema struct {
	value *RtmConnectSchema
	isSet bool
}

func (v NullableRtmConnectSchema) Get() *RtmConnectSchema {
	return v.value
}

func (v *NullableRtmConnectSchema) Set(val *RtmConnectSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableRtmConnectSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableRtmConnectSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRtmConnectSchema(val *RtmConnectSchema) *NullableRtmConnectSchema {
	return &NullableRtmConnectSchema{value: val, isSet: true}
}

func (v NullableRtmConnectSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRtmConnectSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


