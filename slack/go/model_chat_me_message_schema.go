/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ChatMeMessageSchema Schema for successful response from chat.meMessage method
type ChatMeMessageSchema struct {
	Channel *string `json:"channel,omitempty"`
	Ok DefsOkTrue `json:"ok"`
	Ts *string `json:"ts,omitempty"`
}

// NewChatMeMessageSchema instantiates a new ChatMeMessageSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatMeMessageSchema(ok DefsOkTrue) *ChatMeMessageSchema {
	this := ChatMeMessageSchema{}
	this.Ok = ok
	return &this
}

// NewChatMeMessageSchemaWithDefaults instantiates a new ChatMeMessageSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatMeMessageSchemaWithDefaults() *ChatMeMessageSchema {
	this := ChatMeMessageSchema{}
	return &this
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *ChatMeMessageSchema) GetChannel() string {
	if o == nil || isNil(o.Channel) {
		var ret string
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMeMessageSchema) GetChannelOk() (*string, bool) {
	if o == nil || isNil(o.Channel) {
    return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *ChatMeMessageSchema) HasChannel() bool {
	if o != nil && !isNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given string and assigns it to the Channel field.
func (o *ChatMeMessageSchema) SetChannel(v string) {
	o.Channel = &v
}

// GetOk returns the Ok field value
func (o *ChatMeMessageSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *ChatMeMessageSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *ChatMeMessageSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *ChatMeMessageSchema) GetTs() string {
	if o == nil || isNil(o.Ts) {
		var ret string
		return ret
	}
	return *o.Ts
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMeMessageSchema) GetTsOk() (*string, bool) {
	if o == nil || isNil(o.Ts) {
    return nil, false
	}
	return o.Ts, true
}

// HasTs returns a boolean if a field has been set.
func (o *ChatMeMessageSchema) HasTs() bool {
	if o != nil && !isNil(o.Ts) {
		return true
	}

	return false
}

// SetTs gets a reference to the given string and assigns it to the Ts field.
func (o *ChatMeMessageSchema) SetTs(v string) {
	o.Ts = &v
}

func (o ChatMeMessageSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if !isNil(o.Ts) {
		toSerialize["ts"] = o.Ts
	}
	return json.Marshal(toSerialize)
}

type NullableChatMeMessageSchema struct {
	value *ChatMeMessageSchema
	isSet bool
}

func (v NullableChatMeMessageSchema) Get() *ChatMeMessageSchema {
	return v.value
}

func (v *NullableChatMeMessageSchema) Set(val *ChatMeMessageSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableChatMeMessageSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableChatMeMessageSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatMeMessageSchema(val *ChatMeMessageSchema) *NullableChatMeMessageSchema {
	return &NullableChatMeMessageSchema{value: val, isSet: true}
}

func (v NullableChatMeMessageSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatMeMessageSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


