/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// UsergroupsApiService UsergroupsApi service
type UsergroupsApiService service

type ApiUsergroupsCreateRequest struct {
	ctx context.Context
	ApiService *UsergroupsApiService
	token *string
	name *string
	channels *string
	description *string
	handle *string
	includeCount *bool
}

// Authentication token. Requires scope: &#x60;usergroups:write&#x60;
func (r ApiUsergroupsCreateRequest) Token(token string) ApiUsergroupsCreateRequest {
	r.token = &token
	return r
}

// A name for the User Group. Must be unique among User Groups.
func (r ApiUsergroupsCreateRequest) Name(name string) ApiUsergroupsCreateRequest {
	r.name = &name
	return r
}

// A comma separated string of encoded channel IDs for which the User Group uses as a default.
func (r ApiUsergroupsCreateRequest) Channels(channels string) ApiUsergroupsCreateRequest {
	r.channels = &channels
	return r
}

// A short description of the User Group.
func (r ApiUsergroupsCreateRequest) Description(description string) ApiUsergroupsCreateRequest {
	r.description = &description
	return r
}

// A mention handle. Must be unique among channels, users and User Groups.
func (r ApiUsergroupsCreateRequest) Handle(handle string) ApiUsergroupsCreateRequest {
	r.handle = &handle
	return r
}

// Include the number of users in each User Group.
func (r ApiUsergroupsCreateRequest) IncludeCount(includeCount bool) ApiUsergroupsCreateRequest {
	r.includeCount = &includeCount
	return r
}

func (r ApiUsergroupsCreateRequest) Execute() (*UsergroupsCreateSchema, *http.Response, error) {
	return r.ApiService.UsergroupsCreateExecute(r)
}

/*
UsergroupsCreate Method for UsergroupsCreate

Create a User Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsergroupsCreateRequest
*/
func (a *UsergroupsApiService) UsergroupsCreate(ctx context.Context) ApiUsergroupsCreateRequest {
	return ApiUsergroupsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsergroupsCreateSchema
func (a *UsergroupsApiService) UsergroupsCreateExecute(r ApiUsergroupsCreateRequest) (*UsergroupsCreateSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupsCreateSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsergroupsApiService.UsergroupsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usergroups.create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.channels != nil {
		localVarFormParams.Add("channels", parameterToString(*r.channels, ""))
	}
	if r.description != nil {
		localVarFormParams.Add("description", parameterToString(*r.description, ""))
	}
	if r.handle != nil {
		localVarFormParams.Add("handle", parameterToString(*r.handle, ""))
	}
	if r.includeCount != nil {
		localVarFormParams.Add("include_count", parameterToString(*r.includeCount, ""))
	}
	localVarFormParams.Add("name", parameterToString(*r.name, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v UsergroupsCreateErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupsDisableRequest struct {
	ctx context.Context
	ApiService *UsergroupsApiService
	token *string
	usergroup *string
	includeCount *bool
}

// Authentication token. Requires scope: &#x60;usergroups:write&#x60;
func (r ApiUsergroupsDisableRequest) Token(token string) ApiUsergroupsDisableRequest {
	r.token = &token
	return r
}

// The encoded ID of the User Group to disable.
func (r ApiUsergroupsDisableRequest) Usergroup(usergroup string) ApiUsergroupsDisableRequest {
	r.usergroup = &usergroup
	return r
}

// Include the number of users in the User Group.
func (r ApiUsergroupsDisableRequest) IncludeCount(includeCount bool) ApiUsergroupsDisableRequest {
	r.includeCount = &includeCount
	return r
}

func (r ApiUsergroupsDisableRequest) Execute() (*UsergroupsDisableSchema, *http.Response, error) {
	return r.ApiService.UsergroupsDisableExecute(r)
}

/*
UsergroupsDisable Method for UsergroupsDisable

Disable an existing User Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsergroupsDisableRequest
*/
func (a *UsergroupsApiService) UsergroupsDisable(ctx context.Context) ApiUsergroupsDisableRequest {
	return ApiUsergroupsDisableRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsergroupsDisableSchema
func (a *UsergroupsApiService) UsergroupsDisableExecute(r ApiUsergroupsDisableRequest) (*UsergroupsDisableSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupsDisableSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsergroupsApiService.UsergroupsDisable")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usergroups.disable"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.usergroup == nil {
		return localVarReturnValue, nil, reportError("usergroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.includeCount != nil {
		localVarFormParams.Add("include_count", parameterToString(*r.includeCount, ""))
	}
	localVarFormParams.Add("usergroup", parameterToString(*r.usergroup, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v UsergroupsDisableErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupsEnableRequest struct {
	ctx context.Context
	ApiService *UsergroupsApiService
	token *string
	usergroup *string
	includeCount *bool
}

// Authentication token. Requires scope: &#x60;usergroups:write&#x60;
func (r ApiUsergroupsEnableRequest) Token(token string) ApiUsergroupsEnableRequest {
	r.token = &token
	return r
}

// The encoded ID of the User Group to enable.
func (r ApiUsergroupsEnableRequest) Usergroup(usergroup string) ApiUsergroupsEnableRequest {
	r.usergroup = &usergroup
	return r
}

// Include the number of users in the User Group.
func (r ApiUsergroupsEnableRequest) IncludeCount(includeCount bool) ApiUsergroupsEnableRequest {
	r.includeCount = &includeCount
	return r
}

func (r ApiUsergroupsEnableRequest) Execute() (*UsergroupsEnableSchema, *http.Response, error) {
	return r.ApiService.UsergroupsEnableExecute(r)
}

/*
UsergroupsEnable Method for UsergroupsEnable

Enable a User Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsergroupsEnableRequest
*/
func (a *UsergroupsApiService) UsergroupsEnable(ctx context.Context) ApiUsergroupsEnableRequest {
	return ApiUsergroupsEnableRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsergroupsEnableSchema
func (a *UsergroupsApiService) UsergroupsEnableExecute(r ApiUsergroupsEnableRequest) (*UsergroupsEnableSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupsEnableSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsergroupsApiService.UsergroupsEnable")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usergroups.enable"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.usergroup == nil {
		return localVarReturnValue, nil, reportError("usergroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.includeCount != nil {
		localVarFormParams.Add("include_count", parameterToString(*r.includeCount, ""))
	}
	localVarFormParams.Add("usergroup", parameterToString(*r.usergroup, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v UsergroupsEnableErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupsListRequest struct {
	ctx context.Context
	ApiService *UsergroupsApiService
	token *string
	includeUsers *bool
	includeCount *bool
	includeDisabled *bool
}

// Authentication token. Requires scope: &#x60;usergroups:read&#x60;
func (r ApiUsergroupsListRequest) Token(token string) ApiUsergroupsListRequest {
	r.token = &token
	return r
}

// Include the list of users for each User Group.
func (r ApiUsergroupsListRequest) IncludeUsers(includeUsers bool) ApiUsergroupsListRequest {
	r.includeUsers = &includeUsers
	return r
}

// Include the number of users in each User Group.
func (r ApiUsergroupsListRequest) IncludeCount(includeCount bool) ApiUsergroupsListRequest {
	r.includeCount = &includeCount
	return r
}

// Include disabled User Groups.
func (r ApiUsergroupsListRequest) IncludeDisabled(includeDisabled bool) ApiUsergroupsListRequest {
	r.includeDisabled = &includeDisabled
	return r
}

func (r ApiUsergroupsListRequest) Execute() (*UsergroupsListSchema, *http.Response, error) {
	return r.ApiService.UsergroupsListExecute(r)
}

/*
UsergroupsList Method for UsergroupsList

List all User Groups for a team

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsergroupsListRequest
*/
func (a *UsergroupsApiService) UsergroupsList(ctx context.Context) ApiUsergroupsListRequest {
	return ApiUsergroupsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsergroupsListSchema
func (a *UsergroupsApiService) UsergroupsListExecute(r ApiUsergroupsListRequest) (*UsergroupsListSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupsListSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsergroupsApiService.UsergroupsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usergroups.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	if r.includeUsers != nil {
		localVarQueryParams.Add("include_users", parameterToString(*r.includeUsers, ""))
	}
	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	if r.includeCount != nil {
		localVarQueryParams.Add("include_count", parameterToString(*r.includeCount, ""))
	}
	if r.includeDisabled != nil {
		localVarQueryParams.Add("include_disabled", parameterToString(*r.includeDisabled, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v UsergroupsListErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupsUpdateRequest struct {
	ctx context.Context
	ApiService *UsergroupsApiService
	token *string
	usergroup *string
	channels *string
	description *string
	handle *string
	includeCount *bool
	name *string
}

// Authentication token. Requires scope: &#x60;usergroups:write&#x60;
func (r ApiUsergroupsUpdateRequest) Token(token string) ApiUsergroupsUpdateRequest {
	r.token = &token
	return r
}

// The encoded ID of the User Group to update.
func (r ApiUsergroupsUpdateRequest) Usergroup(usergroup string) ApiUsergroupsUpdateRequest {
	r.usergroup = &usergroup
	return r
}

// A comma separated string of encoded channel IDs for which the User Group uses as a default.
func (r ApiUsergroupsUpdateRequest) Channels(channels string) ApiUsergroupsUpdateRequest {
	r.channels = &channels
	return r
}

// A short description of the User Group.
func (r ApiUsergroupsUpdateRequest) Description(description string) ApiUsergroupsUpdateRequest {
	r.description = &description
	return r
}

// A mention handle. Must be unique among channels, users and User Groups.
func (r ApiUsergroupsUpdateRequest) Handle(handle string) ApiUsergroupsUpdateRequest {
	r.handle = &handle
	return r
}

// Include the number of users in the User Group.
func (r ApiUsergroupsUpdateRequest) IncludeCount(includeCount bool) ApiUsergroupsUpdateRequest {
	r.includeCount = &includeCount
	return r
}

// A name for the User Group. Must be unique among User Groups.
func (r ApiUsergroupsUpdateRequest) Name(name string) ApiUsergroupsUpdateRequest {
	r.name = &name
	return r
}

func (r ApiUsergroupsUpdateRequest) Execute() (*UsergroupsUpdateSchema, *http.Response, error) {
	return r.ApiService.UsergroupsUpdateExecute(r)
}

/*
UsergroupsUpdate Method for UsergroupsUpdate

Update an existing User Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsergroupsUpdateRequest
*/
func (a *UsergroupsApiService) UsergroupsUpdate(ctx context.Context) ApiUsergroupsUpdateRequest {
	return ApiUsergroupsUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsergroupsUpdateSchema
func (a *UsergroupsApiService) UsergroupsUpdateExecute(r ApiUsergroupsUpdateRequest) (*UsergroupsUpdateSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupsUpdateSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsergroupsApiService.UsergroupsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usergroups.update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.usergroup == nil {
		return localVarReturnValue, nil, reportError("usergroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.channels != nil {
		localVarFormParams.Add("channels", parameterToString(*r.channels, ""))
	}
	if r.description != nil {
		localVarFormParams.Add("description", parameterToString(*r.description, ""))
	}
	if r.handle != nil {
		localVarFormParams.Add("handle", parameterToString(*r.handle, ""))
	}
	if r.includeCount != nil {
		localVarFormParams.Add("include_count", parameterToString(*r.includeCount, ""))
	}
	if r.name != nil {
		localVarFormParams.Add("name", parameterToString(*r.name, ""))
	}
	localVarFormParams.Add("usergroup", parameterToString(*r.usergroup, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v UsergroupsUpdateErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupsUsersListRequest struct {
	ctx context.Context
	ApiService *UsergroupsApiService
	token *string
	usergroup *string
	includeDisabled *bool
}

// Authentication token. Requires scope: &#x60;usergroups:read&#x60;
func (r ApiUsergroupsUsersListRequest) Token(token string) ApiUsergroupsUsersListRequest {
	r.token = &token
	return r
}

// The encoded ID of the User Group to update.
func (r ApiUsergroupsUsersListRequest) Usergroup(usergroup string) ApiUsergroupsUsersListRequest {
	r.usergroup = &usergroup
	return r
}

// Allow results that involve disabled User Groups.
func (r ApiUsergroupsUsersListRequest) IncludeDisabled(includeDisabled bool) ApiUsergroupsUsersListRequest {
	r.includeDisabled = &includeDisabled
	return r
}

func (r ApiUsergroupsUsersListRequest) Execute() (*UsergroupsUsersListSchema, *http.Response, error) {
	return r.ApiService.UsergroupsUsersListExecute(r)
}

/*
UsergroupsUsersList Method for UsergroupsUsersList

List all users in a User Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsergroupsUsersListRequest
*/
func (a *UsergroupsApiService) UsergroupsUsersList(ctx context.Context) ApiUsergroupsUsersListRequest {
	return ApiUsergroupsUsersListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsergroupsUsersListSchema
func (a *UsergroupsApiService) UsergroupsUsersListExecute(r ApiUsergroupsUsersListRequest) (*UsergroupsUsersListSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupsUsersListSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsergroupsApiService.UsergroupsUsersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usergroups.users.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.usergroup == nil {
		return localVarReturnValue, nil, reportError("usergroup is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	if r.includeDisabled != nil {
		localVarQueryParams.Add("include_disabled", parameterToString(*r.includeDisabled, ""))
	}
	localVarQueryParams.Add("usergroup", parameterToString(*r.usergroup, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v UsergroupsUsersListErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsergroupsUsersUpdateRequest struct {
	ctx context.Context
	ApiService *UsergroupsApiService
	token *string
	usergroup *string
	users *string
	includeCount *bool
}

// Authentication token. Requires scope: &#x60;usergroups:write&#x60;
func (r ApiUsergroupsUsersUpdateRequest) Token(token string) ApiUsergroupsUsersUpdateRequest {
	r.token = &token
	return r
}

// The encoded ID of the User Group to update.
func (r ApiUsergroupsUsersUpdateRequest) Usergroup(usergroup string) ApiUsergroupsUsersUpdateRequest {
	r.usergroup = &usergroup
	return r
}

// A comma separated string of encoded user IDs that represent the entire list of users for the User Group.
func (r ApiUsergroupsUsersUpdateRequest) Users(users string) ApiUsergroupsUsersUpdateRequest {
	r.users = &users
	return r
}

// Include the number of users in the User Group.
func (r ApiUsergroupsUsersUpdateRequest) IncludeCount(includeCount bool) ApiUsergroupsUsersUpdateRequest {
	r.includeCount = &includeCount
	return r
}

func (r ApiUsergroupsUsersUpdateRequest) Execute() (*UsergroupsUsersUpdateSchema, *http.Response, error) {
	return r.ApiService.UsergroupsUsersUpdateExecute(r)
}

/*
UsergroupsUsersUpdate Method for UsergroupsUsersUpdate

Update the list of users for a User Group

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUsergroupsUsersUpdateRequest
*/
func (a *UsergroupsApiService) UsergroupsUsersUpdate(ctx context.Context) ApiUsergroupsUsersUpdateRequest {
	return ApiUsergroupsUsersUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UsergroupsUsersUpdateSchema
func (a *UsergroupsApiService) UsergroupsUsersUpdateExecute(r ApiUsergroupsUsersUpdateRequest) (*UsergroupsUsersUpdateSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UsergroupsUsersUpdateSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsergroupsApiService.UsergroupsUsersUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/usergroups.users.update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.usergroup == nil {
		return localVarReturnValue, nil, reportError("usergroup is required and must be specified")
	}
	if r.users == nil {
		return localVarReturnValue, nil, reportError("users is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.includeCount != nil {
		localVarFormParams.Add("include_count", parameterToString(*r.includeCount, ""))
	}
	localVarFormParams.Add("usergroup", parameterToString(*r.usergroup, ""))
	localVarFormParams.Add("users", parameterToString(*r.users, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v UsergroupsUsersUpdateErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
