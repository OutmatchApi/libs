/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
	"fmt"
)

// DefsOkTrue the model 'DefsOkTrue'
type DefsOkTrue bool

// List of defs_ok_true
const (
	DEFSOKTRUE_TRUE DefsOkTrue = true
)

// All allowed values of DefsOkTrue enum
var AllowedDefsOkTrueEnumValues = []DefsOkTrue{
	true,
}

func (v *DefsOkTrue) UnmarshalJSON(src []byte) error {
	var value bool
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DefsOkTrue(value)
	for _, existing := range AllowedDefsOkTrueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DefsOkTrue", value)
}

// NewDefsOkTrueFromValue returns a pointer to a valid DefsOkTrue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDefsOkTrueFromValue(v bool) (*DefsOkTrue, error) {
	ev := DefsOkTrue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DefsOkTrue: valid values are %v", v, AllowedDefsOkTrueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DefsOkTrue) IsValid() bool {
	for _, existing := range AllowedDefsOkTrueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to defs_ok_true value
func (v DefsOkTrue) Ptr() *DefsOkTrue {
	return &v
}

type NullableDefsOkTrue struct {
	value *DefsOkTrue
	isSet bool
}

func (v NullableDefsOkTrue) Get() *DefsOkTrue {
	return v.value
}

func (v *NullableDefsOkTrue) Set(val *DefsOkTrue) {
	v.value = val
	v.isSet = true
}

func (v NullableDefsOkTrue) IsSet() bool {
	return v.isSet
}

func (v *NullableDefsOkTrue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefsOkTrue(val *DefsOkTrue) *NullableDefsOkTrue {
	return &NullableDefsOkTrue{value: val, isSet: true}
}

func (v NullableDefsOkTrue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefsOkTrue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

