/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// AdminConversationsGetConversationPrefsSchemaPrefs struct for AdminConversationsGetConversationPrefsSchemaPrefs
type AdminConversationsGetConversationPrefsSchemaPrefs struct {
	CanThread *AdminConversationsGetConversationPrefsSchemaPrefsCanThread `json:"can_thread,omitempty"`
	WhoCanPost *AdminConversationsGetConversationPrefsSchemaPrefsCanThread `json:"who_can_post,omitempty"`
}

// NewAdminConversationsGetConversationPrefsSchemaPrefs instantiates a new AdminConversationsGetConversationPrefsSchemaPrefs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminConversationsGetConversationPrefsSchemaPrefs() *AdminConversationsGetConversationPrefsSchemaPrefs {
	this := AdminConversationsGetConversationPrefsSchemaPrefs{}
	return &this
}

// NewAdminConversationsGetConversationPrefsSchemaPrefsWithDefaults instantiates a new AdminConversationsGetConversationPrefsSchemaPrefs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminConversationsGetConversationPrefsSchemaPrefsWithDefaults() *AdminConversationsGetConversationPrefsSchemaPrefs {
	this := AdminConversationsGetConversationPrefsSchemaPrefs{}
	return &this
}

// GetCanThread returns the CanThread field value if set, zero value otherwise.
func (o *AdminConversationsGetConversationPrefsSchemaPrefs) GetCanThread() AdminConversationsGetConversationPrefsSchemaPrefsCanThread {
	if o == nil || isNil(o.CanThread) {
		var ret AdminConversationsGetConversationPrefsSchemaPrefsCanThread
		return ret
	}
	return *o.CanThread
}

// GetCanThreadOk returns a tuple with the CanThread field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConversationsGetConversationPrefsSchemaPrefs) GetCanThreadOk() (*AdminConversationsGetConversationPrefsSchemaPrefsCanThread, bool) {
	if o == nil || isNil(o.CanThread) {
    return nil, false
	}
	return o.CanThread, true
}

// HasCanThread returns a boolean if a field has been set.
func (o *AdminConversationsGetConversationPrefsSchemaPrefs) HasCanThread() bool {
	if o != nil && !isNil(o.CanThread) {
		return true
	}

	return false
}

// SetCanThread gets a reference to the given AdminConversationsGetConversationPrefsSchemaPrefsCanThread and assigns it to the CanThread field.
func (o *AdminConversationsGetConversationPrefsSchemaPrefs) SetCanThread(v AdminConversationsGetConversationPrefsSchemaPrefsCanThread) {
	o.CanThread = &v
}

// GetWhoCanPost returns the WhoCanPost field value if set, zero value otherwise.
func (o *AdminConversationsGetConversationPrefsSchemaPrefs) GetWhoCanPost() AdminConversationsGetConversationPrefsSchemaPrefsCanThread {
	if o == nil || isNil(o.WhoCanPost) {
		var ret AdminConversationsGetConversationPrefsSchemaPrefsCanThread
		return ret
	}
	return *o.WhoCanPost
}

// GetWhoCanPostOk returns a tuple with the WhoCanPost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConversationsGetConversationPrefsSchemaPrefs) GetWhoCanPostOk() (*AdminConversationsGetConversationPrefsSchemaPrefsCanThread, bool) {
	if o == nil || isNil(o.WhoCanPost) {
    return nil, false
	}
	return o.WhoCanPost, true
}

// HasWhoCanPost returns a boolean if a field has been set.
func (o *AdminConversationsGetConversationPrefsSchemaPrefs) HasWhoCanPost() bool {
	if o != nil && !isNil(o.WhoCanPost) {
		return true
	}

	return false
}

// SetWhoCanPost gets a reference to the given AdminConversationsGetConversationPrefsSchemaPrefsCanThread and assigns it to the WhoCanPost field.
func (o *AdminConversationsGetConversationPrefsSchemaPrefs) SetWhoCanPost(v AdminConversationsGetConversationPrefsSchemaPrefsCanThread) {
	o.WhoCanPost = &v
}

func (o AdminConversationsGetConversationPrefsSchemaPrefs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CanThread) {
		toSerialize["can_thread"] = o.CanThread
	}
	if !isNil(o.WhoCanPost) {
		toSerialize["who_can_post"] = o.WhoCanPost
	}
	return json.Marshal(toSerialize)
}

type NullableAdminConversationsGetConversationPrefsSchemaPrefs struct {
	value *AdminConversationsGetConversationPrefsSchemaPrefs
	isSet bool
}

func (v NullableAdminConversationsGetConversationPrefsSchemaPrefs) Get() *AdminConversationsGetConversationPrefsSchemaPrefs {
	return v.value
}

func (v *NullableAdminConversationsGetConversationPrefsSchemaPrefs) Set(val *AdminConversationsGetConversationPrefsSchemaPrefs) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminConversationsGetConversationPrefsSchemaPrefs) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminConversationsGetConversationPrefsSchemaPrefs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminConversationsGetConversationPrefsSchemaPrefs(val *AdminConversationsGetConversationPrefsSchemaPrefs) *NullableAdminConversationsGetConversationPrefsSchemaPrefs {
	return &NullableAdminConversationsGetConversationPrefsSchemaPrefs{value: val, isSet: true}
}

func (v NullableAdminConversationsGetConversationPrefsSchemaPrefs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminConversationsGetConversationPrefsSchemaPrefs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


