/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// FilesRemoteApiService FilesRemoteApi service
type FilesRemoteApiService service

type ApiFilesRemoteAddRequest struct {
	ctx context.Context
	ApiService *FilesRemoteApiService
	externalId *string
	externalUrl *string
	filetype *string
	indexableFileContents *string
	previewImage *string
	title *string
	token *string
}

// Creator defined GUID for the file.
func (r ApiFilesRemoteAddRequest) ExternalId(externalId string) ApiFilesRemoteAddRequest {
	r.externalId = &externalId
	return r
}

// URL of the remote file.
func (r ApiFilesRemoteAddRequest) ExternalUrl(externalUrl string) ApiFilesRemoteAddRequest {
	r.externalUrl = &externalUrl
	return r
}

// type of file
func (r ApiFilesRemoteAddRequest) Filetype(filetype string) ApiFilesRemoteAddRequest {
	r.filetype = &filetype
	return r
}

// A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.
func (r ApiFilesRemoteAddRequest) IndexableFileContents(indexableFileContents string) ApiFilesRemoteAddRequest {
	r.indexableFileContents = &indexableFileContents
	return r
}

// Preview of the document via &#x60;multipart/form-data&#x60;.
func (r ApiFilesRemoteAddRequest) PreviewImage(previewImage string) ApiFilesRemoteAddRequest {
	r.previewImage = &previewImage
	return r
}

// Title of the file being shared.
func (r ApiFilesRemoteAddRequest) Title(title string) ApiFilesRemoteAddRequest {
	r.title = &title
	return r
}

// Authentication token. Requires scope: &#x60;remote_files:write&#x60;
func (r ApiFilesRemoteAddRequest) Token(token string) ApiFilesRemoteAddRequest {
	r.token = &token
	return r
}

func (r ApiFilesRemoteAddRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.FilesRemoteAddExecute(r)
}

/*
FilesRemoteAdd Method for FilesRemoteAdd

Adds a file from a remote service

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesRemoteAddRequest
*/
func (a *FilesRemoteApiService) FilesRemoteAdd(ctx context.Context) ApiFilesRemoteAddRequest {
	return ApiFilesRemoteAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *FilesRemoteApiService) FilesRemoteAddExecute(r ApiFilesRemoteAddRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesRemoteApiService.FilesRemoteAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.remote.add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.externalId != nil {
		localVarFormParams.Add("external_id", parameterToString(*r.externalId, ""))
	}
	if r.externalUrl != nil {
		localVarFormParams.Add("external_url", parameterToString(*r.externalUrl, ""))
	}
	if r.filetype != nil {
		localVarFormParams.Add("filetype", parameterToString(*r.filetype, ""))
	}
	if r.indexableFileContents != nil {
		localVarFormParams.Add("indexable_file_contents", parameterToString(*r.indexableFileContents, ""))
	}
	if r.previewImage != nil {
		localVarFormParams.Add("preview_image", parameterToString(*r.previewImage, ""))
	}
	if r.title != nil {
		localVarFormParams.Add("title", parameterToString(*r.title, ""))
	}
	if r.token != nil {
		localVarFormParams.Add("token", parameterToString(*r.token, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesRemoteInfoRequest struct {
	ctx context.Context
	ApiService *FilesRemoteApiService
	token *string
	file *string
	externalId *string
}

// Authentication token. Requires scope: &#x60;remote_files:read&#x60;
func (r ApiFilesRemoteInfoRequest) Token(token string) ApiFilesRemoteInfoRequest {
	r.token = &token
	return r
}

// Specify a file by providing its ID.
func (r ApiFilesRemoteInfoRequest) File(file string) ApiFilesRemoteInfoRequest {
	r.file = &file
	return r
}

// Creator defined GUID for the file.
func (r ApiFilesRemoteInfoRequest) ExternalId(externalId string) ApiFilesRemoteInfoRequest {
	r.externalId = &externalId
	return r
}

func (r ApiFilesRemoteInfoRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.FilesRemoteInfoExecute(r)
}

/*
FilesRemoteInfo Method for FilesRemoteInfo

Retrieve information about a remote file added to Slack

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesRemoteInfoRequest
*/
func (a *FilesRemoteApiService) FilesRemoteInfo(ctx context.Context) ApiFilesRemoteInfoRequest {
	return ApiFilesRemoteInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *FilesRemoteApiService) FilesRemoteInfoExecute(r ApiFilesRemoteInfoRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesRemoteApiService.FilesRemoteInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.remote.info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.token != nil {
		localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	}
	if r.file != nil {
		localVarQueryParams.Add("file", parameterToString(*r.file, ""))
	}
	if r.externalId != nil {
		localVarQueryParams.Add("external_id", parameterToString(*r.externalId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesRemoteListRequest struct {
	ctx context.Context
	ApiService *FilesRemoteApiService
	token *string
	channel *string
	tsFrom *float32
	tsTo *float32
	limit *int32
	cursor *string
}

// Authentication token. Requires scope: &#x60;remote_files:read&#x60;
func (r ApiFilesRemoteListRequest) Token(token string) ApiFilesRemoteListRequest {
	r.token = &token
	return r
}

// Filter files appearing in a specific channel, indicated by its ID.
func (r ApiFilesRemoteListRequest) Channel(channel string) ApiFilesRemoteListRequest {
	r.channel = &channel
	return r
}

// Filter files created after this timestamp (inclusive).
func (r ApiFilesRemoteListRequest) TsFrom(tsFrom float32) ApiFilesRemoteListRequest {
	r.tsFrom = &tsFrom
	return r
}

// Filter files created before this timestamp (inclusive).
func (r ApiFilesRemoteListRequest) TsTo(tsTo float32) ApiFilesRemoteListRequest {
	r.tsTo = &tsTo
	return r
}

// The maximum number of items to return.
func (r ApiFilesRemoteListRequest) Limit(limit int32) ApiFilesRemoteListRequest {
	r.limit = &limit
	return r
}

// Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.
func (r ApiFilesRemoteListRequest) Cursor(cursor string) ApiFilesRemoteListRequest {
	r.cursor = &cursor
	return r
}

func (r ApiFilesRemoteListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.FilesRemoteListExecute(r)
}

/*
FilesRemoteList Method for FilesRemoteList

Retrieve information about a remote file added to Slack

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesRemoteListRequest
*/
func (a *FilesRemoteApiService) FilesRemoteList(ctx context.Context) ApiFilesRemoteListRequest {
	return ApiFilesRemoteListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *FilesRemoteApiService) FilesRemoteListExecute(r ApiFilesRemoteListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesRemoteApiService.FilesRemoteList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.remote.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.token != nil {
		localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	}
	if r.channel != nil {
		localVarQueryParams.Add("channel", parameterToString(*r.channel, ""))
	}
	if r.tsFrom != nil {
		localVarQueryParams.Add("ts_from", parameterToString(*r.tsFrom, ""))
	}
	if r.tsTo != nil {
		localVarQueryParams.Add("ts_to", parameterToString(*r.tsTo, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesRemoteRemoveRequest struct {
	ctx context.Context
	ApiService *FilesRemoteApiService
	externalId *string
	file *string
	token *string
}

// Creator defined GUID for the file.
func (r ApiFilesRemoteRemoveRequest) ExternalId(externalId string) ApiFilesRemoteRemoveRequest {
	r.externalId = &externalId
	return r
}

// Specify a file by providing its ID.
func (r ApiFilesRemoteRemoveRequest) File(file string) ApiFilesRemoteRemoveRequest {
	r.file = &file
	return r
}

// Authentication token. Requires scope: &#x60;remote_files:write&#x60;
func (r ApiFilesRemoteRemoveRequest) Token(token string) ApiFilesRemoteRemoveRequest {
	r.token = &token
	return r
}

func (r ApiFilesRemoteRemoveRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.FilesRemoteRemoveExecute(r)
}

/*
FilesRemoteRemove Method for FilesRemoteRemove

Remove a remote file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesRemoteRemoveRequest
*/
func (a *FilesRemoteApiService) FilesRemoteRemove(ctx context.Context) ApiFilesRemoteRemoveRequest {
	return ApiFilesRemoteRemoveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *FilesRemoteApiService) FilesRemoteRemoveExecute(r ApiFilesRemoteRemoveRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesRemoteApiService.FilesRemoteRemove")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.remote.remove"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.externalId != nil {
		localVarFormParams.Add("external_id", parameterToString(*r.externalId, ""))
	}
	if r.file != nil {
		localVarFormParams.Add("file", parameterToString(*r.file, ""))
	}
	if r.token != nil {
		localVarFormParams.Add("token", parameterToString(*r.token, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesRemoteShareRequest struct {
	ctx context.Context
	ApiService *FilesRemoteApiService
	token *string
	file *string
	externalId *string
	channels *string
}

// Authentication token. Requires scope: &#x60;remote_files:share&#x60;
func (r ApiFilesRemoteShareRequest) Token(token string) ApiFilesRemoteShareRequest {
	r.token = &token
	return r
}

// Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required.
func (r ApiFilesRemoteShareRequest) File(file string) ApiFilesRemoteShareRequest {
	r.file = &file
	return r
}

// The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required.
func (r ApiFilesRemoteShareRequest) ExternalId(externalId string) ApiFilesRemoteShareRequest {
	r.externalId = &externalId
	return r
}

// Comma-separated list of channel IDs where the file will be shared.
func (r ApiFilesRemoteShareRequest) Channels(channels string) ApiFilesRemoteShareRequest {
	r.channels = &channels
	return r
}

func (r ApiFilesRemoteShareRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.FilesRemoteShareExecute(r)
}

/*
FilesRemoteShare Method for FilesRemoteShare

Share a remote file into a channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesRemoteShareRequest
*/
func (a *FilesRemoteApiService) FilesRemoteShare(ctx context.Context) ApiFilesRemoteShareRequest {
	return ApiFilesRemoteShareRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *FilesRemoteApiService) FilesRemoteShareExecute(r ApiFilesRemoteShareRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesRemoteApiService.FilesRemoteShare")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.remote.share"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.token != nil {
		localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	}
	if r.file != nil {
		localVarQueryParams.Add("file", parameterToString(*r.file, ""))
	}
	if r.externalId != nil {
		localVarQueryParams.Add("external_id", parameterToString(*r.externalId, ""))
	}
	if r.channels != nil {
		localVarQueryParams.Add("channels", parameterToString(*r.channels, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesRemoteUpdateRequest struct {
	ctx context.Context
	ApiService *FilesRemoteApiService
	externalId *string
	externalUrl *string
	file *string
	filetype *string
	indexableFileContents *string
	previewImage *string
	title *string
	token *string
}

// Creator defined GUID for the file.
func (r ApiFilesRemoteUpdateRequest) ExternalId(externalId string) ApiFilesRemoteUpdateRequest {
	r.externalId = &externalId
	return r
}

// URL of the remote file.
func (r ApiFilesRemoteUpdateRequest) ExternalUrl(externalUrl string) ApiFilesRemoteUpdateRequest {
	r.externalUrl = &externalUrl
	return r
}

// Specify a file by providing its ID.
func (r ApiFilesRemoteUpdateRequest) File(file string) ApiFilesRemoteUpdateRequest {
	r.file = &file
	return r
}

// type of file
func (r ApiFilesRemoteUpdateRequest) Filetype(filetype string) ApiFilesRemoteUpdateRequest {
	r.filetype = &filetype
	return r
}

// File containing contents that can be used to improve searchability for the remote file.
func (r ApiFilesRemoteUpdateRequest) IndexableFileContents(indexableFileContents string) ApiFilesRemoteUpdateRequest {
	r.indexableFileContents = &indexableFileContents
	return r
}

// Preview of the document via &#x60;multipart/form-data&#x60;.
func (r ApiFilesRemoteUpdateRequest) PreviewImage(previewImage string) ApiFilesRemoteUpdateRequest {
	r.previewImage = &previewImage
	return r
}

// Title of the file being shared.
func (r ApiFilesRemoteUpdateRequest) Title(title string) ApiFilesRemoteUpdateRequest {
	r.title = &title
	return r
}

// Authentication token. Requires scope: &#x60;remote_files:write&#x60;
func (r ApiFilesRemoteUpdateRequest) Token(token string) ApiFilesRemoteUpdateRequest {
	r.token = &token
	return r
}

func (r ApiFilesRemoteUpdateRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.FilesRemoteUpdateExecute(r)
}

/*
FilesRemoteUpdate Method for FilesRemoteUpdate

Updates an existing remote file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesRemoteUpdateRequest
*/
func (a *FilesRemoteApiService) FilesRemoteUpdate(ctx context.Context) ApiFilesRemoteUpdateRequest {
	return ApiFilesRemoteUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *FilesRemoteApiService) FilesRemoteUpdateExecute(r ApiFilesRemoteUpdateRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesRemoteApiService.FilesRemoteUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.remote.update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.externalId != nil {
		localVarFormParams.Add("external_id", parameterToString(*r.externalId, ""))
	}
	if r.externalUrl != nil {
		localVarFormParams.Add("external_url", parameterToString(*r.externalUrl, ""))
	}
	if r.file != nil {
		localVarFormParams.Add("file", parameterToString(*r.file, ""))
	}
	if r.filetype != nil {
		localVarFormParams.Add("filetype", parameterToString(*r.filetype, ""))
	}
	if r.indexableFileContents != nil {
		localVarFormParams.Add("indexable_file_contents", parameterToString(*r.indexableFileContents, ""))
	}
	if r.previewImage != nil {
		localVarFormParams.Add("preview_image", parameterToString(*r.previewImage, ""))
	}
	if r.title != nil {
		localVarFormParams.Add("title", parameterToString(*r.title, ""))
	}
	if r.token != nil {
		localVarFormParams.Add("token", parameterToString(*r.token, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
