/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// AdminApiService AdminApi service
type AdminApiService service

type ApiAdminAppsApproveRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	appId *string
	requestId *string
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.apps:write&#x60;
func (r ApiAdminAppsApproveRequest) Token(token string) ApiAdminAppsApproveRequest {
	r.token = &token
	return r
}

// The id of the app to approve.
func (r ApiAdminAppsApproveRequest) AppId(appId string) ApiAdminAppsApproveRequest {
	r.appId = &appId
	return r
}

// The id of the request to approve.
func (r ApiAdminAppsApproveRequest) RequestId(requestId string) ApiAdminAppsApproveRequest {
	r.requestId = &requestId
	return r
}

func (r ApiAdminAppsApproveRequest) TeamId(teamId string) ApiAdminAppsApproveRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminAppsApproveRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminAppsApproveExecute(r)
}

/*
AdminAppsApprove Method for AdminAppsApprove

Approve an app for installation on a workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminAppsApproveRequest
*/
func (a *AdminApiService) AdminAppsApprove(ctx context.Context) ApiAdminAppsApproveRequest {
	return ApiAdminAppsApproveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminAppsApproveExecute(r ApiAdminAppsApproveRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminAppsApprove")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.apps.approve"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.appId != nil {
		localVarFormParams.Add("app_id", parameterToString(*r.appId, ""))
	}
	if r.requestId != nil {
		localVarFormParams.Add("request_id", parameterToString(*r.requestId, ""))
	}
	if r.teamId != nil {
		localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminAppsApprovedListRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	limit *int32
	cursor *string
	teamId *string
	enterpriseId *string
}

// Authentication token. Requires scope: &#x60;admin.apps:read&#x60;
func (r ApiAdminAppsApprovedListRequest) Token(token string) ApiAdminAppsApprovedListRequest {
	r.token = &token
	return r
}

// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
func (r ApiAdminAppsApprovedListRequest) Limit(limit int32) ApiAdminAppsApprovedListRequest {
	r.limit = &limit
	return r
}

// Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
func (r ApiAdminAppsApprovedListRequest) Cursor(cursor string) ApiAdminAppsApprovedListRequest {
	r.cursor = &cursor
	return r
}

func (r ApiAdminAppsApprovedListRequest) TeamId(teamId string) ApiAdminAppsApprovedListRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminAppsApprovedListRequest) EnterpriseId(enterpriseId string) ApiAdminAppsApprovedListRequest {
	r.enterpriseId = &enterpriseId
	return r
}

func (r ApiAdminAppsApprovedListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminAppsApprovedListExecute(r)
}

/*
AdminAppsApprovedList Method for AdminAppsApprovedList

List approved apps for an org or workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminAppsApprovedListRequest
*/
func (a *AdminApiService) AdminAppsApprovedList(ctx context.Context) ApiAdminAppsApprovedListRequest {
	return ApiAdminAppsApprovedListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminAppsApprovedListExecute(r ApiAdminAppsApprovedListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminAppsApprovedList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.apps.approved.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.teamId != nil {
		localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	if r.enterpriseId != nil {
		localVarQueryParams.Add("enterprise_id", parameterToString(*r.enterpriseId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminAppsRequestsListRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	limit *int32
	cursor *string
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.apps:read&#x60;
func (r ApiAdminAppsRequestsListRequest) Token(token string) ApiAdminAppsRequestsListRequest {
	r.token = &token
	return r
}

// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
func (r ApiAdminAppsRequestsListRequest) Limit(limit int32) ApiAdminAppsRequestsListRequest {
	r.limit = &limit
	return r
}

// Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
func (r ApiAdminAppsRequestsListRequest) Cursor(cursor string) ApiAdminAppsRequestsListRequest {
	r.cursor = &cursor
	return r
}

func (r ApiAdminAppsRequestsListRequest) TeamId(teamId string) ApiAdminAppsRequestsListRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminAppsRequestsListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminAppsRequestsListExecute(r)
}

/*
AdminAppsRequestsList Method for AdminAppsRequestsList

List app requests for a team/workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminAppsRequestsListRequest
*/
func (a *AdminApiService) AdminAppsRequestsList(ctx context.Context) ApiAdminAppsRequestsListRequest {
	return ApiAdminAppsRequestsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminAppsRequestsListExecute(r ApiAdminAppsRequestsListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminAppsRequestsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.apps.requests.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.teamId != nil {
		localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminAppsRestrictRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	appId *string
	requestId *string
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.apps:write&#x60;
func (r ApiAdminAppsRestrictRequest) Token(token string) ApiAdminAppsRestrictRequest {
	r.token = &token
	return r
}

// The id of the app to restrict.
func (r ApiAdminAppsRestrictRequest) AppId(appId string) ApiAdminAppsRestrictRequest {
	r.appId = &appId
	return r
}

// The id of the request to restrict.
func (r ApiAdminAppsRestrictRequest) RequestId(requestId string) ApiAdminAppsRestrictRequest {
	r.requestId = &requestId
	return r
}

func (r ApiAdminAppsRestrictRequest) TeamId(teamId string) ApiAdminAppsRestrictRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminAppsRestrictRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminAppsRestrictExecute(r)
}

/*
AdminAppsRestrict Method for AdminAppsRestrict

Restrict an app for installation on a workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminAppsRestrictRequest
*/
func (a *AdminApiService) AdminAppsRestrict(ctx context.Context) ApiAdminAppsRestrictRequest {
	return ApiAdminAppsRestrictRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminAppsRestrictExecute(r ApiAdminAppsRestrictRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminAppsRestrict")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.apps.restrict"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.appId != nil {
		localVarFormParams.Add("app_id", parameterToString(*r.appId, ""))
	}
	if r.requestId != nil {
		localVarFormParams.Add("request_id", parameterToString(*r.requestId, ""))
	}
	if r.teamId != nil {
		localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminAppsRestrictedListRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	limit *int32
	cursor *string
	teamId *string
	enterpriseId *string
}

// Authentication token. Requires scope: &#x60;admin.apps:read&#x60;
func (r ApiAdminAppsRestrictedListRequest) Token(token string) ApiAdminAppsRestrictedListRequest {
	r.token = &token
	return r
}

// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
func (r ApiAdminAppsRestrictedListRequest) Limit(limit int32) ApiAdminAppsRestrictedListRequest {
	r.limit = &limit
	return r
}

// Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
func (r ApiAdminAppsRestrictedListRequest) Cursor(cursor string) ApiAdminAppsRestrictedListRequest {
	r.cursor = &cursor
	return r
}

func (r ApiAdminAppsRestrictedListRequest) TeamId(teamId string) ApiAdminAppsRestrictedListRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminAppsRestrictedListRequest) EnterpriseId(enterpriseId string) ApiAdminAppsRestrictedListRequest {
	r.enterpriseId = &enterpriseId
	return r
}

func (r ApiAdminAppsRestrictedListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminAppsRestrictedListExecute(r)
}

/*
AdminAppsRestrictedList Method for AdminAppsRestrictedList

List restricted apps for an org or workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminAppsRestrictedListRequest
*/
func (a *AdminApiService) AdminAppsRestrictedList(ctx context.Context) ApiAdminAppsRestrictedListRequest {
	return ApiAdminAppsRestrictedListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminAppsRestrictedListExecute(r ApiAdminAppsRestrictedListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminAppsRestrictedList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.apps.restricted.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.teamId != nil {
		localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	if r.enterpriseId != nil {
		localVarQueryParams.Add("enterprise_id", parameterToString(*r.enterpriseId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsArchiveRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelId *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsArchiveRequest) Token(token string) ApiAdminConversationsArchiveRequest {
	r.token = &token
	return r
}

// The channel to archive.
func (r ApiAdminConversationsArchiveRequest) ChannelId(channelId string) ApiAdminConversationsArchiveRequest {
	r.channelId = &channelId
	return r
}

func (r ApiAdminConversationsArchiveRequest) Execute() (*AdminConversationsArchiveSchema, *http.Response, error) {
	return r.ApiService.AdminConversationsArchiveExecute(r)
}

/*
AdminConversationsArchive Method for AdminConversationsArchive

Archive a public or private channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsArchiveRequest
*/
func (a *AdminApiService) AdminConversationsArchive(ctx context.Context) ApiAdminConversationsArchiveRequest {
	return ApiAdminConversationsArchiveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdminConversationsArchiveSchema
func (a *AdminApiService) AdminConversationsArchiveExecute(r ApiAdminConversationsArchiveRequest) (*AdminConversationsArchiveSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdminConversationsArchiveSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsArchive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.archive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_id", parameterToString(*r.channelId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AdminConversationsArchiveErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsConvertToPrivateRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelId *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsConvertToPrivateRequest) Token(token string) ApiAdminConversationsConvertToPrivateRequest {
	r.token = &token
	return r
}

// The channel to convert to private.
func (r ApiAdminConversationsConvertToPrivateRequest) ChannelId(channelId string) ApiAdminConversationsConvertToPrivateRequest {
	r.channelId = &channelId
	return r
}

func (r ApiAdminConversationsConvertToPrivateRequest) Execute() (*AdminConversationsConvertToPrivateSchema, *http.Response, error) {
	return r.ApiService.AdminConversationsConvertToPrivateExecute(r)
}

/*
AdminConversationsConvertToPrivate Method for AdminConversationsConvertToPrivate

Convert a public channel to a private channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsConvertToPrivateRequest
*/
func (a *AdminApiService) AdminConversationsConvertToPrivate(ctx context.Context) ApiAdminConversationsConvertToPrivateRequest {
	return ApiAdminConversationsConvertToPrivateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdminConversationsConvertToPrivateSchema
func (a *AdminApiService) AdminConversationsConvertToPrivateExecute(r ApiAdminConversationsConvertToPrivateRequest) (*AdminConversationsConvertToPrivateSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdminConversationsConvertToPrivateSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsConvertToPrivate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.convertToPrivate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_id", parameterToString(*r.channelId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AdminConversationsConvertToPrivateErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsCreateRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	isPrivate *bool
	name *string
	description *string
	orgWide *bool
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsCreateRequest) Token(token string) ApiAdminConversationsCreateRequest {
	r.token = &token
	return r
}

// When &#x60;true&#x60;, creates a private channel instead of a public channel
func (r ApiAdminConversationsCreateRequest) IsPrivate(isPrivate bool) ApiAdminConversationsCreateRequest {
	r.isPrivate = &isPrivate
	return r
}

// Name of the public or private channel to create.
func (r ApiAdminConversationsCreateRequest) Name(name string) ApiAdminConversationsCreateRequest {
	r.name = &name
	return r
}

// Description of the public or private channel to create.
func (r ApiAdminConversationsCreateRequest) Description(description string) ApiAdminConversationsCreateRequest {
	r.description = &description
	return r
}

// When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel
func (r ApiAdminConversationsCreateRequest) OrgWide(orgWide bool) ApiAdminConversationsCreateRequest {
	r.orgWide = &orgWide
	return r
}

// The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;.
func (r ApiAdminConversationsCreateRequest) TeamId(teamId string) ApiAdminConversationsCreateRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminConversationsCreateRequest) Execute() (*AdminConversationsCreateSchema, *http.Response, error) {
	return r.ApiService.AdminConversationsCreateExecute(r)
}

/*
AdminConversationsCreate Method for AdminConversationsCreate

Create a public or private channel-based conversation.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsCreateRequest
*/
func (a *AdminApiService) AdminConversationsCreate(ctx context.Context) ApiAdminConversationsCreateRequest {
	return ApiAdminConversationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdminConversationsCreateSchema
func (a *AdminApiService) AdminConversationsCreateExecute(r ApiAdminConversationsCreateRequest) (*AdminConversationsCreateSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdminConversationsCreateSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.isPrivate == nil {
		return localVarReturnValue, nil, reportError("isPrivate is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.description != nil {
		localVarFormParams.Add("description", parameterToString(*r.description, ""))
	}
	localVarFormParams.Add("is_private", parameterToString(*r.isPrivate, ""))
	localVarFormParams.Add("name", parameterToString(*r.name, ""))
	if r.orgWide != nil {
		localVarFormParams.Add("org_wide", parameterToString(*r.orgWide, ""))
	}
	if r.teamId != nil {
		localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AdminConversationsCreateErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsDeleteRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelId *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsDeleteRequest) Token(token string) ApiAdminConversationsDeleteRequest {
	r.token = &token
	return r
}

// The channel to delete.
func (r ApiAdminConversationsDeleteRequest) ChannelId(channelId string) ApiAdminConversationsDeleteRequest {
	r.channelId = &channelId
	return r
}

func (r ApiAdminConversationsDeleteRequest) Execute() (*AdminConversationsDeleteSchema, *http.Response, error) {
	return r.ApiService.AdminConversationsDeleteExecute(r)
}

/*
AdminConversationsDelete Method for AdminConversationsDelete

Delete a public or private channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsDeleteRequest
*/
func (a *AdminApiService) AdminConversationsDelete(ctx context.Context) ApiAdminConversationsDeleteRequest {
	return ApiAdminConversationsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdminConversationsDeleteSchema
func (a *AdminApiService) AdminConversationsDeleteExecute(r ApiAdminConversationsDeleteRequest) (*AdminConversationsDeleteSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdminConversationsDeleteSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_id", parameterToString(*r.channelId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AdminConversationsDeleteErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsDisconnectSharedRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelId *string
	leavingTeamIds *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsDisconnectSharedRequest) Token(token string) ApiAdminConversationsDisconnectSharedRequest {
	r.token = &token
	return r
}

// The channel to be disconnected from some workspaces.
func (r ApiAdminConversationsDisconnectSharedRequest) ChannelId(channelId string) ApiAdminConversationsDisconnectSharedRequest {
	r.channelId = &channelId
	return r
}

// The team to be removed from the channel. Currently only a single team id can be specified.
func (r ApiAdminConversationsDisconnectSharedRequest) LeavingTeamIds(leavingTeamIds string) ApiAdminConversationsDisconnectSharedRequest {
	r.leavingTeamIds = &leavingTeamIds
	return r
}

func (r ApiAdminConversationsDisconnectSharedRequest) Execute() (*AdminConversationsRenameSchema, *http.Response, error) {
	return r.ApiService.AdminConversationsDisconnectSharedExecute(r)
}

/*
AdminConversationsDisconnectShared Method for AdminConversationsDisconnectShared

Disconnect a connected channel from one or more workspaces.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsDisconnectSharedRequest
*/
func (a *AdminApiService) AdminConversationsDisconnectShared(ctx context.Context) ApiAdminConversationsDisconnectSharedRequest {
	return ApiAdminConversationsDisconnectSharedRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdminConversationsRenameSchema
func (a *AdminApiService) AdminConversationsDisconnectSharedExecute(r ApiAdminConversationsDisconnectSharedRequest) (*AdminConversationsRenameSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdminConversationsRenameSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsDisconnectShared")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.disconnectShared"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_id", parameterToString(*r.channelId, ""))
	if r.leavingTeamIds != nil {
		localVarFormParams.Add("leaving_team_ids", parameterToString(*r.leavingTeamIds, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AdminConversationsDisconnectSharedErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelIds *string
	teamIds *string
	limit *int32
	cursor *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
func (r ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest) Token(token string) ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest {
	r.token = &token
	return r
}

// A comma-separated list of channels to filter to.
func (r ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest) ChannelIds(channelIds string) ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest {
	r.channelIds = &channelIds
	return r
}

// A comma-separated list of the workspaces to which the channels you would like returned belong.
func (r ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest) TeamIds(teamIds string) ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest {
	r.teamIds = &teamIds
	return r
}

// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
func (r ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest) Limit(limit int32) ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest {
	r.limit = &limit
	return r
}

// Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
func (r ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest) Cursor(cursor string) ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest {
	r.cursor = &cursor
	return r
}

func (r ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminConversationsEkmListOriginalConnectedChannelInfoExecute(r)
}

/*
AdminConversationsEkmListOriginalConnectedChannelInfo Method for AdminConversationsEkmListOriginalConnectedChannelInfo

List all disconnected channelsâ€”i.e., channels that were once connected to other workspaces and then disconnectedâ€”and the corresponding original channel IDs for key revocation with EKM.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest
*/
func (a *AdminApiService) AdminConversationsEkmListOriginalConnectedChannelInfo(ctx context.Context) ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest {
	return ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminConversationsEkmListOriginalConnectedChannelInfoExecute(r ApiAdminConversationsEkmListOriginalConnectedChannelInfoRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsEkmListOriginalConnectedChannelInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.ekm.listOriginalConnectedChannelInfo"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	if r.channelIds != nil {
		localVarQueryParams.Add("channel_ids", parameterToString(*r.channelIds, ""))
	}
	if r.teamIds != nil {
		localVarQueryParams.Add("team_ids", parameterToString(*r.teamIds, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsGetConversationPrefsRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelId *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
func (r ApiAdminConversationsGetConversationPrefsRequest) Token(token string) ApiAdminConversationsGetConversationPrefsRequest {
	r.token = &token
	return r
}

// The channel to get preferences for.
func (r ApiAdminConversationsGetConversationPrefsRequest) ChannelId(channelId string) ApiAdminConversationsGetConversationPrefsRequest {
	r.channelId = &channelId
	return r
}

func (r ApiAdminConversationsGetConversationPrefsRequest) Execute() (*AdminConversationsGetConversationPrefsSchema, *http.Response, error) {
	return r.ApiService.AdminConversationsGetConversationPrefsExecute(r)
}

/*
AdminConversationsGetConversationPrefs Method for AdminConversationsGetConversationPrefs

Get conversation preferences for a public or private channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsGetConversationPrefsRequest
*/
func (a *AdminApiService) AdminConversationsGetConversationPrefs(ctx context.Context) ApiAdminConversationsGetConversationPrefsRequest {
	return ApiAdminConversationsGetConversationPrefsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdminConversationsGetConversationPrefsSchema
func (a *AdminApiService) AdminConversationsGetConversationPrefsExecute(r ApiAdminConversationsGetConversationPrefsRequest) (*AdminConversationsGetConversationPrefsSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdminConversationsGetConversationPrefsSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsGetConversationPrefs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.getConversationPrefs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}

	localVarQueryParams.Add("channel_id", parameterToString(*r.channelId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AdminConversationsUnarchiveErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsGetTeamsRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelId *string
	cursor *string
	limit *int32
}

// Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
func (r ApiAdminConversationsGetTeamsRequest) Token(token string) ApiAdminConversationsGetTeamsRequest {
	r.token = &token
	return r
}

// The channel to determine connected workspaces within the organization for.
func (r ApiAdminConversationsGetTeamsRequest) ChannelId(channelId string) ApiAdminConversationsGetTeamsRequest {
	r.channelId = &channelId
	return r
}

// Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
func (r ApiAdminConversationsGetTeamsRequest) Cursor(cursor string) ApiAdminConversationsGetTeamsRequest {
	r.cursor = &cursor
	return r
}

// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
func (r ApiAdminConversationsGetTeamsRequest) Limit(limit int32) ApiAdminConversationsGetTeamsRequest {
	r.limit = &limit
	return r
}

func (r ApiAdminConversationsGetTeamsRequest) Execute() (*AdminConversationsGetTeamsSchema, *http.Response, error) {
	return r.ApiService.AdminConversationsGetTeamsExecute(r)
}

/*
AdminConversationsGetTeams Method for AdminConversationsGetTeams

Get all the workspaces a given public or private channel is connected to within this Enterprise org.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsGetTeamsRequest
*/
func (a *AdminApiService) AdminConversationsGetTeams(ctx context.Context) ApiAdminConversationsGetTeamsRequest {
	return ApiAdminConversationsGetTeamsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdminConversationsGetTeamsSchema
func (a *AdminApiService) AdminConversationsGetTeamsExecute(r ApiAdminConversationsGetTeamsRequest) (*AdminConversationsGetTeamsSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdminConversationsGetTeamsSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsGetTeams")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.getTeams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}

	localVarQueryParams.Add("channel_id", parameterToString(*r.channelId, ""))
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AdminConversationsGetTeamsErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsInviteRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelId *string
	userIds *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsInviteRequest) Token(token string) ApiAdminConversationsInviteRequest {
	r.token = &token
	return r
}

// The channel that the users will be invited to.
func (r ApiAdminConversationsInviteRequest) ChannelId(channelId string) ApiAdminConversationsInviteRequest {
	r.channelId = &channelId
	return r
}

// The users to invite.
func (r ApiAdminConversationsInviteRequest) UserIds(userIds string) ApiAdminConversationsInviteRequest {
	r.userIds = &userIds
	return r
}

func (r ApiAdminConversationsInviteRequest) Execute() (*AdminConversationsInviteSchema, *http.Response, error) {
	return r.ApiService.AdminConversationsInviteExecute(r)
}

/*
AdminConversationsInvite Method for AdminConversationsInvite

Invite a user to a public or private channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsInviteRequest
*/
func (a *AdminApiService) AdminConversationsInvite(ctx context.Context) ApiAdminConversationsInviteRequest {
	return ApiAdminConversationsInviteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdminConversationsInviteSchema
func (a *AdminApiService) AdminConversationsInviteExecute(r ApiAdminConversationsInviteRequest) (*AdminConversationsInviteSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdminConversationsInviteSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsInvite")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.invite"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}
	if r.userIds == nil {
		return localVarReturnValue, nil, reportError("userIds is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_id", parameterToString(*r.channelId, ""))
	localVarFormParams.Add("user_ids", parameterToString(*r.userIds, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AdminConversationsInviteErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsRenameRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelId *string
	name *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsRenameRequest) Token(token string) ApiAdminConversationsRenameRequest {
	r.token = &token
	return r
}

// The channel to rename.
func (r ApiAdminConversationsRenameRequest) ChannelId(channelId string) ApiAdminConversationsRenameRequest {
	r.channelId = &channelId
	return r
}

func (r ApiAdminConversationsRenameRequest) Name(name string) ApiAdminConversationsRenameRequest {
	r.name = &name
	return r
}

func (r ApiAdminConversationsRenameRequest) Execute() (*AdminConversationsRenameSchema1, *http.Response, error) {
	return r.ApiService.AdminConversationsRenameExecute(r)
}

/*
AdminConversationsRename Method for AdminConversationsRename

Rename a public or private channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsRenameRequest
*/
func (a *AdminApiService) AdminConversationsRename(ctx context.Context) ApiAdminConversationsRenameRequest {
	return ApiAdminConversationsRenameRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdminConversationsRenameSchema1
func (a *AdminApiService) AdminConversationsRenameExecute(r ApiAdminConversationsRenameRequest) (*AdminConversationsRenameSchema1, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdminConversationsRenameSchema1
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsRename")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.rename"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_id", parameterToString(*r.channelId, ""))
	localVarFormParams.Add("name", parameterToString(*r.name, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AdminConversationsUnarchiveErrorSchema1
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsRestrictAccessAddGroupRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	channelId *string
	groupId *string
	token *string
	teamId *string
}

// The channel to link this group to.
func (r ApiAdminConversationsRestrictAccessAddGroupRequest) ChannelId(channelId string) ApiAdminConversationsRestrictAccessAddGroupRequest {
	r.channelId = &channelId
	return r
}

// The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.
func (r ApiAdminConversationsRestrictAccessAddGroupRequest) GroupId(groupId string) ApiAdminConversationsRestrictAccessAddGroupRequest {
	r.groupId = &groupId
	return r
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsRestrictAccessAddGroupRequest) Token(token string) ApiAdminConversationsRestrictAccessAddGroupRequest {
	r.token = &token
	return r
}

// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
func (r ApiAdminConversationsRestrictAccessAddGroupRequest) TeamId(teamId string) ApiAdminConversationsRestrictAccessAddGroupRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminConversationsRestrictAccessAddGroupRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminConversationsRestrictAccessAddGroupExecute(r)
}

/*
AdminConversationsRestrictAccessAddGroup Method for AdminConversationsRestrictAccessAddGroup

Add an allowlist of IDP groups for accessing a channel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsRestrictAccessAddGroupRequest
*/
func (a *AdminApiService) AdminConversationsRestrictAccessAddGroup(ctx context.Context) ApiAdminConversationsRestrictAccessAddGroupRequest {
	return ApiAdminConversationsRestrictAccessAddGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminConversationsRestrictAccessAddGroupExecute(r ApiAdminConversationsRestrictAccessAddGroupRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsRestrictAccessAddGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.restrictAccess.addGroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}
	if r.groupId == nil {
		return localVarReturnValue, nil, reportError("groupId is required and must be specified")
	}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("channel_id", parameterToString(*r.channelId, ""))
	localVarFormParams.Add("group_id", parameterToString(*r.groupId, ""))
	if r.teamId != nil {
		localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	localVarFormParams.Add("token", parameterToString(*r.token, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsRestrictAccessListGroupsRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelId *string
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
func (r ApiAdminConversationsRestrictAccessListGroupsRequest) Token(token string) ApiAdminConversationsRestrictAccessListGroupsRequest {
	r.token = &token
	return r
}

func (r ApiAdminConversationsRestrictAccessListGroupsRequest) ChannelId(channelId string) ApiAdminConversationsRestrictAccessListGroupsRequest {
	r.channelId = &channelId
	return r
}

// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
func (r ApiAdminConversationsRestrictAccessListGroupsRequest) TeamId(teamId string) ApiAdminConversationsRestrictAccessListGroupsRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminConversationsRestrictAccessListGroupsRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminConversationsRestrictAccessListGroupsExecute(r)
}

/*
AdminConversationsRestrictAccessListGroups Method for AdminConversationsRestrictAccessListGroups

List all IDP Groups linked to a channel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsRestrictAccessListGroupsRequest
*/
func (a *AdminApiService) AdminConversationsRestrictAccessListGroups(ctx context.Context) ApiAdminConversationsRestrictAccessListGroupsRequest {
	return ApiAdminConversationsRestrictAccessListGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminConversationsRestrictAccessListGroupsExecute(r ApiAdminConversationsRestrictAccessListGroupsRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsRestrictAccessListGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.restrictAccess.listGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	localVarQueryParams.Add("channel_id", parameterToString(*r.channelId, ""))
	if r.teamId != nil {
		localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsRestrictAccessRemoveGroupRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	channelId *string
	groupId *string
	teamId *string
	token *string
}

// The channel to remove the linked group from.
func (r ApiAdminConversationsRestrictAccessRemoveGroupRequest) ChannelId(channelId string) ApiAdminConversationsRestrictAccessRemoveGroupRequest {
	r.channelId = &channelId
	return r
}

// The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.
func (r ApiAdminConversationsRestrictAccessRemoveGroupRequest) GroupId(groupId string) ApiAdminConversationsRestrictAccessRemoveGroupRequest {
	r.groupId = &groupId
	return r
}

// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
func (r ApiAdminConversationsRestrictAccessRemoveGroupRequest) TeamId(teamId string) ApiAdminConversationsRestrictAccessRemoveGroupRequest {
	r.teamId = &teamId
	return r
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsRestrictAccessRemoveGroupRequest) Token(token string) ApiAdminConversationsRestrictAccessRemoveGroupRequest {
	r.token = &token
	return r
}

func (r ApiAdminConversationsRestrictAccessRemoveGroupRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminConversationsRestrictAccessRemoveGroupExecute(r)
}

/*
AdminConversationsRestrictAccessRemoveGroup Method for AdminConversationsRestrictAccessRemoveGroup

Remove a linked IDP group linked from a private channel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsRestrictAccessRemoveGroupRequest
*/
func (a *AdminApiService) AdminConversationsRestrictAccessRemoveGroup(ctx context.Context) ApiAdminConversationsRestrictAccessRemoveGroupRequest {
	return ApiAdminConversationsRestrictAccessRemoveGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminConversationsRestrictAccessRemoveGroupExecute(r ApiAdminConversationsRestrictAccessRemoveGroupRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsRestrictAccessRemoveGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.restrictAccess.removeGroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}
	if r.groupId == nil {
		return localVarReturnValue, nil, reportError("groupId is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("channel_id", parameterToString(*r.channelId, ""))
	localVarFormParams.Add("group_id", parameterToString(*r.groupId, ""))
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("token", parameterToString(*r.token, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsSearchRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamIds *string
	query *string
	limit *int32
	cursor *string
	searchChannelTypes *string
	sort *string
	sortDir *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
func (r ApiAdminConversationsSearchRequest) Token(token string) ApiAdminConversationsSearchRequest {
	r.token = &token
	return r
}

// Comma separated string of team IDs, signifying the workspaces to search through.
func (r ApiAdminConversationsSearchRequest) TeamIds(teamIds string) ApiAdminConversationsSearchRequest {
	r.teamIds = &teamIds
	return r
}

// Name of the the channel to query by.
func (r ApiAdminConversationsSearchRequest) Query(query string) ApiAdminConversationsSearchRequest {
	r.query = &query
	return r
}

// Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
func (r ApiAdminConversationsSearchRequest) Limit(limit int32) ApiAdminConversationsSearchRequest {
	r.limit = &limit
	return r
}

// Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
func (r ApiAdminConversationsSearchRequest) Cursor(cursor string) ApiAdminConversationsSearchRequest {
	r.cursor = &cursor
	return r
}

// The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types).
func (r ApiAdminConversationsSearchRequest) SearchChannelTypes(searchChannelTypes string) ApiAdminConversationsSearchRequest {
	r.searchChannelTypes = &searchChannelTypes
	return r
}

// Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted 
func (r ApiAdminConversationsSearchRequest) Sort(sort string) ApiAdminConversationsSearchRequest {
	r.sort = &sort
	return r
}

// Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a)
func (r ApiAdminConversationsSearchRequest) SortDir(sortDir string) ApiAdminConversationsSearchRequest {
	r.sortDir = &sortDir
	return r
}

func (r ApiAdminConversationsSearchRequest) Execute() (*AdminConversationsSearchSchema, *http.Response, error) {
	return r.ApiService.AdminConversationsSearchExecute(r)
}

/*
AdminConversationsSearch Method for AdminConversationsSearch

Search for public or private channels in an Enterprise organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsSearchRequest
*/
func (a *AdminApiService) AdminConversationsSearch(ctx context.Context) ApiAdminConversationsSearchRequest {
	return ApiAdminConversationsSearchRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdminConversationsSearchSchema
func (a *AdminApiService) AdminConversationsSearchExecute(r ApiAdminConversationsSearchRequest) (*AdminConversationsSearchSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdminConversationsSearchSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsSearch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.search"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	if r.teamIds != nil {
		localVarQueryParams.Add("team_ids", parameterToString(*r.teamIds, ""))
	}
	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.searchChannelTypes != nil {
		localVarQueryParams.Add("search_channel_types", parameterToString(*r.searchChannelTypes, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.sortDir != nil {
		localVarQueryParams.Add("sort_dir", parameterToString(*r.sortDir, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AdminConversationsSearchErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsSetConversationPrefsRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelId *string
	prefs *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsSetConversationPrefsRequest) Token(token string) ApiAdminConversationsSetConversationPrefsRequest {
	r.token = &token
	return r
}

// The channel to set the prefs for
func (r ApiAdminConversationsSetConversationPrefsRequest) ChannelId(channelId string) ApiAdminConversationsSetConversationPrefsRequest {
	r.channelId = &channelId
	return r
}

// The prefs for this channel in a stringified JSON format.
func (r ApiAdminConversationsSetConversationPrefsRequest) Prefs(prefs string) ApiAdminConversationsSetConversationPrefsRequest {
	r.prefs = &prefs
	return r
}

func (r ApiAdminConversationsSetConversationPrefsRequest) Execute() (*AdminConversationsSetConversationPrefsSchema, *http.Response, error) {
	return r.ApiService.AdminConversationsSetConversationPrefsExecute(r)
}

/*
AdminConversationsSetConversationPrefs Method for AdminConversationsSetConversationPrefs

Set the posting permissions for a public or private channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsSetConversationPrefsRequest
*/
func (a *AdminApiService) AdminConversationsSetConversationPrefs(ctx context.Context) ApiAdminConversationsSetConversationPrefsRequest {
	return ApiAdminConversationsSetConversationPrefsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdminConversationsSetConversationPrefsSchema
func (a *AdminApiService) AdminConversationsSetConversationPrefsExecute(r ApiAdminConversationsSetConversationPrefsRequest) (*AdminConversationsSetConversationPrefsSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdminConversationsSetConversationPrefsSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsSetConversationPrefs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.setConversationPrefs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}
	if r.prefs == nil {
		return localVarReturnValue, nil, reportError("prefs is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_id", parameterToString(*r.channelId, ""))
	localVarFormParams.Add("prefs", parameterToString(*r.prefs, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AdminConversationsSetConversationPrefsErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsSetTeamsRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelId *string
	orgChannel *bool
	targetTeamIds *string
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsSetTeamsRequest) Token(token string) ApiAdminConversationsSetTeamsRequest {
	r.token = &token
	return r
}

// The encoded &#x60;channel_id&#x60; to add or remove to workspaces.
func (r ApiAdminConversationsSetTeamsRequest) ChannelId(channelId string) ApiAdminConversationsSetTeamsRequest {
	r.channelId = &channelId
	return r
}

// True if channel has to be converted to an org channel
func (r ApiAdminConversationsSetTeamsRequest) OrgChannel(orgChannel bool) ApiAdminConversationsSetTeamsRequest {
	r.orgChannel = &orgChannel
	return r
}

// A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
func (r ApiAdminConversationsSetTeamsRequest) TargetTeamIds(targetTeamIds string) ApiAdminConversationsSetTeamsRequest {
	r.targetTeamIds = &targetTeamIds
	return r
}

// The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.
func (r ApiAdminConversationsSetTeamsRequest) TeamId(teamId string) ApiAdminConversationsSetTeamsRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminConversationsSetTeamsRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminConversationsSetTeamsExecute(r)
}

/*
AdminConversationsSetTeams Method for AdminConversationsSetTeams

Set the workspaces in an Enterprise grid org that connect to a public or private channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsSetTeamsRequest
*/
func (a *AdminApiService) AdminConversationsSetTeams(ctx context.Context) ApiAdminConversationsSetTeamsRequest {
	return ApiAdminConversationsSetTeamsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminConversationsSetTeamsExecute(r ApiAdminConversationsSetTeamsRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsSetTeams")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.setTeams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_id", parameterToString(*r.channelId, ""))
	if r.orgChannel != nil {
		localVarFormParams.Add("org_channel", parameterToString(*r.orgChannel, ""))
	}
	if r.targetTeamIds != nil {
		localVarFormParams.Add("target_team_ids", parameterToString(*r.targetTeamIds, ""))
	}
	if r.teamId != nil {
		localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsUnarchiveRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelId *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsUnarchiveRequest) Token(token string) ApiAdminConversationsUnarchiveRequest {
	r.token = &token
	return r
}

// The channel to unarchive.
func (r ApiAdminConversationsUnarchiveRequest) ChannelId(channelId string) ApiAdminConversationsUnarchiveRequest {
	r.channelId = &channelId
	return r
}

func (r ApiAdminConversationsUnarchiveRequest) Execute() (*AdminConversationsUnarchiveSchema, *http.Response, error) {
	return r.ApiService.AdminConversationsUnarchiveExecute(r)
}

/*
AdminConversationsUnarchive Method for AdminConversationsUnarchive

Unarchive a public or private channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsUnarchiveRequest
*/
func (a *AdminApiService) AdminConversationsUnarchive(ctx context.Context) ApiAdminConversationsUnarchiveRequest {
	return ApiAdminConversationsUnarchiveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AdminConversationsUnarchiveSchema
func (a *AdminApiService) AdminConversationsUnarchiveExecute(r ApiAdminConversationsUnarchiveRequest) (*AdminConversationsUnarchiveSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AdminConversationsUnarchiveSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminConversationsUnarchive")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.unarchive"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_id", parameterToString(*r.channelId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AdminConversationsUnarchiveErrorSchema2
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminEmojiAddRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	name *string
	token *string
	url *string
}

// The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
func (r ApiAdminEmojiAddRequest) Name(name string) ApiAdminEmojiAddRequest {
	r.name = &name
	return r
}

// Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
func (r ApiAdminEmojiAddRequest) Token(token string) ApiAdminEmojiAddRequest {
	r.token = &token
	return r
}

// The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
func (r ApiAdminEmojiAddRequest) Url(url string) ApiAdminEmojiAddRequest {
	r.url = &url
	return r
}

func (r ApiAdminEmojiAddRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminEmojiAddExecute(r)
}

/*
AdminEmojiAdd Method for AdminEmojiAdd

Add an emoji.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminEmojiAddRequest
*/
func (a *AdminApiService) AdminEmojiAdd(ctx context.Context) ApiAdminEmojiAddRequest {
	return ApiAdminEmojiAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminEmojiAddExecute(r ApiAdminEmojiAddRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminEmojiAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.emoji.add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.url == nil {
		return localVarReturnValue, nil, reportError("url is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("name", parameterToString(*r.name, ""))
	localVarFormParams.Add("token", parameterToString(*r.token, ""))
	localVarFormParams.Add("url", parameterToString(*r.url, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminEmojiAddAliasRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	aliasFor *string
	name *string
	token *string
}

// The alias of the emoji.
func (r ApiAdminEmojiAddAliasRequest) AliasFor(aliasFor string) ApiAdminEmojiAddAliasRequest {
	r.aliasFor = &aliasFor
	return r
}

// The name of the emoji to be aliased. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
func (r ApiAdminEmojiAddAliasRequest) Name(name string) ApiAdminEmojiAddAliasRequest {
	r.name = &name
	return r
}

// Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
func (r ApiAdminEmojiAddAliasRequest) Token(token string) ApiAdminEmojiAddAliasRequest {
	r.token = &token
	return r
}

func (r ApiAdminEmojiAddAliasRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminEmojiAddAliasExecute(r)
}

/*
AdminEmojiAddAlias Method for AdminEmojiAddAlias

Add an emoji alias.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminEmojiAddAliasRequest
*/
func (a *AdminApiService) AdminEmojiAddAlias(ctx context.Context) ApiAdminEmojiAddAliasRequest {
	return ApiAdminEmojiAddAliasRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminEmojiAddAliasExecute(r ApiAdminEmojiAddAliasRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminEmojiAddAlias")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.emoji.addAlias"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.aliasFor == nil {
		return localVarReturnValue, nil, reportError("aliasFor is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("alias_for", parameterToString(*r.aliasFor, ""))
	localVarFormParams.Add("name", parameterToString(*r.name, ""))
	localVarFormParams.Add("token", parameterToString(*r.token, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminEmojiListRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	cursor *string
	limit *int32
}

// Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
func (r ApiAdminEmojiListRequest) Token(token string) ApiAdminEmojiListRequest {
	r.token = &token
	return r
}

// Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
func (r ApiAdminEmojiListRequest) Cursor(cursor string) ApiAdminEmojiListRequest {
	r.cursor = &cursor
	return r
}

// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
func (r ApiAdminEmojiListRequest) Limit(limit int32) ApiAdminEmojiListRequest {
	r.limit = &limit
	return r
}

func (r ApiAdminEmojiListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminEmojiListExecute(r)
}

/*
AdminEmojiList Method for AdminEmojiList

List emoji for an Enterprise Grid organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminEmojiListRequest
*/
func (a *AdminApiService) AdminEmojiList(ctx context.Context) ApiAdminEmojiListRequest {
	return ApiAdminEmojiListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminEmojiListExecute(r ApiAdminEmojiListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminEmojiList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.emoji.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminEmojiRemoveRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	name *string
	token *string
}

// The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
func (r ApiAdminEmojiRemoveRequest) Name(name string) ApiAdminEmojiRemoveRequest {
	r.name = &name
	return r
}

// Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
func (r ApiAdminEmojiRemoveRequest) Token(token string) ApiAdminEmojiRemoveRequest {
	r.token = &token
	return r
}

func (r ApiAdminEmojiRemoveRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminEmojiRemoveExecute(r)
}

/*
AdminEmojiRemove Method for AdminEmojiRemove

Remove an emoji across an Enterprise Grid organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminEmojiRemoveRequest
*/
func (a *AdminApiService) AdminEmojiRemove(ctx context.Context) ApiAdminEmojiRemoveRequest {
	return ApiAdminEmojiRemoveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminEmojiRemoveExecute(r ApiAdminEmojiRemoveRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminEmojiRemove")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.emoji.remove"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("name", parameterToString(*r.name, ""))
	localVarFormParams.Add("token", parameterToString(*r.token, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminEmojiRenameRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	name *string
	newName *string
	token *string
}

// The name of the emoji to be renamed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
func (r ApiAdminEmojiRenameRequest) Name(name string) ApiAdminEmojiRenameRequest {
	r.name = &name
	return r
}

// The new name of the emoji.
func (r ApiAdminEmojiRenameRequest) NewName(newName string) ApiAdminEmojiRenameRequest {
	r.newName = &newName
	return r
}

// Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
func (r ApiAdminEmojiRenameRequest) Token(token string) ApiAdminEmojiRenameRequest {
	r.token = &token
	return r
}

func (r ApiAdminEmojiRenameRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminEmojiRenameExecute(r)
}

/*
AdminEmojiRename Method for AdminEmojiRename

Rename an emoji.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminEmojiRenameRequest
*/
func (a *AdminApiService) AdminEmojiRename(ctx context.Context) ApiAdminEmojiRenameRequest {
	return ApiAdminEmojiRenameRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminEmojiRenameExecute(r ApiAdminEmojiRenameRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminEmojiRename")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.emoji.rename"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if r.newName == nil {
		return localVarReturnValue, nil, reportError("newName is required and must be specified")
	}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("name", parameterToString(*r.name, ""))
	localVarFormParams.Add("new_name", parameterToString(*r.newName, ""))
	localVarFormParams.Add("token", parameterToString(*r.token, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminInviteRequestsApproveRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	adminInviteRequestsApproveRequest *AdminInviteRequestsApproveRequest
}

// Authentication token. Requires scope: &#x60;admin.invites:write&#x60;
func (r ApiAdminInviteRequestsApproveRequest) Token(token string) ApiAdminInviteRequestsApproveRequest {
	r.token = &token
	return r
}

func (r ApiAdminInviteRequestsApproveRequest) AdminInviteRequestsApproveRequest(adminInviteRequestsApproveRequest AdminInviteRequestsApproveRequest) ApiAdminInviteRequestsApproveRequest {
	r.adminInviteRequestsApproveRequest = &adminInviteRequestsApproveRequest
	return r
}

func (r ApiAdminInviteRequestsApproveRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminInviteRequestsApproveExecute(r)
}

/*
AdminInviteRequestsApprove Method for AdminInviteRequestsApprove

Approve a workspace invite request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminInviteRequestsApproveRequest
*/
func (a *AdminApiService) AdminInviteRequestsApprove(ctx context.Context) ApiAdminInviteRequestsApproveRequest {
	return ApiAdminInviteRequestsApproveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminInviteRequestsApproveExecute(r ApiAdminInviteRequestsApproveRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminInviteRequestsApprove")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.inviteRequests.approve"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	// body params
	localVarPostBody = r.adminInviteRequestsApproveRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminInviteRequestsApprovedListRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamId *string
	cursor *string
	limit *int32
}

// Authentication token. Requires scope: &#x60;admin.invites:read&#x60;
func (r ApiAdminInviteRequestsApprovedListRequest) Token(token string) ApiAdminInviteRequestsApprovedListRequest {
	r.token = &token
	return r
}

// ID for the workspace where the invite requests were made.
func (r ApiAdminInviteRequestsApprovedListRequest) TeamId(teamId string) ApiAdminInviteRequestsApprovedListRequest {
	r.teamId = &teamId
	return r
}

// Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response
func (r ApiAdminInviteRequestsApprovedListRequest) Cursor(cursor string) ApiAdminInviteRequestsApprovedListRequest {
	r.cursor = &cursor
	return r
}

// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
func (r ApiAdminInviteRequestsApprovedListRequest) Limit(limit int32) ApiAdminInviteRequestsApprovedListRequest {
	r.limit = &limit
	return r
}

func (r ApiAdminInviteRequestsApprovedListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminInviteRequestsApprovedListExecute(r)
}

/*
AdminInviteRequestsApprovedList Method for AdminInviteRequestsApprovedList

List all approved workspace invite requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminInviteRequestsApprovedListRequest
*/
func (a *AdminApiService) AdminInviteRequestsApprovedList(ctx context.Context) ApiAdminInviteRequestsApprovedListRequest {
	return ApiAdminInviteRequestsApprovedListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminInviteRequestsApprovedListExecute(r ApiAdminInviteRequestsApprovedListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminInviteRequestsApprovedList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.inviteRequests.approved.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	if r.teamId != nil {
		localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminInviteRequestsDeniedListRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamId *string
	cursor *string
	limit *int32
}

// Authentication token. Requires scope: &#x60;admin.invites:read&#x60;
func (r ApiAdminInviteRequestsDeniedListRequest) Token(token string) ApiAdminInviteRequestsDeniedListRequest {
	r.token = &token
	return r
}

// ID for the workspace where the invite requests were made.
func (r ApiAdminInviteRequestsDeniedListRequest) TeamId(teamId string) ApiAdminInviteRequestsDeniedListRequest {
	r.teamId = &teamId
	return r
}

// Value of the &#x60;next_cursor&#x60; field sent as part of the previous api response
func (r ApiAdminInviteRequestsDeniedListRequest) Cursor(cursor string) ApiAdminInviteRequestsDeniedListRequest {
	r.cursor = &cursor
	return r
}

// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive
func (r ApiAdminInviteRequestsDeniedListRequest) Limit(limit int32) ApiAdminInviteRequestsDeniedListRequest {
	r.limit = &limit
	return r
}

func (r ApiAdminInviteRequestsDeniedListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminInviteRequestsDeniedListExecute(r)
}

/*
AdminInviteRequestsDeniedList Method for AdminInviteRequestsDeniedList

List all denied workspace invite requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminInviteRequestsDeniedListRequest
*/
func (a *AdminApiService) AdminInviteRequestsDeniedList(ctx context.Context) ApiAdminInviteRequestsDeniedListRequest {
	return ApiAdminInviteRequestsDeniedListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminInviteRequestsDeniedListExecute(r ApiAdminInviteRequestsDeniedListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminInviteRequestsDeniedList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.inviteRequests.denied.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	if r.teamId != nil {
		localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminInviteRequestsDenyRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	adminInviteRequestsApproveRequest *AdminInviteRequestsApproveRequest
}

// Authentication token. Requires scope: &#x60;admin.invites:write&#x60;
func (r ApiAdminInviteRequestsDenyRequest) Token(token string) ApiAdminInviteRequestsDenyRequest {
	r.token = &token
	return r
}

func (r ApiAdminInviteRequestsDenyRequest) AdminInviteRequestsApproveRequest(adminInviteRequestsApproveRequest AdminInviteRequestsApproveRequest) ApiAdminInviteRequestsDenyRequest {
	r.adminInviteRequestsApproveRequest = &adminInviteRequestsApproveRequest
	return r
}

func (r ApiAdminInviteRequestsDenyRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminInviteRequestsDenyExecute(r)
}

/*
AdminInviteRequestsDeny Method for AdminInviteRequestsDeny

Deny a workspace invite request.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminInviteRequestsDenyRequest
*/
func (a *AdminApiService) AdminInviteRequestsDeny(ctx context.Context) ApiAdminInviteRequestsDenyRequest {
	return ApiAdminInviteRequestsDenyRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminInviteRequestsDenyExecute(r ApiAdminInviteRequestsDenyRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminInviteRequestsDeny")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.inviteRequests.deny"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	// body params
	localVarPostBody = r.adminInviteRequestsApproveRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminInviteRequestsListRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamId *string
	cursor *string
	limit *int32
}

// Authentication token. Requires scope: &#x60;admin.invites:read&#x60;
func (r ApiAdminInviteRequestsListRequest) Token(token string) ApiAdminInviteRequestsListRequest {
	r.token = &token
	return r
}

// ID for the workspace where the invite requests were made.
func (r ApiAdminInviteRequestsListRequest) TeamId(teamId string) ApiAdminInviteRequestsListRequest {
	r.teamId = &teamId
	return r
}

// Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response
func (r ApiAdminInviteRequestsListRequest) Cursor(cursor string) ApiAdminInviteRequestsListRequest {
	r.cursor = &cursor
	return r
}

// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
func (r ApiAdminInviteRequestsListRequest) Limit(limit int32) ApiAdminInviteRequestsListRequest {
	r.limit = &limit
	return r
}

func (r ApiAdminInviteRequestsListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminInviteRequestsListExecute(r)
}

/*
AdminInviteRequestsList Method for AdminInviteRequestsList

List all pending workspace invite requests.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminInviteRequestsListRequest
*/
func (a *AdminApiService) AdminInviteRequestsList(ctx context.Context) ApiAdminInviteRequestsListRequest {
	return ApiAdminInviteRequestsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminInviteRequestsListExecute(r ApiAdminInviteRequestsListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminInviteRequestsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.inviteRequests.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	if r.teamId != nil {
		localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminTeamsAdminsListRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamId *string
	limit *int32
	cursor *string
}

// Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
func (r ApiAdminTeamsAdminsListRequest) Token(token string) ApiAdminTeamsAdminsListRequest {
	r.token = &token
	return r
}

func (r ApiAdminTeamsAdminsListRequest) TeamId(teamId string) ApiAdminTeamsAdminsListRequest {
	r.teamId = &teamId
	return r
}

// The maximum number of items to return.
func (r ApiAdminTeamsAdminsListRequest) Limit(limit int32) ApiAdminTeamsAdminsListRequest {
	r.limit = &limit
	return r
}

// Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
func (r ApiAdminTeamsAdminsListRequest) Cursor(cursor string) ApiAdminTeamsAdminsListRequest {
	r.cursor = &cursor
	return r
}

func (r ApiAdminTeamsAdminsListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminTeamsAdminsListExecute(r)
}

/*
AdminTeamsAdminsList Method for AdminTeamsAdminsList

List all of the admins on a given workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminTeamsAdminsListRequest
*/
func (a *AdminApiService) AdminTeamsAdminsList(ctx context.Context) ApiAdminTeamsAdminsListRequest {
	return ApiAdminTeamsAdminsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminTeamsAdminsListExecute(r ApiAdminTeamsAdminsListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminTeamsAdminsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.teams.admins.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminTeamsCreateRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamDomain *string
	teamName *string
	teamDescription *string
	teamDiscoverability *string
}

// Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
func (r ApiAdminTeamsCreateRequest) Token(token string) ApiAdminTeamsCreateRequest {
	r.token = &token
	return r
}

// Team domain (for example, slacksoftballteam).
func (r ApiAdminTeamsCreateRequest) TeamDomain(teamDomain string) ApiAdminTeamsCreateRequest {
	r.teamDomain = &teamDomain
	return r
}

// Team name (for example, Slack Softball Team).
func (r ApiAdminTeamsCreateRequest) TeamName(teamName string) ApiAdminTeamsCreateRequest {
	r.teamName = &teamName
	return r
}

// Description for the team.
func (r ApiAdminTeamsCreateRequest) TeamDescription(teamDescription string) ApiAdminTeamsCreateRequest {
	r.teamDescription = &teamDescription
	return r
}

// Who can join the team. A team&#39;s discoverability can be &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;invite_only&#x60;, or &#x60;unlisted&#x60;.
func (r ApiAdminTeamsCreateRequest) TeamDiscoverability(teamDiscoverability string) ApiAdminTeamsCreateRequest {
	r.teamDiscoverability = &teamDiscoverability
	return r
}

func (r ApiAdminTeamsCreateRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminTeamsCreateExecute(r)
}

/*
AdminTeamsCreate Method for AdminTeamsCreate

Create an Enterprise team.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminTeamsCreateRequest
*/
func (a *AdminApiService) AdminTeamsCreate(ctx context.Context) ApiAdminTeamsCreateRequest {
	return ApiAdminTeamsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminTeamsCreateExecute(r ApiAdminTeamsCreateRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminTeamsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.teams.create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamDomain == nil {
		return localVarReturnValue, nil, reportError("teamDomain is required and must be specified")
	}
	if r.teamName == nil {
		return localVarReturnValue, nil, reportError("teamName is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.teamDescription != nil {
		localVarFormParams.Add("team_description", parameterToString(*r.teamDescription, ""))
	}
	if r.teamDiscoverability != nil {
		localVarFormParams.Add("team_discoverability", parameterToString(*r.teamDiscoverability, ""))
	}
	localVarFormParams.Add("team_domain", parameterToString(*r.teamDomain, ""))
	localVarFormParams.Add("team_name", parameterToString(*r.teamName, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminTeamsListRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	limit *int32
	cursor *string
}

// Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
func (r ApiAdminTeamsListRequest) Token(token string) ApiAdminTeamsListRequest {
	r.token = &token
	return r
}

// The maximum number of items to return. Must be between 1 - 100 both inclusive.
func (r ApiAdminTeamsListRequest) Limit(limit int32) ApiAdminTeamsListRequest {
	r.limit = &limit
	return r
}

// Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
func (r ApiAdminTeamsListRequest) Cursor(cursor string) ApiAdminTeamsListRequest {
	r.cursor = &cursor
	return r
}

func (r ApiAdminTeamsListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminTeamsListExecute(r)
}

/*
AdminTeamsList Method for AdminTeamsList

List all teams on an Enterprise organization

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminTeamsListRequest
*/
func (a *AdminApiService) AdminTeamsList(ctx context.Context) ApiAdminTeamsListRequest {
	return ApiAdminTeamsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminTeamsListExecute(r ApiAdminTeamsListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminTeamsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.teams.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminTeamsOwnersListRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamId *string
	limit *int32
	cursor *string
}

// Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
func (r ApiAdminTeamsOwnersListRequest) Token(token string) ApiAdminTeamsOwnersListRequest {
	r.token = &token
	return r
}

func (r ApiAdminTeamsOwnersListRequest) TeamId(teamId string) ApiAdminTeamsOwnersListRequest {
	r.teamId = &teamId
	return r
}

// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
func (r ApiAdminTeamsOwnersListRequest) Limit(limit int32) ApiAdminTeamsOwnersListRequest {
	r.limit = &limit
	return r
}

// Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
func (r ApiAdminTeamsOwnersListRequest) Cursor(cursor string) ApiAdminTeamsOwnersListRequest {
	r.cursor = &cursor
	return r
}

func (r ApiAdminTeamsOwnersListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminTeamsOwnersListExecute(r)
}

/*
AdminTeamsOwnersList Method for AdminTeamsOwnersList

List all of the owners on a given workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminTeamsOwnersListRequest
*/
func (a *AdminApiService) AdminTeamsOwnersList(ctx context.Context) ApiAdminTeamsOwnersListRequest {
	return ApiAdminTeamsOwnersListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminTeamsOwnersListExecute(r ApiAdminTeamsOwnersListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminTeamsOwnersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.teams.owners.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminTeamsSettingsInfoRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
func (r ApiAdminTeamsSettingsInfoRequest) Token(token string) ApiAdminTeamsSettingsInfoRequest {
	r.token = &token
	return r
}

func (r ApiAdminTeamsSettingsInfoRequest) TeamId(teamId string) ApiAdminTeamsSettingsInfoRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminTeamsSettingsInfoRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminTeamsSettingsInfoExecute(r)
}

/*
AdminTeamsSettingsInfo Method for AdminTeamsSettingsInfo

Fetch information about settings in a workspace

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminTeamsSettingsInfoRequest
*/
func (a *AdminApiService) AdminTeamsSettingsInfo(ctx context.Context) ApiAdminTeamsSettingsInfoRequest {
	return ApiAdminTeamsSettingsInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminTeamsSettingsInfoExecute(r ApiAdminTeamsSettingsInfoRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminTeamsSettingsInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.teams.settings.info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}

	localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminTeamsSettingsSetDefaultChannelsRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	channelIds *string
	teamId *string
	token *string
}

// An array of channel IDs.
func (r ApiAdminTeamsSettingsSetDefaultChannelsRequest) ChannelIds(channelIds string) ApiAdminTeamsSettingsSetDefaultChannelsRequest {
	r.channelIds = &channelIds
	return r
}

// ID for the workspace to set the default channel for.
func (r ApiAdminTeamsSettingsSetDefaultChannelsRequest) TeamId(teamId string) ApiAdminTeamsSettingsSetDefaultChannelsRequest {
	r.teamId = &teamId
	return r
}

// Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
func (r ApiAdminTeamsSettingsSetDefaultChannelsRequest) Token(token string) ApiAdminTeamsSettingsSetDefaultChannelsRequest {
	r.token = &token
	return r
}

func (r ApiAdminTeamsSettingsSetDefaultChannelsRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminTeamsSettingsSetDefaultChannelsExecute(r)
}

/*
AdminTeamsSettingsSetDefaultChannels Method for AdminTeamsSettingsSetDefaultChannels

Set the default channels of a workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminTeamsSettingsSetDefaultChannelsRequest
*/
func (a *AdminApiService) AdminTeamsSettingsSetDefaultChannels(ctx context.Context) ApiAdminTeamsSettingsSetDefaultChannelsRequest {
	return ApiAdminTeamsSettingsSetDefaultChannelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminTeamsSettingsSetDefaultChannelsExecute(r ApiAdminTeamsSettingsSetDefaultChannelsRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminTeamsSettingsSetDefaultChannels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.teams.settings.setDefaultChannels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.channelIds == nil {
		return localVarReturnValue, nil, reportError("channelIds is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("channel_ids", parameterToString(*r.channelIds, ""))
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("token", parameterToString(*r.token, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminTeamsSettingsSetDescriptionRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	description *string
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
func (r ApiAdminTeamsSettingsSetDescriptionRequest) Token(token string) ApiAdminTeamsSettingsSetDescriptionRequest {
	r.token = &token
	return r
}

// The new description for the workspace.
func (r ApiAdminTeamsSettingsSetDescriptionRequest) Description(description string) ApiAdminTeamsSettingsSetDescriptionRequest {
	r.description = &description
	return r
}

// ID for the workspace to set the description for.
func (r ApiAdminTeamsSettingsSetDescriptionRequest) TeamId(teamId string) ApiAdminTeamsSettingsSetDescriptionRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminTeamsSettingsSetDescriptionRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminTeamsSettingsSetDescriptionExecute(r)
}

/*
AdminTeamsSettingsSetDescription Method for AdminTeamsSettingsSetDescription

Set the description of a given workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminTeamsSettingsSetDescriptionRequest
*/
func (a *AdminApiService) AdminTeamsSettingsSetDescription(ctx context.Context) ApiAdminTeamsSettingsSetDescriptionRequest {
	return ApiAdminTeamsSettingsSetDescriptionRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminTeamsSettingsSetDescriptionExecute(r ApiAdminTeamsSettingsSetDescriptionRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminTeamsSettingsSetDescription")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.teams.settings.setDescription"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.description == nil {
		return localVarReturnValue, nil, reportError("description is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("description", parameterToString(*r.description, ""))
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminTeamsSettingsSetDiscoverabilityRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	discoverability *string
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
func (r ApiAdminTeamsSettingsSetDiscoverabilityRequest) Token(token string) ApiAdminTeamsSettingsSetDiscoverabilityRequest {
	r.token = &token
	return r
}

// This workspace&#39;s discovery setting. It must be set to one of &#x60;open&#x60;, &#x60;invite_only&#x60;, &#x60;closed&#x60;, or &#x60;unlisted&#x60;.
func (r ApiAdminTeamsSettingsSetDiscoverabilityRequest) Discoverability(discoverability string) ApiAdminTeamsSettingsSetDiscoverabilityRequest {
	r.discoverability = &discoverability
	return r
}

// The ID of the workspace to set discoverability on.
func (r ApiAdminTeamsSettingsSetDiscoverabilityRequest) TeamId(teamId string) ApiAdminTeamsSettingsSetDiscoverabilityRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminTeamsSettingsSetDiscoverabilityRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminTeamsSettingsSetDiscoverabilityExecute(r)
}

/*
AdminTeamsSettingsSetDiscoverability Method for AdminTeamsSettingsSetDiscoverability

An API method that allows admins to set the discoverability of a given workspace

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminTeamsSettingsSetDiscoverabilityRequest
*/
func (a *AdminApiService) AdminTeamsSettingsSetDiscoverability(ctx context.Context) ApiAdminTeamsSettingsSetDiscoverabilityRequest {
	return ApiAdminTeamsSettingsSetDiscoverabilityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminTeamsSettingsSetDiscoverabilityExecute(r ApiAdminTeamsSettingsSetDiscoverabilityRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminTeamsSettingsSetDiscoverability")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.teams.settings.setDiscoverability"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.discoverability == nil {
		return localVarReturnValue, nil, reportError("discoverability is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("discoverability", parameterToString(*r.discoverability, ""))
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminTeamsSettingsSetIconRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	imageUrl *string
	teamId *string
	token *string
}

// Image URL for the icon
func (r ApiAdminTeamsSettingsSetIconRequest) ImageUrl(imageUrl string) ApiAdminTeamsSettingsSetIconRequest {
	r.imageUrl = &imageUrl
	return r
}

// ID for the workspace to set the icon for.
func (r ApiAdminTeamsSettingsSetIconRequest) TeamId(teamId string) ApiAdminTeamsSettingsSetIconRequest {
	r.teamId = &teamId
	return r
}

// Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
func (r ApiAdminTeamsSettingsSetIconRequest) Token(token string) ApiAdminTeamsSettingsSetIconRequest {
	r.token = &token
	return r
}

func (r ApiAdminTeamsSettingsSetIconRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminTeamsSettingsSetIconExecute(r)
}

/*
AdminTeamsSettingsSetIcon Method for AdminTeamsSettingsSetIcon

Sets the icon of a workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminTeamsSettingsSetIconRequest
*/
func (a *AdminApiService) AdminTeamsSettingsSetIcon(ctx context.Context) ApiAdminTeamsSettingsSetIconRequest {
	return ApiAdminTeamsSettingsSetIconRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminTeamsSettingsSetIconExecute(r ApiAdminTeamsSettingsSetIconRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminTeamsSettingsSetIcon")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.teams.settings.setIcon"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.imageUrl == nil {
		return localVarReturnValue, nil, reportError("imageUrl is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("image_url", parameterToString(*r.imageUrl, ""))
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("token", parameterToString(*r.token, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminTeamsSettingsSetNameRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	name *string
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
func (r ApiAdminTeamsSettingsSetNameRequest) Token(token string) ApiAdminTeamsSettingsSetNameRequest {
	r.token = &token
	return r
}

// The new name of the workspace.
func (r ApiAdminTeamsSettingsSetNameRequest) Name(name string) ApiAdminTeamsSettingsSetNameRequest {
	r.name = &name
	return r
}

// ID for the workspace to set the name for.
func (r ApiAdminTeamsSettingsSetNameRequest) TeamId(teamId string) ApiAdminTeamsSettingsSetNameRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminTeamsSettingsSetNameRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminTeamsSettingsSetNameExecute(r)
}

/*
AdminTeamsSettingsSetName Method for AdminTeamsSettingsSetName

Set the name of a given workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminTeamsSettingsSetNameRequest
*/
func (a *AdminApiService) AdminTeamsSettingsSetName(ctx context.Context) ApiAdminTeamsSettingsSetNameRequest {
	return ApiAdminTeamsSettingsSetNameRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminTeamsSettingsSetNameExecute(r ApiAdminTeamsSettingsSetNameRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminTeamsSettingsSetName")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.teams.settings.setName"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.name == nil {
		return localVarReturnValue, nil, reportError("name is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("name", parameterToString(*r.name, ""))
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsergroupsAddChannelsRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelIds *string
	usergroupId *string
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
func (r ApiAdminUsergroupsAddChannelsRequest) Token(token string) ApiAdminUsergroupsAddChannelsRequest {
	r.token = &token
	return r
}

// Comma separated string of channel IDs.
func (r ApiAdminUsergroupsAddChannelsRequest) ChannelIds(channelIds string) ApiAdminUsergroupsAddChannelsRequest {
	r.channelIds = &channelIds
	return r
}

// ID of the IDP group to add default channels for.
func (r ApiAdminUsergroupsAddChannelsRequest) UsergroupId(usergroupId string) ApiAdminUsergroupsAddChannelsRequest {
	r.usergroupId = &usergroupId
	return r
}

// The workspace to add default channels in.
func (r ApiAdminUsergroupsAddChannelsRequest) TeamId(teamId string) ApiAdminUsergroupsAddChannelsRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminUsergroupsAddChannelsRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsergroupsAddChannelsExecute(r)
}

/*
AdminUsergroupsAddChannels Method for AdminUsergroupsAddChannels

Add one or more default channels to an IDP group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsergroupsAddChannelsRequest
*/
func (a *AdminApiService) AdminUsergroupsAddChannels(ctx context.Context) ApiAdminUsergroupsAddChannelsRequest {
	return ApiAdminUsergroupsAddChannelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsergroupsAddChannelsExecute(r ApiAdminUsergroupsAddChannelsRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsergroupsAddChannels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.usergroups.addChannels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelIds == nil {
		return localVarReturnValue, nil, reportError("channelIds is required and must be specified")
	}
	if r.usergroupId == nil {
		return localVarReturnValue, nil, reportError("usergroupId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_ids", parameterToString(*r.channelIds, ""))
	if r.teamId != nil {
		localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	localVarFormParams.Add("usergroup_id", parameterToString(*r.usergroupId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsergroupsAddTeamsRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamIds *string
	usergroupId *string
	autoProvision *bool
}

// Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
func (r ApiAdminUsergroupsAddTeamsRequest) Token(token string) ApiAdminUsergroupsAddTeamsRequest {
	r.token = &token
	return r
}

// A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
func (r ApiAdminUsergroupsAddTeamsRequest) TeamIds(teamIds string) ApiAdminUsergroupsAddTeamsRequest {
	r.teamIds = &teamIds
	return r
}

// An encoded usergroup (IDP Group) ID.
func (r ApiAdminUsergroupsAddTeamsRequest) UsergroupId(usergroupId string) ApiAdminUsergroupsAddTeamsRequest {
	r.usergroupId = &usergroupId
	return r
}

// When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members.
func (r ApiAdminUsergroupsAddTeamsRequest) AutoProvision(autoProvision bool) ApiAdminUsergroupsAddTeamsRequest {
	r.autoProvision = &autoProvision
	return r
}

func (r ApiAdminUsergroupsAddTeamsRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsergroupsAddTeamsExecute(r)
}

/*
AdminUsergroupsAddTeams Method for AdminUsergroupsAddTeams

Associate one or more default workspaces with an organization-wide IDP group.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsergroupsAddTeamsRequest
*/
func (a *AdminApiService) AdminUsergroupsAddTeams(ctx context.Context) ApiAdminUsergroupsAddTeamsRequest {
	return ApiAdminUsergroupsAddTeamsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsergroupsAddTeamsExecute(r ApiAdminUsergroupsAddTeamsRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsergroupsAddTeams")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.usergroups.addTeams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamIds == nil {
		return localVarReturnValue, nil, reportError("teamIds is required and must be specified")
	}
	if r.usergroupId == nil {
		return localVarReturnValue, nil, reportError("usergroupId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.autoProvision != nil {
		localVarFormParams.Add("auto_provision", parameterToString(*r.autoProvision, ""))
	}
	localVarFormParams.Add("team_ids", parameterToString(*r.teamIds, ""))
	localVarFormParams.Add("usergroup_id", parameterToString(*r.usergroupId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsergroupsListChannelsRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	usergroupId *string
	teamId *string
	includeNumMembers *bool
}

// Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60;
func (r ApiAdminUsergroupsListChannelsRequest) Token(token string) ApiAdminUsergroupsListChannelsRequest {
	r.token = &token
	return r
}

// ID of the IDP group to list default channels for.
func (r ApiAdminUsergroupsListChannelsRequest) UsergroupId(usergroupId string) ApiAdminUsergroupsListChannelsRequest {
	r.usergroupId = &usergroupId
	return r
}

// ID of the the workspace.
func (r ApiAdminUsergroupsListChannelsRequest) TeamId(teamId string) ApiAdminUsergroupsListChannelsRequest {
	r.teamId = &teamId
	return r
}

// Flag to include or exclude the count of members per channel.
func (r ApiAdminUsergroupsListChannelsRequest) IncludeNumMembers(includeNumMembers bool) ApiAdminUsergroupsListChannelsRequest {
	r.includeNumMembers = &includeNumMembers
	return r
}

func (r ApiAdminUsergroupsListChannelsRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsergroupsListChannelsExecute(r)
}

/*
AdminUsergroupsListChannels Method for AdminUsergroupsListChannels

List the channels linked to an org-level IDP group (user group).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsergroupsListChannelsRequest
*/
func (a *AdminApiService) AdminUsergroupsListChannels(ctx context.Context) ApiAdminUsergroupsListChannelsRequest {
	return ApiAdminUsergroupsListChannelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsergroupsListChannelsExecute(r ApiAdminUsergroupsListChannelsRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsergroupsListChannels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.usergroups.listChannels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.usergroupId == nil {
		return localVarReturnValue, nil, reportError("usergroupId is required and must be specified")
	}

	localVarQueryParams.Add("usergroup_id", parameterToString(*r.usergroupId, ""))
	if r.teamId != nil {
		localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	if r.includeNumMembers != nil {
		localVarQueryParams.Add("include_num_members", parameterToString(*r.includeNumMembers, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsergroupsRemoveChannelsRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelIds *string
	usergroupId *string
}

// Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
func (r ApiAdminUsergroupsRemoveChannelsRequest) Token(token string) ApiAdminUsergroupsRemoveChannelsRequest {
	r.token = &token
	return r
}

// Comma-separated string of channel IDs
func (r ApiAdminUsergroupsRemoveChannelsRequest) ChannelIds(channelIds string) ApiAdminUsergroupsRemoveChannelsRequest {
	r.channelIds = &channelIds
	return r
}

// ID of the IDP Group
func (r ApiAdminUsergroupsRemoveChannelsRequest) UsergroupId(usergroupId string) ApiAdminUsergroupsRemoveChannelsRequest {
	r.usergroupId = &usergroupId
	return r
}

func (r ApiAdminUsergroupsRemoveChannelsRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsergroupsRemoveChannelsExecute(r)
}

/*
AdminUsergroupsRemoveChannels Method for AdminUsergroupsRemoveChannels

Remove one or more default channels from an org-level IDP group (user group).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsergroupsRemoveChannelsRequest
*/
func (a *AdminApiService) AdminUsergroupsRemoveChannels(ctx context.Context) ApiAdminUsergroupsRemoveChannelsRequest {
	return ApiAdminUsergroupsRemoveChannelsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsergroupsRemoveChannelsExecute(r ApiAdminUsergroupsRemoveChannelsRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsergroupsRemoveChannels")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.usergroups.removeChannels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelIds == nil {
		return localVarReturnValue, nil, reportError("channelIds is required and must be specified")
	}
	if r.usergroupId == nil {
		return localVarReturnValue, nil, reportError("usergroupId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_ids", parameterToString(*r.channelIds, ""))
	localVarFormParams.Add("usergroup_id", parameterToString(*r.usergroupId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersAssignRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamId *string
	userId *string
	channelIds *string
	isRestricted *bool
	isUltraRestricted *bool
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersAssignRequest) Token(token string) ApiAdminUsersAssignRequest {
	r.token = &token
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersAssignRequest) TeamId(teamId string) ApiAdminUsersAssignRequest {
	r.teamId = &teamId
	return r
}

// The ID of the user to add to the workspace.
func (r ApiAdminUsersAssignRequest) UserId(userId string) ApiAdminUsersAssignRequest {
	r.userId = &userId
	return r
}

// Comma separated values of channel IDs to add user in the new workspace.
func (r ApiAdminUsersAssignRequest) ChannelIds(channelIds string) ApiAdminUsersAssignRequest {
	r.channelIds = &channelIds
	return r
}

// True if user should be added to the workspace as a guest.
func (r ApiAdminUsersAssignRequest) IsRestricted(isRestricted bool) ApiAdminUsersAssignRequest {
	r.isRestricted = &isRestricted
	return r
}

// True if user should be added to the workspace as a single-channel guest.
func (r ApiAdminUsersAssignRequest) IsUltraRestricted(isUltraRestricted bool) ApiAdminUsersAssignRequest {
	r.isUltraRestricted = &isUltraRestricted
	return r
}

func (r ApiAdminUsersAssignRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersAssignExecute(r)
}

/*
AdminUsersAssign Method for AdminUsersAssign

Add an Enterprise user to a workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersAssignRequest
*/
func (a *AdminApiService) AdminUsersAssign(ctx context.Context) ApiAdminUsersAssignRequest {
	return ApiAdminUsersAssignRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsersAssignExecute(r ApiAdminUsersAssignRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsersAssign")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.assign"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.channelIds != nil {
		localVarFormParams.Add("channel_ids", parameterToString(*r.channelIds, ""))
	}
	if r.isRestricted != nil {
		localVarFormParams.Add("is_restricted", parameterToString(*r.isRestricted, ""))
	}
	if r.isUltraRestricted != nil {
		localVarFormParams.Add("is_ultra_restricted", parameterToString(*r.isUltraRestricted, ""))
	}
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersInviteRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	channelIds *string
	email *string
	teamId *string
	customMessage *string
	guestExpirationTs *string
	isRestricted *bool
	isUltraRestricted *bool
	realName *string
	resend *bool
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersInviteRequest) Token(token string) ApiAdminUsersInviteRequest {
	r.token = &token
	return r
}

// A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required.
func (r ApiAdminUsersInviteRequest) ChannelIds(channelIds string) ApiAdminUsersInviteRequest {
	r.channelIds = &channelIds
	return r
}

// The email address of the person to invite.
func (r ApiAdminUsersInviteRequest) Email(email string) ApiAdminUsersInviteRequest {
	r.email = &email
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersInviteRequest) TeamId(teamId string) ApiAdminUsersInviteRequest {
	r.teamId = &teamId
	return r
}

// An optional message to send to the user in the invite email.
func (r ApiAdminUsersInviteRequest) CustomMessage(customMessage string) ApiAdminUsersInviteRequest {
	r.customMessage = &customMessage
	return r
}

// Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
func (r ApiAdminUsersInviteRequest) GuestExpirationTs(guestExpirationTs string) ApiAdminUsersInviteRequest {
	r.guestExpirationTs = &guestExpirationTs
	return r
}

// Is this user a multi-channel guest user? (default: false)
func (r ApiAdminUsersInviteRequest) IsRestricted(isRestricted bool) ApiAdminUsersInviteRequest {
	r.isRestricted = &isRestricted
	return r
}

// Is this user a single channel guest user? (default: false)
func (r ApiAdminUsersInviteRequest) IsUltraRestricted(isUltraRestricted bool) ApiAdminUsersInviteRequest {
	r.isUltraRestricted = &isUltraRestricted
	return r
}

// Full name of the user.
func (r ApiAdminUsersInviteRequest) RealName(realName string) ApiAdminUsersInviteRequest {
	r.realName = &realName
	return r
}

// Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
func (r ApiAdminUsersInviteRequest) Resend(resend bool) ApiAdminUsersInviteRequest {
	r.resend = &resend
	return r
}

func (r ApiAdminUsersInviteRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersInviteExecute(r)
}

/*
AdminUsersInvite Method for AdminUsersInvite

Invite a user to a workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersInviteRequest
*/
func (a *AdminApiService) AdminUsersInvite(ctx context.Context) ApiAdminUsersInviteRequest {
	return ApiAdminUsersInviteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsersInviteExecute(r ApiAdminUsersInviteRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsersInvite")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.invite"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelIds == nil {
		return localVarReturnValue, nil, reportError("channelIds is required and must be specified")
	}
	if r.email == nil {
		return localVarReturnValue, nil, reportError("email is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("channel_ids", parameterToString(*r.channelIds, ""))
	if r.customMessage != nil {
		localVarFormParams.Add("custom_message", parameterToString(*r.customMessage, ""))
	}
	localVarFormParams.Add("email", parameterToString(*r.email, ""))
	if r.guestExpirationTs != nil {
		localVarFormParams.Add("guest_expiration_ts", parameterToString(*r.guestExpirationTs, ""))
	}
	if r.isRestricted != nil {
		localVarFormParams.Add("is_restricted", parameterToString(*r.isRestricted, ""))
	}
	if r.isUltraRestricted != nil {
		localVarFormParams.Add("is_ultra_restricted", parameterToString(*r.isUltraRestricted, ""))
	}
	if r.realName != nil {
		localVarFormParams.Add("real_name", parameterToString(*r.realName, ""))
	}
	if r.resend != nil {
		localVarFormParams.Add("resend", parameterToString(*r.resend, ""))
	}
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersListRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamId *string
	cursor *string
	limit *int32
}

// Authentication token. Requires scope: &#x60;admin.users:read&#x60;
func (r ApiAdminUsersListRequest) Token(token string) ApiAdminUsersListRequest {
	r.token = &token
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersListRequest) TeamId(teamId string) ApiAdminUsersListRequest {
	r.teamId = &teamId
	return r
}

// Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
func (r ApiAdminUsersListRequest) Cursor(cursor string) ApiAdminUsersListRequest {
	r.cursor = &cursor
	return r
}

// Limit for how many users to be retrieved per page
func (r ApiAdminUsersListRequest) Limit(limit int32) ApiAdminUsersListRequest {
	r.limit = &limit
	return r
}

func (r ApiAdminUsersListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersListExecute(r)
}

/*
AdminUsersList Method for AdminUsersList

List users on a workspace

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersListRequest
*/
func (a *AdminApiService) AdminUsersList(ctx context.Context) ApiAdminUsersListRequest {
	return ApiAdminUsersListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsersListExecute(r ApiAdminUsersListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}

	localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersRemoveRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamId *string
	userId *string
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersRemoveRequest) Token(token string) ApiAdminUsersRemoveRequest {
	r.token = &token
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersRemoveRequest) TeamId(teamId string) ApiAdminUsersRemoveRequest {
	r.teamId = &teamId
	return r
}

// The ID of the user to remove.
func (r ApiAdminUsersRemoveRequest) UserId(userId string) ApiAdminUsersRemoveRequest {
	r.userId = &userId
	return r
}

func (r ApiAdminUsersRemoveRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersRemoveExecute(r)
}

/*
AdminUsersRemove Method for AdminUsersRemove

Remove a user from a workspace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersRemoveRequest
*/
func (a *AdminApiService) AdminUsersRemove(ctx context.Context) ApiAdminUsersRemoveRequest {
	return ApiAdminUsersRemoveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsersRemoveExecute(r ApiAdminUsersRemoveRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsersRemove")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.remove"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersSessionInvalidateRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	sessionId *int32
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersSessionInvalidateRequest) Token(token string) ApiAdminUsersSessionInvalidateRequest {
	r.token = &token
	return r
}

func (r ApiAdminUsersSessionInvalidateRequest) SessionId(sessionId int32) ApiAdminUsersSessionInvalidateRequest {
	r.sessionId = &sessionId
	return r
}

// ID of the team that the session belongs to
func (r ApiAdminUsersSessionInvalidateRequest) TeamId(teamId string) ApiAdminUsersSessionInvalidateRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminUsersSessionInvalidateRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersSessionInvalidateExecute(r)
}

/*
AdminUsersSessionInvalidate Method for AdminUsersSessionInvalidate

Invalidate a single session for a user by session_id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersSessionInvalidateRequest
*/
func (a *AdminApiService) AdminUsersSessionInvalidate(ctx context.Context) ApiAdminUsersSessionInvalidateRequest {
	return ApiAdminUsersSessionInvalidateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsersSessionInvalidateExecute(r ApiAdminUsersSessionInvalidateRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsersSessionInvalidate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.session.invalidate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.sessionId == nil {
		return localVarReturnValue, nil, reportError("sessionId is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("session_id", parameterToString(*r.sessionId, ""))
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersSessionResetRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	userId *string
	mobileOnly *bool
	webOnly *bool
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersSessionResetRequest) Token(token string) ApiAdminUsersSessionResetRequest {
	r.token = &token
	return r
}

// The ID of the user to wipe sessions for
func (r ApiAdminUsersSessionResetRequest) UserId(userId string) ApiAdminUsersSessionResetRequest {
	r.userId = &userId
	return r
}

// Only expire mobile sessions (default: false)
func (r ApiAdminUsersSessionResetRequest) MobileOnly(mobileOnly bool) ApiAdminUsersSessionResetRequest {
	r.mobileOnly = &mobileOnly
	return r
}

// Only expire web sessions (default: false)
func (r ApiAdminUsersSessionResetRequest) WebOnly(webOnly bool) ApiAdminUsersSessionResetRequest {
	r.webOnly = &webOnly
	return r
}

func (r ApiAdminUsersSessionResetRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersSessionResetExecute(r)
}

/*
AdminUsersSessionReset Method for AdminUsersSessionReset

Wipes all valid sessions on all devices for a given user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersSessionResetRequest
*/
func (a *AdminApiService) AdminUsersSessionReset(ctx context.Context) ApiAdminUsersSessionResetRequest {
	return ApiAdminUsersSessionResetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsersSessionResetExecute(r ApiAdminUsersSessionResetRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsersSessionReset")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.session.reset"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.mobileOnly != nil {
		localVarFormParams.Add("mobile_only", parameterToString(*r.mobileOnly, ""))
	}
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	if r.webOnly != nil {
		localVarFormParams.Add("web_only", parameterToString(*r.webOnly, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersSetAdminRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamId *string
	userId *string
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersSetAdminRequest) Token(token string) ApiAdminUsersSetAdminRequest {
	r.token = &token
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersSetAdminRequest) TeamId(teamId string) ApiAdminUsersSetAdminRequest {
	r.teamId = &teamId
	return r
}

// The ID of the user to designate as an admin.
func (r ApiAdminUsersSetAdminRequest) UserId(userId string) ApiAdminUsersSetAdminRequest {
	r.userId = &userId
	return r
}

func (r ApiAdminUsersSetAdminRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersSetAdminExecute(r)
}

/*
AdminUsersSetAdmin Method for AdminUsersSetAdmin

Set an existing guest, regular user, or owner to be an admin user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersSetAdminRequest
*/
func (a *AdminApiService) AdminUsersSetAdmin(ctx context.Context) ApiAdminUsersSetAdminRequest {
	return ApiAdminUsersSetAdminRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsersSetAdminExecute(r ApiAdminUsersSetAdminRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsersSetAdmin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.setAdmin"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersSetExpirationRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	expirationTs *int32
	teamId *string
	userId *string
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersSetExpirationRequest) Token(token string) ApiAdminUsersSetExpirationRequest {
	r.token = &token
	return r
}

// Timestamp when guest account should be disabled.
func (r ApiAdminUsersSetExpirationRequest) ExpirationTs(expirationTs int32) ApiAdminUsersSetExpirationRequest {
	r.expirationTs = &expirationTs
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersSetExpirationRequest) TeamId(teamId string) ApiAdminUsersSetExpirationRequest {
	r.teamId = &teamId
	return r
}

// The ID of the user to set an expiration for.
func (r ApiAdminUsersSetExpirationRequest) UserId(userId string) ApiAdminUsersSetExpirationRequest {
	r.userId = &userId
	return r
}

func (r ApiAdminUsersSetExpirationRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersSetExpirationExecute(r)
}

/*
AdminUsersSetExpiration Method for AdminUsersSetExpiration

Set an expiration for a guest user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersSetExpirationRequest
*/
func (a *AdminApiService) AdminUsersSetExpiration(ctx context.Context) ApiAdminUsersSetExpirationRequest {
	return ApiAdminUsersSetExpirationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsersSetExpirationExecute(r ApiAdminUsersSetExpirationRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsersSetExpiration")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.setExpiration"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.expirationTs == nil {
		return localVarReturnValue, nil, reportError("expirationTs is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("expiration_ts", parameterToString(*r.expirationTs, ""))
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersSetOwnerRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamId *string
	userId *string
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersSetOwnerRequest) Token(token string) ApiAdminUsersSetOwnerRequest {
	r.token = &token
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersSetOwnerRequest) TeamId(teamId string) ApiAdminUsersSetOwnerRequest {
	r.teamId = &teamId
	return r
}

// Id of the user to promote to owner.
func (r ApiAdminUsersSetOwnerRequest) UserId(userId string) ApiAdminUsersSetOwnerRequest {
	r.userId = &userId
	return r
}

func (r ApiAdminUsersSetOwnerRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersSetOwnerExecute(r)
}

/*
AdminUsersSetOwner Method for AdminUsersSetOwner

Set an existing guest, regular user, or admin user to be a workspace owner.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersSetOwnerRequest
*/
func (a *AdminApiService) AdminUsersSetOwner(ctx context.Context) ApiAdminUsersSetOwnerRequest {
	return ApiAdminUsersSetOwnerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsersSetOwnerExecute(r ApiAdminUsersSetOwnerRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsersSetOwner")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.setOwner"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersSetRegularRequest struct {
	ctx context.Context
	ApiService *AdminApiService
	token *string
	teamId *string
	userId *string
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersSetRegularRequest) Token(token string) ApiAdminUsersSetRegularRequest {
	r.token = &token
	return r
}

// The ID (&#x60;T1234&#x60;) of the workspace.
func (r ApiAdminUsersSetRegularRequest) TeamId(teamId string) ApiAdminUsersSetRegularRequest {
	r.teamId = &teamId
	return r
}

// The ID of the user to designate as a regular user.
func (r ApiAdminUsersSetRegularRequest) UserId(userId string) ApiAdminUsersSetRegularRequest {
	r.userId = &userId
	return r
}

func (r ApiAdminUsersSetRegularRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersSetRegularExecute(r)
}

/*
AdminUsersSetRegular Method for AdminUsersSetRegular

Set an existing guest user, admin user, or owner to be a regular user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersSetRegularRequest
*/
func (a *AdminApiService) AdminUsersSetRegular(ctx context.Context) ApiAdminUsersSetRegularRequest {
	return ApiAdminUsersSetRegularRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminApiService) AdminUsersSetRegularExecute(r ApiAdminUsersSetRegularRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminApiService.AdminUsersSetRegular")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.setRegular"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
