/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// UsersProfileSetSchema Schema for successful response from users.profile.set method
type UsersProfileSetSchema struct {
	EmailPending *string `json:"email_pending,omitempty"`
	Ok DefsOkTrue `json:"ok"`
	Profile ObjsUserProfile `json:"profile"`
	Username string `json:"username"`
}

// NewUsersProfileSetSchema instantiates a new UsersProfileSetSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersProfileSetSchema(ok DefsOkTrue, profile ObjsUserProfile, username string) *UsersProfileSetSchema {
	this := UsersProfileSetSchema{}
	this.Ok = ok
	this.Profile = profile
	this.Username = username
	return &this
}

// NewUsersProfileSetSchemaWithDefaults instantiates a new UsersProfileSetSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersProfileSetSchemaWithDefaults() *UsersProfileSetSchema {
	this := UsersProfileSetSchema{}
	return &this
}

// GetEmailPending returns the EmailPending field value if set, zero value otherwise.
func (o *UsersProfileSetSchema) GetEmailPending() string {
	if o == nil || isNil(o.EmailPending) {
		var ret string
		return ret
	}
	return *o.EmailPending
}

// GetEmailPendingOk returns a tuple with the EmailPending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersProfileSetSchema) GetEmailPendingOk() (*string, bool) {
	if o == nil || isNil(o.EmailPending) {
    return nil, false
	}
	return o.EmailPending, true
}

// HasEmailPending returns a boolean if a field has been set.
func (o *UsersProfileSetSchema) HasEmailPending() bool {
	if o != nil && !isNil(o.EmailPending) {
		return true
	}

	return false
}

// SetEmailPending gets a reference to the given string and assigns it to the EmailPending field.
func (o *UsersProfileSetSchema) SetEmailPending(v string) {
	o.EmailPending = &v
}

// GetOk returns the Ok field value
func (o *UsersProfileSetSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *UsersProfileSetSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *UsersProfileSetSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetProfile returns the Profile field value
func (o *UsersProfileSetSchema) GetProfile() ObjsUserProfile {
	if o == nil {
		var ret ObjsUserProfile
		return ret
	}

	return o.Profile
}

// GetProfileOk returns a tuple with the Profile field value
// and a boolean to check if the value has been set.
func (o *UsersProfileSetSchema) GetProfileOk() (*ObjsUserProfile, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Profile, true
}

// SetProfile sets field value
func (o *UsersProfileSetSchema) SetProfile(v ObjsUserProfile) {
	o.Profile = v
}

// GetUsername returns the Username field value
func (o *UsersProfileSetSchema) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *UsersProfileSetSchema) GetUsernameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *UsersProfileSetSchema) SetUsername(v string) {
	o.Username = v
}

func (o UsersProfileSetSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EmailPending) {
		toSerialize["email_pending"] = o.EmailPending
	}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if true {
		toSerialize["profile"] = o.Profile
	}
	if true {
		toSerialize["username"] = o.Username
	}
	return json.Marshal(toSerialize)
}

type NullableUsersProfileSetSchema struct {
	value *UsersProfileSetSchema
	isSet bool
}

func (v NullableUsersProfileSetSchema) Get() *UsersProfileSetSchema {
	return v.value
}

func (v *NullableUsersProfileSetSchema) Set(val *UsersProfileSetSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersProfileSetSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersProfileSetSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersProfileSetSchema(val *UsersProfileSetSchema) *NullableUsersProfileSetSchema {
	return &NullableUsersProfileSetSchema{value: val, isSet: true}
}

func (v NullableUsersProfileSetSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersProfileSetSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


