/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// AppsPermissionsInfoSchema Schema for successful response from apps.permissions.info method
type AppsPermissionsInfoSchema struct {
	Info AppsPermissionsInfoSchemaInfo `json:"info"`
	Ok DefsOkTrue `json:"ok"`
}

// NewAppsPermissionsInfoSchema instantiates a new AppsPermissionsInfoSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppsPermissionsInfoSchema(info AppsPermissionsInfoSchemaInfo, ok DefsOkTrue) *AppsPermissionsInfoSchema {
	this := AppsPermissionsInfoSchema{}
	this.Info = info
	this.Ok = ok
	return &this
}

// NewAppsPermissionsInfoSchemaWithDefaults instantiates a new AppsPermissionsInfoSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppsPermissionsInfoSchemaWithDefaults() *AppsPermissionsInfoSchema {
	this := AppsPermissionsInfoSchema{}
	return &this
}

// GetInfo returns the Info field value
func (o *AppsPermissionsInfoSchema) GetInfo() AppsPermissionsInfoSchemaInfo {
	if o == nil {
		var ret AppsPermissionsInfoSchemaInfo
		return ret
	}

	return o.Info
}

// GetInfoOk returns a tuple with the Info field value
// and a boolean to check if the value has been set.
func (o *AppsPermissionsInfoSchema) GetInfoOk() (*AppsPermissionsInfoSchemaInfo, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Info, true
}

// SetInfo sets field value
func (o *AppsPermissionsInfoSchema) SetInfo(v AppsPermissionsInfoSchemaInfo) {
	o.Info = v
}

// GetOk returns the Ok field value
func (o *AppsPermissionsInfoSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *AppsPermissionsInfoSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *AppsPermissionsInfoSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

func (o AppsPermissionsInfoSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["info"] = o.Info
	}
	if true {
		toSerialize["ok"] = o.Ok
	}
	return json.Marshal(toSerialize)
}

type NullableAppsPermissionsInfoSchema struct {
	value *AppsPermissionsInfoSchema
	isSet bool
}

func (v NullableAppsPermissionsInfoSchema) Get() *AppsPermissionsInfoSchema {
	return v.value
}

func (v *NullableAppsPermissionsInfoSchema) Set(val *AppsPermissionsInfoSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAppsPermissionsInfoSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAppsPermissionsInfoSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppsPermissionsInfoSchema(val *AppsPermissionsInfoSchema) *NullableAppsPermissionsInfoSchema {
	return &NullableAppsPermissionsInfoSchema{value: val, isSet: true}
}

func (v NullableAppsPermissionsInfoSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppsPermissionsInfoSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


