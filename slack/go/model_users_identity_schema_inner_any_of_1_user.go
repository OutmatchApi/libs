/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// UsersIdentitySchemaInnerAnyOf1User struct for UsersIdentitySchemaInnerAnyOf1User
type UsersIdentitySchemaInnerAnyOf1User struct {
	Email string `json:"email"`
	Id string `json:"id"`
	Name string `json:"name"`
}

// NewUsersIdentitySchemaInnerAnyOf1User instantiates a new UsersIdentitySchemaInnerAnyOf1User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersIdentitySchemaInnerAnyOf1User(email string, id string, name string) *UsersIdentitySchemaInnerAnyOf1User {
	this := UsersIdentitySchemaInnerAnyOf1User{}
	this.Email = email
	this.Id = id
	this.Name = name
	return &this
}

// NewUsersIdentitySchemaInnerAnyOf1UserWithDefaults instantiates a new UsersIdentitySchemaInnerAnyOf1User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersIdentitySchemaInnerAnyOf1UserWithDefaults() *UsersIdentitySchemaInnerAnyOf1User {
	this := UsersIdentitySchemaInnerAnyOf1User{}
	return &this
}

// GetEmail returns the Email field value
func (o *UsersIdentitySchemaInnerAnyOf1User) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UsersIdentitySchemaInnerAnyOf1User) GetEmailOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UsersIdentitySchemaInnerAnyOf1User) SetEmail(v string) {
	o.Email = v
}

// GetId returns the Id field value
func (o *UsersIdentitySchemaInnerAnyOf1User) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UsersIdentitySchemaInnerAnyOf1User) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UsersIdentitySchemaInnerAnyOf1User) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *UsersIdentitySchemaInnerAnyOf1User) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UsersIdentitySchemaInnerAnyOf1User) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UsersIdentitySchemaInnerAnyOf1User) SetName(v string) {
	o.Name = v
}

func (o UsersIdentitySchemaInnerAnyOf1User) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableUsersIdentitySchemaInnerAnyOf1User struct {
	value *UsersIdentitySchemaInnerAnyOf1User
	isSet bool
}

func (v NullableUsersIdentitySchemaInnerAnyOf1User) Get() *UsersIdentitySchemaInnerAnyOf1User {
	return v.value
}

func (v *NullableUsersIdentitySchemaInnerAnyOf1User) Set(val *UsersIdentitySchemaInnerAnyOf1User) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersIdentitySchemaInnerAnyOf1User) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersIdentitySchemaInnerAnyOf1User) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersIdentitySchemaInnerAnyOf1User(val *UsersIdentitySchemaInnerAnyOf1User) *NullableUsersIdentitySchemaInnerAnyOf1User {
	return &NullableUsersIdentitySchemaInnerAnyOf1User{value: val, isSet: true}
}

func (v NullableUsersIdentitySchemaInnerAnyOf1User) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersIdentitySchemaInnerAnyOf1User) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


