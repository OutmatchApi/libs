/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// FilesApiService FilesApi service
type FilesApiService service

type ApiFilesCommentsDeleteRequest struct {
	ctx context.Context
	ApiService *FilesApiService
	token *string
	file *string
	id *string
}

// Authentication token. Requires scope: &#x60;files:write:user&#x60;
func (r ApiFilesCommentsDeleteRequest) Token(token string) ApiFilesCommentsDeleteRequest {
	r.token = &token
	return r
}

// File to delete a comment from.
func (r ApiFilesCommentsDeleteRequest) File(file string) ApiFilesCommentsDeleteRequest {
	r.file = &file
	return r
}

// The comment to delete.
func (r ApiFilesCommentsDeleteRequest) Id(id string) ApiFilesCommentsDeleteRequest {
	r.id = &id
	return r
}

func (r ApiFilesCommentsDeleteRequest) Execute() (*FilesCommentsDeleteSchema, *http.Response, error) {
	return r.ApiService.FilesCommentsDeleteExecute(r)
}

/*
FilesCommentsDelete Method for FilesCommentsDelete

Deletes an existing comment on a file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesCommentsDeleteRequest
*/
func (a *FilesApiService) FilesCommentsDelete(ctx context.Context) ApiFilesCommentsDeleteRequest {
	return ApiFilesCommentsDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesCommentsDeleteSchema
func (a *FilesApiService) FilesCommentsDeleteExecute(r ApiFilesCommentsDeleteRequest) (*FilesCommentsDeleteSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesCommentsDeleteSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.FilesCommentsDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.comments.delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.token != nil {
		localVarHeaderParams["token"] = parameterToString(*r.token, "")
	}
	if r.file != nil {
		localVarFormParams.Add("file", parameterToString(*r.file, ""))
	}
	if r.id != nil {
		localVarFormParams.Add("id", parameterToString(*r.id, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v FilesCommentsDeleteErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesDeleteRequest struct {
	ctx context.Context
	ApiService *FilesApiService
	token *string
	file *string
}

// Authentication token. Requires scope: &#x60;files:write:user&#x60;
func (r ApiFilesDeleteRequest) Token(token string) ApiFilesDeleteRequest {
	r.token = &token
	return r
}

// ID of file to delete.
func (r ApiFilesDeleteRequest) File(file string) ApiFilesDeleteRequest {
	r.file = &file
	return r
}

func (r ApiFilesDeleteRequest) Execute() (*FilesDeleteSchema, *http.Response, error) {
	return r.ApiService.FilesDeleteExecute(r)
}

/*
FilesDelete Method for FilesDelete

Deletes a file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesDeleteRequest
*/
func (a *FilesApiService) FilesDelete(ctx context.Context) ApiFilesDeleteRequest {
	return ApiFilesDeleteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesDeleteSchema
func (a *FilesApiService) FilesDeleteExecute(r ApiFilesDeleteRequest) (*FilesDeleteSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesDeleteSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.FilesDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.delete"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.token != nil {
		localVarHeaderParams["token"] = parameterToString(*r.token, "")
	}
	if r.file != nil {
		localVarFormParams.Add("file", parameterToString(*r.file, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v FilesDeleteErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesInfoRequest struct {
	ctx context.Context
	ApiService *FilesApiService
	token *string
	file *string
	count *string
	page *string
	limit *int32
	cursor *string
}

// Authentication token. Requires scope: &#x60;files:read&#x60;
func (r ApiFilesInfoRequest) Token(token string) ApiFilesInfoRequest {
	r.token = &token
	return r
}

// Specify a file by providing its ID.
func (r ApiFilesInfoRequest) File(file string) ApiFilesInfoRequest {
	r.file = &file
	return r
}

func (r ApiFilesInfoRequest) Count(count string) ApiFilesInfoRequest {
	r.count = &count
	return r
}

func (r ApiFilesInfoRequest) Page(page string) ApiFilesInfoRequest {
	r.page = &page
	return r
}

// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached.
func (r ApiFilesInfoRequest) Limit(limit int32) ApiFilesInfoRequest {
	r.limit = &limit
	return r
}

// Parameter for pagination. File comments are paginated for a single file. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection of comments. See [pagination](/docs/pagination) for more details.
func (r ApiFilesInfoRequest) Cursor(cursor string) ApiFilesInfoRequest {
	r.cursor = &cursor
	return r
}

func (r ApiFilesInfoRequest) Execute() (*FilesInfoSchema, *http.Response, error) {
	return r.ApiService.FilesInfoExecute(r)
}

/*
FilesInfo Method for FilesInfo

Gets information about a file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesInfoRequest
*/
func (a *FilesApiService) FilesInfo(ctx context.Context) ApiFilesInfoRequest {
	return ApiFilesInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesInfoSchema
func (a *FilesApiService) FilesInfoExecute(r ApiFilesInfoRequest) (*FilesInfoSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesInfoSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.FilesInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.token != nil {
		localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	}
	if r.file != nil {
		localVarQueryParams.Add("file", parameterToString(*r.file, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v FilesInfoErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesListRequest struct {
	ctx context.Context
	ApiService *FilesApiService
	token *string
	user *string
	channel *string
	tsFrom *float32
	tsTo *float32
	types *string
	count *string
	page *string
	showFilesHiddenByLimit *bool
}

// Authentication token. Requires scope: &#x60;files:read&#x60;
func (r ApiFilesListRequest) Token(token string) ApiFilesListRequest {
	r.token = &token
	return r
}

// Filter files created by a single user.
func (r ApiFilesListRequest) User(user string) ApiFilesListRequest {
	r.user = &user
	return r
}

// Filter files appearing in a specific channel, indicated by its ID.
func (r ApiFilesListRequest) Channel(channel string) ApiFilesListRequest {
	r.channel = &channel
	return r
}

// Filter files created after this timestamp (inclusive).
func (r ApiFilesListRequest) TsFrom(tsFrom float32) ApiFilesListRequest {
	r.tsFrom = &tsFrom
	return r
}

// Filter files created before this timestamp (inclusive).
func (r ApiFilesListRequest) TsTo(tsTo float32) ApiFilesListRequest {
	r.tsTo = &tsTo
	return r
}

// Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like &#x60;types&#x3D;spaces,snippets&#x60;.The default value is &#x60;all&#x60;, which does not filter the list.
func (r ApiFilesListRequest) Types(types string) ApiFilesListRequest {
	r.types = &types
	return r
}

func (r ApiFilesListRequest) Count(count string) ApiFilesListRequest {
	r.count = &count
	return r
}

func (r ApiFilesListRequest) Page(page string) ApiFilesListRequest {
	r.page = &page
	return r
}

// Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit.
func (r ApiFilesListRequest) ShowFilesHiddenByLimit(showFilesHiddenByLimit bool) ApiFilesListRequest {
	r.showFilesHiddenByLimit = &showFilesHiddenByLimit
	return r
}

func (r ApiFilesListRequest) Execute() (*FilesListSchema, *http.Response, error) {
	return r.ApiService.FilesListExecute(r)
}

/*
FilesList Method for FilesList

List for a team, in a channel, or from a user with applied filters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesListRequest
*/
func (a *FilesApiService) FilesList(ctx context.Context) ApiFilesListRequest {
	return ApiFilesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesListSchema
func (a *FilesApiService) FilesListExecute(r ApiFilesListRequest) (*FilesListSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesListSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.FilesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.token != nil {
		localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	}
	if r.user != nil {
		localVarQueryParams.Add("user", parameterToString(*r.user, ""))
	}
	if r.channel != nil {
		localVarQueryParams.Add("channel", parameterToString(*r.channel, ""))
	}
	if r.tsFrom != nil {
		localVarQueryParams.Add("ts_from", parameterToString(*r.tsFrom, ""))
	}
	if r.tsTo != nil {
		localVarQueryParams.Add("ts_to", parameterToString(*r.tsTo, ""))
	}
	if r.types != nil {
		localVarQueryParams.Add("types", parameterToString(*r.types, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.showFilesHiddenByLimit != nil {
		localVarQueryParams.Add("show_files_hidden_by_limit", parameterToString(*r.showFilesHiddenByLimit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v FilesListErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesRemoteAddRequest struct {
	ctx context.Context
	ApiService *FilesApiService
	externalId *string
	externalUrl *string
	filetype *string
	indexableFileContents *string
	previewImage *string
	title *string
	token *string
}

// Creator defined GUID for the file.
func (r ApiFilesRemoteAddRequest) ExternalId(externalId string) ApiFilesRemoteAddRequest {
	r.externalId = &externalId
	return r
}

// URL of the remote file.
func (r ApiFilesRemoteAddRequest) ExternalUrl(externalUrl string) ApiFilesRemoteAddRequest {
	r.externalUrl = &externalUrl
	return r
}

// type of file
func (r ApiFilesRemoteAddRequest) Filetype(filetype string) ApiFilesRemoteAddRequest {
	r.filetype = &filetype
	return r
}

// A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.
func (r ApiFilesRemoteAddRequest) IndexableFileContents(indexableFileContents string) ApiFilesRemoteAddRequest {
	r.indexableFileContents = &indexableFileContents
	return r
}

// Preview of the document via &#x60;multipart/form-data&#x60;.
func (r ApiFilesRemoteAddRequest) PreviewImage(previewImage string) ApiFilesRemoteAddRequest {
	r.previewImage = &previewImage
	return r
}

// Title of the file being shared.
func (r ApiFilesRemoteAddRequest) Title(title string) ApiFilesRemoteAddRequest {
	r.title = &title
	return r
}

// Authentication token. Requires scope: &#x60;remote_files:write&#x60;
func (r ApiFilesRemoteAddRequest) Token(token string) ApiFilesRemoteAddRequest {
	r.token = &token
	return r
}

func (r ApiFilesRemoteAddRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.FilesRemoteAddExecute(r)
}

/*
FilesRemoteAdd Method for FilesRemoteAdd

Adds a file from a remote service

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesRemoteAddRequest
*/
func (a *FilesApiService) FilesRemoteAdd(ctx context.Context) ApiFilesRemoteAddRequest {
	return ApiFilesRemoteAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *FilesApiService) FilesRemoteAddExecute(r ApiFilesRemoteAddRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.FilesRemoteAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.remote.add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.externalId != nil {
		localVarFormParams.Add("external_id", parameterToString(*r.externalId, ""))
	}
	if r.externalUrl != nil {
		localVarFormParams.Add("external_url", parameterToString(*r.externalUrl, ""))
	}
	if r.filetype != nil {
		localVarFormParams.Add("filetype", parameterToString(*r.filetype, ""))
	}
	if r.indexableFileContents != nil {
		localVarFormParams.Add("indexable_file_contents", parameterToString(*r.indexableFileContents, ""))
	}
	if r.previewImage != nil {
		localVarFormParams.Add("preview_image", parameterToString(*r.previewImage, ""))
	}
	if r.title != nil {
		localVarFormParams.Add("title", parameterToString(*r.title, ""))
	}
	if r.token != nil {
		localVarFormParams.Add("token", parameterToString(*r.token, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesRemoteInfoRequest struct {
	ctx context.Context
	ApiService *FilesApiService
	token *string
	file *string
	externalId *string
}

// Authentication token. Requires scope: &#x60;remote_files:read&#x60;
func (r ApiFilesRemoteInfoRequest) Token(token string) ApiFilesRemoteInfoRequest {
	r.token = &token
	return r
}

// Specify a file by providing its ID.
func (r ApiFilesRemoteInfoRequest) File(file string) ApiFilesRemoteInfoRequest {
	r.file = &file
	return r
}

// Creator defined GUID for the file.
func (r ApiFilesRemoteInfoRequest) ExternalId(externalId string) ApiFilesRemoteInfoRequest {
	r.externalId = &externalId
	return r
}

func (r ApiFilesRemoteInfoRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.FilesRemoteInfoExecute(r)
}

/*
FilesRemoteInfo Method for FilesRemoteInfo

Retrieve information about a remote file added to Slack

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesRemoteInfoRequest
*/
func (a *FilesApiService) FilesRemoteInfo(ctx context.Context) ApiFilesRemoteInfoRequest {
	return ApiFilesRemoteInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *FilesApiService) FilesRemoteInfoExecute(r ApiFilesRemoteInfoRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.FilesRemoteInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.remote.info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.token != nil {
		localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	}
	if r.file != nil {
		localVarQueryParams.Add("file", parameterToString(*r.file, ""))
	}
	if r.externalId != nil {
		localVarQueryParams.Add("external_id", parameterToString(*r.externalId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesRemoteListRequest struct {
	ctx context.Context
	ApiService *FilesApiService
	token *string
	channel *string
	tsFrom *float32
	tsTo *float32
	limit *int32
	cursor *string
}

// Authentication token. Requires scope: &#x60;remote_files:read&#x60;
func (r ApiFilesRemoteListRequest) Token(token string) ApiFilesRemoteListRequest {
	r.token = &token
	return r
}

// Filter files appearing in a specific channel, indicated by its ID.
func (r ApiFilesRemoteListRequest) Channel(channel string) ApiFilesRemoteListRequest {
	r.channel = &channel
	return r
}

// Filter files created after this timestamp (inclusive).
func (r ApiFilesRemoteListRequest) TsFrom(tsFrom float32) ApiFilesRemoteListRequest {
	r.tsFrom = &tsFrom
	return r
}

// Filter files created before this timestamp (inclusive).
func (r ApiFilesRemoteListRequest) TsTo(tsTo float32) ApiFilesRemoteListRequest {
	r.tsTo = &tsTo
	return r
}

// The maximum number of items to return.
func (r ApiFilesRemoteListRequest) Limit(limit int32) ApiFilesRemoteListRequest {
	r.limit = &limit
	return r
}

// Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.
func (r ApiFilesRemoteListRequest) Cursor(cursor string) ApiFilesRemoteListRequest {
	r.cursor = &cursor
	return r
}

func (r ApiFilesRemoteListRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.FilesRemoteListExecute(r)
}

/*
FilesRemoteList Method for FilesRemoteList

Retrieve information about a remote file added to Slack

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesRemoteListRequest
*/
func (a *FilesApiService) FilesRemoteList(ctx context.Context) ApiFilesRemoteListRequest {
	return ApiFilesRemoteListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *FilesApiService) FilesRemoteListExecute(r ApiFilesRemoteListRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.FilesRemoteList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.remote.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.token != nil {
		localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	}
	if r.channel != nil {
		localVarQueryParams.Add("channel", parameterToString(*r.channel, ""))
	}
	if r.tsFrom != nil {
		localVarQueryParams.Add("ts_from", parameterToString(*r.tsFrom, ""))
	}
	if r.tsTo != nil {
		localVarQueryParams.Add("ts_to", parameterToString(*r.tsTo, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesRemoteRemoveRequest struct {
	ctx context.Context
	ApiService *FilesApiService
	externalId *string
	file *string
	token *string
}

// Creator defined GUID for the file.
func (r ApiFilesRemoteRemoveRequest) ExternalId(externalId string) ApiFilesRemoteRemoveRequest {
	r.externalId = &externalId
	return r
}

// Specify a file by providing its ID.
func (r ApiFilesRemoteRemoveRequest) File(file string) ApiFilesRemoteRemoveRequest {
	r.file = &file
	return r
}

// Authentication token. Requires scope: &#x60;remote_files:write&#x60;
func (r ApiFilesRemoteRemoveRequest) Token(token string) ApiFilesRemoteRemoveRequest {
	r.token = &token
	return r
}

func (r ApiFilesRemoteRemoveRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.FilesRemoteRemoveExecute(r)
}

/*
FilesRemoteRemove Method for FilesRemoteRemove

Remove a remote file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesRemoteRemoveRequest
*/
func (a *FilesApiService) FilesRemoteRemove(ctx context.Context) ApiFilesRemoteRemoveRequest {
	return ApiFilesRemoteRemoveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *FilesApiService) FilesRemoteRemoveExecute(r ApiFilesRemoteRemoveRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.FilesRemoteRemove")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.remote.remove"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.externalId != nil {
		localVarFormParams.Add("external_id", parameterToString(*r.externalId, ""))
	}
	if r.file != nil {
		localVarFormParams.Add("file", parameterToString(*r.file, ""))
	}
	if r.token != nil {
		localVarFormParams.Add("token", parameterToString(*r.token, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesRemoteShareRequest struct {
	ctx context.Context
	ApiService *FilesApiService
	token *string
	file *string
	externalId *string
	channels *string
}

// Authentication token. Requires scope: &#x60;remote_files:share&#x60;
func (r ApiFilesRemoteShareRequest) Token(token string) ApiFilesRemoteShareRequest {
	r.token = &token
	return r
}

// Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required.
func (r ApiFilesRemoteShareRequest) File(file string) ApiFilesRemoteShareRequest {
	r.file = &file
	return r
}

// The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required.
func (r ApiFilesRemoteShareRequest) ExternalId(externalId string) ApiFilesRemoteShareRequest {
	r.externalId = &externalId
	return r
}

// Comma-separated list of channel IDs where the file will be shared.
func (r ApiFilesRemoteShareRequest) Channels(channels string) ApiFilesRemoteShareRequest {
	r.channels = &channels
	return r
}

func (r ApiFilesRemoteShareRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.FilesRemoteShareExecute(r)
}

/*
FilesRemoteShare Method for FilesRemoteShare

Share a remote file into a channel.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesRemoteShareRequest
*/
func (a *FilesApiService) FilesRemoteShare(ctx context.Context) ApiFilesRemoteShareRequest {
	return ApiFilesRemoteShareRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *FilesApiService) FilesRemoteShareExecute(r ApiFilesRemoteShareRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.FilesRemoteShare")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.remote.share"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.token != nil {
		localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	}
	if r.file != nil {
		localVarQueryParams.Add("file", parameterToString(*r.file, ""))
	}
	if r.externalId != nil {
		localVarQueryParams.Add("external_id", parameterToString(*r.externalId, ""))
	}
	if r.channels != nil {
		localVarQueryParams.Add("channels", parameterToString(*r.channels, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesRemoteUpdateRequest struct {
	ctx context.Context
	ApiService *FilesApiService
	externalId *string
	externalUrl *string
	file *string
	filetype *string
	indexableFileContents *string
	previewImage *string
	title *string
	token *string
}

// Creator defined GUID for the file.
func (r ApiFilesRemoteUpdateRequest) ExternalId(externalId string) ApiFilesRemoteUpdateRequest {
	r.externalId = &externalId
	return r
}

// URL of the remote file.
func (r ApiFilesRemoteUpdateRequest) ExternalUrl(externalUrl string) ApiFilesRemoteUpdateRequest {
	r.externalUrl = &externalUrl
	return r
}

// Specify a file by providing its ID.
func (r ApiFilesRemoteUpdateRequest) File(file string) ApiFilesRemoteUpdateRequest {
	r.file = &file
	return r
}

// type of file
func (r ApiFilesRemoteUpdateRequest) Filetype(filetype string) ApiFilesRemoteUpdateRequest {
	r.filetype = &filetype
	return r
}

// File containing contents that can be used to improve searchability for the remote file.
func (r ApiFilesRemoteUpdateRequest) IndexableFileContents(indexableFileContents string) ApiFilesRemoteUpdateRequest {
	r.indexableFileContents = &indexableFileContents
	return r
}

// Preview of the document via &#x60;multipart/form-data&#x60;.
func (r ApiFilesRemoteUpdateRequest) PreviewImage(previewImage string) ApiFilesRemoteUpdateRequest {
	r.previewImage = &previewImage
	return r
}

// Title of the file being shared.
func (r ApiFilesRemoteUpdateRequest) Title(title string) ApiFilesRemoteUpdateRequest {
	r.title = &title
	return r
}

// Authentication token. Requires scope: &#x60;remote_files:write&#x60;
func (r ApiFilesRemoteUpdateRequest) Token(token string) ApiFilesRemoteUpdateRequest {
	r.token = &token
	return r
}

func (r ApiFilesRemoteUpdateRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.FilesRemoteUpdateExecute(r)
}

/*
FilesRemoteUpdate Method for FilesRemoteUpdate

Updates an existing remote file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesRemoteUpdateRequest
*/
func (a *FilesApiService) FilesRemoteUpdate(ctx context.Context) ApiFilesRemoteUpdateRequest {
	return ApiFilesRemoteUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *FilesApiService) FilesRemoteUpdateExecute(r ApiFilesRemoteUpdateRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.FilesRemoteUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.remote.update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.externalId != nil {
		localVarFormParams.Add("external_id", parameterToString(*r.externalId, ""))
	}
	if r.externalUrl != nil {
		localVarFormParams.Add("external_url", parameterToString(*r.externalUrl, ""))
	}
	if r.file != nil {
		localVarFormParams.Add("file", parameterToString(*r.file, ""))
	}
	if r.filetype != nil {
		localVarFormParams.Add("filetype", parameterToString(*r.filetype, ""))
	}
	if r.indexableFileContents != nil {
		localVarFormParams.Add("indexable_file_contents", parameterToString(*r.indexableFileContents, ""))
	}
	if r.previewImage != nil {
		localVarFormParams.Add("preview_image", parameterToString(*r.previewImage, ""))
	}
	if r.title != nil {
		localVarFormParams.Add("title", parameterToString(*r.title, ""))
	}
	if r.token != nil {
		localVarFormParams.Add("token", parameterToString(*r.token, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesRevokePublicURLRequest struct {
	ctx context.Context
	ApiService *FilesApiService
	token *string
	file *string
}

// Authentication token. Requires scope: &#x60;files:write:user&#x60;
func (r ApiFilesRevokePublicURLRequest) Token(token string) ApiFilesRevokePublicURLRequest {
	r.token = &token
	return r
}

// File to revoke
func (r ApiFilesRevokePublicURLRequest) File(file string) ApiFilesRevokePublicURLRequest {
	r.file = &file
	return r
}

func (r ApiFilesRevokePublicURLRequest) Execute() (*FilesRevokePublicURLSchema, *http.Response, error) {
	return r.ApiService.FilesRevokePublicURLExecute(r)
}

/*
FilesRevokePublicURL Method for FilesRevokePublicURL

Revokes public/external sharing access for a file

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesRevokePublicURLRequest
*/
func (a *FilesApiService) FilesRevokePublicURL(ctx context.Context) ApiFilesRevokePublicURLRequest {
	return ApiFilesRevokePublicURLRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesRevokePublicURLSchema
func (a *FilesApiService) FilesRevokePublicURLExecute(r ApiFilesRevokePublicURLRequest) (*FilesRevokePublicURLSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesRevokePublicURLSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.FilesRevokePublicURL")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.revokePublicURL"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.token != nil {
		localVarHeaderParams["token"] = parameterToString(*r.token, "")
	}
	if r.file != nil {
		localVarFormParams.Add("file", parameterToString(*r.file, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v FilesRevokePublicURLErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesSharedPublicURLRequest struct {
	ctx context.Context
	ApiService *FilesApiService
	token *string
	file *string
}

// Authentication token. Requires scope: &#x60;files:write:user&#x60;
func (r ApiFilesSharedPublicURLRequest) Token(token string) ApiFilesSharedPublicURLRequest {
	r.token = &token
	return r
}

// File to share
func (r ApiFilesSharedPublicURLRequest) File(file string) ApiFilesSharedPublicURLRequest {
	r.file = &file
	return r
}

func (r ApiFilesSharedPublicURLRequest) Execute() (*FilesSharedPublicURLSchema, *http.Response, error) {
	return r.ApiService.FilesSharedPublicURLExecute(r)
}

/*
FilesSharedPublicURL Method for FilesSharedPublicURL

Enables a file for public/external sharing.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesSharedPublicURLRequest
*/
func (a *FilesApiService) FilesSharedPublicURL(ctx context.Context) ApiFilesSharedPublicURLRequest {
	return ApiFilesSharedPublicURLRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesSharedPublicURLSchema
func (a *FilesApiService) FilesSharedPublicURLExecute(r ApiFilesSharedPublicURLRequest) (*FilesSharedPublicURLSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesSharedPublicURLSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.FilesSharedPublicURL")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.sharedPublicURL"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.token != nil {
		localVarHeaderParams["token"] = parameterToString(*r.token, "")
	}
	if r.file != nil {
		localVarFormParams.Add("file", parameterToString(*r.file, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v FilesSharedPublicURLErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesUploadRequest struct {
	ctx context.Context
	ApiService *FilesApiService
	channels *string
	content *string
	file *string
	filename *string
	filetype *string
	initialComment *string
	threadTs *float32
	title *string
	token *string
}

// Comma-separated list of channel names or IDs where the file will be shared.
func (r ApiFilesUploadRequest) Channels(channels string) ApiFilesUploadRequest {
	r.channels = &channels
	return r
}

// File contents via a POST variable. If omitting this parameter, you must provide a &#x60;file&#x60;.
func (r ApiFilesUploadRequest) Content(content string) ApiFilesUploadRequest {
	r.content = &content
	return r
}

// File contents via &#x60;multipart/form-data&#x60;. If omitting this parameter, you must submit &#x60;content&#x60;.
func (r ApiFilesUploadRequest) File(file string) ApiFilesUploadRequest {
	r.file = &file
	return r
}

// Filename of file.
func (r ApiFilesUploadRequest) Filename(filename string) ApiFilesUploadRequest {
	r.filename = &filename
	return r
}

// A [file type](/types/file#file_types) identifier.
func (r ApiFilesUploadRequest) Filetype(filetype string) ApiFilesUploadRequest {
	r.filetype = &filetype
	return r
}

// The message text introducing the file in specified &#x60;channels&#x60;.
func (r ApiFilesUploadRequest) InitialComment(initialComment string) ApiFilesUploadRequest {
	r.initialComment = &initialComment
	return r
}

// Provide another message&#39;s &#x60;ts&#x60; value to upload this file as a reply. Never use a reply&#39;s &#x60;ts&#x60; value; use its parent instead.
func (r ApiFilesUploadRequest) ThreadTs(threadTs float32) ApiFilesUploadRequest {
	r.threadTs = &threadTs
	return r
}

// Title of file.
func (r ApiFilesUploadRequest) Title(title string) ApiFilesUploadRequest {
	r.title = &title
	return r
}

// Authentication token. Requires scope: &#x60;files:write:user&#x60;
func (r ApiFilesUploadRequest) Token(token string) ApiFilesUploadRequest {
	r.token = &token
	return r
}

func (r ApiFilesUploadRequest) Execute() (*FilesUploadSchema, *http.Response, error) {
	return r.ApiService.FilesUploadExecute(r)
}

/*
FilesUpload Method for FilesUpload

Uploads or creates a file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesUploadRequest
*/
func (a *FilesApiService) FilesUpload(ctx context.Context) ApiFilesUploadRequest {
	return ApiFilesUploadRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FilesUploadSchema
func (a *FilesApiService) FilesUploadExecute(r ApiFilesUploadRequest) (*FilesUploadSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FilesUploadSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesApiService.FilesUpload")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/files.upload"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.channels != nil {
		localVarFormParams.Add("channels", parameterToString(*r.channels, ""))
	}
	if r.content != nil {
		localVarFormParams.Add("content", parameterToString(*r.content, ""))
	}
	if r.file != nil {
		localVarFormParams.Add("file", parameterToString(*r.file, ""))
	}
	if r.filename != nil {
		localVarFormParams.Add("filename", parameterToString(*r.filename, ""))
	}
	if r.filetype != nil {
		localVarFormParams.Add("filetype", parameterToString(*r.filetype, ""))
	}
	if r.initialComment != nil {
		localVarFormParams.Add("initial_comment", parameterToString(*r.initialComment, ""))
	}
	if r.threadTs != nil {
		localVarFormParams.Add("thread_ts", parameterToString(*r.threadTs, ""))
	}
	if r.title != nil {
		localVarFormParams.Add("title", parameterToString(*r.title, ""))
	}
	if r.token != nil {
		localVarFormParams.Add("token", parameterToString(*r.token, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v FilesUploadErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
