/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// AdminConversationsRestrictAccessApiService AdminConversationsRestrictAccessApi service
type AdminConversationsRestrictAccessApiService service

type ApiAdminConversationsRestrictAccessAddGroupRequest struct {
	ctx context.Context
	ApiService *AdminConversationsRestrictAccessApiService
	channelId *string
	groupId *string
	token *string
	teamId *string
}

// The channel to link this group to.
func (r ApiAdminConversationsRestrictAccessAddGroupRequest) ChannelId(channelId string) ApiAdminConversationsRestrictAccessAddGroupRequest {
	r.channelId = &channelId
	return r
}

// The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.
func (r ApiAdminConversationsRestrictAccessAddGroupRequest) GroupId(groupId string) ApiAdminConversationsRestrictAccessAddGroupRequest {
	r.groupId = &groupId
	return r
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsRestrictAccessAddGroupRequest) Token(token string) ApiAdminConversationsRestrictAccessAddGroupRequest {
	r.token = &token
	return r
}

// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
func (r ApiAdminConversationsRestrictAccessAddGroupRequest) TeamId(teamId string) ApiAdminConversationsRestrictAccessAddGroupRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminConversationsRestrictAccessAddGroupRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminConversationsRestrictAccessAddGroupExecute(r)
}

/*
AdminConversationsRestrictAccessAddGroup Method for AdminConversationsRestrictAccessAddGroup

Add an allowlist of IDP groups for accessing a channel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsRestrictAccessAddGroupRequest
*/
func (a *AdminConversationsRestrictAccessApiService) AdminConversationsRestrictAccessAddGroup(ctx context.Context) ApiAdminConversationsRestrictAccessAddGroupRequest {
	return ApiAdminConversationsRestrictAccessAddGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminConversationsRestrictAccessApiService) AdminConversationsRestrictAccessAddGroupExecute(r ApiAdminConversationsRestrictAccessAddGroupRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminConversationsRestrictAccessApiService.AdminConversationsRestrictAccessAddGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.restrictAccess.addGroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}
	if r.groupId == nil {
		return localVarReturnValue, nil, reportError("groupId is required and must be specified")
	}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("channel_id", parameterToString(*r.channelId, ""))
	localVarFormParams.Add("group_id", parameterToString(*r.groupId, ""))
	if r.teamId != nil {
		localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	localVarFormParams.Add("token", parameterToString(*r.token, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsRestrictAccessListGroupsRequest struct {
	ctx context.Context
	ApiService *AdminConversationsRestrictAccessApiService
	token *string
	channelId *string
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
func (r ApiAdminConversationsRestrictAccessListGroupsRequest) Token(token string) ApiAdminConversationsRestrictAccessListGroupsRequest {
	r.token = &token
	return r
}

func (r ApiAdminConversationsRestrictAccessListGroupsRequest) ChannelId(channelId string) ApiAdminConversationsRestrictAccessListGroupsRequest {
	r.channelId = &channelId
	return r
}

// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
func (r ApiAdminConversationsRestrictAccessListGroupsRequest) TeamId(teamId string) ApiAdminConversationsRestrictAccessListGroupsRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminConversationsRestrictAccessListGroupsRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminConversationsRestrictAccessListGroupsExecute(r)
}

/*
AdminConversationsRestrictAccessListGroups Method for AdminConversationsRestrictAccessListGroups

List all IDP Groups linked to a channel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsRestrictAccessListGroupsRequest
*/
func (a *AdminConversationsRestrictAccessApiService) AdminConversationsRestrictAccessListGroups(ctx context.Context) ApiAdminConversationsRestrictAccessListGroupsRequest {
	return ApiAdminConversationsRestrictAccessListGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminConversationsRestrictAccessApiService) AdminConversationsRestrictAccessListGroupsExecute(r ApiAdminConversationsRestrictAccessListGroupsRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminConversationsRestrictAccessApiService.AdminConversationsRestrictAccessListGroups")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.restrictAccess.listGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	localVarQueryParams.Add("channel_id", parameterToString(*r.channelId, ""))
	if r.teamId != nil {
		localVarQueryParams.Add("team_id", parameterToString(*r.teamId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminConversationsRestrictAccessRemoveGroupRequest struct {
	ctx context.Context
	ApiService *AdminConversationsRestrictAccessApiService
	channelId *string
	groupId *string
	teamId *string
	token *string
}

// The channel to remove the linked group from.
func (r ApiAdminConversationsRestrictAccessRemoveGroupRequest) ChannelId(channelId string) ApiAdminConversationsRestrictAccessRemoveGroupRequest {
	r.channelId = &channelId
	return r
}

// The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.
func (r ApiAdminConversationsRestrictAccessRemoveGroupRequest) GroupId(groupId string) ApiAdminConversationsRestrictAccessRemoveGroupRequest {
	r.groupId = &groupId
	return r
}

// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
func (r ApiAdminConversationsRestrictAccessRemoveGroupRequest) TeamId(teamId string) ApiAdminConversationsRestrictAccessRemoveGroupRequest {
	r.teamId = &teamId
	return r
}

// Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
func (r ApiAdminConversationsRestrictAccessRemoveGroupRequest) Token(token string) ApiAdminConversationsRestrictAccessRemoveGroupRequest {
	r.token = &token
	return r
}

func (r ApiAdminConversationsRestrictAccessRemoveGroupRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminConversationsRestrictAccessRemoveGroupExecute(r)
}

/*
AdminConversationsRestrictAccessRemoveGroup Method for AdminConversationsRestrictAccessRemoveGroup

Remove a linked IDP group linked from a private channel

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminConversationsRestrictAccessRemoveGroupRequest
*/
func (a *AdminConversationsRestrictAccessApiService) AdminConversationsRestrictAccessRemoveGroup(ctx context.Context) ApiAdminConversationsRestrictAccessRemoveGroupRequest {
	return ApiAdminConversationsRestrictAccessRemoveGroupRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminConversationsRestrictAccessApiService) AdminConversationsRestrictAccessRemoveGroupExecute(r ApiAdminConversationsRestrictAccessRemoveGroupRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminConversationsRestrictAccessApiService.AdminConversationsRestrictAccessRemoveGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.conversations.restrictAccess.removeGroup"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}
	if r.groupId == nil {
		return localVarReturnValue, nil, reportError("groupId is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarFormParams.Add("channel_id", parameterToString(*r.channelId, ""))
	localVarFormParams.Add("group_id", parameterToString(*r.groupId, ""))
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	localVarFormParams.Add("token", parameterToString(*r.token, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
