/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ObjsReminder struct for ObjsReminder
type ObjsReminder struct {
	CompleteTs *int32 `json:"complete_ts,omitempty"`
	Creator string `json:"creator"`
	Id string `json:"id"`
	Recurring bool `json:"recurring"`
	Text string `json:"text"`
	Time *int32 `json:"time,omitempty"`
	User string `json:"user"`
}

// NewObjsReminder instantiates a new ObjsReminder object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjsReminder(creator string, id string, recurring bool, text string, user string) *ObjsReminder {
	this := ObjsReminder{}
	this.Creator = creator
	this.Id = id
	this.Recurring = recurring
	this.Text = text
	this.User = user
	return &this
}

// NewObjsReminderWithDefaults instantiates a new ObjsReminder object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjsReminderWithDefaults() *ObjsReminder {
	this := ObjsReminder{}
	return &this
}

// GetCompleteTs returns the CompleteTs field value if set, zero value otherwise.
func (o *ObjsReminder) GetCompleteTs() int32 {
	if o == nil || isNil(o.CompleteTs) {
		var ret int32
		return ret
	}
	return *o.CompleteTs
}

// GetCompleteTsOk returns a tuple with the CompleteTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsReminder) GetCompleteTsOk() (*int32, bool) {
	if o == nil || isNil(o.CompleteTs) {
    return nil, false
	}
	return o.CompleteTs, true
}

// HasCompleteTs returns a boolean if a field has been set.
func (o *ObjsReminder) HasCompleteTs() bool {
	if o != nil && !isNil(o.CompleteTs) {
		return true
	}

	return false
}

// SetCompleteTs gets a reference to the given int32 and assigns it to the CompleteTs field.
func (o *ObjsReminder) SetCompleteTs(v int32) {
	o.CompleteTs = &v
}

// GetCreator returns the Creator field value
func (o *ObjsReminder) GetCreator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value
// and a boolean to check if the value has been set.
func (o *ObjsReminder) GetCreatorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Creator, true
}

// SetCreator sets field value
func (o *ObjsReminder) SetCreator(v string) {
	o.Creator = v
}

// GetId returns the Id field value
func (o *ObjsReminder) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ObjsReminder) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ObjsReminder) SetId(v string) {
	o.Id = v
}

// GetRecurring returns the Recurring field value
func (o *ObjsReminder) GetRecurring() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Recurring
}

// GetRecurringOk returns a tuple with the Recurring field value
// and a boolean to check if the value has been set.
func (o *ObjsReminder) GetRecurringOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Recurring, true
}

// SetRecurring sets field value
func (o *ObjsReminder) SetRecurring(v bool) {
	o.Recurring = v
}

// GetText returns the Text field value
func (o *ObjsReminder) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *ObjsReminder) GetTextOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *ObjsReminder) SetText(v string) {
	o.Text = v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *ObjsReminder) GetTime() int32 {
	if o == nil || isNil(o.Time) {
		var ret int32
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsReminder) GetTimeOk() (*int32, bool) {
	if o == nil || isNil(o.Time) {
    return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *ObjsReminder) HasTime() bool {
	if o != nil && !isNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given int32 and assigns it to the Time field.
func (o *ObjsReminder) SetTime(v int32) {
	o.Time = &v
}

// GetUser returns the User field value
func (o *ObjsReminder) GetUser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *ObjsReminder) GetUserOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *ObjsReminder) SetUser(v string) {
	o.User = v
}

func (o ObjsReminder) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CompleteTs) {
		toSerialize["complete_ts"] = o.CompleteTs
	}
	if true {
		toSerialize["creator"] = o.Creator
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["recurring"] = o.Recurring
	}
	if true {
		toSerialize["text"] = o.Text
	}
	if !isNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if true {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableObjsReminder struct {
	value *ObjsReminder
	isSet bool
}

func (v NullableObjsReminder) Get() *ObjsReminder {
	return v.value
}

func (v *NullableObjsReminder) Set(val *ObjsReminder) {
	v.value = val
	v.isSet = true
}

func (v NullableObjsReminder) IsSet() bool {
	return v.isSet
}

func (v *NullableObjsReminder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjsReminder(val *ObjsReminder) *NullableObjsReminder {
	return &NullableObjsReminder{value: val, isSet: true}
}

func (v NullableObjsReminder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjsReminder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


