/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// AppsPermissionsInfoSchemaInfo struct for AppsPermissionsInfoSchemaInfo
type AppsPermissionsInfoSchemaInfo struct {
	AppHome AppsPermissionsInfoSchemaInfoAppHome `json:"app_home"`
	Channel AppsPermissionsInfoSchemaInfoAppHome `json:"channel"`
	Group AppsPermissionsInfoSchemaInfoAppHome `json:"group"`
	Im AppsPermissionsInfoSchemaInfoAppHome `json:"im"`
	Mpim AppsPermissionsInfoSchemaInfoAppHome `json:"mpim"`
	Team AppsPermissionsInfoSchemaInfoTeam `json:"team"`
}

// NewAppsPermissionsInfoSchemaInfo instantiates a new AppsPermissionsInfoSchemaInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppsPermissionsInfoSchemaInfo(appHome AppsPermissionsInfoSchemaInfoAppHome, channel AppsPermissionsInfoSchemaInfoAppHome, group AppsPermissionsInfoSchemaInfoAppHome, im AppsPermissionsInfoSchemaInfoAppHome, mpim AppsPermissionsInfoSchemaInfoAppHome, team AppsPermissionsInfoSchemaInfoTeam) *AppsPermissionsInfoSchemaInfo {
	this := AppsPermissionsInfoSchemaInfo{}
	this.AppHome = appHome
	this.Channel = channel
	this.Group = group
	this.Im = im
	this.Mpim = mpim
	this.Team = team
	return &this
}

// NewAppsPermissionsInfoSchemaInfoWithDefaults instantiates a new AppsPermissionsInfoSchemaInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppsPermissionsInfoSchemaInfoWithDefaults() *AppsPermissionsInfoSchemaInfo {
	this := AppsPermissionsInfoSchemaInfo{}
	return &this
}

// GetAppHome returns the AppHome field value
func (o *AppsPermissionsInfoSchemaInfo) GetAppHome() AppsPermissionsInfoSchemaInfoAppHome {
	if o == nil {
		var ret AppsPermissionsInfoSchemaInfoAppHome
		return ret
	}

	return o.AppHome
}

// GetAppHomeOk returns a tuple with the AppHome field value
// and a boolean to check if the value has been set.
func (o *AppsPermissionsInfoSchemaInfo) GetAppHomeOk() (*AppsPermissionsInfoSchemaInfoAppHome, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AppHome, true
}

// SetAppHome sets field value
func (o *AppsPermissionsInfoSchemaInfo) SetAppHome(v AppsPermissionsInfoSchemaInfoAppHome) {
	o.AppHome = v
}

// GetChannel returns the Channel field value
func (o *AppsPermissionsInfoSchemaInfo) GetChannel() AppsPermissionsInfoSchemaInfoAppHome {
	if o == nil {
		var ret AppsPermissionsInfoSchemaInfoAppHome
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *AppsPermissionsInfoSchemaInfo) GetChannelOk() (*AppsPermissionsInfoSchemaInfoAppHome, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *AppsPermissionsInfoSchemaInfo) SetChannel(v AppsPermissionsInfoSchemaInfoAppHome) {
	o.Channel = v
}

// GetGroup returns the Group field value
func (o *AppsPermissionsInfoSchemaInfo) GetGroup() AppsPermissionsInfoSchemaInfoAppHome {
	if o == nil {
		var ret AppsPermissionsInfoSchemaInfoAppHome
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *AppsPermissionsInfoSchemaInfo) GetGroupOk() (*AppsPermissionsInfoSchemaInfoAppHome, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *AppsPermissionsInfoSchemaInfo) SetGroup(v AppsPermissionsInfoSchemaInfoAppHome) {
	o.Group = v
}

// GetIm returns the Im field value
func (o *AppsPermissionsInfoSchemaInfo) GetIm() AppsPermissionsInfoSchemaInfoAppHome {
	if o == nil {
		var ret AppsPermissionsInfoSchemaInfoAppHome
		return ret
	}

	return o.Im
}

// GetImOk returns a tuple with the Im field value
// and a boolean to check if the value has been set.
func (o *AppsPermissionsInfoSchemaInfo) GetImOk() (*AppsPermissionsInfoSchemaInfoAppHome, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Im, true
}

// SetIm sets field value
func (o *AppsPermissionsInfoSchemaInfo) SetIm(v AppsPermissionsInfoSchemaInfoAppHome) {
	o.Im = v
}

// GetMpim returns the Mpim field value
func (o *AppsPermissionsInfoSchemaInfo) GetMpim() AppsPermissionsInfoSchemaInfoAppHome {
	if o == nil {
		var ret AppsPermissionsInfoSchemaInfoAppHome
		return ret
	}

	return o.Mpim
}

// GetMpimOk returns a tuple with the Mpim field value
// and a boolean to check if the value has been set.
func (o *AppsPermissionsInfoSchemaInfo) GetMpimOk() (*AppsPermissionsInfoSchemaInfoAppHome, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Mpim, true
}

// SetMpim sets field value
func (o *AppsPermissionsInfoSchemaInfo) SetMpim(v AppsPermissionsInfoSchemaInfoAppHome) {
	o.Mpim = v
}

// GetTeam returns the Team field value
func (o *AppsPermissionsInfoSchemaInfo) GetTeam() AppsPermissionsInfoSchemaInfoTeam {
	if o == nil {
		var ret AppsPermissionsInfoSchemaInfoTeam
		return ret
	}

	return o.Team
}

// GetTeamOk returns a tuple with the Team field value
// and a boolean to check if the value has been set.
func (o *AppsPermissionsInfoSchemaInfo) GetTeamOk() (*AppsPermissionsInfoSchemaInfoTeam, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Team, true
}

// SetTeam sets field value
func (o *AppsPermissionsInfoSchemaInfo) SetTeam(v AppsPermissionsInfoSchemaInfoTeam) {
	o.Team = v
}

func (o AppsPermissionsInfoSchemaInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["app_home"] = o.AppHome
	}
	if true {
		toSerialize["channel"] = o.Channel
	}
	if true {
		toSerialize["group"] = o.Group
	}
	if true {
		toSerialize["im"] = o.Im
	}
	if true {
		toSerialize["mpim"] = o.Mpim
	}
	if true {
		toSerialize["team"] = o.Team
	}
	return json.Marshal(toSerialize)
}

type NullableAppsPermissionsInfoSchemaInfo struct {
	value *AppsPermissionsInfoSchemaInfo
	isSet bool
}

func (v NullableAppsPermissionsInfoSchemaInfo) Get() *AppsPermissionsInfoSchemaInfo {
	return v.value
}

func (v *NullableAppsPermissionsInfoSchemaInfo) Set(val *AppsPermissionsInfoSchemaInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAppsPermissionsInfoSchemaInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAppsPermissionsInfoSchemaInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppsPermissionsInfoSchemaInfo(val *AppsPermissionsInfoSchemaInfo) *NullableAppsPermissionsInfoSchemaInfo {
	return &NullableAppsPermissionsInfoSchemaInfo{value: val, isSet: true}
}

func (v NullableAppsPermissionsInfoSchemaInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppsPermissionsInfoSchemaInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


