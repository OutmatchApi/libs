/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// MessageObject struct for MessageObject
type MessageObject struct {
	Attachments []map[string]interface{} `json:"attachments,omitempty"`
	Blocks map[string]interface{} `json:"blocks,omitempty"`
	Text string `json:"text"`
}

// NewMessageObject instantiates a new MessageObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageObject(text string) *MessageObject {
	this := MessageObject{}
	this.Text = text
	return &this
}

// NewMessageObjectWithDefaults instantiates a new MessageObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageObjectWithDefaults() *MessageObject {
	this := MessageObject{}
	return &this
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *MessageObject) GetAttachments() []map[string]interface{} {
	if o == nil || isNil(o.Attachments) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageObject) GetAttachmentsOk() ([]map[string]interface{}, bool) {
	if o == nil || isNil(o.Attachments) {
    return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *MessageObject) HasAttachments() bool {
	if o != nil && !isNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []map[string]interface{} and assigns it to the Attachments field.
func (o *MessageObject) SetAttachments(v []map[string]interface{}) {
	o.Attachments = v
}

// GetBlocks returns the Blocks field value if set, zero value otherwise.
func (o *MessageObject) GetBlocks() map[string]interface{} {
	if o == nil || isNil(o.Blocks) {
		var ret map[string]interface{}
		return ret
	}
	return o.Blocks
}

// GetBlocksOk returns a tuple with the Blocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessageObject) GetBlocksOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Blocks) {
    return map[string]interface{}{}, false
	}
	return o.Blocks, true
}

// HasBlocks returns a boolean if a field has been set.
func (o *MessageObject) HasBlocks() bool {
	if o != nil && !isNil(o.Blocks) {
		return true
	}

	return false
}

// SetBlocks gets a reference to the given map[string]interface{} and assigns it to the Blocks field.
func (o *MessageObject) SetBlocks(v map[string]interface{}) {
	o.Blocks = v
}

// GetText returns the Text field value
func (o *MessageObject) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *MessageObject) GetTextOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *MessageObject) SetText(v string) {
	o.Text = v
}

func (o MessageObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !isNil(o.Blocks) {
		toSerialize["blocks"] = o.Blocks
	}
	if true {
		toSerialize["text"] = o.Text
	}
	return json.Marshal(toSerialize)
}

type NullableMessageObject struct {
	value *MessageObject
	isSet bool
}

func (v NullableMessageObject) Get() *MessageObject {
	return v.value
}

func (v *NullableMessageObject) Set(val *MessageObject) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageObject) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageObject(val *MessageObject) *NullableMessageObject {
	return &NullableMessageObject{value: val, isSet: true}
}

func (v NullableMessageObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


