/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// AdminConversationsGetTeamsSchema Schema for successful response of admin.conversations.getTeams
type AdminConversationsGetTeamsSchema struct {
	Ok DefsOkTrue `json:"ok"`
	ResponseMetadata *AdminConversationsGetTeamsSchemaResponseMetadata `json:"response_metadata,omitempty"`
	TeamIds []string `json:"team_ids"`
}

// NewAdminConversationsGetTeamsSchema instantiates a new AdminConversationsGetTeamsSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminConversationsGetTeamsSchema(ok DefsOkTrue, teamIds []string) *AdminConversationsGetTeamsSchema {
	this := AdminConversationsGetTeamsSchema{}
	this.Ok = ok
	this.TeamIds = teamIds
	return &this
}

// NewAdminConversationsGetTeamsSchemaWithDefaults instantiates a new AdminConversationsGetTeamsSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminConversationsGetTeamsSchemaWithDefaults() *AdminConversationsGetTeamsSchema {
	this := AdminConversationsGetTeamsSchema{}
	return &this
}

// GetOk returns the Ok field value
func (o *AdminConversationsGetTeamsSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *AdminConversationsGetTeamsSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *AdminConversationsGetTeamsSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetResponseMetadata returns the ResponseMetadata field value if set, zero value otherwise.
func (o *AdminConversationsGetTeamsSchema) GetResponseMetadata() AdminConversationsGetTeamsSchemaResponseMetadata {
	if o == nil || isNil(o.ResponseMetadata) {
		var ret AdminConversationsGetTeamsSchemaResponseMetadata
		return ret
	}
	return *o.ResponseMetadata
}

// GetResponseMetadataOk returns a tuple with the ResponseMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConversationsGetTeamsSchema) GetResponseMetadataOk() (*AdminConversationsGetTeamsSchemaResponseMetadata, bool) {
	if o == nil || isNil(o.ResponseMetadata) {
    return nil, false
	}
	return o.ResponseMetadata, true
}

// HasResponseMetadata returns a boolean if a field has been set.
func (o *AdminConversationsGetTeamsSchema) HasResponseMetadata() bool {
	if o != nil && !isNil(o.ResponseMetadata) {
		return true
	}

	return false
}

// SetResponseMetadata gets a reference to the given AdminConversationsGetTeamsSchemaResponseMetadata and assigns it to the ResponseMetadata field.
func (o *AdminConversationsGetTeamsSchema) SetResponseMetadata(v AdminConversationsGetTeamsSchemaResponseMetadata) {
	o.ResponseMetadata = &v
}

// GetTeamIds returns the TeamIds field value
func (o *AdminConversationsGetTeamsSchema) GetTeamIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TeamIds
}

// GetTeamIdsOk returns a tuple with the TeamIds field value
// and a boolean to check if the value has been set.
func (o *AdminConversationsGetTeamsSchema) GetTeamIdsOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.TeamIds, true
}

// SetTeamIds sets field value
func (o *AdminConversationsGetTeamsSchema) SetTeamIds(v []string) {
	o.TeamIds = v
}

func (o AdminConversationsGetTeamsSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if !isNil(o.ResponseMetadata) {
		toSerialize["response_metadata"] = o.ResponseMetadata
	}
	if true {
		toSerialize["team_ids"] = o.TeamIds
	}
	return json.Marshal(toSerialize)
}

type NullableAdminConversationsGetTeamsSchema struct {
	value *AdminConversationsGetTeamsSchema
	isSet bool
}

func (v NullableAdminConversationsGetTeamsSchema) Get() *AdminConversationsGetTeamsSchema {
	return v.value
}

func (v *NullableAdminConversationsGetTeamsSchema) Set(val *AdminConversationsGetTeamsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminConversationsGetTeamsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminConversationsGetTeamsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminConversationsGetTeamsSchema(val *AdminConversationsGetTeamsSchema) *NullableAdminConversationsGetTeamsSchema {
	return &NullableAdminConversationsGetTeamsSchema{value: val, isSet: true}
}

func (v NullableAdminConversationsGetTeamsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminConversationsGetTeamsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


