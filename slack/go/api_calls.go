/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// CallsApiService CallsApi service
type CallsApiService service

type ApiCallsAddRequest struct {
	ctx context.Context
	ApiService *CallsApiService
	token *string
	externalUniqueId *string
	joinUrl *string
	createdBy *string
	dateStart *int32
	desktopAppJoinUrl *string
	externalDisplayId *string
	title *string
	users *string
}

// Authentication token. Requires scope: &#x60;calls:write&#x60;
func (r ApiCallsAddRequest) Token(token string) ApiCallsAddRequest {
	r.token = &token
	return r
}

// An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service.
func (r ApiCallsAddRequest) ExternalUniqueId(externalUniqueId string) ApiCallsAddRequest {
	r.externalUniqueId = &externalUniqueId
	return r
}

// The URL required for a client to join the Call.
func (r ApiCallsAddRequest) JoinUrl(joinUrl string) ApiCallsAddRequest {
	r.joinUrl = &joinUrl
	return r
}

// The valid Slack user ID of the user who created this Call. When this method is called with a user token, the &#x60;created_by&#x60; field is optional and defaults to the authed user of the token. Otherwise, the field is required.
func (r ApiCallsAddRequest) CreatedBy(createdBy string) ApiCallsAddRequest {
	r.createdBy = &createdBy
	return r
}

// Call start time in UTC UNIX timestamp format
func (r ApiCallsAddRequest) DateStart(dateStart int32) ApiCallsAddRequest {
	r.dateStart = &dateStart
	return r
}

// When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
func (r ApiCallsAddRequest) DesktopAppJoinUrl(desktopAppJoinUrl string) ApiCallsAddRequest {
	r.desktopAppJoinUrl = &desktopAppJoinUrl
	return r
}

// An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object.
func (r ApiCallsAddRequest) ExternalDisplayId(externalDisplayId string) ApiCallsAddRequest {
	r.externalDisplayId = &externalDisplayId
	return r
}

// The name of the Call.
func (r ApiCallsAddRequest) Title(title string) ApiCallsAddRequest {
	r.title = &title
	return r
}

// The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
func (r ApiCallsAddRequest) Users(users string) ApiCallsAddRequest {
	r.users = &users
	return r
}

func (r ApiCallsAddRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.CallsAddExecute(r)
}

/*
CallsAdd Method for CallsAdd

Registers a new Call.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCallsAddRequest
*/
func (a *CallsApiService) CallsAdd(ctx context.Context) ApiCallsAddRequest {
	return ApiCallsAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *CallsApiService) CallsAddExecute(r ApiCallsAddRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallsApiService.CallsAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/calls.add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.externalUniqueId == nil {
		return localVarReturnValue, nil, reportError("externalUniqueId is required and must be specified")
	}
	if r.joinUrl == nil {
		return localVarReturnValue, nil, reportError("joinUrl is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.createdBy != nil {
		localVarFormParams.Add("created_by", parameterToString(*r.createdBy, ""))
	}
	if r.dateStart != nil {
		localVarFormParams.Add("date_start", parameterToString(*r.dateStart, ""))
	}
	if r.desktopAppJoinUrl != nil {
		localVarFormParams.Add("desktop_app_join_url", parameterToString(*r.desktopAppJoinUrl, ""))
	}
	if r.externalDisplayId != nil {
		localVarFormParams.Add("external_display_id", parameterToString(*r.externalDisplayId, ""))
	}
	localVarFormParams.Add("external_unique_id", parameterToString(*r.externalUniqueId, ""))
	localVarFormParams.Add("join_url", parameterToString(*r.joinUrl, ""))
	if r.title != nil {
		localVarFormParams.Add("title", parameterToString(*r.title, ""))
	}
	if r.users != nil {
		localVarFormParams.Add("users", parameterToString(*r.users, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCallsEndRequest struct {
	ctx context.Context
	ApiService *CallsApiService
	token *string
	id *string
	duration *int32
}

// Authentication token. Requires scope: &#x60;calls:write&#x60;
func (r ApiCallsEndRequest) Token(token string) ApiCallsEndRequest {
	r.token = &token
	return r
}

// &#x60;id&#x60; returned when registering the call using the [&#x60;calls.add&#x60;](/methods/calls.add) method.
func (r ApiCallsEndRequest) Id(id string) ApiCallsEndRequest {
	r.id = &id
	return r
}

// Call duration in seconds
func (r ApiCallsEndRequest) Duration(duration int32) ApiCallsEndRequest {
	r.duration = &duration
	return r
}

func (r ApiCallsEndRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.CallsEndExecute(r)
}

/*
CallsEnd Method for CallsEnd

Ends a Call.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCallsEndRequest
*/
func (a *CallsApiService) CallsEnd(ctx context.Context) ApiCallsEndRequest {
	return ApiCallsEndRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *CallsApiService) CallsEndExecute(r ApiCallsEndRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallsApiService.CallsEnd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/calls.end"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.duration != nil {
		localVarFormParams.Add("duration", parameterToString(*r.duration, ""))
	}
	localVarFormParams.Add("id", parameterToString(*r.id, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCallsInfoRequest struct {
	ctx context.Context
	ApiService *CallsApiService
	token *string
	id *string
}

// Authentication token. Requires scope: &#x60;calls:read&#x60;
func (r ApiCallsInfoRequest) Token(token string) ApiCallsInfoRequest {
	r.token = &token
	return r
}

// &#x60;id&#x60; of the Call returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method.
func (r ApiCallsInfoRequest) Id(id string) ApiCallsInfoRequest {
	r.id = &id
	return r
}

func (r ApiCallsInfoRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.CallsInfoExecute(r)
}

/*
CallsInfo Method for CallsInfo

Returns information about a Call.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCallsInfoRequest
*/
func (a *CallsApiService) CallsInfo(ctx context.Context) ApiCallsInfoRequest {
	return ApiCallsInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *CallsApiService) CallsInfoExecute(r ApiCallsInfoRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallsApiService.CallsInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/calls.info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	localVarQueryParams.Add("id", parameterToString(*r.id, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCallsParticipantsAddRequest struct {
	ctx context.Context
	ApiService *CallsApiService
	token *string
	id *string
	users *string
}

// Authentication token. Requires scope: &#x60;calls:write&#x60;
func (r ApiCallsParticipantsAddRequest) Token(token string) ApiCallsParticipantsAddRequest {
	r.token = &token
	return r
}

// &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method.
func (r ApiCallsParticipantsAddRequest) Id(id string) ApiCallsParticipantsAddRequest {
	r.id = &id
	return r
}

// The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
func (r ApiCallsParticipantsAddRequest) Users(users string) ApiCallsParticipantsAddRequest {
	r.users = &users
	return r
}

func (r ApiCallsParticipantsAddRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.CallsParticipantsAddExecute(r)
}

/*
CallsParticipantsAdd Method for CallsParticipantsAdd

Registers new participants added to a Call.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCallsParticipantsAddRequest
*/
func (a *CallsApiService) CallsParticipantsAdd(ctx context.Context) ApiCallsParticipantsAddRequest {
	return ApiCallsParticipantsAddRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *CallsApiService) CallsParticipantsAddExecute(r ApiCallsParticipantsAddRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallsApiService.CallsParticipantsAdd")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/calls.participants.add"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}
	if r.users == nil {
		return localVarReturnValue, nil, reportError("users is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("id", parameterToString(*r.id, ""))
	localVarFormParams.Add("users", parameterToString(*r.users, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCallsParticipantsRemoveRequest struct {
	ctx context.Context
	ApiService *CallsApiService
	token *string
	id *string
	users *string
}

// Authentication token. Requires scope: &#x60;calls:write&#x60;
func (r ApiCallsParticipantsRemoveRequest) Token(token string) ApiCallsParticipantsRemoveRequest {
	r.token = &token
	return r
}

// &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method.
func (r ApiCallsParticipantsRemoveRequest) Id(id string) ApiCallsParticipantsRemoveRequest {
	r.id = &id
	return r
}

// The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
func (r ApiCallsParticipantsRemoveRequest) Users(users string) ApiCallsParticipantsRemoveRequest {
	r.users = &users
	return r
}

func (r ApiCallsParticipantsRemoveRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.CallsParticipantsRemoveExecute(r)
}

/*
CallsParticipantsRemove Method for CallsParticipantsRemove

Registers participants removed from a Call.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCallsParticipantsRemoveRequest
*/
func (a *CallsApiService) CallsParticipantsRemove(ctx context.Context) ApiCallsParticipantsRemoveRequest {
	return ApiCallsParticipantsRemoveRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *CallsApiService) CallsParticipantsRemoveExecute(r ApiCallsParticipantsRemoveRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallsApiService.CallsParticipantsRemove")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/calls.participants.remove"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}
	if r.users == nil {
		return localVarReturnValue, nil, reportError("users is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("id", parameterToString(*r.id, ""))
	localVarFormParams.Add("users", parameterToString(*r.users, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCallsUpdateRequest struct {
	ctx context.Context
	ApiService *CallsApiService
	token *string
	id *string
	desktopAppJoinUrl *string
	joinUrl *string
	title *string
}

// Authentication token. Requires scope: &#x60;calls:write&#x60;
func (r ApiCallsUpdateRequest) Token(token string) ApiCallsUpdateRequest {
	r.token = &token
	return r
}

// &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method.
func (r ApiCallsUpdateRequest) Id(id string) ApiCallsUpdateRequest {
	r.id = &id
	return r
}

// When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
func (r ApiCallsUpdateRequest) DesktopAppJoinUrl(desktopAppJoinUrl string) ApiCallsUpdateRequest {
	r.desktopAppJoinUrl = &desktopAppJoinUrl
	return r
}

// The URL required for a client to join the Call.
func (r ApiCallsUpdateRequest) JoinUrl(joinUrl string) ApiCallsUpdateRequest {
	r.joinUrl = &joinUrl
	return r
}

// The name of the Call.
func (r ApiCallsUpdateRequest) Title(title string) ApiCallsUpdateRequest {
	r.title = &title
	return r
}

func (r ApiCallsUpdateRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.CallsUpdateExecute(r)
}

/*
CallsUpdate Method for CallsUpdate

Updates information about a Call.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCallsUpdateRequest
*/
func (a *CallsApiService) CallsUpdate(ctx context.Context) ApiCallsUpdateRequest {
	return ApiCallsUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *CallsApiService) CallsUpdateExecute(r ApiCallsUpdateRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CallsApiService.CallsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/calls.update"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.id == nil {
		return localVarReturnValue, nil, reportError("id is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.desktopAppJoinUrl != nil {
		localVarFormParams.Add("desktop_app_join_url", parameterToString(*r.desktopAppJoinUrl, ""))
	}
	localVarFormParams.Add("id", parameterToString(*r.id, ""))
	if r.joinUrl != nil {
		localVarFormParams.Add("join_url", parameterToString(*r.joinUrl, ""))
	}
	if r.title != nil {
		localVarFormParams.Add("title", parameterToString(*r.title, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
