/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// RemindersListSchema Schema for successful response from reminders.list method
type RemindersListSchema struct {
	Ok DefsOkTrue `json:"ok"`
	Reminders []ObjsReminder `json:"reminders"`
}

// NewRemindersListSchema instantiates a new RemindersListSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemindersListSchema(ok DefsOkTrue, reminders []ObjsReminder) *RemindersListSchema {
	this := RemindersListSchema{}
	this.Ok = ok
	this.Reminders = reminders
	return &this
}

// NewRemindersListSchemaWithDefaults instantiates a new RemindersListSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemindersListSchemaWithDefaults() *RemindersListSchema {
	this := RemindersListSchema{}
	return &this
}

// GetOk returns the Ok field value
func (o *RemindersListSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *RemindersListSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *RemindersListSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetReminders returns the Reminders field value
func (o *RemindersListSchema) GetReminders() []ObjsReminder {
	if o == nil {
		var ret []ObjsReminder
		return ret
	}

	return o.Reminders
}

// GetRemindersOk returns a tuple with the Reminders field value
// and a boolean to check if the value has been set.
func (o *RemindersListSchema) GetRemindersOk() ([]ObjsReminder, bool) {
	if o == nil {
    return nil, false
	}
	return o.Reminders, true
}

// SetReminders sets field value
func (o *RemindersListSchema) SetReminders(v []ObjsReminder) {
	o.Reminders = v
}

func (o RemindersListSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if true {
		toSerialize["reminders"] = o.Reminders
	}
	return json.Marshal(toSerialize)
}

type NullableRemindersListSchema struct {
	value *RemindersListSchema
	isSet bool
}

func (v NullableRemindersListSchema) Get() *RemindersListSchema {
	return v.value
}

func (v *NullableRemindersListSchema) Set(val *RemindersListSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableRemindersListSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableRemindersListSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemindersListSchema(val *RemindersListSchema) *NullableRemindersListSchema {
	return &NullableRemindersListSchema{value: val, isSet: true}
}

func (v NullableRemindersListSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemindersListSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


