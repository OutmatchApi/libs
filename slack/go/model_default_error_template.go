/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// DefaultErrorTemplate This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.
type DefaultErrorTemplate struct {
	Ok DefsOkFalse `json:"ok"`
	AdditionalProperties map[string]interface{}
}

type _DefaultErrorTemplate DefaultErrorTemplate

// NewDefaultErrorTemplate instantiates a new DefaultErrorTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultErrorTemplate(ok DefsOkFalse) *DefaultErrorTemplate {
	this := DefaultErrorTemplate{}
	this.Ok = ok
	return &this
}

// NewDefaultErrorTemplateWithDefaults instantiates a new DefaultErrorTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultErrorTemplateWithDefaults() *DefaultErrorTemplate {
	this := DefaultErrorTemplate{}
	return &this
}

// GetOk returns the Ok field value
func (o *DefaultErrorTemplate) GetOk() DefsOkFalse {
	if o == nil {
		var ret DefsOkFalse
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *DefaultErrorTemplate) GetOkOk() (*DefsOkFalse, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *DefaultErrorTemplate) SetOk(v DefsOkFalse) {
	o.Ok = v
}

func (o DefaultErrorTemplate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ok"] = o.Ok
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *DefaultErrorTemplate) UnmarshalJSON(bytes []byte) (err error) {
	varDefaultErrorTemplate := _DefaultErrorTemplate{}

	if err = json.Unmarshal(bytes, &varDefaultErrorTemplate); err == nil {
		*o = DefaultErrorTemplate(varDefaultErrorTemplate)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ok")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDefaultErrorTemplate struct {
	value *DefaultErrorTemplate
	isSet bool
}

func (v NullableDefaultErrorTemplate) Get() *DefaultErrorTemplate {
	return v.value
}

func (v *NullableDefaultErrorTemplate) Set(val *DefaultErrorTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultErrorTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultErrorTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultErrorTemplate(val *DefaultErrorTemplate) *NullableDefaultErrorTemplate {
	return &NullableDefaultErrorTemplate{value: val, isSet: true}
}

func (v NullableDefaultErrorTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultErrorTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


