/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ObjsTeam struct for ObjsTeam
type ObjsTeam struct {
	Archived *bool `json:"archived,omitempty"`
	AvatarBaseUrl *string `json:"avatar_base_url,omitempty"`
	Created *int32 `json:"created,omitempty"`
	DateCreate *int32 `json:"date_create,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Discoverable []ObjsTeamDiscoverableInner `json:"discoverable,omitempty"`
	Domain string `json:"domain"`
	EmailDomain string `json:"email_domain"`
	EnterpriseId *string `json:"enterprise_id,omitempty"`
	EnterpriseName *string `json:"enterprise_name,omitempty"`
	ExternalOrgMigrations *ObjsExternalOrgMigrations `json:"external_org_migrations,omitempty"`
	HasComplianceExport *bool `json:"has_compliance_export,omitempty"`
	Icon ObjsIcon `json:"icon"`
	Id string `json:"id"`
	IsAssigned *bool `json:"is_assigned,omitempty"`
	IsEnterprise *int32 `json:"is_enterprise,omitempty"`
	IsOverStorageLimit *bool `json:"is_over_storage_limit,omitempty"`
	LimitTs *int32 `json:"limit_ts,omitempty"`
	Locale *string `json:"locale,omitempty"`
	MessagesCount *int32 `json:"messages_count,omitempty"`
	MsgEditWindowMins *int32 `json:"msg_edit_window_mins,omitempty"`
	Name string `json:"name"`
	OverIntegrationsLimit *bool `json:"over_integrations_limit,omitempty"`
	OverStorageLimit *bool `json:"over_storage_limit,omitempty"`
	PayProdCur *string `json:"pay_prod_cur,omitempty"`
	Plan *string `json:"plan,omitempty"`
	PrimaryOwner *ObjsPrimaryOwner `json:"primary_owner,omitempty"`
	SsoProvider *ObjsTeamSsoProvider `json:"sso_provider,omitempty"`
}

// NewObjsTeam instantiates a new ObjsTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjsTeam(domain string, emailDomain string, icon ObjsIcon, id string, name string) *ObjsTeam {
	this := ObjsTeam{}
	this.Domain = domain
	this.EmailDomain = emailDomain
	this.Icon = icon
	this.Id = id
	this.Name = name
	return &this
}

// NewObjsTeamWithDefaults instantiates a new ObjsTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjsTeamWithDefaults() *ObjsTeam {
	this := ObjsTeam{}
	return &this
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *ObjsTeam) GetArchived() bool {
	if o == nil || isNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetArchivedOk() (*bool, bool) {
	if o == nil || isNil(o.Archived) {
    return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *ObjsTeam) HasArchived() bool {
	if o != nil && !isNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *ObjsTeam) SetArchived(v bool) {
	o.Archived = &v
}

// GetAvatarBaseUrl returns the AvatarBaseUrl field value if set, zero value otherwise.
func (o *ObjsTeam) GetAvatarBaseUrl() string {
	if o == nil || isNil(o.AvatarBaseUrl) {
		var ret string
		return ret
	}
	return *o.AvatarBaseUrl
}

// GetAvatarBaseUrlOk returns a tuple with the AvatarBaseUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetAvatarBaseUrlOk() (*string, bool) {
	if o == nil || isNil(o.AvatarBaseUrl) {
    return nil, false
	}
	return o.AvatarBaseUrl, true
}

// HasAvatarBaseUrl returns a boolean if a field has been set.
func (o *ObjsTeam) HasAvatarBaseUrl() bool {
	if o != nil && !isNil(o.AvatarBaseUrl) {
		return true
	}

	return false
}

// SetAvatarBaseUrl gets a reference to the given string and assigns it to the AvatarBaseUrl field.
func (o *ObjsTeam) SetAvatarBaseUrl(v string) {
	o.AvatarBaseUrl = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *ObjsTeam) GetCreated() int32 {
	if o == nil || isNil(o.Created) {
		var ret int32
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetCreatedOk() (*int32, bool) {
	if o == nil || isNil(o.Created) {
    return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *ObjsTeam) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int32 and assigns it to the Created field.
func (o *ObjsTeam) SetCreated(v int32) {
	o.Created = &v
}

// GetDateCreate returns the DateCreate field value if set, zero value otherwise.
func (o *ObjsTeam) GetDateCreate() int32 {
	if o == nil || isNil(o.DateCreate) {
		var ret int32
		return ret
	}
	return *o.DateCreate
}

// GetDateCreateOk returns a tuple with the DateCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetDateCreateOk() (*int32, bool) {
	if o == nil || isNil(o.DateCreate) {
    return nil, false
	}
	return o.DateCreate, true
}

// HasDateCreate returns a boolean if a field has been set.
func (o *ObjsTeam) HasDateCreate() bool {
	if o != nil && !isNil(o.DateCreate) {
		return true
	}

	return false
}

// SetDateCreate gets a reference to the given int32 and assigns it to the DateCreate field.
func (o *ObjsTeam) SetDateCreate(v int32) {
	o.DateCreate = &v
}

// GetDeleted returns the Deleted field value if set, zero value otherwise.
func (o *ObjsTeam) GetDeleted() bool {
	if o == nil || isNil(o.Deleted) {
		var ret bool
		return ret
	}
	return *o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetDeletedOk() (*bool, bool) {
	if o == nil || isNil(o.Deleted) {
    return nil, false
	}
	return o.Deleted, true
}

// HasDeleted returns a boolean if a field has been set.
func (o *ObjsTeam) HasDeleted() bool {
	if o != nil && !isNil(o.Deleted) {
		return true
	}

	return false
}

// SetDeleted gets a reference to the given bool and assigns it to the Deleted field.
func (o *ObjsTeam) SetDeleted(v bool) {
	o.Deleted = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjsTeam) GetDescription() string {
	if o == nil || isNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjsTeam) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ObjsTeam) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ObjsTeam) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ObjsTeam) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ObjsTeam) UnsetDescription() {
	o.Description.Unset()
}

// GetDiscoverable returns the Discoverable field value if set, zero value otherwise.
func (o *ObjsTeam) GetDiscoverable() []ObjsTeamDiscoverableInner {
	if o == nil || isNil(o.Discoverable) {
		var ret []ObjsTeamDiscoverableInner
		return ret
	}
	return o.Discoverable
}

// GetDiscoverableOk returns a tuple with the Discoverable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetDiscoverableOk() ([]ObjsTeamDiscoverableInner, bool) {
	if o == nil || isNil(o.Discoverable) {
    return nil, false
	}
	return o.Discoverable, true
}

// HasDiscoverable returns a boolean if a field has been set.
func (o *ObjsTeam) HasDiscoverable() bool {
	if o != nil && !isNil(o.Discoverable) {
		return true
	}

	return false
}

// SetDiscoverable gets a reference to the given []ObjsTeamDiscoverableInner and assigns it to the Discoverable field.
func (o *ObjsTeam) SetDiscoverable(v []ObjsTeamDiscoverableInner) {
	o.Discoverable = v
}

// GetDomain returns the Domain field value
func (o *ObjsTeam) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetDomainOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *ObjsTeam) SetDomain(v string) {
	o.Domain = v
}

// GetEmailDomain returns the EmailDomain field value
func (o *ObjsTeam) GetEmailDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EmailDomain
}

// GetEmailDomainOk returns a tuple with the EmailDomain field value
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetEmailDomainOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.EmailDomain, true
}

// SetEmailDomain sets field value
func (o *ObjsTeam) SetEmailDomain(v string) {
	o.EmailDomain = v
}

// GetEnterpriseId returns the EnterpriseId field value if set, zero value otherwise.
func (o *ObjsTeam) GetEnterpriseId() string {
	if o == nil || isNil(o.EnterpriseId) {
		var ret string
		return ret
	}
	return *o.EnterpriseId
}

// GetEnterpriseIdOk returns a tuple with the EnterpriseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetEnterpriseIdOk() (*string, bool) {
	if o == nil || isNil(o.EnterpriseId) {
    return nil, false
	}
	return o.EnterpriseId, true
}

// HasEnterpriseId returns a boolean if a field has been set.
func (o *ObjsTeam) HasEnterpriseId() bool {
	if o != nil && !isNil(o.EnterpriseId) {
		return true
	}

	return false
}

// SetEnterpriseId gets a reference to the given string and assigns it to the EnterpriseId field.
func (o *ObjsTeam) SetEnterpriseId(v string) {
	o.EnterpriseId = &v
}

// GetEnterpriseName returns the EnterpriseName field value if set, zero value otherwise.
func (o *ObjsTeam) GetEnterpriseName() string {
	if o == nil || isNil(o.EnterpriseName) {
		var ret string
		return ret
	}
	return *o.EnterpriseName
}

// GetEnterpriseNameOk returns a tuple with the EnterpriseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetEnterpriseNameOk() (*string, bool) {
	if o == nil || isNil(o.EnterpriseName) {
    return nil, false
	}
	return o.EnterpriseName, true
}

// HasEnterpriseName returns a boolean if a field has been set.
func (o *ObjsTeam) HasEnterpriseName() bool {
	if o != nil && !isNil(o.EnterpriseName) {
		return true
	}

	return false
}

// SetEnterpriseName gets a reference to the given string and assigns it to the EnterpriseName field.
func (o *ObjsTeam) SetEnterpriseName(v string) {
	o.EnterpriseName = &v
}

// GetExternalOrgMigrations returns the ExternalOrgMigrations field value if set, zero value otherwise.
func (o *ObjsTeam) GetExternalOrgMigrations() ObjsExternalOrgMigrations {
	if o == nil || isNil(o.ExternalOrgMigrations) {
		var ret ObjsExternalOrgMigrations
		return ret
	}
	return *o.ExternalOrgMigrations
}

// GetExternalOrgMigrationsOk returns a tuple with the ExternalOrgMigrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetExternalOrgMigrationsOk() (*ObjsExternalOrgMigrations, bool) {
	if o == nil || isNil(o.ExternalOrgMigrations) {
    return nil, false
	}
	return o.ExternalOrgMigrations, true
}

// HasExternalOrgMigrations returns a boolean if a field has been set.
func (o *ObjsTeam) HasExternalOrgMigrations() bool {
	if o != nil && !isNil(o.ExternalOrgMigrations) {
		return true
	}

	return false
}

// SetExternalOrgMigrations gets a reference to the given ObjsExternalOrgMigrations and assigns it to the ExternalOrgMigrations field.
func (o *ObjsTeam) SetExternalOrgMigrations(v ObjsExternalOrgMigrations) {
	o.ExternalOrgMigrations = &v
}

// GetHasComplianceExport returns the HasComplianceExport field value if set, zero value otherwise.
func (o *ObjsTeam) GetHasComplianceExport() bool {
	if o == nil || isNil(o.HasComplianceExport) {
		var ret bool
		return ret
	}
	return *o.HasComplianceExport
}

// GetHasComplianceExportOk returns a tuple with the HasComplianceExport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetHasComplianceExportOk() (*bool, bool) {
	if o == nil || isNil(o.HasComplianceExport) {
    return nil, false
	}
	return o.HasComplianceExport, true
}

// HasHasComplianceExport returns a boolean if a field has been set.
func (o *ObjsTeam) HasHasComplianceExport() bool {
	if o != nil && !isNil(o.HasComplianceExport) {
		return true
	}

	return false
}

// SetHasComplianceExport gets a reference to the given bool and assigns it to the HasComplianceExport field.
func (o *ObjsTeam) SetHasComplianceExport(v bool) {
	o.HasComplianceExport = &v
}

// GetIcon returns the Icon field value
func (o *ObjsTeam) GetIcon() ObjsIcon {
	if o == nil {
		var ret ObjsIcon
		return ret
	}

	return o.Icon
}

// GetIconOk returns a tuple with the Icon field value
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetIconOk() (*ObjsIcon, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Icon, true
}

// SetIcon sets field value
func (o *ObjsTeam) SetIcon(v ObjsIcon) {
	o.Icon = v
}

// GetId returns the Id field value
func (o *ObjsTeam) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ObjsTeam) SetId(v string) {
	o.Id = v
}

// GetIsAssigned returns the IsAssigned field value if set, zero value otherwise.
func (o *ObjsTeam) GetIsAssigned() bool {
	if o == nil || isNil(o.IsAssigned) {
		var ret bool
		return ret
	}
	return *o.IsAssigned
}

// GetIsAssignedOk returns a tuple with the IsAssigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetIsAssignedOk() (*bool, bool) {
	if o == nil || isNil(o.IsAssigned) {
    return nil, false
	}
	return o.IsAssigned, true
}

// HasIsAssigned returns a boolean if a field has been set.
func (o *ObjsTeam) HasIsAssigned() bool {
	if o != nil && !isNil(o.IsAssigned) {
		return true
	}

	return false
}

// SetIsAssigned gets a reference to the given bool and assigns it to the IsAssigned field.
func (o *ObjsTeam) SetIsAssigned(v bool) {
	o.IsAssigned = &v
}

// GetIsEnterprise returns the IsEnterprise field value if set, zero value otherwise.
func (o *ObjsTeam) GetIsEnterprise() int32 {
	if o == nil || isNil(o.IsEnterprise) {
		var ret int32
		return ret
	}
	return *o.IsEnterprise
}

// GetIsEnterpriseOk returns a tuple with the IsEnterprise field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetIsEnterpriseOk() (*int32, bool) {
	if o == nil || isNil(o.IsEnterprise) {
    return nil, false
	}
	return o.IsEnterprise, true
}

// HasIsEnterprise returns a boolean if a field has been set.
func (o *ObjsTeam) HasIsEnterprise() bool {
	if o != nil && !isNil(o.IsEnterprise) {
		return true
	}

	return false
}

// SetIsEnterprise gets a reference to the given int32 and assigns it to the IsEnterprise field.
func (o *ObjsTeam) SetIsEnterprise(v int32) {
	o.IsEnterprise = &v
}

// GetIsOverStorageLimit returns the IsOverStorageLimit field value if set, zero value otherwise.
func (o *ObjsTeam) GetIsOverStorageLimit() bool {
	if o == nil || isNil(o.IsOverStorageLimit) {
		var ret bool
		return ret
	}
	return *o.IsOverStorageLimit
}

// GetIsOverStorageLimitOk returns a tuple with the IsOverStorageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetIsOverStorageLimitOk() (*bool, bool) {
	if o == nil || isNil(o.IsOverStorageLimit) {
    return nil, false
	}
	return o.IsOverStorageLimit, true
}

// HasIsOverStorageLimit returns a boolean if a field has been set.
func (o *ObjsTeam) HasIsOverStorageLimit() bool {
	if o != nil && !isNil(o.IsOverStorageLimit) {
		return true
	}

	return false
}

// SetIsOverStorageLimit gets a reference to the given bool and assigns it to the IsOverStorageLimit field.
func (o *ObjsTeam) SetIsOverStorageLimit(v bool) {
	o.IsOverStorageLimit = &v
}

// GetLimitTs returns the LimitTs field value if set, zero value otherwise.
func (o *ObjsTeam) GetLimitTs() int32 {
	if o == nil || isNil(o.LimitTs) {
		var ret int32
		return ret
	}
	return *o.LimitTs
}

// GetLimitTsOk returns a tuple with the LimitTs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetLimitTsOk() (*int32, bool) {
	if o == nil || isNil(o.LimitTs) {
    return nil, false
	}
	return o.LimitTs, true
}

// HasLimitTs returns a boolean if a field has been set.
func (o *ObjsTeam) HasLimitTs() bool {
	if o != nil && !isNil(o.LimitTs) {
		return true
	}

	return false
}

// SetLimitTs gets a reference to the given int32 and assigns it to the LimitTs field.
func (o *ObjsTeam) SetLimitTs(v int32) {
	o.LimitTs = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *ObjsTeam) GetLocale() string {
	if o == nil || isNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetLocaleOk() (*string, bool) {
	if o == nil || isNil(o.Locale) {
    return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *ObjsTeam) HasLocale() bool {
	if o != nil && !isNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *ObjsTeam) SetLocale(v string) {
	o.Locale = &v
}

// GetMessagesCount returns the MessagesCount field value if set, zero value otherwise.
func (o *ObjsTeam) GetMessagesCount() int32 {
	if o == nil || isNil(o.MessagesCount) {
		var ret int32
		return ret
	}
	return *o.MessagesCount
}

// GetMessagesCountOk returns a tuple with the MessagesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetMessagesCountOk() (*int32, bool) {
	if o == nil || isNil(o.MessagesCount) {
    return nil, false
	}
	return o.MessagesCount, true
}

// HasMessagesCount returns a boolean if a field has been set.
func (o *ObjsTeam) HasMessagesCount() bool {
	if o != nil && !isNil(o.MessagesCount) {
		return true
	}

	return false
}

// SetMessagesCount gets a reference to the given int32 and assigns it to the MessagesCount field.
func (o *ObjsTeam) SetMessagesCount(v int32) {
	o.MessagesCount = &v
}

// GetMsgEditWindowMins returns the MsgEditWindowMins field value if set, zero value otherwise.
func (o *ObjsTeam) GetMsgEditWindowMins() int32 {
	if o == nil || isNil(o.MsgEditWindowMins) {
		var ret int32
		return ret
	}
	return *o.MsgEditWindowMins
}

// GetMsgEditWindowMinsOk returns a tuple with the MsgEditWindowMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetMsgEditWindowMinsOk() (*int32, bool) {
	if o == nil || isNil(o.MsgEditWindowMins) {
    return nil, false
	}
	return o.MsgEditWindowMins, true
}

// HasMsgEditWindowMins returns a boolean if a field has been set.
func (o *ObjsTeam) HasMsgEditWindowMins() bool {
	if o != nil && !isNil(o.MsgEditWindowMins) {
		return true
	}

	return false
}

// SetMsgEditWindowMins gets a reference to the given int32 and assigns it to the MsgEditWindowMins field.
func (o *ObjsTeam) SetMsgEditWindowMins(v int32) {
	o.MsgEditWindowMins = &v
}

// GetName returns the Name field value
func (o *ObjsTeam) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ObjsTeam) SetName(v string) {
	o.Name = v
}

// GetOverIntegrationsLimit returns the OverIntegrationsLimit field value if set, zero value otherwise.
func (o *ObjsTeam) GetOverIntegrationsLimit() bool {
	if o == nil || isNil(o.OverIntegrationsLimit) {
		var ret bool
		return ret
	}
	return *o.OverIntegrationsLimit
}

// GetOverIntegrationsLimitOk returns a tuple with the OverIntegrationsLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetOverIntegrationsLimitOk() (*bool, bool) {
	if o == nil || isNil(o.OverIntegrationsLimit) {
    return nil, false
	}
	return o.OverIntegrationsLimit, true
}

// HasOverIntegrationsLimit returns a boolean if a field has been set.
func (o *ObjsTeam) HasOverIntegrationsLimit() bool {
	if o != nil && !isNil(o.OverIntegrationsLimit) {
		return true
	}

	return false
}

// SetOverIntegrationsLimit gets a reference to the given bool and assigns it to the OverIntegrationsLimit field.
func (o *ObjsTeam) SetOverIntegrationsLimit(v bool) {
	o.OverIntegrationsLimit = &v
}

// GetOverStorageLimit returns the OverStorageLimit field value if set, zero value otherwise.
func (o *ObjsTeam) GetOverStorageLimit() bool {
	if o == nil || isNil(o.OverStorageLimit) {
		var ret bool
		return ret
	}
	return *o.OverStorageLimit
}

// GetOverStorageLimitOk returns a tuple with the OverStorageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetOverStorageLimitOk() (*bool, bool) {
	if o == nil || isNil(o.OverStorageLimit) {
    return nil, false
	}
	return o.OverStorageLimit, true
}

// HasOverStorageLimit returns a boolean if a field has been set.
func (o *ObjsTeam) HasOverStorageLimit() bool {
	if o != nil && !isNil(o.OverStorageLimit) {
		return true
	}

	return false
}

// SetOverStorageLimit gets a reference to the given bool and assigns it to the OverStorageLimit field.
func (o *ObjsTeam) SetOverStorageLimit(v bool) {
	o.OverStorageLimit = &v
}

// GetPayProdCur returns the PayProdCur field value if set, zero value otherwise.
func (o *ObjsTeam) GetPayProdCur() string {
	if o == nil || isNil(o.PayProdCur) {
		var ret string
		return ret
	}
	return *o.PayProdCur
}

// GetPayProdCurOk returns a tuple with the PayProdCur field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetPayProdCurOk() (*string, bool) {
	if o == nil || isNil(o.PayProdCur) {
    return nil, false
	}
	return o.PayProdCur, true
}

// HasPayProdCur returns a boolean if a field has been set.
func (o *ObjsTeam) HasPayProdCur() bool {
	if o != nil && !isNil(o.PayProdCur) {
		return true
	}

	return false
}

// SetPayProdCur gets a reference to the given string and assigns it to the PayProdCur field.
func (o *ObjsTeam) SetPayProdCur(v string) {
	o.PayProdCur = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *ObjsTeam) GetPlan() string {
	if o == nil || isNil(o.Plan) {
		var ret string
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetPlanOk() (*string, bool) {
	if o == nil || isNil(o.Plan) {
    return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *ObjsTeam) HasPlan() bool {
	if o != nil && !isNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given string and assigns it to the Plan field.
func (o *ObjsTeam) SetPlan(v string) {
	o.Plan = &v
}

// GetPrimaryOwner returns the PrimaryOwner field value if set, zero value otherwise.
func (o *ObjsTeam) GetPrimaryOwner() ObjsPrimaryOwner {
	if o == nil || isNil(o.PrimaryOwner) {
		var ret ObjsPrimaryOwner
		return ret
	}
	return *o.PrimaryOwner
}

// GetPrimaryOwnerOk returns a tuple with the PrimaryOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetPrimaryOwnerOk() (*ObjsPrimaryOwner, bool) {
	if o == nil || isNil(o.PrimaryOwner) {
    return nil, false
	}
	return o.PrimaryOwner, true
}

// HasPrimaryOwner returns a boolean if a field has been set.
func (o *ObjsTeam) HasPrimaryOwner() bool {
	if o != nil && !isNil(o.PrimaryOwner) {
		return true
	}

	return false
}

// SetPrimaryOwner gets a reference to the given ObjsPrimaryOwner and assigns it to the PrimaryOwner field.
func (o *ObjsTeam) SetPrimaryOwner(v ObjsPrimaryOwner) {
	o.PrimaryOwner = &v
}

// GetSsoProvider returns the SsoProvider field value if set, zero value otherwise.
func (o *ObjsTeam) GetSsoProvider() ObjsTeamSsoProvider {
	if o == nil || isNil(o.SsoProvider) {
		var ret ObjsTeamSsoProvider
		return ret
	}
	return *o.SsoProvider
}

// GetSsoProviderOk returns a tuple with the SsoProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsTeam) GetSsoProviderOk() (*ObjsTeamSsoProvider, bool) {
	if o == nil || isNil(o.SsoProvider) {
    return nil, false
	}
	return o.SsoProvider, true
}

// HasSsoProvider returns a boolean if a field has been set.
func (o *ObjsTeam) HasSsoProvider() bool {
	if o != nil && !isNil(o.SsoProvider) {
		return true
	}

	return false
}

// SetSsoProvider gets a reference to the given ObjsTeamSsoProvider and assigns it to the SsoProvider field.
func (o *ObjsTeam) SetSsoProvider(v ObjsTeamSsoProvider) {
	o.SsoProvider = &v
}

func (o ObjsTeam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !isNil(o.AvatarBaseUrl) {
		toSerialize["avatar_base_url"] = o.AvatarBaseUrl
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !isNil(o.DateCreate) {
		toSerialize["date_create"] = o.DateCreate
	}
	if !isNil(o.Deleted) {
		toSerialize["deleted"] = o.Deleted
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !isNil(o.Discoverable) {
		toSerialize["discoverable"] = o.Discoverable
	}
	if true {
		toSerialize["domain"] = o.Domain
	}
	if true {
		toSerialize["email_domain"] = o.EmailDomain
	}
	if !isNil(o.EnterpriseId) {
		toSerialize["enterprise_id"] = o.EnterpriseId
	}
	if !isNil(o.EnterpriseName) {
		toSerialize["enterprise_name"] = o.EnterpriseName
	}
	if !isNil(o.ExternalOrgMigrations) {
		toSerialize["external_org_migrations"] = o.ExternalOrgMigrations
	}
	if !isNil(o.HasComplianceExport) {
		toSerialize["has_compliance_export"] = o.HasComplianceExport
	}
	if true {
		toSerialize["icon"] = o.Icon
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.IsAssigned) {
		toSerialize["is_assigned"] = o.IsAssigned
	}
	if !isNil(o.IsEnterprise) {
		toSerialize["is_enterprise"] = o.IsEnterprise
	}
	if !isNil(o.IsOverStorageLimit) {
		toSerialize["is_over_storage_limit"] = o.IsOverStorageLimit
	}
	if !isNil(o.LimitTs) {
		toSerialize["limit_ts"] = o.LimitTs
	}
	if !isNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	if !isNil(o.MessagesCount) {
		toSerialize["messages_count"] = o.MessagesCount
	}
	if !isNil(o.MsgEditWindowMins) {
		toSerialize["msg_edit_window_mins"] = o.MsgEditWindowMins
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.OverIntegrationsLimit) {
		toSerialize["over_integrations_limit"] = o.OverIntegrationsLimit
	}
	if !isNil(o.OverStorageLimit) {
		toSerialize["over_storage_limit"] = o.OverStorageLimit
	}
	if !isNil(o.PayProdCur) {
		toSerialize["pay_prod_cur"] = o.PayProdCur
	}
	if !isNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}
	if !isNil(o.PrimaryOwner) {
		toSerialize["primary_owner"] = o.PrimaryOwner
	}
	if !isNil(o.SsoProvider) {
		toSerialize["sso_provider"] = o.SsoProvider
	}
	return json.Marshal(toSerialize)
}

type NullableObjsTeam struct {
	value *ObjsTeam
	isSet bool
}

func (v NullableObjsTeam) Get() *ObjsTeam {
	return v.value
}

func (v *NullableObjsTeam) Set(val *ObjsTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableObjsTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableObjsTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjsTeam(val *ObjsTeam) *NullableObjsTeam {
	return &NullableObjsTeam{value: val, isSet: true}
}

func (v NullableObjsTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjsTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


