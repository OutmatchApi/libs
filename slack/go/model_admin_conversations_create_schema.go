/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// AdminConversationsCreateSchema Schema for successful response of admin.conversations.create
type AdminConversationsCreateSchema struct {
	ChannelId *string `json:"channel_id,omitempty"`
	Ok DefsOkTrue `json:"ok"`
}

// NewAdminConversationsCreateSchema instantiates a new AdminConversationsCreateSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminConversationsCreateSchema(ok DefsOkTrue) *AdminConversationsCreateSchema {
	this := AdminConversationsCreateSchema{}
	this.Ok = ok
	return &this
}

// NewAdminConversationsCreateSchemaWithDefaults instantiates a new AdminConversationsCreateSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminConversationsCreateSchemaWithDefaults() *AdminConversationsCreateSchema {
	this := AdminConversationsCreateSchema{}
	return &this
}

// GetChannelId returns the ChannelId field value if set, zero value otherwise.
func (o *AdminConversationsCreateSchema) GetChannelId() string {
	if o == nil || isNil(o.ChannelId) {
		var ret string
		return ret
	}
	return *o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConversationsCreateSchema) GetChannelIdOk() (*string, bool) {
	if o == nil || isNil(o.ChannelId) {
    return nil, false
	}
	return o.ChannelId, true
}

// HasChannelId returns a boolean if a field has been set.
func (o *AdminConversationsCreateSchema) HasChannelId() bool {
	if o != nil && !isNil(o.ChannelId) {
		return true
	}

	return false
}

// SetChannelId gets a reference to the given string and assigns it to the ChannelId field.
func (o *AdminConversationsCreateSchema) SetChannelId(v string) {
	o.ChannelId = &v
}

// GetOk returns the Ok field value
func (o *AdminConversationsCreateSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *AdminConversationsCreateSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *AdminConversationsCreateSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

func (o AdminConversationsCreateSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ChannelId) {
		toSerialize["channel_id"] = o.ChannelId
	}
	if true {
		toSerialize["ok"] = o.Ok
	}
	return json.Marshal(toSerialize)
}

type NullableAdminConversationsCreateSchema struct {
	value *AdminConversationsCreateSchema
	isSet bool
}

func (v NullableAdminConversationsCreateSchema) Get() *AdminConversationsCreateSchema {
	return v.value
}

func (v *NullableAdminConversationsCreateSchema) Set(val *AdminConversationsCreateSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminConversationsCreateSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminConversationsCreateSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminConversationsCreateSchema(val *AdminConversationsCreateSchema) *NullableAdminConversationsCreateSchema {
	return &NullableAdminConversationsCreateSchema{value: val, isSet: true}
}

func (v NullableAdminConversationsCreateSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminConversationsCreateSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


