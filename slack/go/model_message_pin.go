/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// MessagePin struct for MessagePin
type MessagePin struct {
	Channel *string `json:"channel,omitempty"`
	Created *int32 `json:"created,omitempty"`
	CreatedBy *string `json:"created_by,omitempty"`
	Message *ObjsMessage `json:"message,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewMessagePin instantiates a new MessagePin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessagePin() *MessagePin {
	this := MessagePin{}
	return &this
}

// NewMessagePinWithDefaults instantiates a new MessagePin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessagePinWithDefaults() *MessagePin {
	this := MessagePin{}
	return &this
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *MessagePin) GetChannel() string {
	if o == nil || isNil(o.Channel) {
		var ret string
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePin) GetChannelOk() (*string, bool) {
	if o == nil || isNil(o.Channel) {
    return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *MessagePin) HasChannel() bool {
	if o != nil && !isNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given string and assigns it to the Channel field.
func (o *MessagePin) SetChannel(v string) {
	o.Channel = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *MessagePin) GetCreated() int32 {
	if o == nil || isNil(o.Created) {
		var ret int32
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePin) GetCreatedOk() (*int32, bool) {
	if o == nil || isNil(o.Created) {
    return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *MessagePin) HasCreated() bool {
	if o != nil && !isNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int32 and assigns it to the Created field.
func (o *MessagePin) SetCreated(v int32) {
	o.Created = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *MessagePin) GetCreatedBy() string {
	if o == nil || isNil(o.CreatedBy) {
		var ret string
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePin) GetCreatedByOk() (*string, bool) {
	if o == nil || isNil(o.CreatedBy) {
    return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *MessagePin) HasCreatedBy() bool {
	if o != nil && !isNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given string and assigns it to the CreatedBy field.
func (o *MessagePin) SetCreatedBy(v string) {
	o.CreatedBy = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *MessagePin) GetMessage() ObjsMessage {
	if o == nil || isNil(o.Message) {
		var ret ObjsMessage
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePin) GetMessageOk() (*ObjsMessage, bool) {
	if o == nil || isNil(o.Message) {
    return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *MessagePin) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given ObjsMessage and assigns it to the Message field.
func (o *MessagePin) SetMessage(v ObjsMessage) {
	o.Message = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MessagePin) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagePin) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MessagePin) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *MessagePin) SetType(v string) {
	o.Type = &v
}

func (o MessagePin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !isNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !isNil(o.CreatedBy) {
		toSerialize["created_by"] = o.CreatedBy
	}
	if !isNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableMessagePin struct {
	value *MessagePin
	isSet bool
}

func (v NullableMessagePin) Get() *MessagePin {
	return v.value
}

func (v *NullableMessagePin) Set(val *MessagePin) {
	v.value = val
	v.isSet = true
}

func (v NullableMessagePin) IsSet() bool {
	return v.isSet
}

func (v *NullableMessagePin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessagePin(val *MessagePin) *NullableMessagePin {
	return &NullableMessagePin{value: val, isSet: true}
}

func (v NullableMessagePin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessagePin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


