/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ObjsSubteam struct for ObjsSubteam
type ObjsSubteam struct {
	AutoProvision bool `json:"auto_provision"`
	AutoType []ObjsSubteamAutoTypeInner `json:"auto_type"`
	ChannelCount *int32 `json:"channel_count,omitempty"`
	CreatedBy string `json:"created_by"`
	DateCreate int32 `json:"date_create"`
	DateDelete int32 `json:"date_delete"`
	DateUpdate int32 `json:"date_update"`
	DeletedBy []ObjsSubteamDeletedByInner `json:"deleted_by"`
	Description string `json:"description"`
	EnterpriseSubteamId string `json:"enterprise_subteam_id"`
	Handle string `json:"handle"`
	Id string `json:"id"`
	IsExternal bool `json:"is_external"`
	IsSubteam bool `json:"is_subteam"`
	IsUsergroup bool `json:"is_usergroup"`
	Name string `json:"name"`
	Prefs ObjsSubteamPrefs `json:"prefs"`
	TeamId string `json:"team_id"`
	UpdatedBy string `json:"updated_by"`
	UserCount *int32 `json:"user_count,omitempty"`
	Users []string `json:"users,omitempty"`
}

// NewObjsSubteam instantiates a new ObjsSubteam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjsSubteam(autoProvision bool, autoType []ObjsSubteamAutoTypeInner, createdBy string, dateCreate int32, dateDelete int32, dateUpdate int32, deletedBy []ObjsSubteamDeletedByInner, description string, enterpriseSubteamId string, handle string, id string, isExternal bool, isSubteam bool, isUsergroup bool, name string, prefs ObjsSubteamPrefs, teamId string, updatedBy string) *ObjsSubteam {
	this := ObjsSubteam{}
	this.AutoProvision = autoProvision
	this.AutoType = autoType
	this.CreatedBy = createdBy
	this.DateCreate = dateCreate
	this.DateDelete = dateDelete
	this.DateUpdate = dateUpdate
	this.DeletedBy = deletedBy
	this.Description = description
	this.EnterpriseSubteamId = enterpriseSubteamId
	this.Handle = handle
	this.Id = id
	this.IsExternal = isExternal
	this.IsSubteam = isSubteam
	this.IsUsergroup = isUsergroup
	this.Name = name
	this.Prefs = prefs
	this.TeamId = teamId
	this.UpdatedBy = updatedBy
	return &this
}

// NewObjsSubteamWithDefaults instantiates a new ObjsSubteam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjsSubteamWithDefaults() *ObjsSubteam {
	this := ObjsSubteam{}
	return &this
}

// GetAutoProvision returns the AutoProvision field value
func (o *ObjsSubteam) GetAutoProvision() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AutoProvision
}

// GetAutoProvisionOk returns a tuple with the AutoProvision field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetAutoProvisionOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AutoProvision, true
}

// SetAutoProvision sets field value
func (o *ObjsSubteam) SetAutoProvision(v bool) {
	o.AutoProvision = v
}

// GetAutoType returns the AutoType field value
func (o *ObjsSubteam) GetAutoType() []ObjsSubteamAutoTypeInner {
	if o == nil {
		var ret []ObjsSubteamAutoTypeInner
		return ret
	}

	return o.AutoType
}

// GetAutoTypeOk returns a tuple with the AutoType field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetAutoTypeOk() ([]ObjsSubteamAutoTypeInner, bool) {
	if o == nil {
    return nil, false
	}
	return o.AutoType, true
}

// SetAutoType sets field value
func (o *ObjsSubteam) SetAutoType(v []ObjsSubteamAutoTypeInner) {
	o.AutoType = v
}

// GetChannelCount returns the ChannelCount field value if set, zero value otherwise.
func (o *ObjsSubteam) GetChannelCount() int32 {
	if o == nil || isNil(o.ChannelCount) {
		var ret int32
		return ret
	}
	return *o.ChannelCount
}

// GetChannelCountOk returns a tuple with the ChannelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetChannelCountOk() (*int32, bool) {
	if o == nil || isNil(o.ChannelCount) {
    return nil, false
	}
	return o.ChannelCount, true
}

// HasChannelCount returns a boolean if a field has been set.
func (o *ObjsSubteam) HasChannelCount() bool {
	if o != nil && !isNil(o.ChannelCount) {
		return true
	}

	return false
}

// SetChannelCount gets a reference to the given int32 and assigns it to the ChannelCount field.
func (o *ObjsSubteam) SetChannelCount(v int32) {
	o.ChannelCount = &v
}

// GetCreatedBy returns the CreatedBy field value
func (o *ObjsSubteam) GetCreatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetCreatedByOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.CreatedBy, true
}

// SetCreatedBy sets field value
func (o *ObjsSubteam) SetCreatedBy(v string) {
	o.CreatedBy = v
}

// GetDateCreate returns the DateCreate field value
func (o *ObjsSubteam) GetDateCreate() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DateCreate
}

// GetDateCreateOk returns a tuple with the DateCreate field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetDateCreateOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DateCreate, true
}

// SetDateCreate sets field value
func (o *ObjsSubteam) SetDateCreate(v int32) {
	o.DateCreate = v
}

// GetDateDelete returns the DateDelete field value
func (o *ObjsSubteam) GetDateDelete() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DateDelete
}

// GetDateDeleteOk returns a tuple with the DateDelete field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetDateDeleteOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DateDelete, true
}

// SetDateDelete sets field value
func (o *ObjsSubteam) SetDateDelete(v int32) {
	o.DateDelete = v
}

// GetDateUpdate returns the DateUpdate field value
func (o *ObjsSubteam) GetDateUpdate() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DateUpdate
}

// GetDateUpdateOk returns a tuple with the DateUpdate field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetDateUpdateOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.DateUpdate, true
}

// SetDateUpdate sets field value
func (o *ObjsSubteam) SetDateUpdate(v int32) {
	o.DateUpdate = v
}

// GetDeletedBy returns the DeletedBy field value
func (o *ObjsSubteam) GetDeletedBy() []ObjsSubteamDeletedByInner {
	if o == nil {
		var ret []ObjsSubteamDeletedByInner
		return ret
	}

	return o.DeletedBy
}

// GetDeletedByOk returns a tuple with the DeletedBy field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetDeletedByOk() ([]ObjsSubteamDeletedByInner, bool) {
	if o == nil {
    return nil, false
	}
	return o.DeletedBy, true
}

// SetDeletedBy sets field value
func (o *ObjsSubteam) SetDeletedBy(v []ObjsSubteamDeletedByInner) {
	o.DeletedBy = v
}

// GetDescription returns the Description field value
func (o *ObjsSubteam) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *ObjsSubteam) SetDescription(v string) {
	o.Description = v
}

// GetEnterpriseSubteamId returns the EnterpriseSubteamId field value
func (o *ObjsSubteam) GetEnterpriseSubteamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnterpriseSubteamId
}

// GetEnterpriseSubteamIdOk returns a tuple with the EnterpriseSubteamId field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetEnterpriseSubteamIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.EnterpriseSubteamId, true
}

// SetEnterpriseSubteamId sets field value
func (o *ObjsSubteam) SetEnterpriseSubteamId(v string) {
	o.EnterpriseSubteamId = v
}

// GetHandle returns the Handle field value
func (o *ObjsSubteam) GetHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Handle
}

// GetHandleOk returns a tuple with the Handle field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetHandleOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Handle, true
}

// SetHandle sets field value
func (o *ObjsSubteam) SetHandle(v string) {
	o.Handle = v
}

// GetId returns the Id field value
func (o *ObjsSubteam) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ObjsSubteam) SetId(v string) {
	o.Id = v
}

// GetIsExternal returns the IsExternal field value
func (o *ObjsSubteam) GetIsExternal() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsExternal
}

// GetIsExternalOk returns a tuple with the IsExternal field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetIsExternalOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsExternal, true
}

// SetIsExternal sets field value
func (o *ObjsSubteam) SetIsExternal(v bool) {
	o.IsExternal = v
}

// GetIsSubteam returns the IsSubteam field value
func (o *ObjsSubteam) GetIsSubteam() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSubteam
}

// GetIsSubteamOk returns a tuple with the IsSubteam field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetIsSubteamOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsSubteam, true
}

// SetIsSubteam sets field value
func (o *ObjsSubteam) SetIsSubteam(v bool) {
	o.IsSubteam = v
}

// GetIsUsergroup returns the IsUsergroup field value
func (o *ObjsSubteam) GetIsUsergroup() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsUsergroup
}

// GetIsUsergroupOk returns a tuple with the IsUsergroup field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetIsUsergroupOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsUsergroup, true
}

// SetIsUsergroup sets field value
func (o *ObjsSubteam) SetIsUsergroup(v bool) {
	o.IsUsergroup = v
}

// GetName returns the Name field value
func (o *ObjsSubteam) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ObjsSubteam) SetName(v string) {
	o.Name = v
}

// GetPrefs returns the Prefs field value
func (o *ObjsSubteam) GetPrefs() ObjsSubteamPrefs {
	if o == nil {
		var ret ObjsSubteamPrefs
		return ret
	}

	return o.Prefs
}

// GetPrefsOk returns a tuple with the Prefs field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetPrefsOk() (*ObjsSubteamPrefs, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Prefs, true
}

// SetPrefs sets field value
func (o *ObjsSubteam) SetPrefs(v ObjsSubteamPrefs) {
	o.Prefs = v
}

// GetTeamId returns the TeamId field value
func (o *ObjsSubteam) GetTeamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetTeamIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *ObjsSubteam) SetTeamId(v string) {
	o.TeamId = v
}

// GetUpdatedBy returns the UpdatedBy field value
func (o *ObjsSubteam) GetUpdatedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetUpdatedByOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.UpdatedBy, true
}

// SetUpdatedBy sets field value
func (o *ObjsSubteam) SetUpdatedBy(v string) {
	o.UpdatedBy = v
}

// GetUserCount returns the UserCount field value if set, zero value otherwise.
func (o *ObjsSubteam) GetUserCount() int32 {
	if o == nil || isNil(o.UserCount) {
		var ret int32
		return ret
	}
	return *o.UserCount
}

// GetUserCountOk returns a tuple with the UserCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetUserCountOk() (*int32, bool) {
	if o == nil || isNil(o.UserCount) {
    return nil, false
	}
	return o.UserCount, true
}

// HasUserCount returns a boolean if a field has been set.
func (o *ObjsSubteam) HasUserCount() bool {
	if o != nil && !isNil(o.UserCount) {
		return true
	}

	return false
}

// SetUserCount gets a reference to the given int32 and assigns it to the UserCount field.
func (o *ObjsSubteam) SetUserCount(v int32) {
	o.UserCount = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *ObjsSubteam) GetUsers() []string {
	if o == nil || isNil(o.Users) {
		var ret []string
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsSubteam) GetUsersOk() ([]string, bool) {
	if o == nil || isNil(o.Users) {
    return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *ObjsSubteam) HasUsers() bool {
	if o != nil && !isNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []string and assigns it to the Users field.
func (o *ObjsSubteam) SetUsers(v []string) {
	o.Users = v
}

func (o ObjsSubteam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["auto_provision"] = o.AutoProvision
	}
	if true {
		toSerialize["auto_type"] = o.AutoType
	}
	if !isNil(o.ChannelCount) {
		toSerialize["channel_count"] = o.ChannelCount
	}
	if true {
		toSerialize["created_by"] = o.CreatedBy
	}
	if true {
		toSerialize["date_create"] = o.DateCreate
	}
	if true {
		toSerialize["date_delete"] = o.DateDelete
	}
	if true {
		toSerialize["date_update"] = o.DateUpdate
	}
	if true {
		toSerialize["deleted_by"] = o.DeletedBy
	}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["enterprise_subteam_id"] = o.EnterpriseSubteamId
	}
	if true {
		toSerialize["handle"] = o.Handle
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["is_external"] = o.IsExternal
	}
	if true {
		toSerialize["is_subteam"] = o.IsSubteam
	}
	if true {
		toSerialize["is_usergroup"] = o.IsUsergroup
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["prefs"] = o.Prefs
	}
	if true {
		toSerialize["team_id"] = o.TeamId
	}
	if true {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	if !isNil(o.UserCount) {
		toSerialize["user_count"] = o.UserCount
	}
	if !isNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableObjsSubteam struct {
	value *ObjsSubteam
	isSet bool
}

func (v NullableObjsSubteam) Get() *ObjsSubteam {
	return v.value
}

func (v *NullableObjsSubteam) Set(val *ObjsSubteam) {
	v.value = val
	v.isSet = true
}

func (v NullableObjsSubteam) IsSet() bool {
	return v.isSet
}

func (v *NullableObjsSubteam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjsSubteam(val *ObjsSubteam) *NullableObjsSubteam {
	return &NullableObjsSubteam{value: val, isSet: true}
}

func (v NullableObjsSubteam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjsSubteam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


