/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
	"fmt"
)

// StarsListSchemaItemsInnerInner struct for StarsListSchemaItemsInnerInner
type StarsListSchemaItemsInnerInner struct {
	StarsListSchemaItemsInnerInnerAnyOf *StarsListSchemaItemsInnerInnerAnyOf
	StarsListSchemaItemsInnerInnerAnyOf1 *StarsListSchemaItemsInnerInnerAnyOf1
	StarsListSchemaItemsInnerInnerAnyOf2 *StarsListSchemaItemsInnerInnerAnyOf2
	StarsListSchemaItemsInnerInnerAnyOf3 *StarsListSchemaItemsInnerInnerAnyOf3
	StarsListSchemaItemsInnerInnerAnyOf4 *StarsListSchemaItemsInnerInnerAnyOf4
	StarsListSchemaItemsInnerInnerAnyOf5 *StarsListSchemaItemsInnerInnerAnyOf5
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *StarsListSchemaItemsInnerInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into StarsListSchemaItemsInnerInnerAnyOf
	err = json.Unmarshal(data, &dst.StarsListSchemaItemsInnerInnerAnyOf);
	if err == nil {
		jsonStarsListSchemaItemsInnerInnerAnyOf, _ := json.Marshal(dst.StarsListSchemaItemsInnerInnerAnyOf)
		if string(jsonStarsListSchemaItemsInnerInnerAnyOf) == "{}" { // empty struct
			dst.StarsListSchemaItemsInnerInnerAnyOf = nil
		} else {
			return nil // data stored in dst.StarsListSchemaItemsInnerInnerAnyOf, return on the first match
		}
	} else {
		dst.StarsListSchemaItemsInnerInnerAnyOf = nil
	}

	// try to unmarshal JSON data into StarsListSchemaItemsInnerInnerAnyOf1
	err = json.Unmarshal(data, &dst.StarsListSchemaItemsInnerInnerAnyOf1);
	if err == nil {
		jsonStarsListSchemaItemsInnerInnerAnyOf1, _ := json.Marshal(dst.StarsListSchemaItemsInnerInnerAnyOf1)
		if string(jsonStarsListSchemaItemsInnerInnerAnyOf1) == "{}" { // empty struct
			dst.StarsListSchemaItemsInnerInnerAnyOf1 = nil
		} else {
			return nil // data stored in dst.StarsListSchemaItemsInnerInnerAnyOf1, return on the first match
		}
	} else {
		dst.StarsListSchemaItemsInnerInnerAnyOf1 = nil
	}

	// try to unmarshal JSON data into StarsListSchemaItemsInnerInnerAnyOf2
	err = json.Unmarshal(data, &dst.StarsListSchemaItemsInnerInnerAnyOf2);
	if err == nil {
		jsonStarsListSchemaItemsInnerInnerAnyOf2, _ := json.Marshal(dst.StarsListSchemaItemsInnerInnerAnyOf2)
		if string(jsonStarsListSchemaItemsInnerInnerAnyOf2) == "{}" { // empty struct
			dst.StarsListSchemaItemsInnerInnerAnyOf2 = nil
		} else {
			return nil // data stored in dst.StarsListSchemaItemsInnerInnerAnyOf2, return on the first match
		}
	} else {
		dst.StarsListSchemaItemsInnerInnerAnyOf2 = nil
	}

	// try to unmarshal JSON data into StarsListSchemaItemsInnerInnerAnyOf3
	err = json.Unmarshal(data, &dst.StarsListSchemaItemsInnerInnerAnyOf3);
	if err == nil {
		jsonStarsListSchemaItemsInnerInnerAnyOf3, _ := json.Marshal(dst.StarsListSchemaItemsInnerInnerAnyOf3)
		if string(jsonStarsListSchemaItemsInnerInnerAnyOf3) == "{}" { // empty struct
			dst.StarsListSchemaItemsInnerInnerAnyOf3 = nil
		} else {
			return nil // data stored in dst.StarsListSchemaItemsInnerInnerAnyOf3, return on the first match
		}
	} else {
		dst.StarsListSchemaItemsInnerInnerAnyOf3 = nil
	}

	// try to unmarshal JSON data into StarsListSchemaItemsInnerInnerAnyOf4
	err = json.Unmarshal(data, &dst.StarsListSchemaItemsInnerInnerAnyOf4);
	if err == nil {
		jsonStarsListSchemaItemsInnerInnerAnyOf4, _ := json.Marshal(dst.StarsListSchemaItemsInnerInnerAnyOf4)
		if string(jsonStarsListSchemaItemsInnerInnerAnyOf4) == "{}" { // empty struct
			dst.StarsListSchemaItemsInnerInnerAnyOf4 = nil
		} else {
			return nil // data stored in dst.StarsListSchemaItemsInnerInnerAnyOf4, return on the first match
		}
	} else {
		dst.StarsListSchemaItemsInnerInnerAnyOf4 = nil
	}

	// try to unmarshal JSON data into StarsListSchemaItemsInnerInnerAnyOf5
	err = json.Unmarshal(data, &dst.StarsListSchemaItemsInnerInnerAnyOf5);
	if err == nil {
		jsonStarsListSchemaItemsInnerInnerAnyOf5, _ := json.Marshal(dst.StarsListSchemaItemsInnerInnerAnyOf5)
		if string(jsonStarsListSchemaItemsInnerInnerAnyOf5) == "{}" { // empty struct
			dst.StarsListSchemaItemsInnerInnerAnyOf5 = nil
		} else {
			return nil // data stored in dst.StarsListSchemaItemsInnerInnerAnyOf5, return on the first match
		}
	} else {
		dst.StarsListSchemaItemsInnerInnerAnyOf5 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(StarsListSchemaItemsInnerInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *StarsListSchemaItemsInnerInner) MarshalJSON() ([]byte, error) {
	if src.StarsListSchemaItemsInnerInnerAnyOf != nil {
		return json.Marshal(&src.StarsListSchemaItemsInnerInnerAnyOf)
	}

	if src.StarsListSchemaItemsInnerInnerAnyOf1 != nil {
		return json.Marshal(&src.StarsListSchemaItemsInnerInnerAnyOf1)
	}

	if src.StarsListSchemaItemsInnerInnerAnyOf2 != nil {
		return json.Marshal(&src.StarsListSchemaItemsInnerInnerAnyOf2)
	}

	if src.StarsListSchemaItemsInnerInnerAnyOf3 != nil {
		return json.Marshal(&src.StarsListSchemaItemsInnerInnerAnyOf3)
	}

	if src.StarsListSchemaItemsInnerInnerAnyOf4 != nil {
		return json.Marshal(&src.StarsListSchemaItemsInnerInnerAnyOf4)
	}

	if src.StarsListSchemaItemsInnerInnerAnyOf5 != nil {
		return json.Marshal(&src.StarsListSchemaItemsInnerInnerAnyOf5)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableStarsListSchemaItemsInnerInner struct {
	value *StarsListSchemaItemsInnerInner
	isSet bool
}

func (v NullableStarsListSchemaItemsInnerInner) Get() *StarsListSchemaItemsInnerInner {
	return v.value
}

func (v *NullableStarsListSchemaItemsInnerInner) Set(val *StarsListSchemaItemsInnerInner) {
	v.value = val
	v.isSet = true
}

func (v NullableStarsListSchemaItemsInnerInner) IsSet() bool {
	return v.isSet
}

func (v *NullableStarsListSchemaItemsInnerInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStarsListSchemaItemsInnerInner(val *StarsListSchemaItemsInnerInner) *NullableStarsListSchemaItemsInnerInner {
	return &NullableStarsListSchemaItemsInnerInner{value: val, isSet: true}
}

func (v NullableStarsListSchemaItemsInnerInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStarsListSchemaItemsInnerInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


