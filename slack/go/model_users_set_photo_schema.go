/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// UsersSetPhotoSchema Schema for successful response from users.setPhoto method
type UsersSetPhotoSchema struct {
	Ok DefsOkTrue `json:"ok"`
	Profile UsersSetPhotoSchemaProfile `json:"profile"`
}

// NewUsersSetPhotoSchema instantiates a new UsersSetPhotoSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersSetPhotoSchema(ok DefsOkTrue, profile UsersSetPhotoSchemaProfile) *UsersSetPhotoSchema {
	this := UsersSetPhotoSchema{}
	this.Ok = ok
	this.Profile = profile
	return &this
}

// NewUsersSetPhotoSchemaWithDefaults instantiates a new UsersSetPhotoSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersSetPhotoSchemaWithDefaults() *UsersSetPhotoSchema {
	this := UsersSetPhotoSchema{}
	return &this
}

// GetOk returns the Ok field value
func (o *UsersSetPhotoSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *UsersSetPhotoSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *UsersSetPhotoSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetProfile returns the Profile field value
func (o *UsersSetPhotoSchema) GetProfile() UsersSetPhotoSchemaProfile {
	if o == nil {
		var ret UsersSetPhotoSchemaProfile
		return ret
	}

	return o.Profile
}

// GetProfileOk returns a tuple with the Profile field value
// and a boolean to check if the value has been set.
func (o *UsersSetPhotoSchema) GetProfileOk() (*UsersSetPhotoSchemaProfile, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Profile, true
}

// SetProfile sets field value
func (o *UsersSetPhotoSchema) SetProfile(v UsersSetPhotoSchemaProfile) {
	o.Profile = v
}

func (o UsersSetPhotoSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if true {
		toSerialize["profile"] = o.Profile
	}
	return json.Marshal(toSerialize)
}

type NullableUsersSetPhotoSchema struct {
	value *UsersSetPhotoSchema
	isSet bool
}

func (v NullableUsersSetPhotoSchema) Get() *UsersSetPhotoSchema {
	return v.value
}

func (v *NullableUsersSetPhotoSchema) Set(val *UsersSetPhotoSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersSetPhotoSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersSetPhotoSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersSetPhotoSchema(val *UsersSetPhotoSchema) *NullableUsersSetPhotoSchema {
	return &NullableUsersSetPhotoSchema{value: val, isSet: true}
}

func (v NullableUsersSetPhotoSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersSetPhotoSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


