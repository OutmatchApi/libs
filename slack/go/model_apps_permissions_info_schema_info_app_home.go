/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// AppsPermissionsInfoSchemaInfoAppHome struct for AppsPermissionsInfoSchemaInfoAppHome
type AppsPermissionsInfoSchemaInfoAppHome struct {
	Resources *ObjsResources `json:"resources,omitempty"`
	Scopes []string `json:"scopes,omitempty"`
}

// NewAppsPermissionsInfoSchemaInfoAppHome instantiates a new AppsPermissionsInfoSchemaInfoAppHome object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppsPermissionsInfoSchemaInfoAppHome() *AppsPermissionsInfoSchemaInfoAppHome {
	this := AppsPermissionsInfoSchemaInfoAppHome{}
	return &this
}

// NewAppsPermissionsInfoSchemaInfoAppHomeWithDefaults instantiates a new AppsPermissionsInfoSchemaInfoAppHome object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppsPermissionsInfoSchemaInfoAppHomeWithDefaults() *AppsPermissionsInfoSchemaInfoAppHome {
	this := AppsPermissionsInfoSchemaInfoAppHome{}
	return &this
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *AppsPermissionsInfoSchemaInfoAppHome) GetResources() ObjsResources {
	if o == nil || isNil(o.Resources) {
		var ret ObjsResources
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppsPermissionsInfoSchemaInfoAppHome) GetResourcesOk() (*ObjsResources, bool) {
	if o == nil || isNil(o.Resources) {
    return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *AppsPermissionsInfoSchemaInfoAppHome) HasResources() bool {
	if o != nil && !isNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given ObjsResources and assigns it to the Resources field.
func (o *AppsPermissionsInfoSchemaInfoAppHome) SetResources(v ObjsResources) {
	o.Resources = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *AppsPermissionsInfoSchemaInfoAppHome) GetScopes() []string {
	if o == nil || isNil(o.Scopes) {
		var ret []string
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppsPermissionsInfoSchemaInfoAppHome) GetScopesOk() ([]string, bool) {
	if o == nil || isNil(o.Scopes) {
    return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *AppsPermissionsInfoSchemaInfoAppHome) HasScopes() bool {
	if o != nil && !isNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []string and assigns it to the Scopes field.
func (o *AppsPermissionsInfoSchemaInfoAppHome) SetScopes(v []string) {
	o.Scopes = v
}

func (o AppsPermissionsInfoSchemaInfoAppHome) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !isNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	return json.Marshal(toSerialize)
}

type NullableAppsPermissionsInfoSchemaInfoAppHome struct {
	value *AppsPermissionsInfoSchemaInfoAppHome
	isSet bool
}

func (v NullableAppsPermissionsInfoSchemaInfoAppHome) Get() *AppsPermissionsInfoSchemaInfoAppHome {
	return v.value
}

func (v *NullableAppsPermissionsInfoSchemaInfoAppHome) Set(val *AppsPermissionsInfoSchemaInfoAppHome) {
	v.value = val
	v.isSet = true
}

func (v NullableAppsPermissionsInfoSchemaInfoAppHome) IsSet() bool {
	return v.isSet
}

func (v *NullableAppsPermissionsInfoSchemaInfoAppHome) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppsPermissionsInfoSchemaInfoAppHome(val *AppsPermissionsInfoSchemaInfoAppHome) *NullableAppsPermissionsInfoSchemaInfoAppHome {
	return &NullableAppsPermissionsInfoSchemaInfoAppHome{value: val, isSet: true}
}

func (v NullableAppsPermissionsInfoSchemaInfoAppHome) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppsPermissionsInfoSchemaInfoAppHome) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


