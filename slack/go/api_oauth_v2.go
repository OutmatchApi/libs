/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// OauthV2ApiService OauthV2Api service
type OauthV2ApiService service

type ApiOauthV2AccessRequest struct {
	ctx context.Context
	ApiService *OauthV2ApiService
	code *string
	clientId *string
	clientSecret *string
	redirectUri *string
}

// The &#x60;code&#x60; param returned via the OAuth callback.
func (r ApiOauthV2AccessRequest) Code(code string) ApiOauthV2AccessRequest {
	r.code = &code
	return r
}

// Issued when you created your application.
func (r ApiOauthV2AccessRequest) ClientId(clientId string) ApiOauthV2AccessRequest {
	r.clientId = &clientId
	return r
}

// Issued when you created your application.
func (r ApiOauthV2AccessRequest) ClientSecret(clientSecret string) ApiOauthV2AccessRequest {
	r.clientSecret = &clientSecret
	return r
}

// This must match the originally submitted URI (if one was sent).
func (r ApiOauthV2AccessRequest) RedirectUri(redirectUri string) ApiOauthV2AccessRequest {
	r.redirectUri = &redirectUri
	return r
}

func (r ApiOauthV2AccessRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.OauthV2AccessExecute(r)
}

/*
OauthV2Access Method for OauthV2Access

Exchanges a temporary OAuth verifier code for an access token.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiOauthV2AccessRequest
*/
func (a *OauthV2ApiService) OauthV2Access(ctx context.Context) ApiOauthV2AccessRequest {
	return ApiOauthV2AccessRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *OauthV2ApiService) OauthV2AccessExecute(r ApiOauthV2AccessRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OauthV2ApiService.OauthV2Access")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/oauth.v2.access"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.code == nil {
		return localVarReturnValue, nil, reportError("code is required and must be specified")
	}

	if r.clientId != nil {
		localVarQueryParams.Add("client_id", parameterToString(*r.clientId, ""))
	}
	if r.clientSecret != nil {
		localVarQueryParams.Add("client_secret", parameterToString(*r.clientSecret, ""))
	}
	localVarQueryParams.Add("code", parameterToString(*r.code, ""))
	if r.redirectUri != nil {
		localVarQueryParams.Add("redirect_uri", parameterToString(*r.redirectUri, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
