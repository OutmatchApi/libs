/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ConversationObject struct for ConversationObject
type ConversationObject struct {
	AcceptedUser *string `json:"accepted_user,omitempty"`
	ConnectedTeamIds []string `json:"connected_team_ids,omitempty"`
	ConversationHostId *string `json:"conversation_host_id,omitempty"`
	Created int32 `json:"created"`
	Creator string `json:"creator"`
	DisplayCounts *ConversationObjectDisplayCounts `json:"display_counts,omitempty"`
	EnterpriseId *string `json:"enterprise_id,omitempty"`
	HasPins *bool `json:"has_pins,omitempty"`
	Id string `json:"id"`
	InternalTeamIds []string `json:"internal_team_ids,omitempty"`
	IsArchived bool `json:"is_archived"`
	IsChannel bool `json:"is_channel"`
	IsExtShared *bool `json:"is_ext_shared,omitempty"`
	IsFrozen *bool `json:"is_frozen,omitempty"`
	IsGeneral bool `json:"is_general"`
	IsGlobalShared *bool `json:"is_global_shared,omitempty"`
	IsGroup bool `json:"is_group"`
	IsIm bool `json:"is_im"`
	IsMember *bool `json:"is_member,omitempty"`
	IsMoved *int32 `json:"is_moved,omitempty"`
	IsMpim bool `json:"is_mpim"`
	IsNonThreadable *bool `json:"is_non_threadable,omitempty"`
	IsOpen *bool `json:"is_open,omitempty"`
	IsOrgDefault *bool `json:"is_org_default,omitempty"`
	IsOrgMandatory *bool `json:"is_org_mandatory,omitempty"`
	IsOrgShared bool `json:"is_org_shared"`
	IsPendingExtShared *bool `json:"is_pending_ext_shared,omitempty"`
	IsPrivate bool `json:"is_private"`
	IsReadOnly *bool `json:"is_read_only,omitempty"`
	IsShared bool `json:"is_shared"`
	IsStarred *bool `json:"is_starred,omitempty"`
	IsThreadOnly *bool `json:"is_thread_only,omitempty"`
	LastRead *string `json:"last_read,omitempty"`
	Latest []ObjsChannelLatestInner `json:"latest,omitempty"`
	Members []string `json:"members,omitempty"`
	Name string `json:"name"`
	NameNormalized string `json:"name_normalized"`
	NumMembers *int32 `json:"num_members,omitempty"`
	ParentConversation []ConversationObjectParentConversationInner `json:"parent_conversation,omitempty"`
	PendingConnectedTeamIds []string `json:"pending_connected_team_ids,omitempty"`
	PendingShared []string `json:"pending_shared,omitempty"`
	PinCount *int32 `json:"pin_count,omitempty"`
	PreviousNames []string `json:"previous_names,omitempty"`
	Priority *float32 `json:"priority,omitempty"`
	Purpose ObjsChannelPurpose `json:"purpose"`
	SharedTeamIds []string `json:"shared_team_ids,omitempty"`
	Shares []ConversationObjectSharesInner `json:"shares,omitempty"`
	TimezoneCount *int32 `json:"timezone_count,omitempty"`
	Topic ObjsChannelPurpose `json:"topic"`
	Unlinked *int32 `json:"unlinked,omitempty"`
	UnreadCount *int32 `json:"unread_count,omitempty"`
	UnreadCountDisplay *int32 `json:"unread_count_display,omitempty"`
	UseCase *string `json:"use_case,omitempty"`
	User *string `json:"user,omitempty"`
	Version *int32 `json:"version,omitempty"`
}

// NewConversationObject instantiates a new ConversationObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversationObject(created int32, creator string, id string, isArchived bool, isChannel bool, isGeneral bool, isGroup bool, isIm bool, isMpim bool, isOrgShared bool, isPrivate bool, isShared bool, name string, nameNormalized string, purpose ObjsChannelPurpose, topic ObjsChannelPurpose) *ConversationObject {
	this := ConversationObject{}
	this.Created = created
	this.Creator = creator
	this.Id = id
	this.IsArchived = isArchived
	this.IsChannel = isChannel
	this.IsGeneral = isGeneral
	this.IsGroup = isGroup
	this.IsIm = isIm
	this.IsMpim = isMpim
	this.IsOrgShared = isOrgShared
	this.IsPrivate = isPrivate
	this.IsShared = isShared
	this.Name = name
	this.NameNormalized = nameNormalized
	this.Purpose = purpose
	this.Topic = topic
	return &this
}

// NewConversationObjectWithDefaults instantiates a new ConversationObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationObjectWithDefaults() *ConversationObject {
	this := ConversationObject{}
	return &this
}

// GetAcceptedUser returns the AcceptedUser field value if set, zero value otherwise.
func (o *ConversationObject) GetAcceptedUser() string {
	if o == nil || isNil(o.AcceptedUser) {
		var ret string
		return ret
	}
	return *o.AcceptedUser
}

// GetAcceptedUserOk returns a tuple with the AcceptedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetAcceptedUserOk() (*string, bool) {
	if o == nil || isNil(o.AcceptedUser) {
    return nil, false
	}
	return o.AcceptedUser, true
}

// HasAcceptedUser returns a boolean if a field has been set.
func (o *ConversationObject) HasAcceptedUser() bool {
	if o != nil && !isNil(o.AcceptedUser) {
		return true
	}

	return false
}

// SetAcceptedUser gets a reference to the given string and assigns it to the AcceptedUser field.
func (o *ConversationObject) SetAcceptedUser(v string) {
	o.AcceptedUser = &v
}

// GetConnectedTeamIds returns the ConnectedTeamIds field value if set, zero value otherwise.
func (o *ConversationObject) GetConnectedTeamIds() []string {
	if o == nil || isNil(o.ConnectedTeamIds) {
		var ret []string
		return ret
	}
	return o.ConnectedTeamIds
}

// GetConnectedTeamIdsOk returns a tuple with the ConnectedTeamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetConnectedTeamIdsOk() ([]string, bool) {
	if o == nil || isNil(o.ConnectedTeamIds) {
    return nil, false
	}
	return o.ConnectedTeamIds, true
}

// HasConnectedTeamIds returns a boolean if a field has been set.
func (o *ConversationObject) HasConnectedTeamIds() bool {
	if o != nil && !isNil(o.ConnectedTeamIds) {
		return true
	}

	return false
}

// SetConnectedTeamIds gets a reference to the given []string and assigns it to the ConnectedTeamIds field.
func (o *ConversationObject) SetConnectedTeamIds(v []string) {
	o.ConnectedTeamIds = v
}

// GetConversationHostId returns the ConversationHostId field value if set, zero value otherwise.
func (o *ConversationObject) GetConversationHostId() string {
	if o == nil || isNil(o.ConversationHostId) {
		var ret string
		return ret
	}
	return *o.ConversationHostId
}

// GetConversationHostIdOk returns a tuple with the ConversationHostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetConversationHostIdOk() (*string, bool) {
	if o == nil || isNil(o.ConversationHostId) {
    return nil, false
	}
	return o.ConversationHostId, true
}

// HasConversationHostId returns a boolean if a field has been set.
func (o *ConversationObject) HasConversationHostId() bool {
	if o != nil && !isNil(o.ConversationHostId) {
		return true
	}

	return false
}

// SetConversationHostId gets a reference to the given string and assigns it to the ConversationHostId field.
func (o *ConversationObject) SetConversationHostId(v string) {
	o.ConversationHostId = &v
}

// GetCreated returns the Created field value
func (o *ConversationObject) GetCreated() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetCreatedOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ConversationObject) SetCreated(v int32) {
	o.Created = v
}

// GetCreator returns the Creator field value
func (o *ConversationObject) GetCreator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetCreatorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Creator, true
}

// SetCreator sets field value
func (o *ConversationObject) SetCreator(v string) {
	o.Creator = v
}

// GetDisplayCounts returns the DisplayCounts field value if set, zero value otherwise.
func (o *ConversationObject) GetDisplayCounts() ConversationObjectDisplayCounts {
	if o == nil || isNil(o.DisplayCounts) {
		var ret ConversationObjectDisplayCounts
		return ret
	}
	return *o.DisplayCounts
}

// GetDisplayCountsOk returns a tuple with the DisplayCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetDisplayCountsOk() (*ConversationObjectDisplayCounts, bool) {
	if o == nil || isNil(o.DisplayCounts) {
    return nil, false
	}
	return o.DisplayCounts, true
}

// HasDisplayCounts returns a boolean if a field has been set.
func (o *ConversationObject) HasDisplayCounts() bool {
	if o != nil && !isNil(o.DisplayCounts) {
		return true
	}

	return false
}

// SetDisplayCounts gets a reference to the given ConversationObjectDisplayCounts and assigns it to the DisplayCounts field.
func (o *ConversationObject) SetDisplayCounts(v ConversationObjectDisplayCounts) {
	o.DisplayCounts = &v
}

// GetEnterpriseId returns the EnterpriseId field value if set, zero value otherwise.
func (o *ConversationObject) GetEnterpriseId() string {
	if o == nil || isNil(o.EnterpriseId) {
		var ret string
		return ret
	}
	return *o.EnterpriseId
}

// GetEnterpriseIdOk returns a tuple with the EnterpriseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetEnterpriseIdOk() (*string, bool) {
	if o == nil || isNil(o.EnterpriseId) {
    return nil, false
	}
	return o.EnterpriseId, true
}

// HasEnterpriseId returns a boolean if a field has been set.
func (o *ConversationObject) HasEnterpriseId() bool {
	if o != nil && !isNil(o.EnterpriseId) {
		return true
	}

	return false
}

// SetEnterpriseId gets a reference to the given string and assigns it to the EnterpriseId field.
func (o *ConversationObject) SetEnterpriseId(v string) {
	o.EnterpriseId = &v
}

// GetHasPins returns the HasPins field value if set, zero value otherwise.
func (o *ConversationObject) GetHasPins() bool {
	if o == nil || isNil(o.HasPins) {
		var ret bool
		return ret
	}
	return *o.HasPins
}

// GetHasPinsOk returns a tuple with the HasPins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetHasPinsOk() (*bool, bool) {
	if o == nil || isNil(o.HasPins) {
    return nil, false
	}
	return o.HasPins, true
}

// HasHasPins returns a boolean if a field has been set.
func (o *ConversationObject) HasHasPins() bool {
	if o != nil && !isNil(o.HasPins) {
		return true
	}

	return false
}

// SetHasPins gets a reference to the given bool and assigns it to the HasPins field.
func (o *ConversationObject) SetHasPins(v bool) {
	o.HasPins = &v
}

// GetId returns the Id field value
func (o *ConversationObject) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ConversationObject) SetId(v string) {
	o.Id = v
}

// GetInternalTeamIds returns the InternalTeamIds field value if set, zero value otherwise.
func (o *ConversationObject) GetInternalTeamIds() []string {
	if o == nil || isNil(o.InternalTeamIds) {
		var ret []string
		return ret
	}
	return o.InternalTeamIds
}

// GetInternalTeamIdsOk returns a tuple with the InternalTeamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetInternalTeamIdsOk() ([]string, bool) {
	if o == nil || isNil(o.InternalTeamIds) {
    return nil, false
	}
	return o.InternalTeamIds, true
}

// HasInternalTeamIds returns a boolean if a field has been set.
func (o *ConversationObject) HasInternalTeamIds() bool {
	if o != nil && !isNil(o.InternalTeamIds) {
		return true
	}

	return false
}

// SetInternalTeamIds gets a reference to the given []string and assigns it to the InternalTeamIds field.
func (o *ConversationObject) SetInternalTeamIds(v []string) {
	o.InternalTeamIds = v
}

// GetIsArchived returns the IsArchived field value
func (o *ConversationObject) GetIsArchived() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsArchivedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsArchived, true
}

// SetIsArchived sets field value
func (o *ConversationObject) SetIsArchived(v bool) {
	o.IsArchived = v
}

// GetIsChannel returns the IsChannel field value
func (o *ConversationObject) GetIsChannel() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsChannel
}

// GetIsChannelOk returns a tuple with the IsChannel field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsChannelOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsChannel, true
}

// SetIsChannel sets field value
func (o *ConversationObject) SetIsChannel(v bool) {
	o.IsChannel = v
}

// GetIsExtShared returns the IsExtShared field value if set, zero value otherwise.
func (o *ConversationObject) GetIsExtShared() bool {
	if o == nil || isNil(o.IsExtShared) {
		var ret bool
		return ret
	}
	return *o.IsExtShared
}

// GetIsExtSharedOk returns a tuple with the IsExtShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsExtSharedOk() (*bool, bool) {
	if o == nil || isNil(o.IsExtShared) {
    return nil, false
	}
	return o.IsExtShared, true
}

// HasIsExtShared returns a boolean if a field has been set.
func (o *ConversationObject) HasIsExtShared() bool {
	if o != nil && !isNil(o.IsExtShared) {
		return true
	}

	return false
}

// SetIsExtShared gets a reference to the given bool and assigns it to the IsExtShared field.
func (o *ConversationObject) SetIsExtShared(v bool) {
	o.IsExtShared = &v
}

// GetIsFrozen returns the IsFrozen field value if set, zero value otherwise.
func (o *ConversationObject) GetIsFrozen() bool {
	if o == nil || isNil(o.IsFrozen) {
		var ret bool
		return ret
	}
	return *o.IsFrozen
}

// GetIsFrozenOk returns a tuple with the IsFrozen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsFrozenOk() (*bool, bool) {
	if o == nil || isNil(o.IsFrozen) {
    return nil, false
	}
	return o.IsFrozen, true
}

// HasIsFrozen returns a boolean if a field has been set.
func (o *ConversationObject) HasIsFrozen() bool {
	if o != nil && !isNil(o.IsFrozen) {
		return true
	}

	return false
}

// SetIsFrozen gets a reference to the given bool and assigns it to the IsFrozen field.
func (o *ConversationObject) SetIsFrozen(v bool) {
	o.IsFrozen = &v
}

// GetIsGeneral returns the IsGeneral field value
func (o *ConversationObject) GetIsGeneral() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsGeneral
}

// GetIsGeneralOk returns a tuple with the IsGeneral field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsGeneralOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsGeneral, true
}

// SetIsGeneral sets field value
func (o *ConversationObject) SetIsGeneral(v bool) {
	o.IsGeneral = v
}

// GetIsGlobalShared returns the IsGlobalShared field value if set, zero value otherwise.
func (o *ConversationObject) GetIsGlobalShared() bool {
	if o == nil || isNil(o.IsGlobalShared) {
		var ret bool
		return ret
	}
	return *o.IsGlobalShared
}

// GetIsGlobalSharedOk returns a tuple with the IsGlobalShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsGlobalSharedOk() (*bool, bool) {
	if o == nil || isNil(o.IsGlobalShared) {
    return nil, false
	}
	return o.IsGlobalShared, true
}

// HasIsGlobalShared returns a boolean if a field has been set.
func (o *ConversationObject) HasIsGlobalShared() bool {
	if o != nil && !isNil(o.IsGlobalShared) {
		return true
	}

	return false
}

// SetIsGlobalShared gets a reference to the given bool and assigns it to the IsGlobalShared field.
func (o *ConversationObject) SetIsGlobalShared(v bool) {
	o.IsGlobalShared = &v
}

// GetIsGroup returns the IsGroup field value
func (o *ConversationObject) GetIsGroup() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsGroup
}

// GetIsGroupOk returns a tuple with the IsGroup field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsGroupOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsGroup, true
}

// SetIsGroup sets field value
func (o *ConversationObject) SetIsGroup(v bool) {
	o.IsGroup = v
}

// GetIsIm returns the IsIm field value
func (o *ConversationObject) GetIsIm() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsIm
}

// GetIsImOk returns a tuple with the IsIm field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsImOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsIm, true
}

// SetIsIm sets field value
func (o *ConversationObject) SetIsIm(v bool) {
	o.IsIm = v
}

// GetIsMember returns the IsMember field value if set, zero value otherwise.
func (o *ConversationObject) GetIsMember() bool {
	if o == nil || isNil(o.IsMember) {
		var ret bool
		return ret
	}
	return *o.IsMember
}

// GetIsMemberOk returns a tuple with the IsMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsMemberOk() (*bool, bool) {
	if o == nil || isNil(o.IsMember) {
    return nil, false
	}
	return o.IsMember, true
}

// HasIsMember returns a boolean if a field has been set.
func (o *ConversationObject) HasIsMember() bool {
	if o != nil && !isNil(o.IsMember) {
		return true
	}

	return false
}

// SetIsMember gets a reference to the given bool and assigns it to the IsMember field.
func (o *ConversationObject) SetIsMember(v bool) {
	o.IsMember = &v
}

// GetIsMoved returns the IsMoved field value if set, zero value otherwise.
func (o *ConversationObject) GetIsMoved() int32 {
	if o == nil || isNil(o.IsMoved) {
		var ret int32
		return ret
	}
	return *o.IsMoved
}

// GetIsMovedOk returns a tuple with the IsMoved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsMovedOk() (*int32, bool) {
	if o == nil || isNil(o.IsMoved) {
    return nil, false
	}
	return o.IsMoved, true
}

// HasIsMoved returns a boolean if a field has been set.
func (o *ConversationObject) HasIsMoved() bool {
	if o != nil && !isNil(o.IsMoved) {
		return true
	}

	return false
}

// SetIsMoved gets a reference to the given int32 and assigns it to the IsMoved field.
func (o *ConversationObject) SetIsMoved(v int32) {
	o.IsMoved = &v
}

// GetIsMpim returns the IsMpim field value
func (o *ConversationObject) GetIsMpim() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMpim
}

// GetIsMpimOk returns a tuple with the IsMpim field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsMpimOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsMpim, true
}

// SetIsMpim sets field value
func (o *ConversationObject) SetIsMpim(v bool) {
	o.IsMpim = v
}

// GetIsNonThreadable returns the IsNonThreadable field value if set, zero value otherwise.
func (o *ConversationObject) GetIsNonThreadable() bool {
	if o == nil || isNil(o.IsNonThreadable) {
		var ret bool
		return ret
	}
	return *o.IsNonThreadable
}

// GetIsNonThreadableOk returns a tuple with the IsNonThreadable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsNonThreadableOk() (*bool, bool) {
	if o == nil || isNil(o.IsNonThreadable) {
    return nil, false
	}
	return o.IsNonThreadable, true
}

// HasIsNonThreadable returns a boolean if a field has been set.
func (o *ConversationObject) HasIsNonThreadable() bool {
	if o != nil && !isNil(o.IsNonThreadable) {
		return true
	}

	return false
}

// SetIsNonThreadable gets a reference to the given bool and assigns it to the IsNonThreadable field.
func (o *ConversationObject) SetIsNonThreadable(v bool) {
	o.IsNonThreadable = &v
}

// GetIsOpen returns the IsOpen field value if set, zero value otherwise.
func (o *ConversationObject) GetIsOpen() bool {
	if o == nil || isNil(o.IsOpen) {
		var ret bool
		return ret
	}
	return *o.IsOpen
}

// GetIsOpenOk returns a tuple with the IsOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsOpenOk() (*bool, bool) {
	if o == nil || isNil(o.IsOpen) {
    return nil, false
	}
	return o.IsOpen, true
}

// HasIsOpen returns a boolean if a field has been set.
func (o *ConversationObject) HasIsOpen() bool {
	if o != nil && !isNil(o.IsOpen) {
		return true
	}

	return false
}

// SetIsOpen gets a reference to the given bool and assigns it to the IsOpen field.
func (o *ConversationObject) SetIsOpen(v bool) {
	o.IsOpen = &v
}

// GetIsOrgDefault returns the IsOrgDefault field value if set, zero value otherwise.
func (o *ConversationObject) GetIsOrgDefault() bool {
	if o == nil || isNil(o.IsOrgDefault) {
		var ret bool
		return ret
	}
	return *o.IsOrgDefault
}

// GetIsOrgDefaultOk returns a tuple with the IsOrgDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsOrgDefaultOk() (*bool, bool) {
	if o == nil || isNil(o.IsOrgDefault) {
    return nil, false
	}
	return o.IsOrgDefault, true
}

// HasIsOrgDefault returns a boolean if a field has been set.
func (o *ConversationObject) HasIsOrgDefault() bool {
	if o != nil && !isNil(o.IsOrgDefault) {
		return true
	}

	return false
}

// SetIsOrgDefault gets a reference to the given bool and assigns it to the IsOrgDefault field.
func (o *ConversationObject) SetIsOrgDefault(v bool) {
	o.IsOrgDefault = &v
}

// GetIsOrgMandatory returns the IsOrgMandatory field value if set, zero value otherwise.
func (o *ConversationObject) GetIsOrgMandatory() bool {
	if o == nil || isNil(o.IsOrgMandatory) {
		var ret bool
		return ret
	}
	return *o.IsOrgMandatory
}

// GetIsOrgMandatoryOk returns a tuple with the IsOrgMandatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsOrgMandatoryOk() (*bool, bool) {
	if o == nil || isNil(o.IsOrgMandatory) {
    return nil, false
	}
	return o.IsOrgMandatory, true
}

// HasIsOrgMandatory returns a boolean if a field has been set.
func (o *ConversationObject) HasIsOrgMandatory() bool {
	if o != nil && !isNil(o.IsOrgMandatory) {
		return true
	}

	return false
}

// SetIsOrgMandatory gets a reference to the given bool and assigns it to the IsOrgMandatory field.
func (o *ConversationObject) SetIsOrgMandatory(v bool) {
	o.IsOrgMandatory = &v
}

// GetIsOrgShared returns the IsOrgShared field value
func (o *ConversationObject) GetIsOrgShared() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOrgShared
}

// GetIsOrgSharedOk returns a tuple with the IsOrgShared field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsOrgSharedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsOrgShared, true
}

// SetIsOrgShared sets field value
func (o *ConversationObject) SetIsOrgShared(v bool) {
	o.IsOrgShared = v
}

// GetIsPendingExtShared returns the IsPendingExtShared field value if set, zero value otherwise.
func (o *ConversationObject) GetIsPendingExtShared() bool {
	if o == nil || isNil(o.IsPendingExtShared) {
		var ret bool
		return ret
	}
	return *o.IsPendingExtShared
}

// GetIsPendingExtSharedOk returns a tuple with the IsPendingExtShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsPendingExtSharedOk() (*bool, bool) {
	if o == nil || isNil(o.IsPendingExtShared) {
    return nil, false
	}
	return o.IsPendingExtShared, true
}

// HasIsPendingExtShared returns a boolean if a field has been set.
func (o *ConversationObject) HasIsPendingExtShared() bool {
	if o != nil && !isNil(o.IsPendingExtShared) {
		return true
	}

	return false
}

// SetIsPendingExtShared gets a reference to the given bool and assigns it to the IsPendingExtShared field.
func (o *ConversationObject) SetIsPendingExtShared(v bool) {
	o.IsPendingExtShared = &v
}

// GetIsPrivate returns the IsPrivate field value
func (o *ConversationObject) GetIsPrivate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsPrivateOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsPrivate, true
}

// SetIsPrivate sets field value
func (o *ConversationObject) SetIsPrivate(v bool) {
	o.IsPrivate = v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise.
func (o *ConversationObject) GetIsReadOnly() bool {
	if o == nil || isNil(o.IsReadOnly) {
		var ret bool
		return ret
	}
	return *o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.IsReadOnly) {
    return nil, false
	}
	return o.IsReadOnly, true
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *ConversationObject) HasIsReadOnly() bool {
	if o != nil && !isNil(o.IsReadOnly) {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given bool and assigns it to the IsReadOnly field.
func (o *ConversationObject) SetIsReadOnly(v bool) {
	o.IsReadOnly = &v
}

// GetIsShared returns the IsShared field value
func (o *ConversationObject) GetIsShared() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsShared
}

// GetIsSharedOk returns a tuple with the IsShared field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsSharedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsShared, true
}

// SetIsShared sets field value
func (o *ConversationObject) SetIsShared(v bool) {
	o.IsShared = v
}

// GetIsStarred returns the IsStarred field value if set, zero value otherwise.
func (o *ConversationObject) GetIsStarred() bool {
	if o == nil || isNil(o.IsStarred) {
		var ret bool
		return ret
	}
	return *o.IsStarred
}

// GetIsStarredOk returns a tuple with the IsStarred field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsStarredOk() (*bool, bool) {
	if o == nil || isNil(o.IsStarred) {
    return nil, false
	}
	return o.IsStarred, true
}

// HasIsStarred returns a boolean if a field has been set.
func (o *ConversationObject) HasIsStarred() bool {
	if o != nil && !isNil(o.IsStarred) {
		return true
	}

	return false
}

// SetIsStarred gets a reference to the given bool and assigns it to the IsStarred field.
func (o *ConversationObject) SetIsStarred(v bool) {
	o.IsStarred = &v
}

// GetIsThreadOnly returns the IsThreadOnly field value if set, zero value otherwise.
func (o *ConversationObject) GetIsThreadOnly() bool {
	if o == nil || isNil(o.IsThreadOnly) {
		var ret bool
		return ret
	}
	return *o.IsThreadOnly
}

// GetIsThreadOnlyOk returns a tuple with the IsThreadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetIsThreadOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.IsThreadOnly) {
    return nil, false
	}
	return o.IsThreadOnly, true
}

// HasIsThreadOnly returns a boolean if a field has been set.
func (o *ConversationObject) HasIsThreadOnly() bool {
	if o != nil && !isNil(o.IsThreadOnly) {
		return true
	}

	return false
}

// SetIsThreadOnly gets a reference to the given bool and assigns it to the IsThreadOnly field.
func (o *ConversationObject) SetIsThreadOnly(v bool) {
	o.IsThreadOnly = &v
}

// GetLastRead returns the LastRead field value if set, zero value otherwise.
func (o *ConversationObject) GetLastRead() string {
	if o == nil || isNil(o.LastRead) {
		var ret string
		return ret
	}
	return *o.LastRead
}

// GetLastReadOk returns a tuple with the LastRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetLastReadOk() (*string, bool) {
	if o == nil || isNil(o.LastRead) {
    return nil, false
	}
	return o.LastRead, true
}

// HasLastRead returns a boolean if a field has been set.
func (o *ConversationObject) HasLastRead() bool {
	if o != nil && !isNil(o.LastRead) {
		return true
	}

	return false
}

// SetLastRead gets a reference to the given string and assigns it to the LastRead field.
func (o *ConversationObject) SetLastRead(v string) {
	o.LastRead = &v
}

// GetLatest returns the Latest field value if set, zero value otherwise.
func (o *ConversationObject) GetLatest() []ObjsChannelLatestInner {
	if o == nil || isNil(o.Latest) {
		var ret []ObjsChannelLatestInner
		return ret
	}
	return o.Latest
}

// GetLatestOk returns a tuple with the Latest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetLatestOk() ([]ObjsChannelLatestInner, bool) {
	if o == nil || isNil(o.Latest) {
    return nil, false
	}
	return o.Latest, true
}

// HasLatest returns a boolean if a field has been set.
func (o *ConversationObject) HasLatest() bool {
	if o != nil && !isNil(o.Latest) {
		return true
	}

	return false
}

// SetLatest gets a reference to the given []ObjsChannelLatestInner and assigns it to the Latest field.
func (o *ConversationObject) SetLatest(v []ObjsChannelLatestInner) {
	o.Latest = v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *ConversationObject) GetMembers() []string {
	if o == nil || isNil(o.Members) {
		var ret []string
		return ret
	}
	return o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetMembersOk() ([]string, bool) {
	if o == nil || isNil(o.Members) {
    return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *ConversationObject) HasMembers() bool {
	if o != nil && !isNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []string and assigns it to the Members field.
func (o *ConversationObject) SetMembers(v []string) {
	o.Members = v
}

// GetName returns the Name field value
func (o *ConversationObject) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ConversationObject) SetName(v string) {
	o.Name = v
}

// GetNameNormalized returns the NameNormalized field value
func (o *ConversationObject) GetNameNormalized() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NameNormalized
}

// GetNameNormalizedOk returns a tuple with the NameNormalized field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetNameNormalizedOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.NameNormalized, true
}

// SetNameNormalized sets field value
func (o *ConversationObject) SetNameNormalized(v string) {
	o.NameNormalized = v
}

// GetNumMembers returns the NumMembers field value if set, zero value otherwise.
func (o *ConversationObject) GetNumMembers() int32 {
	if o == nil || isNil(o.NumMembers) {
		var ret int32
		return ret
	}
	return *o.NumMembers
}

// GetNumMembersOk returns a tuple with the NumMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetNumMembersOk() (*int32, bool) {
	if o == nil || isNil(o.NumMembers) {
    return nil, false
	}
	return o.NumMembers, true
}

// HasNumMembers returns a boolean if a field has been set.
func (o *ConversationObject) HasNumMembers() bool {
	if o != nil && !isNil(o.NumMembers) {
		return true
	}

	return false
}

// SetNumMembers gets a reference to the given int32 and assigns it to the NumMembers field.
func (o *ConversationObject) SetNumMembers(v int32) {
	o.NumMembers = &v
}

// GetParentConversation returns the ParentConversation field value if set, zero value otherwise.
func (o *ConversationObject) GetParentConversation() []ConversationObjectParentConversationInner {
	if o == nil || isNil(o.ParentConversation) {
		var ret []ConversationObjectParentConversationInner
		return ret
	}
	return o.ParentConversation
}

// GetParentConversationOk returns a tuple with the ParentConversation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetParentConversationOk() ([]ConversationObjectParentConversationInner, bool) {
	if o == nil || isNil(o.ParentConversation) {
    return nil, false
	}
	return o.ParentConversation, true
}

// HasParentConversation returns a boolean if a field has been set.
func (o *ConversationObject) HasParentConversation() bool {
	if o != nil && !isNil(o.ParentConversation) {
		return true
	}

	return false
}

// SetParentConversation gets a reference to the given []ConversationObjectParentConversationInner and assigns it to the ParentConversation field.
func (o *ConversationObject) SetParentConversation(v []ConversationObjectParentConversationInner) {
	o.ParentConversation = v
}

// GetPendingConnectedTeamIds returns the PendingConnectedTeamIds field value if set, zero value otherwise.
func (o *ConversationObject) GetPendingConnectedTeamIds() []string {
	if o == nil || isNil(o.PendingConnectedTeamIds) {
		var ret []string
		return ret
	}
	return o.PendingConnectedTeamIds
}

// GetPendingConnectedTeamIdsOk returns a tuple with the PendingConnectedTeamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetPendingConnectedTeamIdsOk() ([]string, bool) {
	if o == nil || isNil(o.PendingConnectedTeamIds) {
    return nil, false
	}
	return o.PendingConnectedTeamIds, true
}

// HasPendingConnectedTeamIds returns a boolean if a field has been set.
func (o *ConversationObject) HasPendingConnectedTeamIds() bool {
	if o != nil && !isNil(o.PendingConnectedTeamIds) {
		return true
	}

	return false
}

// SetPendingConnectedTeamIds gets a reference to the given []string and assigns it to the PendingConnectedTeamIds field.
func (o *ConversationObject) SetPendingConnectedTeamIds(v []string) {
	o.PendingConnectedTeamIds = v
}

// GetPendingShared returns the PendingShared field value if set, zero value otherwise.
func (o *ConversationObject) GetPendingShared() []string {
	if o == nil || isNil(o.PendingShared) {
		var ret []string
		return ret
	}
	return o.PendingShared
}

// GetPendingSharedOk returns a tuple with the PendingShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetPendingSharedOk() ([]string, bool) {
	if o == nil || isNil(o.PendingShared) {
    return nil, false
	}
	return o.PendingShared, true
}

// HasPendingShared returns a boolean if a field has been set.
func (o *ConversationObject) HasPendingShared() bool {
	if o != nil && !isNil(o.PendingShared) {
		return true
	}

	return false
}

// SetPendingShared gets a reference to the given []string and assigns it to the PendingShared field.
func (o *ConversationObject) SetPendingShared(v []string) {
	o.PendingShared = v
}

// GetPinCount returns the PinCount field value if set, zero value otherwise.
func (o *ConversationObject) GetPinCount() int32 {
	if o == nil || isNil(o.PinCount) {
		var ret int32
		return ret
	}
	return *o.PinCount
}

// GetPinCountOk returns a tuple with the PinCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetPinCountOk() (*int32, bool) {
	if o == nil || isNil(o.PinCount) {
    return nil, false
	}
	return o.PinCount, true
}

// HasPinCount returns a boolean if a field has been set.
func (o *ConversationObject) HasPinCount() bool {
	if o != nil && !isNil(o.PinCount) {
		return true
	}

	return false
}

// SetPinCount gets a reference to the given int32 and assigns it to the PinCount field.
func (o *ConversationObject) SetPinCount(v int32) {
	o.PinCount = &v
}

// GetPreviousNames returns the PreviousNames field value if set, zero value otherwise.
func (o *ConversationObject) GetPreviousNames() []string {
	if o == nil || isNil(o.PreviousNames) {
		var ret []string
		return ret
	}
	return o.PreviousNames
}

// GetPreviousNamesOk returns a tuple with the PreviousNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetPreviousNamesOk() ([]string, bool) {
	if o == nil || isNil(o.PreviousNames) {
    return nil, false
	}
	return o.PreviousNames, true
}

// HasPreviousNames returns a boolean if a field has been set.
func (o *ConversationObject) HasPreviousNames() bool {
	if o != nil && !isNil(o.PreviousNames) {
		return true
	}

	return false
}

// SetPreviousNames gets a reference to the given []string and assigns it to the PreviousNames field.
func (o *ConversationObject) SetPreviousNames(v []string) {
	o.PreviousNames = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ConversationObject) GetPriority() float32 {
	if o == nil || isNil(o.Priority) {
		var ret float32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetPriorityOk() (*float32, bool) {
	if o == nil || isNil(o.Priority) {
    return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ConversationObject) HasPriority() bool {
	if o != nil && !isNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given float32 and assigns it to the Priority field.
func (o *ConversationObject) SetPriority(v float32) {
	o.Priority = &v
}

// GetPurpose returns the Purpose field value
func (o *ConversationObject) GetPurpose() ObjsChannelPurpose {
	if o == nil {
		var ret ObjsChannelPurpose
		return ret
	}

	return o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetPurposeOk() (*ObjsChannelPurpose, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Purpose, true
}

// SetPurpose sets field value
func (o *ConversationObject) SetPurpose(v ObjsChannelPurpose) {
	o.Purpose = v
}

// GetSharedTeamIds returns the SharedTeamIds field value if set, zero value otherwise.
func (o *ConversationObject) GetSharedTeamIds() []string {
	if o == nil || isNil(o.SharedTeamIds) {
		var ret []string
		return ret
	}
	return o.SharedTeamIds
}

// GetSharedTeamIdsOk returns a tuple with the SharedTeamIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetSharedTeamIdsOk() ([]string, bool) {
	if o == nil || isNil(o.SharedTeamIds) {
    return nil, false
	}
	return o.SharedTeamIds, true
}

// HasSharedTeamIds returns a boolean if a field has been set.
func (o *ConversationObject) HasSharedTeamIds() bool {
	if o != nil && !isNil(o.SharedTeamIds) {
		return true
	}

	return false
}

// SetSharedTeamIds gets a reference to the given []string and assigns it to the SharedTeamIds field.
func (o *ConversationObject) SetSharedTeamIds(v []string) {
	o.SharedTeamIds = v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *ConversationObject) GetShares() []ConversationObjectSharesInner {
	if o == nil || isNil(o.Shares) {
		var ret []ConversationObjectSharesInner
		return ret
	}
	return o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetSharesOk() ([]ConversationObjectSharesInner, bool) {
	if o == nil || isNil(o.Shares) {
    return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *ConversationObject) HasShares() bool {
	if o != nil && !isNil(o.Shares) {
		return true
	}

	return false
}

// SetShares gets a reference to the given []ConversationObjectSharesInner and assigns it to the Shares field.
func (o *ConversationObject) SetShares(v []ConversationObjectSharesInner) {
	o.Shares = v
}

// GetTimezoneCount returns the TimezoneCount field value if set, zero value otherwise.
func (o *ConversationObject) GetTimezoneCount() int32 {
	if o == nil || isNil(o.TimezoneCount) {
		var ret int32
		return ret
	}
	return *o.TimezoneCount
}

// GetTimezoneCountOk returns a tuple with the TimezoneCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetTimezoneCountOk() (*int32, bool) {
	if o == nil || isNil(o.TimezoneCount) {
    return nil, false
	}
	return o.TimezoneCount, true
}

// HasTimezoneCount returns a boolean if a field has been set.
func (o *ConversationObject) HasTimezoneCount() bool {
	if o != nil && !isNil(o.TimezoneCount) {
		return true
	}

	return false
}

// SetTimezoneCount gets a reference to the given int32 and assigns it to the TimezoneCount field.
func (o *ConversationObject) SetTimezoneCount(v int32) {
	o.TimezoneCount = &v
}

// GetTopic returns the Topic field value
func (o *ConversationObject) GetTopic() ObjsChannelPurpose {
	if o == nil {
		var ret ObjsChannelPurpose
		return ret
	}

	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetTopicOk() (*ObjsChannelPurpose, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Topic, true
}

// SetTopic sets field value
func (o *ConversationObject) SetTopic(v ObjsChannelPurpose) {
	o.Topic = v
}

// GetUnlinked returns the Unlinked field value if set, zero value otherwise.
func (o *ConversationObject) GetUnlinked() int32 {
	if o == nil || isNil(o.Unlinked) {
		var ret int32
		return ret
	}
	return *o.Unlinked
}

// GetUnlinkedOk returns a tuple with the Unlinked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetUnlinkedOk() (*int32, bool) {
	if o == nil || isNil(o.Unlinked) {
    return nil, false
	}
	return o.Unlinked, true
}

// HasUnlinked returns a boolean if a field has been set.
func (o *ConversationObject) HasUnlinked() bool {
	if o != nil && !isNil(o.Unlinked) {
		return true
	}

	return false
}

// SetUnlinked gets a reference to the given int32 and assigns it to the Unlinked field.
func (o *ConversationObject) SetUnlinked(v int32) {
	o.Unlinked = &v
}

// GetUnreadCount returns the UnreadCount field value if set, zero value otherwise.
func (o *ConversationObject) GetUnreadCount() int32 {
	if o == nil || isNil(o.UnreadCount) {
		var ret int32
		return ret
	}
	return *o.UnreadCount
}

// GetUnreadCountOk returns a tuple with the UnreadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetUnreadCountOk() (*int32, bool) {
	if o == nil || isNil(o.UnreadCount) {
    return nil, false
	}
	return o.UnreadCount, true
}

// HasUnreadCount returns a boolean if a field has been set.
func (o *ConversationObject) HasUnreadCount() bool {
	if o != nil && !isNil(o.UnreadCount) {
		return true
	}

	return false
}

// SetUnreadCount gets a reference to the given int32 and assigns it to the UnreadCount field.
func (o *ConversationObject) SetUnreadCount(v int32) {
	o.UnreadCount = &v
}

// GetUnreadCountDisplay returns the UnreadCountDisplay field value if set, zero value otherwise.
func (o *ConversationObject) GetUnreadCountDisplay() int32 {
	if o == nil || isNil(o.UnreadCountDisplay) {
		var ret int32
		return ret
	}
	return *o.UnreadCountDisplay
}

// GetUnreadCountDisplayOk returns a tuple with the UnreadCountDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetUnreadCountDisplayOk() (*int32, bool) {
	if o == nil || isNil(o.UnreadCountDisplay) {
    return nil, false
	}
	return o.UnreadCountDisplay, true
}

// HasUnreadCountDisplay returns a boolean if a field has been set.
func (o *ConversationObject) HasUnreadCountDisplay() bool {
	if o != nil && !isNil(o.UnreadCountDisplay) {
		return true
	}

	return false
}

// SetUnreadCountDisplay gets a reference to the given int32 and assigns it to the UnreadCountDisplay field.
func (o *ConversationObject) SetUnreadCountDisplay(v int32) {
	o.UnreadCountDisplay = &v
}

// GetUseCase returns the UseCase field value if set, zero value otherwise.
func (o *ConversationObject) GetUseCase() string {
	if o == nil || isNil(o.UseCase) {
		var ret string
		return ret
	}
	return *o.UseCase
}

// GetUseCaseOk returns a tuple with the UseCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetUseCaseOk() (*string, bool) {
	if o == nil || isNil(o.UseCase) {
    return nil, false
	}
	return o.UseCase, true
}

// HasUseCase returns a boolean if a field has been set.
func (o *ConversationObject) HasUseCase() bool {
	if o != nil && !isNil(o.UseCase) {
		return true
	}

	return false
}

// SetUseCase gets a reference to the given string and assigns it to the UseCase field.
func (o *ConversationObject) SetUseCase(v string) {
	o.UseCase = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *ConversationObject) GetUser() string {
	if o == nil || isNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetUserOk() (*string, bool) {
	if o == nil || isNil(o.User) {
    return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *ConversationObject) HasUser() bool {
	if o != nil && !isNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *ConversationObject) SetUser(v string) {
	o.User = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ConversationObject) GetVersion() int32 {
	if o == nil || isNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationObject) GetVersionOk() (*int32, bool) {
	if o == nil || isNil(o.Version) {
    return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ConversationObject) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *ConversationObject) SetVersion(v int32) {
	o.Version = &v
}

func (o ConversationObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AcceptedUser) {
		toSerialize["accepted_user"] = o.AcceptedUser
	}
	if !isNil(o.ConnectedTeamIds) {
		toSerialize["connected_team_ids"] = o.ConnectedTeamIds
	}
	if !isNil(o.ConversationHostId) {
		toSerialize["conversation_host_id"] = o.ConversationHostId
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["creator"] = o.Creator
	}
	if !isNil(o.DisplayCounts) {
		toSerialize["display_counts"] = o.DisplayCounts
	}
	if !isNil(o.EnterpriseId) {
		toSerialize["enterprise_id"] = o.EnterpriseId
	}
	if !isNil(o.HasPins) {
		toSerialize["has_pins"] = o.HasPins
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.InternalTeamIds) {
		toSerialize["internal_team_ids"] = o.InternalTeamIds
	}
	if true {
		toSerialize["is_archived"] = o.IsArchived
	}
	if true {
		toSerialize["is_channel"] = o.IsChannel
	}
	if !isNil(o.IsExtShared) {
		toSerialize["is_ext_shared"] = o.IsExtShared
	}
	if !isNil(o.IsFrozen) {
		toSerialize["is_frozen"] = o.IsFrozen
	}
	if true {
		toSerialize["is_general"] = o.IsGeneral
	}
	if !isNil(o.IsGlobalShared) {
		toSerialize["is_global_shared"] = o.IsGlobalShared
	}
	if true {
		toSerialize["is_group"] = o.IsGroup
	}
	if true {
		toSerialize["is_im"] = o.IsIm
	}
	if !isNil(o.IsMember) {
		toSerialize["is_member"] = o.IsMember
	}
	if !isNil(o.IsMoved) {
		toSerialize["is_moved"] = o.IsMoved
	}
	if true {
		toSerialize["is_mpim"] = o.IsMpim
	}
	if !isNil(o.IsNonThreadable) {
		toSerialize["is_non_threadable"] = o.IsNonThreadable
	}
	if !isNil(o.IsOpen) {
		toSerialize["is_open"] = o.IsOpen
	}
	if !isNil(o.IsOrgDefault) {
		toSerialize["is_org_default"] = o.IsOrgDefault
	}
	if !isNil(o.IsOrgMandatory) {
		toSerialize["is_org_mandatory"] = o.IsOrgMandatory
	}
	if true {
		toSerialize["is_org_shared"] = o.IsOrgShared
	}
	if !isNil(o.IsPendingExtShared) {
		toSerialize["is_pending_ext_shared"] = o.IsPendingExtShared
	}
	if true {
		toSerialize["is_private"] = o.IsPrivate
	}
	if !isNil(o.IsReadOnly) {
		toSerialize["is_read_only"] = o.IsReadOnly
	}
	if true {
		toSerialize["is_shared"] = o.IsShared
	}
	if !isNil(o.IsStarred) {
		toSerialize["is_starred"] = o.IsStarred
	}
	if !isNil(o.IsThreadOnly) {
		toSerialize["is_thread_only"] = o.IsThreadOnly
	}
	if !isNil(o.LastRead) {
		toSerialize["last_read"] = o.LastRead
	}
	if !isNil(o.Latest) {
		toSerialize["latest"] = o.Latest
	}
	if !isNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["name_normalized"] = o.NameNormalized
	}
	if !isNil(o.NumMembers) {
		toSerialize["num_members"] = o.NumMembers
	}
	if !isNil(o.ParentConversation) {
		toSerialize["parent_conversation"] = o.ParentConversation
	}
	if !isNil(o.PendingConnectedTeamIds) {
		toSerialize["pending_connected_team_ids"] = o.PendingConnectedTeamIds
	}
	if !isNil(o.PendingShared) {
		toSerialize["pending_shared"] = o.PendingShared
	}
	if !isNil(o.PinCount) {
		toSerialize["pin_count"] = o.PinCount
	}
	if !isNil(o.PreviousNames) {
		toSerialize["previous_names"] = o.PreviousNames
	}
	if !isNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if true {
		toSerialize["purpose"] = o.Purpose
	}
	if !isNil(o.SharedTeamIds) {
		toSerialize["shared_team_ids"] = o.SharedTeamIds
	}
	if !isNil(o.Shares) {
		toSerialize["shares"] = o.Shares
	}
	if !isNil(o.TimezoneCount) {
		toSerialize["timezone_count"] = o.TimezoneCount
	}
	if true {
		toSerialize["topic"] = o.Topic
	}
	if !isNil(o.Unlinked) {
		toSerialize["unlinked"] = o.Unlinked
	}
	if !isNil(o.UnreadCount) {
		toSerialize["unread_count"] = o.UnreadCount
	}
	if !isNil(o.UnreadCountDisplay) {
		toSerialize["unread_count_display"] = o.UnreadCountDisplay
	}
	if !isNil(o.UseCase) {
		toSerialize["use_case"] = o.UseCase
	}
	if !isNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableConversationObject struct {
	value *ConversationObject
	isSet bool
}

func (v NullableConversationObject) Get() *ConversationObject {
	return v.value
}

func (v *NullableConversationObject) Set(val *ConversationObject) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationObject) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationObject(val *ConversationObject) *NullableConversationObject {
	return &NullableConversationObject{value: val, isSet: true}
}

func (v NullableConversationObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


