/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// AdminUsersSessionApiService AdminUsersSessionApi service
type AdminUsersSessionApiService service

type ApiAdminUsersSessionInvalidateRequest struct {
	ctx context.Context
	ApiService *AdminUsersSessionApiService
	token *string
	sessionId *int32
	teamId *string
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersSessionInvalidateRequest) Token(token string) ApiAdminUsersSessionInvalidateRequest {
	r.token = &token
	return r
}

func (r ApiAdminUsersSessionInvalidateRequest) SessionId(sessionId int32) ApiAdminUsersSessionInvalidateRequest {
	r.sessionId = &sessionId
	return r
}

// ID of the team that the session belongs to
func (r ApiAdminUsersSessionInvalidateRequest) TeamId(teamId string) ApiAdminUsersSessionInvalidateRequest {
	r.teamId = &teamId
	return r
}

func (r ApiAdminUsersSessionInvalidateRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersSessionInvalidateExecute(r)
}

/*
AdminUsersSessionInvalidate Method for AdminUsersSessionInvalidate

Invalidate a single session for a user by session_id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersSessionInvalidateRequest
*/
func (a *AdminUsersSessionApiService) AdminUsersSessionInvalidate(ctx context.Context) ApiAdminUsersSessionInvalidateRequest {
	return ApiAdminUsersSessionInvalidateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsersSessionApiService) AdminUsersSessionInvalidateExecute(r ApiAdminUsersSessionInvalidateRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsersSessionApiService.AdminUsersSessionInvalidate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.session.invalidate"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.sessionId == nil {
		return localVarReturnValue, nil, reportError("sessionId is required and must be specified")
	}
	if r.teamId == nil {
		return localVarReturnValue, nil, reportError("teamId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	localVarFormParams.Add("session_id", parameterToString(*r.sessionId, ""))
	localVarFormParams.Add("team_id", parameterToString(*r.teamId, ""))
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAdminUsersSessionResetRequest struct {
	ctx context.Context
	ApiService *AdminUsersSessionApiService
	token *string
	userId *string
	mobileOnly *bool
	webOnly *bool
}

// Authentication token. Requires scope: &#x60;admin.users:write&#x60;
func (r ApiAdminUsersSessionResetRequest) Token(token string) ApiAdminUsersSessionResetRequest {
	r.token = &token
	return r
}

// The ID of the user to wipe sessions for
func (r ApiAdminUsersSessionResetRequest) UserId(userId string) ApiAdminUsersSessionResetRequest {
	r.userId = &userId
	return r
}

// Only expire mobile sessions (default: false)
func (r ApiAdminUsersSessionResetRequest) MobileOnly(mobileOnly bool) ApiAdminUsersSessionResetRequest {
	r.mobileOnly = &mobileOnly
	return r
}

// Only expire web sessions (default: false)
func (r ApiAdminUsersSessionResetRequest) WebOnly(webOnly bool) ApiAdminUsersSessionResetRequest {
	r.webOnly = &webOnly
	return r
}

func (r ApiAdminUsersSessionResetRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.AdminUsersSessionResetExecute(r)
}

/*
AdminUsersSessionReset Method for AdminUsersSessionReset

Wipes all valid sessions on all devices for a given user

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAdminUsersSessionResetRequest
*/
func (a *AdminUsersSessionApiService) AdminUsersSessionReset(ctx context.Context) ApiAdminUsersSessionResetRequest {
	return ApiAdminUsersSessionResetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *AdminUsersSessionApiService) AdminUsersSessionResetExecute(r ApiAdminUsersSessionResetRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminUsersSessionApiService.AdminUsersSessionReset")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/admin.users.session.reset"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.userId == nil {
		return localVarReturnValue, nil, reportError("userId is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	localVarHeaderParams["token"] = parameterToString(*r.token, "")
	if r.mobileOnly != nil {
		localVarFormParams.Add("mobile_only", parameterToString(*r.mobileOnly, ""))
	}
	localVarFormParams.Add("user_id", parameterToString(*r.userId, ""))
	if r.webOnly != nil {
		localVarFormParams.Add("web_only", parameterToString(*r.webOnly, ""))
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
