/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// UsersIdentitySchemaInnerAnyOfTeam struct for UsersIdentitySchemaInnerAnyOfTeam
type UsersIdentitySchemaInnerAnyOfTeam struct {
	Id string `json:"id"`
}

// NewUsersIdentitySchemaInnerAnyOfTeam instantiates a new UsersIdentitySchemaInnerAnyOfTeam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersIdentitySchemaInnerAnyOfTeam(id string) *UsersIdentitySchemaInnerAnyOfTeam {
	this := UsersIdentitySchemaInnerAnyOfTeam{}
	this.Id = id
	return &this
}

// NewUsersIdentitySchemaInnerAnyOfTeamWithDefaults instantiates a new UsersIdentitySchemaInnerAnyOfTeam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersIdentitySchemaInnerAnyOfTeamWithDefaults() *UsersIdentitySchemaInnerAnyOfTeam {
	this := UsersIdentitySchemaInnerAnyOfTeam{}
	return &this
}

// GetId returns the Id field value
func (o *UsersIdentitySchemaInnerAnyOfTeam) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UsersIdentitySchemaInnerAnyOfTeam) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UsersIdentitySchemaInnerAnyOfTeam) SetId(v string) {
	o.Id = v
}

func (o UsersIdentitySchemaInnerAnyOfTeam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableUsersIdentitySchemaInnerAnyOfTeam struct {
	value *UsersIdentitySchemaInnerAnyOfTeam
	isSet bool
}

func (v NullableUsersIdentitySchemaInnerAnyOfTeam) Get() *UsersIdentitySchemaInnerAnyOfTeam {
	return v.value
}

func (v *NullableUsersIdentitySchemaInnerAnyOfTeam) Set(val *UsersIdentitySchemaInnerAnyOfTeam) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersIdentitySchemaInnerAnyOfTeam) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersIdentitySchemaInnerAnyOfTeam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersIdentitySchemaInnerAnyOfTeam(val *UsersIdentitySchemaInnerAnyOfTeam) *NullableUsersIdentitySchemaInnerAnyOfTeam {
	return &NullableUsersIdentitySchemaInnerAnyOfTeam{value: val, isSet: true}
}

func (v NullableUsersIdentitySchemaInnerAnyOfTeam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersIdentitySchemaInnerAnyOfTeam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


