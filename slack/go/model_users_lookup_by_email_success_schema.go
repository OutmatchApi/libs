/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// UsersLookupByEmailSuccessSchema Schema for successful response from users.lookupByEmail method
type UsersLookupByEmailSuccessSchema struct {
	Ok DefsOkTrue `json:"ok"`
	User []ObjsUserInner `json:"user"`
	AdditionalProperties map[string]interface{}
}

type _UsersLookupByEmailSuccessSchema UsersLookupByEmailSuccessSchema

// NewUsersLookupByEmailSuccessSchema instantiates a new UsersLookupByEmailSuccessSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersLookupByEmailSuccessSchema(ok DefsOkTrue, user []ObjsUserInner) *UsersLookupByEmailSuccessSchema {
	this := UsersLookupByEmailSuccessSchema{}
	this.Ok = ok
	this.User = user
	return &this
}

// NewUsersLookupByEmailSuccessSchemaWithDefaults instantiates a new UsersLookupByEmailSuccessSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersLookupByEmailSuccessSchemaWithDefaults() *UsersLookupByEmailSuccessSchema {
	this := UsersLookupByEmailSuccessSchema{}
	return &this
}

// GetOk returns the Ok field value
func (o *UsersLookupByEmailSuccessSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *UsersLookupByEmailSuccessSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *UsersLookupByEmailSuccessSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetUser returns the User field value
func (o *UsersLookupByEmailSuccessSchema) GetUser() []ObjsUserInner {
	if o == nil {
		var ret []ObjsUserInner
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *UsersLookupByEmailSuccessSchema) GetUserOk() ([]ObjsUserInner, bool) {
	if o == nil {
    return nil, false
	}
	return o.User, true
}

// SetUser sets field value
func (o *UsersLookupByEmailSuccessSchema) SetUser(v []ObjsUserInner) {
	o.User = v
}

func (o UsersLookupByEmailSuccessSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if true {
		toSerialize["user"] = o.User
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *UsersLookupByEmailSuccessSchema) UnmarshalJSON(bytes []byte) (err error) {
	varUsersLookupByEmailSuccessSchema := _UsersLookupByEmailSuccessSchema{}

	if err = json.Unmarshal(bytes, &varUsersLookupByEmailSuccessSchema); err == nil {
		*o = UsersLookupByEmailSuccessSchema(varUsersLookupByEmailSuccessSchema)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "ok")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUsersLookupByEmailSuccessSchema struct {
	value *UsersLookupByEmailSuccessSchema
	isSet bool
}

func (v NullableUsersLookupByEmailSuccessSchema) Get() *UsersLookupByEmailSuccessSchema {
	return v.value
}

func (v *NullableUsersLookupByEmailSuccessSchema) Set(val *UsersLookupByEmailSuccessSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersLookupByEmailSuccessSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersLookupByEmailSuccessSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersLookupByEmailSuccessSchema(val *UsersLookupByEmailSuccessSchema) *NullableUsersLookupByEmailSuccessSchema {
	return &NullableUsersLookupByEmailSuccessSchema{value: val, isSet: true}
}

func (v NullableUsersLookupByEmailSuccessSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersLookupByEmailSuccessSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


