/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
	"fmt"
)

// ObjsConversationInner struct for ObjsConversationInner
type ObjsConversationInner struct {
	ConversationIMChannelObjectFromConversationsMethods *ConversationIMChannelObjectFromConversationsMethods
	ConversationMPIMObject *ConversationMPIMObject
	ConversationObject *ConversationObject
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ObjsConversationInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ConversationIMChannelObjectFromConversationsMethods
	err = json.Unmarshal(data, &dst.ConversationIMChannelObjectFromConversationsMethods);
	if err == nil {
		jsonConversationIMChannelObjectFromConversationsMethods, _ := json.Marshal(dst.ConversationIMChannelObjectFromConversationsMethods)
		if string(jsonConversationIMChannelObjectFromConversationsMethods) == "{}" { // empty struct
			dst.ConversationIMChannelObjectFromConversationsMethods = nil
		} else {
			return nil // data stored in dst.ConversationIMChannelObjectFromConversationsMethods, return on the first match
		}
	} else {
		dst.ConversationIMChannelObjectFromConversationsMethods = nil
	}

	// try to unmarshal JSON data into ConversationMPIMObject
	err = json.Unmarshal(data, &dst.ConversationMPIMObject);
	if err == nil {
		jsonConversationMPIMObject, _ := json.Marshal(dst.ConversationMPIMObject)
		if string(jsonConversationMPIMObject) == "{}" { // empty struct
			dst.ConversationMPIMObject = nil
		} else {
			return nil // data stored in dst.ConversationMPIMObject, return on the first match
		}
	} else {
		dst.ConversationMPIMObject = nil
	}

	// try to unmarshal JSON data into ConversationObject
	err = json.Unmarshal(data, &dst.ConversationObject);
	if err == nil {
		jsonConversationObject, _ := json.Marshal(dst.ConversationObject)
		if string(jsonConversationObject) == "{}" { // empty struct
			dst.ConversationObject = nil
		} else {
			return nil // data stored in dst.ConversationObject, return on the first match
		}
	} else {
		dst.ConversationObject = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ObjsConversationInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *ObjsConversationInner) MarshalJSON() ([]byte, error) {
	if src.ConversationIMChannelObjectFromConversationsMethods != nil {
		return json.Marshal(&src.ConversationIMChannelObjectFromConversationsMethods)
	}

	if src.ConversationMPIMObject != nil {
		return json.Marshal(&src.ConversationMPIMObject)
	}

	if src.ConversationObject != nil {
		return json.Marshal(&src.ConversationObject)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableObjsConversationInner struct {
	value *ObjsConversationInner
	isSet bool
}

func (v NullableObjsConversationInner) Get() *ObjsConversationInner {
	return v.value
}

func (v *NullableObjsConversationInner) Set(val *ObjsConversationInner) {
	v.value = val
	v.isSet = true
}

func (v NullableObjsConversationInner) IsSet() bool {
	return v.isSet
}

func (v *NullableObjsConversationInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjsConversationInner(val *ObjsConversationInner) *NullableObjsConversationInner {
	return &NullableObjsConversationInner{value: val, isSet: true}
}

func (v NullableObjsConversationInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjsConversationInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


