/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ObjsChannel struct for ObjsChannel
type ObjsChannel struct {
	AcceptedUser *string `json:"accepted_user,omitempty"`
	Created int32 `json:"created"`
	Creator string `json:"creator"`
	Id string `json:"id"`
	IsArchived *bool `json:"is_archived,omitempty"`
	IsChannel bool `json:"is_channel"`
	IsFrozen *bool `json:"is_frozen,omitempty"`
	IsGeneral *bool `json:"is_general,omitempty"`
	IsMember *bool `json:"is_member,omitempty"`
	IsMoved *int32 `json:"is_moved,omitempty"`
	IsMpim bool `json:"is_mpim"`
	IsNonThreadable *bool `json:"is_non_threadable,omitempty"`
	IsOrgShared bool `json:"is_org_shared"`
	IsPendingExtShared *bool `json:"is_pending_ext_shared,omitempty"`
	IsPrivate bool `json:"is_private"`
	IsReadOnly *bool `json:"is_read_only,omitempty"`
	IsShared bool `json:"is_shared"`
	IsThreadOnly *bool `json:"is_thread_only,omitempty"`
	LastRead *string `json:"last_read,omitempty"`
	Latest []ObjsChannelLatestInner `json:"latest,omitempty"`
	Members []string `json:"members"`
	Name string `json:"name"`
	NameNormalized string `json:"name_normalized"`
	NumMembers *int32 `json:"num_members,omitempty"`
	PendingShared []string `json:"pending_shared,omitempty"`
	PreviousNames []string `json:"previous_names,omitempty"`
	Priority *float32 `json:"priority,omitempty"`
	Purpose ObjsChannelPurpose `json:"purpose"`
	Topic ObjsChannelPurpose `json:"topic"`
	Unlinked *int32 `json:"unlinked,omitempty"`
	UnreadCount *int32 `json:"unread_count,omitempty"`
	UnreadCountDisplay *int32 `json:"unread_count_display,omitempty"`
}

// NewObjsChannel instantiates a new ObjsChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjsChannel(created int32, creator string, id string, isChannel bool, isMpim bool, isOrgShared bool, isPrivate bool, isShared bool, members []string, name string, nameNormalized string, purpose ObjsChannelPurpose, topic ObjsChannelPurpose) *ObjsChannel {
	this := ObjsChannel{}
	this.Created = created
	this.Creator = creator
	this.Id = id
	this.IsChannel = isChannel
	this.IsMpim = isMpim
	this.IsOrgShared = isOrgShared
	this.IsPrivate = isPrivate
	this.IsShared = isShared
	this.Members = members
	this.Name = name
	this.NameNormalized = nameNormalized
	this.Purpose = purpose
	this.Topic = topic
	return &this
}

// NewObjsChannelWithDefaults instantiates a new ObjsChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjsChannelWithDefaults() *ObjsChannel {
	this := ObjsChannel{}
	return &this
}

// GetAcceptedUser returns the AcceptedUser field value if set, zero value otherwise.
func (o *ObjsChannel) GetAcceptedUser() string {
	if o == nil || isNil(o.AcceptedUser) {
		var ret string
		return ret
	}
	return *o.AcceptedUser
}

// GetAcceptedUserOk returns a tuple with the AcceptedUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetAcceptedUserOk() (*string, bool) {
	if o == nil || isNil(o.AcceptedUser) {
    return nil, false
	}
	return o.AcceptedUser, true
}

// HasAcceptedUser returns a boolean if a field has been set.
func (o *ObjsChannel) HasAcceptedUser() bool {
	if o != nil && !isNil(o.AcceptedUser) {
		return true
	}

	return false
}

// SetAcceptedUser gets a reference to the given string and assigns it to the AcceptedUser field.
func (o *ObjsChannel) SetAcceptedUser(v string) {
	o.AcceptedUser = &v
}

// GetCreated returns the Created field value
func (o *ObjsChannel) GetCreated() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetCreatedOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *ObjsChannel) SetCreated(v int32) {
	o.Created = v
}

// GetCreator returns the Creator field value
func (o *ObjsChannel) GetCreator() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetCreatorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Creator, true
}

// SetCreator sets field value
func (o *ObjsChannel) SetCreator(v string) {
	o.Creator = v
}

// GetId returns the Id field value
func (o *ObjsChannel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ObjsChannel) SetId(v string) {
	o.Id = v
}

// GetIsArchived returns the IsArchived field value if set, zero value otherwise.
func (o *ObjsChannel) GetIsArchived() bool {
	if o == nil || isNil(o.IsArchived) {
		var ret bool
		return ret
	}
	return *o.IsArchived
}

// GetIsArchivedOk returns a tuple with the IsArchived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsArchivedOk() (*bool, bool) {
	if o == nil || isNil(o.IsArchived) {
    return nil, false
	}
	return o.IsArchived, true
}

// HasIsArchived returns a boolean if a field has been set.
func (o *ObjsChannel) HasIsArchived() bool {
	if o != nil && !isNil(o.IsArchived) {
		return true
	}

	return false
}

// SetIsArchived gets a reference to the given bool and assigns it to the IsArchived field.
func (o *ObjsChannel) SetIsArchived(v bool) {
	o.IsArchived = &v
}

// GetIsChannel returns the IsChannel field value
func (o *ObjsChannel) GetIsChannel() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsChannel
}

// GetIsChannelOk returns a tuple with the IsChannel field value
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsChannelOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsChannel, true
}

// SetIsChannel sets field value
func (o *ObjsChannel) SetIsChannel(v bool) {
	o.IsChannel = v
}

// GetIsFrozen returns the IsFrozen field value if set, zero value otherwise.
func (o *ObjsChannel) GetIsFrozen() bool {
	if o == nil || isNil(o.IsFrozen) {
		var ret bool
		return ret
	}
	return *o.IsFrozen
}

// GetIsFrozenOk returns a tuple with the IsFrozen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsFrozenOk() (*bool, bool) {
	if o == nil || isNil(o.IsFrozen) {
    return nil, false
	}
	return o.IsFrozen, true
}

// HasIsFrozen returns a boolean if a field has been set.
func (o *ObjsChannel) HasIsFrozen() bool {
	if o != nil && !isNil(o.IsFrozen) {
		return true
	}

	return false
}

// SetIsFrozen gets a reference to the given bool and assigns it to the IsFrozen field.
func (o *ObjsChannel) SetIsFrozen(v bool) {
	o.IsFrozen = &v
}

// GetIsGeneral returns the IsGeneral field value if set, zero value otherwise.
func (o *ObjsChannel) GetIsGeneral() bool {
	if o == nil || isNil(o.IsGeneral) {
		var ret bool
		return ret
	}
	return *o.IsGeneral
}

// GetIsGeneralOk returns a tuple with the IsGeneral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsGeneralOk() (*bool, bool) {
	if o == nil || isNil(o.IsGeneral) {
    return nil, false
	}
	return o.IsGeneral, true
}

// HasIsGeneral returns a boolean if a field has been set.
func (o *ObjsChannel) HasIsGeneral() bool {
	if o != nil && !isNil(o.IsGeneral) {
		return true
	}

	return false
}

// SetIsGeneral gets a reference to the given bool and assigns it to the IsGeneral field.
func (o *ObjsChannel) SetIsGeneral(v bool) {
	o.IsGeneral = &v
}

// GetIsMember returns the IsMember field value if set, zero value otherwise.
func (o *ObjsChannel) GetIsMember() bool {
	if o == nil || isNil(o.IsMember) {
		var ret bool
		return ret
	}
	return *o.IsMember
}

// GetIsMemberOk returns a tuple with the IsMember field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsMemberOk() (*bool, bool) {
	if o == nil || isNil(o.IsMember) {
    return nil, false
	}
	return o.IsMember, true
}

// HasIsMember returns a boolean if a field has been set.
func (o *ObjsChannel) HasIsMember() bool {
	if o != nil && !isNil(o.IsMember) {
		return true
	}

	return false
}

// SetIsMember gets a reference to the given bool and assigns it to the IsMember field.
func (o *ObjsChannel) SetIsMember(v bool) {
	o.IsMember = &v
}

// GetIsMoved returns the IsMoved field value if set, zero value otherwise.
func (o *ObjsChannel) GetIsMoved() int32 {
	if o == nil || isNil(o.IsMoved) {
		var ret int32
		return ret
	}
	return *o.IsMoved
}

// GetIsMovedOk returns a tuple with the IsMoved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsMovedOk() (*int32, bool) {
	if o == nil || isNil(o.IsMoved) {
    return nil, false
	}
	return o.IsMoved, true
}

// HasIsMoved returns a boolean if a field has been set.
func (o *ObjsChannel) HasIsMoved() bool {
	if o != nil && !isNil(o.IsMoved) {
		return true
	}

	return false
}

// SetIsMoved gets a reference to the given int32 and assigns it to the IsMoved field.
func (o *ObjsChannel) SetIsMoved(v int32) {
	o.IsMoved = &v
}

// GetIsMpim returns the IsMpim field value
func (o *ObjsChannel) GetIsMpim() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMpim
}

// GetIsMpimOk returns a tuple with the IsMpim field value
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsMpimOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsMpim, true
}

// SetIsMpim sets field value
func (o *ObjsChannel) SetIsMpim(v bool) {
	o.IsMpim = v
}

// GetIsNonThreadable returns the IsNonThreadable field value if set, zero value otherwise.
func (o *ObjsChannel) GetIsNonThreadable() bool {
	if o == nil || isNil(o.IsNonThreadable) {
		var ret bool
		return ret
	}
	return *o.IsNonThreadable
}

// GetIsNonThreadableOk returns a tuple with the IsNonThreadable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsNonThreadableOk() (*bool, bool) {
	if o == nil || isNil(o.IsNonThreadable) {
    return nil, false
	}
	return o.IsNonThreadable, true
}

// HasIsNonThreadable returns a boolean if a field has been set.
func (o *ObjsChannel) HasIsNonThreadable() bool {
	if o != nil && !isNil(o.IsNonThreadable) {
		return true
	}

	return false
}

// SetIsNonThreadable gets a reference to the given bool and assigns it to the IsNonThreadable field.
func (o *ObjsChannel) SetIsNonThreadable(v bool) {
	o.IsNonThreadable = &v
}

// GetIsOrgShared returns the IsOrgShared field value
func (o *ObjsChannel) GetIsOrgShared() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsOrgShared
}

// GetIsOrgSharedOk returns a tuple with the IsOrgShared field value
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsOrgSharedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsOrgShared, true
}

// SetIsOrgShared sets field value
func (o *ObjsChannel) SetIsOrgShared(v bool) {
	o.IsOrgShared = v
}

// GetIsPendingExtShared returns the IsPendingExtShared field value if set, zero value otherwise.
func (o *ObjsChannel) GetIsPendingExtShared() bool {
	if o == nil || isNil(o.IsPendingExtShared) {
		var ret bool
		return ret
	}
	return *o.IsPendingExtShared
}

// GetIsPendingExtSharedOk returns a tuple with the IsPendingExtShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsPendingExtSharedOk() (*bool, bool) {
	if o == nil || isNil(o.IsPendingExtShared) {
    return nil, false
	}
	return o.IsPendingExtShared, true
}

// HasIsPendingExtShared returns a boolean if a field has been set.
func (o *ObjsChannel) HasIsPendingExtShared() bool {
	if o != nil && !isNil(o.IsPendingExtShared) {
		return true
	}

	return false
}

// SetIsPendingExtShared gets a reference to the given bool and assigns it to the IsPendingExtShared field.
func (o *ObjsChannel) SetIsPendingExtShared(v bool) {
	o.IsPendingExtShared = &v
}

// GetIsPrivate returns the IsPrivate field value
func (o *ObjsChannel) GetIsPrivate() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPrivate
}

// GetIsPrivateOk returns a tuple with the IsPrivate field value
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsPrivateOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsPrivate, true
}

// SetIsPrivate sets field value
func (o *ObjsChannel) SetIsPrivate(v bool) {
	o.IsPrivate = v
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise.
func (o *ObjsChannel) GetIsReadOnly() bool {
	if o == nil || isNil(o.IsReadOnly) {
		var ret bool
		return ret
	}
	return *o.IsReadOnly
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.IsReadOnly) {
    return nil, false
	}
	return o.IsReadOnly, true
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *ObjsChannel) HasIsReadOnly() bool {
	if o != nil && !isNil(o.IsReadOnly) {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given bool and assigns it to the IsReadOnly field.
func (o *ObjsChannel) SetIsReadOnly(v bool) {
	o.IsReadOnly = &v
}

// GetIsShared returns the IsShared field value
func (o *ObjsChannel) GetIsShared() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsShared
}

// GetIsSharedOk returns a tuple with the IsShared field value
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsSharedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.IsShared, true
}

// SetIsShared sets field value
func (o *ObjsChannel) SetIsShared(v bool) {
	o.IsShared = v
}

// GetIsThreadOnly returns the IsThreadOnly field value if set, zero value otherwise.
func (o *ObjsChannel) GetIsThreadOnly() bool {
	if o == nil || isNil(o.IsThreadOnly) {
		var ret bool
		return ret
	}
	return *o.IsThreadOnly
}

// GetIsThreadOnlyOk returns a tuple with the IsThreadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetIsThreadOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.IsThreadOnly) {
    return nil, false
	}
	return o.IsThreadOnly, true
}

// HasIsThreadOnly returns a boolean if a field has been set.
func (o *ObjsChannel) HasIsThreadOnly() bool {
	if o != nil && !isNil(o.IsThreadOnly) {
		return true
	}

	return false
}

// SetIsThreadOnly gets a reference to the given bool and assigns it to the IsThreadOnly field.
func (o *ObjsChannel) SetIsThreadOnly(v bool) {
	o.IsThreadOnly = &v
}

// GetLastRead returns the LastRead field value if set, zero value otherwise.
func (o *ObjsChannel) GetLastRead() string {
	if o == nil || isNil(o.LastRead) {
		var ret string
		return ret
	}
	return *o.LastRead
}

// GetLastReadOk returns a tuple with the LastRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetLastReadOk() (*string, bool) {
	if o == nil || isNil(o.LastRead) {
    return nil, false
	}
	return o.LastRead, true
}

// HasLastRead returns a boolean if a field has been set.
func (o *ObjsChannel) HasLastRead() bool {
	if o != nil && !isNil(o.LastRead) {
		return true
	}

	return false
}

// SetLastRead gets a reference to the given string and assigns it to the LastRead field.
func (o *ObjsChannel) SetLastRead(v string) {
	o.LastRead = &v
}

// GetLatest returns the Latest field value if set, zero value otherwise.
func (o *ObjsChannel) GetLatest() []ObjsChannelLatestInner {
	if o == nil || isNil(o.Latest) {
		var ret []ObjsChannelLatestInner
		return ret
	}
	return o.Latest
}

// GetLatestOk returns a tuple with the Latest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetLatestOk() ([]ObjsChannelLatestInner, bool) {
	if o == nil || isNil(o.Latest) {
    return nil, false
	}
	return o.Latest, true
}

// HasLatest returns a boolean if a field has been set.
func (o *ObjsChannel) HasLatest() bool {
	if o != nil && !isNil(o.Latest) {
		return true
	}

	return false
}

// SetLatest gets a reference to the given []ObjsChannelLatestInner and assigns it to the Latest field.
func (o *ObjsChannel) SetLatest(v []ObjsChannelLatestInner) {
	o.Latest = v
}

// GetMembers returns the Members field value
func (o *ObjsChannel) GetMembers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetMembersOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Members, true
}

// SetMembers sets field value
func (o *ObjsChannel) SetMembers(v []string) {
	o.Members = v
}

// GetName returns the Name field value
func (o *ObjsChannel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ObjsChannel) SetName(v string) {
	o.Name = v
}

// GetNameNormalized returns the NameNormalized field value
func (o *ObjsChannel) GetNameNormalized() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NameNormalized
}

// GetNameNormalizedOk returns a tuple with the NameNormalized field value
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetNameNormalizedOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.NameNormalized, true
}

// SetNameNormalized sets field value
func (o *ObjsChannel) SetNameNormalized(v string) {
	o.NameNormalized = v
}

// GetNumMembers returns the NumMembers field value if set, zero value otherwise.
func (o *ObjsChannel) GetNumMembers() int32 {
	if o == nil || isNil(o.NumMembers) {
		var ret int32
		return ret
	}
	return *o.NumMembers
}

// GetNumMembersOk returns a tuple with the NumMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetNumMembersOk() (*int32, bool) {
	if o == nil || isNil(o.NumMembers) {
    return nil, false
	}
	return o.NumMembers, true
}

// HasNumMembers returns a boolean if a field has been set.
func (o *ObjsChannel) HasNumMembers() bool {
	if o != nil && !isNil(o.NumMembers) {
		return true
	}

	return false
}

// SetNumMembers gets a reference to the given int32 and assigns it to the NumMembers field.
func (o *ObjsChannel) SetNumMembers(v int32) {
	o.NumMembers = &v
}

// GetPendingShared returns the PendingShared field value if set, zero value otherwise.
func (o *ObjsChannel) GetPendingShared() []string {
	if o == nil || isNil(o.PendingShared) {
		var ret []string
		return ret
	}
	return o.PendingShared
}

// GetPendingSharedOk returns a tuple with the PendingShared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetPendingSharedOk() ([]string, bool) {
	if o == nil || isNil(o.PendingShared) {
    return nil, false
	}
	return o.PendingShared, true
}

// HasPendingShared returns a boolean if a field has been set.
func (o *ObjsChannel) HasPendingShared() bool {
	if o != nil && !isNil(o.PendingShared) {
		return true
	}

	return false
}

// SetPendingShared gets a reference to the given []string and assigns it to the PendingShared field.
func (o *ObjsChannel) SetPendingShared(v []string) {
	o.PendingShared = v
}

// GetPreviousNames returns the PreviousNames field value if set, zero value otherwise.
func (o *ObjsChannel) GetPreviousNames() []string {
	if o == nil || isNil(o.PreviousNames) {
		var ret []string
		return ret
	}
	return o.PreviousNames
}

// GetPreviousNamesOk returns a tuple with the PreviousNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetPreviousNamesOk() ([]string, bool) {
	if o == nil || isNil(o.PreviousNames) {
    return nil, false
	}
	return o.PreviousNames, true
}

// HasPreviousNames returns a boolean if a field has been set.
func (o *ObjsChannel) HasPreviousNames() bool {
	if o != nil && !isNil(o.PreviousNames) {
		return true
	}

	return false
}

// SetPreviousNames gets a reference to the given []string and assigns it to the PreviousNames field.
func (o *ObjsChannel) SetPreviousNames(v []string) {
	o.PreviousNames = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *ObjsChannel) GetPriority() float32 {
	if o == nil || isNil(o.Priority) {
		var ret float32
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetPriorityOk() (*float32, bool) {
	if o == nil || isNil(o.Priority) {
    return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *ObjsChannel) HasPriority() bool {
	if o != nil && !isNil(o.Priority) {
		return true
	}

	return false
}

// SetPriority gets a reference to the given float32 and assigns it to the Priority field.
func (o *ObjsChannel) SetPriority(v float32) {
	o.Priority = &v
}

// GetPurpose returns the Purpose field value
func (o *ObjsChannel) GetPurpose() ObjsChannelPurpose {
	if o == nil {
		var ret ObjsChannelPurpose
		return ret
	}

	return o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetPurposeOk() (*ObjsChannelPurpose, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Purpose, true
}

// SetPurpose sets field value
func (o *ObjsChannel) SetPurpose(v ObjsChannelPurpose) {
	o.Purpose = v
}

// GetTopic returns the Topic field value
func (o *ObjsChannel) GetTopic() ObjsChannelPurpose {
	if o == nil {
		var ret ObjsChannelPurpose
		return ret
	}

	return o.Topic
}

// GetTopicOk returns a tuple with the Topic field value
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetTopicOk() (*ObjsChannelPurpose, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Topic, true
}

// SetTopic sets field value
func (o *ObjsChannel) SetTopic(v ObjsChannelPurpose) {
	o.Topic = v
}

// GetUnlinked returns the Unlinked field value if set, zero value otherwise.
func (o *ObjsChannel) GetUnlinked() int32 {
	if o == nil || isNil(o.Unlinked) {
		var ret int32
		return ret
	}
	return *o.Unlinked
}

// GetUnlinkedOk returns a tuple with the Unlinked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetUnlinkedOk() (*int32, bool) {
	if o == nil || isNil(o.Unlinked) {
    return nil, false
	}
	return o.Unlinked, true
}

// HasUnlinked returns a boolean if a field has been set.
func (o *ObjsChannel) HasUnlinked() bool {
	if o != nil && !isNil(o.Unlinked) {
		return true
	}

	return false
}

// SetUnlinked gets a reference to the given int32 and assigns it to the Unlinked field.
func (o *ObjsChannel) SetUnlinked(v int32) {
	o.Unlinked = &v
}

// GetUnreadCount returns the UnreadCount field value if set, zero value otherwise.
func (o *ObjsChannel) GetUnreadCount() int32 {
	if o == nil || isNil(o.UnreadCount) {
		var ret int32
		return ret
	}
	return *o.UnreadCount
}

// GetUnreadCountOk returns a tuple with the UnreadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetUnreadCountOk() (*int32, bool) {
	if o == nil || isNil(o.UnreadCount) {
    return nil, false
	}
	return o.UnreadCount, true
}

// HasUnreadCount returns a boolean if a field has been set.
func (o *ObjsChannel) HasUnreadCount() bool {
	if o != nil && !isNil(o.UnreadCount) {
		return true
	}

	return false
}

// SetUnreadCount gets a reference to the given int32 and assigns it to the UnreadCount field.
func (o *ObjsChannel) SetUnreadCount(v int32) {
	o.UnreadCount = &v
}

// GetUnreadCountDisplay returns the UnreadCountDisplay field value if set, zero value otherwise.
func (o *ObjsChannel) GetUnreadCountDisplay() int32 {
	if o == nil || isNil(o.UnreadCountDisplay) {
		var ret int32
		return ret
	}
	return *o.UnreadCountDisplay
}

// GetUnreadCountDisplayOk returns a tuple with the UnreadCountDisplay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjsChannel) GetUnreadCountDisplayOk() (*int32, bool) {
	if o == nil || isNil(o.UnreadCountDisplay) {
    return nil, false
	}
	return o.UnreadCountDisplay, true
}

// HasUnreadCountDisplay returns a boolean if a field has been set.
func (o *ObjsChannel) HasUnreadCountDisplay() bool {
	if o != nil && !isNil(o.UnreadCountDisplay) {
		return true
	}

	return false
}

// SetUnreadCountDisplay gets a reference to the given int32 and assigns it to the UnreadCountDisplay field.
func (o *ObjsChannel) SetUnreadCountDisplay(v int32) {
	o.UnreadCountDisplay = &v
}

func (o ObjsChannel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AcceptedUser) {
		toSerialize["accepted_user"] = o.AcceptedUser
	}
	if true {
		toSerialize["created"] = o.Created
	}
	if true {
		toSerialize["creator"] = o.Creator
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.IsArchived) {
		toSerialize["is_archived"] = o.IsArchived
	}
	if true {
		toSerialize["is_channel"] = o.IsChannel
	}
	if !isNil(o.IsFrozen) {
		toSerialize["is_frozen"] = o.IsFrozen
	}
	if !isNil(o.IsGeneral) {
		toSerialize["is_general"] = o.IsGeneral
	}
	if !isNil(o.IsMember) {
		toSerialize["is_member"] = o.IsMember
	}
	if !isNil(o.IsMoved) {
		toSerialize["is_moved"] = o.IsMoved
	}
	if true {
		toSerialize["is_mpim"] = o.IsMpim
	}
	if !isNil(o.IsNonThreadable) {
		toSerialize["is_non_threadable"] = o.IsNonThreadable
	}
	if true {
		toSerialize["is_org_shared"] = o.IsOrgShared
	}
	if !isNil(o.IsPendingExtShared) {
		toSerialize["is_pending_ext_shared"] = o.IsPendingExtShared
	}
	if true {
		toSerialize["is_private"] = o.IsPrivate
	}
	if !isNil(o.IsReadOnly) {
		toSerialize["is_read_only"] = o.IsReadOnly
	}
	if true {
		toSerialize["is_shared"] = o.IsShared
	}
	if !isNil(o.IsThreadOnly) {
		toSerialize["is_thread_only"] = o.IsThreadOnly
	}
	if !isNil(o.LastRead) {
		toSerialize["last_read"] = o.LastRead
	}
	if !isNil(o.Latest) {
		toSerialize["latest"] = o.Latest
	}
	if true {
		toSerialize["members"] = o.Members
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["name_normalized"] = o.NameNormalized
	}
	if !isNil(o.NumMembers) {
		toSerialize["num_members"] = o.NumMembers
	}
	if !isNil(o.PendingShared) {
		toSerialize["pending_shared"] = o.PendingShared
	}
	if !isNil(o.PreviousNames) {
		toSerialize["previous_names"] = o.PreviousNames
	}
	if !isNil(o.Priority) {
		toSerialize["priority"] = o.Priority
	}
	if true {
		toSerialize["purpose"] = o.Purpose
	}
	if true {
		toSerialize["topic"] = o.Topic
	}
	if !isNil(o.Unlinked) {
		toSerialize["unlinked"] = o.Unlinked
	}
	if !isNil(o.UnreadCount) {
		toSerialize["unread_count"] = o.UnreadCount
	}
	if !isNil(o.UnreadCountDisplay) {
		toSerialize["unread_count_display"] = o.UnreadCountDisplay
	}
	return json.Marshal(toSerialize)
}

type NullableObjsChannel struct {
	value *ObjsChannel
	isSet bool
}

func (v NullableObjsChannel) Get() *ObjsChannel {
	return v.value
}

func (v *NullableObjsChannel) Set(val *ObjsChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableObjsChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableObjsChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjsChannel(val *ObjsChannel) *NullableObjsChannel {
	return &NullableObjsChannel{value: val, isSet: true}
}

func (v NullableObjsChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjsChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


