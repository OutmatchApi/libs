/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
	"fmt"
)

// DefsOkFalse the model 'DefsOkFalse'
type DefsOkFalse bool

// List of defs_ok_false
const (
	DEFSOKFALSE_FALSE DefsOkFalse = false
)

// All allowed values of DefsOkFalse enum
var AllowedDefsOkFalseEnumValues = []DefsOkFalse{
	false,
}

func (v *DefsOkFalse) UnmarshalJSON(src []byte) error {
	var value bool
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DefsOkFalse(value)
	for _, existing := range AllowedDefsOkFalseEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DefsOkFalse", value)
}

// NewDefsOkFalseFromValue returns a pointer to a valid DefsOkFalse
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDefsOkFalseFromValue(v bool) (*DefsOkFalse, error) {
	ev := DefsOkFalse(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DefsOkFalse: valid values are %v", v, AllowedDefsOkFalseEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DefsOkFalse) IsValid() bool {
	for _, existing := range AllowedDefsOkFalseEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to defs_ok_false value
func (v DefsOkFalse) Ptr() *DefsOkFalse {
	return &v
}

type NullableDefsOkFalse struct {
	value *DefsOkFalse
	isSet bool
}

func (v NullableDefsOkFalse) Get() *DefsOkFalse {
	return v.value
}

func (v *NullableDefsOkFalse) Set(val *DefsOkFalse) {
	v.value = val
	v.isSet = true
}

func (v NullableDefsOkFalse) IsSet() bool {
	return v.isSet
}

func (v *NullableDefsOkFalse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefsOkFalse(val *DefsOkFalse) *NullableDefsOkFalse {
	return &NullableDefsOkFalse{value: val, isSet: true}
}

func (v NullableDefsOkFalse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefsOkFalse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

