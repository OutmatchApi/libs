/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// FilesInfoSchema Schema for successful response from files.info method
type FilesInfoSchema struct {
	Comments []interface{} `json:"comments"`
	ContentHtml interface{} `json:"content_html,omitempty"`
	Editor *string `json:"editor,omitempty"`
	File ObjsFile `json:"file"`
	Ok DefsOkTrue `json:"ok"`
	Paging *ObjsPaging `json:"paging,omitempty"`
	ResponseMetadata []ObjsResponseMetadataInner `json:"response_metadata,omitempty"`
}

// NewFilesInfoSchema instantiates a new FilesInfoSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesInfoSchema(comments []interface{}, file ObjsFile, ok DefsOkTrue) *FilesInfoSchema {
	this := FilesInfoSchema{}
	this.Comments = comments
	this.File = file
	this.Ok = ok
	return &this
}

// NewFilesInfoSchemaWithDefaults instantiates a new FilesInfoSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesInfoSchemaWithDefaults() *FilesInfoSchema {
	this := FilesInfoSchema{}
	return &this
}

// GetComments returns the Comments field value
func (o *FilesInfoSchema) GetComments() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value
// and a boolean to check if the value has been set.
func (o *FilesInfoSchema) GetCommentsOk() ([]interface{}, bool) {
	if o == nil {
    return nil, false
	}
	return o.Comments, true
}

// SetComments sets field value
func (o *FilesInfoSchema) SetComments(v []interface{}) {
	o.Comments = v
}

// GetContentHtml returns the ContentHtml field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesInfoSchema) GetContentHtml() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ContentHtml
}

// GetContentHtmlOk returns a tuple with the ContentHtml field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesInfoSchema) GetContentHtmlOk() (*interface{}, bool) {
	if o == nil || isNil(o.ContentHtml) {
    return nil, false
	}
	return &o.ContentHtml, true
}

// HasContentHtml returns a boolean if a field has been set.
func (o *FilesInfoSchema) HasContentHtml() bool {
	if o != nil && isNil(o.ContentHtml) {
		return true
	}

	return false
}

// SetContentHtml gets a reference to the given interface{} and assigns it to the ContentHtml field.
func (o *FilesInfoSchema) SetContentHtml(v interface{}) {
	o.ContentHtml = v
}

// GetEditor returns the Editor field value if set, zero value otherwise.
func (o *FilesInfoSchema) GetEditor() string {
	if o == nil || isNil(o.Editor) {
		var ret string
		return ret
	}
	return *o.Editor
}

// GetEditorOk returns a tuple with the Editor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesInfoSchema) GetEditorOk() (*string, bool) {
	if o == nil || isNil(o.Editor) {
    return nil, false
	}
	return o.Editor, true
}

// HasEditor returns a boolean if a field has been set.
func (o *FilesInfoSchema) HasEditor() bool {
	if o != nil && !isNil(o.Editor) {
		return true
	}

	return false
}

// SetEditor gets a reference to the given string and assigns it to the Editor field.
func (o *FilesInfoSchema) SetEditor(v string) {
	o.Editor = &v
}

// GetFile returns the File field value
func (o *FilesInfoSchema) GetFile() ObjsFile {
	if o == nil {
		var ret ObjsFile
		return ret
	}

	return o.File
}

// GetFileOk returns a tuple with the File field value
// and a boolean to check if the value has been set.
func (o *FilesInfoSchema) GetFileOk() (*ObjsFile, bool) {
	if o == nil {
    return nil, false
	}
	return &o.File, true
}

// SetFile sets field value
func (o *FilesInfoSchema) SetFile(v ObjsFile) {
	o.File = v
}

// GetOk returns the Ok field value
func (o *FilesInfoSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *FilesInfoSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *FilesInfoSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetPaging returns the Paging field value if set, zero value otherwise.
func (o *FilesInfoSchema) GetPaging() ObjsPaging {
	if o == nil || isNil(o.Paging) {
		var ret ObjsPaging
		return ret
	}
	return *o.Paging
}

// GetPagingOk returns a tuple with the Paging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesInfoSchema) GetPagingOk() (*ObjsPaging, bool) {
	if o == nil || isNil(o.Paging) {
    return nil, false
	}
	return o.Paging, true
}

// HasPaging returns a boolean if a field has been set.
func (o *FilesInfoSchema) HasPaging() bool {
	if o != nil && !isNil(o.Paging) {
		return true
	}

	return false
}

// SetPaging gets a reference to the given ObjsPaging and assigns it to the Paging field.
func (o *FilesInfoSchema) SetPaging(v ObjsPaging) {
	o.Paging = &v
}

// GetResponseMetadata returns the ResponseMetadata field value if set, zero value otherwise.
func (o *FilesInfoSchema) GetResponseMetadata() []ObjsResponseMetadataInner {
	if o == nil || isNil(o.ResponseMetadata) {
		var ret []ObjsResponseMetadataInner
		return ret
	}
	return o.ResponseMetadata
}

// GetResponseMetadataOk returns a tuple with the ResponseMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilesInfoSchema) GetResponseMetadataOk() ([]ObjsResponseMetadataInner, bool) {
	if o == nil || isNil(o.ResponseMetadata) {
    return nil, false
	}
	return o.ResponseMetadata, true
}

// HasResponseMetadata returns a boolean if a field has been set.
func (o *FilesInfoSchema) HasResponseMetadata() bool {
	if o != nil && !isNil(o.ResponseMetadata) {
		return true
	}

	return false
}

// SetResponseMetadata gets a reference to the given []ObjsResponseMetadataInner and assigns it to the ResponseMetadata field.
func (o *FilesInfoSchema) SetResponseMetadata(v []ObjsResponseMetadataInner) {
	o.ResponseMetadata = v
}

func (o FilesInfoSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["comments"] = o.Comments
	}
	if o.ContentHtml != nil {
		toSerialize["content_html"] = o.ContentHtml
	}
	if !isNil(o.Editor) {
		toSerialize["editor"] = o.Editor
	}
	if true {
		toSerialize["file"] = o.File
	}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if !isNil(o.Paging) {
		toSerialize["paging"] = o.Paging
	}
	if !isNil(o.ResponseMetadata) {
		toSerialize["response_metadata"] = o.ResponseMetadata
	}
	return json.Marshal(toSerialize)
}

type NullableFilesInfoSchema struct {
	value *FilesInfoSchema
	isSet bool
}

func (v NullableFilesInfoSchema) Get() *FilesInfoSchema {
	return v.value
}

func (v *NullableFilesInfoSchema) Set(val *FilesInfoSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesInfoSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesInfoSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesInfoSchema(val *FilesInfoSchema) *NullableFilesInfoSchema {
	return &NullableFilesInfoSchema{value: val, isSet: true}
}

func (v NullableFilesInfoSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesInfoSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


