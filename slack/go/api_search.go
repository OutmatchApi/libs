/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// SearchApiService SearchApi service
type SearchApiService service

type ApiSearchMessagesRequest struct {
	ctx context.Context
	ApiService *SearchApiService
	token *string
	query *string
	count *int32
	highlight *bool
	page *int32
	sort *string
	sortDir *string
}

// Authentication token. Requires scope: &#x60;search:read&#x60;
func (r ApiSearchMessagesRequest) Token(token string) ApiSearchMessagesRequest {
	r.token = &token
	return r
}

// Search query.
func (r ApiSearchMessagesRequest) Query(query string) ApiSearchMessagesRequest {
	r.query = &query
	return r
}

// Pass the number of results you want per \&quot;page\&quot;. Maximum of &#x60;100&#x60;.
func (r ApiSearchMessagesRequest) Count(count int32) ApiSearchMessagesRequest {
	r.count = &count
	return r
}

// Pass a value of &#x60;true&#x60; to enable query highlight markers (see below).
func (r ApiSearchMessagesRequest) Highlight(highlight bool) ApiSearchMessagesRequest {
	r.highlight = &highlight
	return r
}

func (r ApiSearchMessagesRequest) Page(page int32) ApiSearchMessagesRequest {
	r.page = &page
	return r
}

// Return matches sorted by either &#x60;score&#x60; or &#x60;timestamp&#x60;.
func (r ApiSearchMessagesRequest) Sort(sort string) ApiSearchMessagesRequest {
	r.sort = &sort
	return r
}

// Change sort direction to ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;).
func (r ApiSearchMessagesRequest) SortDir(sortDir string) ApiSearchMessagesRequest {
	r.sortDir = &sortDir
	return r
}

func (r ApiSearchMessagesRequest) Execute() (*DefaultSuccessTemplate, *http.Response, error) {
	return r.ApiService.SearchMessagesExecute(r)
}

/*
SearchMessages Method for SearchMessages

Searches for messages matching a query.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSearchMessagesRequest
*/
func (a *SearchApiService) SearchMessages(ctx context.Context) ApiSearchMessagesRequest {
	return ApiSearchMessagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DefaultSuccessTemplate
func (a *SearchApiService) SearchMessagesExecute(r ApiSearchMessagesRequest) (*DefaultSuccessTemplate, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DefaultSuccessTemplate
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchApiService.SearchMessages")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/search.messages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.query == nil {
		return localVarReturnValue, nil, reportError("query is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	if r.count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.count, ""))
	}
	if r.highlight != nil {
		localVarQueryParams.Add("highlight", parameterToString(*r.highlight, ""))
	}
	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.sortDir != nil {
		localVarQueryParams.Add("sort_dir", parameterToString(*r.sortDir, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v DefaultErrorTemplate
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
