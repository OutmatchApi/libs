/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ApiTestErrorSchema Schema for error response api.test method
type ApiTestErrorSchema struct {
	Error string `json:"error"`
	Ok DefsOkFalse `json:"ok"`
}

// NewApiTestErrorSchema instantiates a new ApiTestErrorSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiTestErrorSchema(error_ string, ok DefsOkFalse) *ApiTestErrorSchema {
	this := ApiTestErrorSchema{}
	this.Error = error_
	this.Ok = ok
	return &this
}

// NewApiTestErrorSchemaWithDefaults instantiates a new ApiTestErrorSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiTestErrorSchemaWithDefaults() *ApiTestErrorSchema {
	this := ApiTestErrorSchema{}
	return &this
}

// GetError returns the Error field value
func (o *ApiTestErrorSchema) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *ApiTestErrorSchema) GetErrorOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *ApiTestErrorSchema) SetError(v string) {
	o.Error = v
}

// GetOk returns the Ok field value
func (o *ApiTestErrorSchema) GetOk() DefsOkFalse {
	if o == nil {
		var ret DefsOkFalse
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *ApiTestErrorSchema) GetOkOk() (*DefsOkFalse, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *ApiTestErrorSchema) SetOk(v DefsOkFalse) {
	o.Ok = v
}

func (o ApiTestErrorSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["error"] = o.Error
	}
	if true {
		toSerialize["ok"] = o.Ok
	}
	return json.Marshal(toSerialize)
}

type NullableApiTestErrorSchema struct {
	value *ApiTestErrorSchema
	isSet bool
}

func (v NullableApiTestErrorSchema) Get() *ApiTestErrorSchema {
	return v.value
}

func (v *NullableApiTestErrorSchema) Set(val *ApiTestErrorSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableApiTestErrorSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableApiTestErrorSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiTestErrorSchema(val *ApiTestErrorSchema) *NullableApiTestErrorSchema {
	return &NullableApiTestErrorSchema{value: val, isSet: true}
}

func (v NullableApiTestErrorSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiTestErrorSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


