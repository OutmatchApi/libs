/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// AppsPermissionsApiService AppsPermissionsApi service
type AppsPermissionsApiService service

type ApiAppsPermissionsInfoRequest struct {
	ctx context.Context
	ApiService *AppsPermissionsApiService
	token *string
}

// Authentication token. Requires scope: &#x60;none&#x60;
func (r ApiAppsPermissionsInfoRequest) Token(token string) ApiAppsPermissionsInfoRequest {
	r.token = &token
	return r
}

func (r ApiAppsPermissionsInfoRequest) Execute() (*AppsPermissionsInfoSchema, *http.Response, error) {
	return r.ApiService.AppsPermissionsInfoExecute(r)
}

/*
AppsPermissionsInfo Method for AppsPermissionsInfo

Returns list of permissions this app has on a team.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppsPermissionsInfoRequest
*/
func (a *AppsPermissionsApiService) AppsPermissionsInfo(ctx context.Context) ApiAppsPermissionsInfoRequest {
	return ApiAppsPermissionsInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppsPermissionsInfoSchema
func (a *AppsPermissionsApiService) AppsPermissionsInfoExecute(r ApiAppsPermissionsInfoRequest) (*AppsPermissionsInfoSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppsPermissionsInfoSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppsPermissionsApiService.AppsPermissionsInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apps.permissions.info"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.token != nil {
		localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AppsPermissionsInfoErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppsPermissionsRequestRequest struct {
	ctx context.Context
	ApiService *AppsPermissionsApiService
	token *string
	scopes *string
	triggerId *string
}

// Authentication token. Requires scope: &#x60;none&#x60;
func (r ApiAppsPermissionsRequestRequest) Token(token string) ApiAppsPermissionsRequestRequest {
	r.token = &token
	return r
}

// A comma separated list of scopes to request for
func (r ApiAppsPermissionsRequestRequest) Scopes(scopes string) ApiAppsPermissionsRequestRequest {
	r.scopes = &scopes
	return r
}

// Token used to trigger the permissions API
func (r ApiAppsPermissionsRequestRequest) TriggerId(triggerId string) ApiAppsPermissionsRequestRequest {
	r.triggerId = &triggerId
	return r
}

func (r ApiAppsPermissionsRequestRequest) Execute() (*AppsPermissionsRequestSchema, *http.Response, error) {
	return r.ApiService.AppsPermissionsRequestExecute(r)
}

/*
AppsPermissionsRequest Method for AppsPermissionsRequest

Allows an app to request additional scopes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAppsPermissionsRequestRequest
*/
func (a *AppsPermissionsApiService) AppsPermissionsRequest(ctx context.Context) ApiAppsPermissionsRequestRequest {
	return ApiAppsPermissionsRequestRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AppsPermissionsRequestSchema
func (a *AppsPermissionsApiService) AppsPermissionsRequestExecute(r ApiAppsPermissionsRequestRequest) (*AppsPermissionsRequestSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppsPermissionsRequestSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppsPermissionsApiService.AppsPermissionsRequest")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/apps.permissions.request"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.token == nil {
		return localVarReturnValue, nil, reportError("token is required and must be specified")
	}
	if r.scopes == nil {
		return localVarReturnValue, nil, reportError("scopes is required and must be specified")
	}
	if r.triggerId == nil {
		return localVarReturnValue, nil, reportError("triggerId is required and must be specified")
	}

	localVarQueryParams.Add("token", parameterToString(*r.token, ""))
	localVarQueryParams.Add("scopes", parameterToString(*r.scopes, ""))
	localVarQueryParams.Add("trigger_id", parameterToString(*r.triggerId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v AppsPermissionsRequestErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
