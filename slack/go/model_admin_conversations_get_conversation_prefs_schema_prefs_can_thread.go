/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// AdminConversationsGetConversationPrefsSchemaPrefsCanThread struct for AdminConversationsGetConversationPrefsSchemaPrefsCanThread
type AdminConversationsGetConversationPrefsSchemaPrefsCanThread struct {
	Type []string `json:"type,omitempty"`
	User []string `json:"user,omitempty"`
}

// NewAdminConversationsGetConversationPrefsSchemaPrefsCanThread instantiates a new AdminConversationsGetConversationPrefsSchemaPrefsCanThread object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminConversationsGetConversationPrefsSchemaPrefsCanThread() *AdminConversationsGetConversationPrefsSchemaPrefsCanThread {
	this := AdminConversationsGetConversationPrefsSchemaPrefsCanThread{}
	return &this
}

// NewAdminConversationsGetConversationPrefsSchemaPrefsCanThreadWithDefaults instantiates a new AdminConversationsGetConversationPrefsSchemaPrefsCanThread object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminConversationsGetConversationPrefsSchemaPrefsCanThreadWithDefaults() *AdminConversationsGetConversationPrefsSchemaPrefsCanThread {
	this := AdminConversationsGetConversationPrefsSchemaPrefsCanThread{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AdminConversationsGetConversationPrefsSchemaPrefsCanThread) GetType() []string {
	if o == nil || isNil(o.Type) {
		var ret []string
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConversationsGetConversationPrefsSchemaPrefsCanThread) GetTypeOk() ([]string, bool) {
	if o == nil || isNil(o.Type) {
    return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AdminConversationsGetConversationPrefsSchemaPrefsCanThread) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given []string and assigns it to the Type field.
func (o *AdminConversationsGetConversationPrefsSchemaPrefsCanThread) SetType(v []string) {
	o.Type = v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AdminConversationsGetConversationPrefsSchemaPrefsCanThread) GetUser() []string {
	if o == nil || isNil(o.User) {
		var ret []string
		return ret
	}
	return o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConversationsGetConversationPrefsSchemaPrefsCanThread) GetUserOk() ([]string, bool) {
	if o == nil || isNil(o.User) {
    return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AdminConversationsGetConversationPrefsSchemaPrefsCanThread) HasUser() bool {
	if o != nil && !isNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given []string and assigns it to the User field.
func (o *AdminConversationsGetConversationPrefsSchemaPrefsCanThread) SetUser(v []string) {
	o.User = v
}

func (o AdminConversationsGetConversationPrefsSchemaPrefsCanThread) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.User) {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableAdminConversationsGetConversationPrefsSchemaPrefsCanThread struct {
	value *AdminConversationsGetConversationPrefsSchemaPrefsCanThread
	isSet bool
}

func (v NullableAdminConversationsGetConversationPrefsSchemaPrefsCanThread) Get() *AdminConversationsGetConversationPrefsSchemaPrefsCanThread {
	return v.value
}

func (v *NullableAdminConversationsGetConversationPrefsSchemaPrefsCanThread) Set(val *AdminConversationsGetConversationPrefsSchemaPrefsCanThread) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminConversationsGetConversationPrefsSchemaPrefsCanThread) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminConversationsGetConversationPrefsSchemaPrefsCanThread) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminConversationsGetConversationPrefsSchemaPrefsCanThread(val *AdminConversationsGetConversationPrefsSchemaPrefsCanThread) *NullableAdminConversationsGetConversationPrefsSchemaPrefsCanThread {
	return &NullableAdminConversationsGetConversationPrefsSchemaPrefsCanThread{value: val, isSet: true}
}

func (v NullableAdminConversationsGetConversationPrefsSchemaPrefsCanThread) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminConversationsGetConversationPrefsSchemaPrefsCanThread) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


