/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


// ChatScheduledMessagesApiService ChatScheduledMessagesApi service
type ChatScheduledMessagesApiService service

type ApiChatScheduledMessagesListRequest struct {
	ctx context.Context
	ApiService *ChatScheduledMessagesApiService
	token *string
	channel *string
	latest *float32
	oldest *float32
	limit *int32
	cursor *string
}

// Authentication token. Requires scope: &#x60;none&#x60;
func (r ApiChatScheduledMessagesListRequest) Token(token string) ApiChatScheduledMessagesListRequest {
	r.token = &token
	return r
}

// The channel of the scheduled messages
func (r ApiChatScheduledMessagesListRequest) Channel(channel string) ApiChatScheduledMessagesListRequest {
	r.channel = &channel
	return r
}

// A UNIX timestamp of the latest value in the time range
func (r ApiChatScheduledMessagesListRequest) Latest(latest float32) ApiChatScheduledMessagesListRequest {
	r.latest = &latest
	return r
}

// A UNIX timestamp of the oldest value in the time range
func (r ApiChatScheduledMessagesListRequest) Oldest(oldest float32) ApiChatScheduledMessagesListRequest {
	r.oldest = &oldest
	return r
}

// Maximum number of original entries to return.
func (r ApiChatScheduledMessagesListRequest) Limit(limit int32) ApiChatScheduledMessagesListRequest {
	r.limit = &limit
	return r
}

// For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from.
func (r ApiChatScheduledMessagesListRequest) Cursor(cursor string) ApiChatScheduledMessagesListRequest {
	r.cursor = &cursor
	return r
}

func (r ApiChatScheduledMessagesListRequest) Execute() (*ChatScheduledMessagesListSchema, *http.Response, error) {
	return r.ApiService.ChatScheduledMessagesListExecute(r)
}

/*
ChatScheduledMessagesList Method for ChatScheduledMessagesList

Returns a list of scheduled messages.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiChatScheduledMessagesListRequest
*/
func (a *ChatScheduledMessagesApiService) ChatScheduledMessagesList(ctx context.Context) ApiChatScheduledMessagesListRequest {
	return ApiChatScheduledMessagesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ChatScheduledMessagesListSchema
func (a *ChatScheduledMessagesApiService) ChatScheduledMessagesListExecute(r ApiChatScheduledMessagesListRequest) (*ChatScheduledMessagesListSchema, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ChatScheduledMessagesListSchema
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChatScheduledMessagesApiService.ChatScheduledMessagesList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/chat.scheduledMessages.list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.channel != nil {
		localVarQueryParams.Add("channel", parameterToString(*r.channel, ""))
	}
	if r.latest != nil {
		localVarQueryParams.Add("latest", parameterToString(*r.latest, ""))
	}
	if r.oldest != nil {
		localVarQueryParams.Add("oldest", parameterToString(*r.oldest, ""))
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.cursor != nil {
		localVarQueryParams.Add("cursor", parameterToString(*r.cursor, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.token != nil {
		localVarHeaderParams["token"] = parameterToString(*r.token, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v ChatScheduledMessagesListErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
            		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
            		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
