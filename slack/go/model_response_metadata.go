/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ResponseMetadata struct for ResponseMetadata
type ResponseMetadata struct {
	Warnings []string `json:"warnings,omitempty"`
}

// NewResponseMetadata instantiates a new ResponseMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseMetadata() *ResponseMetadata {
	this := ResponseMetadata{}
	return &this
}

// NewResponseMetadataWithDefaults instantiates a new ResponseMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseMetadataWithDefaults() *ResponseMetadata {
	this := ResponseMetadata{}
	return &this
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *ResponseMetadata) GetWarnings() []string {
	if o == nil || isNil(o.Warnings) {
		var ret []string
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseMetadata) GetWarningsOk() ([]string, bool) {
	if o == nil || isNil(o.Warnings) {
    return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *ResponseMetadata) HasWarnings() bool {
	if o != nil && !isNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []string and assigns it to the Warnings field.
func (o *ResponseMetadata) SetWarnings(v []string) {
	o.Warnings = v
}

func (o ResponseMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableResponseMetadata struct {
	value *ResponseMetadata
	isSet bool
}

func (v NullableResponseMetadata) Get() *ResponseMetadata {
	return v.value
}

func (v *NullableResponseMetadata) Set(val *ResponseMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseMetadata(val *ResponseMetadata) *NullableResponseMetadata {
	return &NullableResponseMetadata{value: val, isSet: true}
}

func (v NullableResponseMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


