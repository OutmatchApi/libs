/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// FilesListSchema Schema for successful response from files.list method
type FilesListSchema struct {
	Files []ObjsFile `json:"files"`
	Ok DefsOkTrue `json:"ok"`
	Paging ObjsPaging `json:"paging"`
}

// NewFilesListSchema instantiates a new FilesListSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesListSchema(files []ObjsFile, ok DefsOkTrue, paging ObjsPaging) *FilesListSchema {
	this := FilesListSchema{}
	this.Files = files
	this.Ok = ok
	this.Paging = paging
	return &this
}

// NewFilesListSchemaWithDefaults instantiates a new FilesListSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesListSchemaWithDefaults() *FilesListSchema {
	this := FilesListSchema{}
	return &this
}

// GetFiles returns the Files field value
func (o *FilesListSchema) GetFiles() []ObjsFile {
	if o == nil {
		var ret []ObjsFile
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *FilesListSchema) GetFilesOk() ([]ObjsFile, bool) {
	if o == nil {
    return nil, false
	}
	return o.Files, true
}

// SetFiles sets field value
func (o *FilesListSchema) SetFiles(v []ObjsFile) {
	o.Files = v
}

// GetOk returns the Ok field value
func (o *FilesListSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *FilesListSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *FilesListSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetPaging returns the Paging field value
func (o *FilesListSchema) GetPaging() ObjsPaging {
	if o == nil {
		var ret ObjsPaging
		return ret
	}

	return o.Paging
}

// GetPagingOk returns a tuple with the Paging field value
// and a boolean to check if the value has been set.
func (o *FilesListSchema) GetPagingOk() (*ObjsPaging, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Paging, true
}

// SetPaging sets field value
func (o *FilesListSchema) SetPaging(v ObjsPaging) {
	o.Paging = v
}

func (o FilesListSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["files"] = o.Files
	}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if true {
		toSerialize["paging"] = o.Paging
	}
	return json.Marshal(toSerialize)
}

type NullableFilesListSchema struct {
	value *FilesListSchema
	isSet bool
}

func (v NullableFilesListSchema) Get() *FilesListSchema {
	return v.value
}

func (v *NullableFilesListSchema) Set(val *FilesListSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesListSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesListSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesListSchema(val *FilesListSchema) *NullableFilesListSchema {
	return &NullableFilesListSchema{value: val, isSet: true}
}

func (v NullableFilesListSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesListSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


