/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// UsergroupsUsersListSchema Schema for successful response from usergroups.users.list method
type UsergroupsUsersListSchema struct {
	Ok DefsOkTrue `json:"ok"`
	Users []string `json:"users"`
}

// NewUsergroupsUsersListSchema instantiates a new UsergroupsUsersListSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsergroupsUsersListSchema(ok DefsOkTrue, users []string) *UsergroupsUsersListSchema {
	this := UsergroupsUsersListSchema{}
	this.Ok = ok
	this.Users = users
	return &this
}

// NewUsergroupsUsersListSchemaWithDefaults instantiates a new UsergroupsUsersListSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsergroupsUsersListSchemaWithDefaults() *UsergroupsUsersListSchema {
	this := UsergroupsUsersListSchema{}
	return &this
}

// GetOk returns the Ok field value
func (o *UsergroupsUsersListSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *UsergroupsUsersListSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *UsergroupsUsersListSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetUsers returns the Users field value
func (o *UsergroupsUsersListSchema) GetUsers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Users
}

// GetUsersOk returns a tuple with the Users field value
// and a boolean to check if the value has been set.
func (o *UsergroupsUsersListSchema) GetUsersOk() ([]string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Users, true
}

// SetUsers sets field value
func (o *UsergroupsUsersListSchema) SetUsers(v []string) {
	o.Users = v
}

func (o UsergroupsUsersListSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if true {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableUsergroupsUsersListSchema struct {
	value *UsergroupsUsersListSchema
	isSet bool
}

func (v NullableUsergroupsUsersListSchema) Get() *UsergroupsUsersListSchema {
	return v.value
}

func (v *NullableUsergroupsUsersListSchema) Set(val *UsergroupsUsersListSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableUsergroupsUsersListSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableUsergroupsUsersListSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsergroupsUsersListSchema(val *UsergroupsUsersListSchema) *NullableUsergroupsUsersListSchema {
	return &NullableUsergroupsUsersListSchema{value: val, isSet: true}
}

func (v NullableUsergroupsUsersListSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsergroupsUsersListSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


