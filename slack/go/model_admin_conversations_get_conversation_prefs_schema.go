/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// AdminConversationsGetConversationPrefsSchema Schema for successful response of admin.conversations.getConversationPrefs
type AdminConversationsGetConversationPrefsSchema struct {
	Ok DefsOkTrue `json:"ok"`
	Prefs *AdminConversationsGetConversationPrefsSchemaPrefs `json:"prefs,omitempty"`
}

// NewAdminConversationsGetConversationPrefsSchema instantiates a new AdminConversationsGetConversationPrefsSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminConversationsGetConversationPrefsSchema(ok DefsOkTrue) *AdminConversationsGetConversationPrefsSchema {
	this := AdminConversationsGetConversationPrefsSchema{}
	this.Ok = ok
	return &this
}

// NewAdminConversationsGetConversationPrefsSchemaWithDefaults instantiates a new AdminConversationsGetConversationPrefsSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminConversationsGetConversationPrefsSchemaWithDefaults() *AdminConversationsGetConversationPrefsSchema {
	this := AdminConversationsGetConversationPrefsSchema{}
	return &this
}

// GetOk returns the Ok field value
func (o *AdminConversationsGetConversationPrefsSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *AdminConversationsGetConversationPrefsSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *AdminConversationsGetConversationPrefsSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

// GetPrefs returns the Prefs field value if set, zero value otherwise.
func (o *AdminConversationsGetConversationPrefsSchema) GetPrefs() AdminConversationsGetConversationPrefsSchemaPrefs {
	if o == nil || isNil(o.Prefs) {
		var ret AdminConversationsGetConversationPrefsSchemaPrefs
		return ret
	}
	return *o.Prefs
}

// GetPrefsOk returns a tuple with the Prefs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdminConversationsGetConversationPrefsSchema) GetPrefsOk() (*AdminConversationsGetConversationPrefsSchemaPrefs, bool) {
	if o == nil || isNil(o.Prefs) {
    return nil, false
	}
	return o.Prefs, true
}

// HasPrefs returns a boolean if a field has been set.
func (o *AdminConversationsGetConversationPrefsSchema) HasPrefs() bool {
	if o != nil && !isNil(o.Prefs) {
		return true
	}

	return false
}

// SetPrefs gets a reference to the given AdminConversationsGetConversationPrefsSchemaPrefs and assigns it to the Prefs field.
func (o *AdminConversationsGetConversationPrefsSchema) SetPrefs(v AdminConversationsGetConversationPrefsSchemaPrefs) {
	o.Prefs = &v
}

func (o AdminConversationsGetConversationPrefsSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ok"] = o.Ok
	}
	if !isNil(o.Prefs) {
		toSerialize["prefs"] = o.Prefs
	}
	return json.Marshal(toSerialize)
}

type NullableAdminConversationsGetConversationPrefsSchema struct {
	value *AdminConversationsGetConversationPrefsSchema
	isSet bool
}

func (v NullableAdminConversationsGetConversationPrefsSchema) Get() *AdminConversationsGetConversationPrefsSchema {
	return v.value
}

func (v *NullableAdminConversationsGetConversationPrefsSchema) Set(val *AdminConversationsGetConversationPrefsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminConversationsGetConversationPrefsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminConversationsGetConversationPrefsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminConversationsGetConversationPrefsSchema(val *AdminConversationsGetConversationPrefsSchema) *NullableAdminConversationsGetConversationPrefsSchema {
	return &NullableAdminConversationsGetConversationPrefsSchema{value: val, isSet: true}
}

func (v NullableAdminConversationsGetConversationPrefsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminConversationsGetConversationPrefsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


