/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// ObjsBotProfile struct for ObjsBotProfile
type ObjsBotProfile struct {
	AppId string `json:"app_id"`
	Deleted bool `json:"deleted"`
	Icons BotsInfoSchemaBotIcons `json:"icons"`
	Id string `json:"id"`
	Name string `json:"name"`
	TeamId string `json:"team_id"`
	Updated int32 `json:"updated"`
}

// NewObjsBotProfile instantiates a new ObjsBotProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjsBotProfile(appId string, deleted bool, icons BotsInfoSchemaBotIcons, id string, name string, teamId string, updated int32) *ObjsBotProfile {
	this := ObjsBotProfile{}
	this.AppId = appId
	this.Deleted = deleted
	this.Icons = icons
	this.Id = id
	this.Name = name
	this.TeamId = teamId
	this.Updated = updated
	return &this
}

// NewObjsBotProfileWithDefaults instantiates a new ObjsBotProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjsBotProfileWithDefaults() *ObjsBotProfile {
	this := ObjsBotProfile{}
	return &this
}

// GetAppId returns the AppId field value
func (o *ObjsBotProfile) GetAppId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AppId
}

// GetAppIdOk returns a tuple with the AppId field value
// and a boolean to check if the value has been set.
func (o *ObjsBotProfile) GetAppIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AppId, true
}

// SetAppId sets field value
func (o *ObjsBotProfile) SetAppId(v string) {
	o.AppId = v
}

// GetDeleted returns the Deleted field value
func (o *ObjsBotProfile) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *ObjsBotProfile) GetDeletedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *ObjsBotProfile) SetDeleted(v bool) {
	o.Deleted = v
}

// GetIcons returns the Icons field value
func (o *ObjsBotProfile) GetIcons() BotsInfoSchemaBotIcons {
	if o == nil {
		var ret BotsInfoSchemaBotIcons
		return ret
	}

	return o.Icons
}

// GetIconsOk returns a tuple with the Icons field value
// and a boolean to check if the value has been set.
func (o *ObjsBotProfile) GetIconsOk() (*BotsInfoSchemaBotIcons, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Icons, true
}

// SetIcons sets field value
func (o *ObjsBotProfile) SetIcons(v BotsInfoSchemaBotIcons) {
	o.Icons = v
}

// GetId returns the Id field value
func (o *ObjsBotProfile) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ObjsBotProfile) GetIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ObjsBotProfile) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ObjsBotProfile) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ObjsBotProfile) GetNameOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ObjsBotProfile) SetName(v string) {
	o.Name = v
}

// GetTeamId returns the TeamId field value
func (o *ObjsBotProfile) GetTeamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *ObjsBotProfile) GetTeamIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *ObjsBotProfile) SetTeamId(v string) {
	o.TeamId = v
}

// GetUpdated returns the Updated field value
func (o *ObjsBotProfile) GetUpdated() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
func (o *ObjsBotProfile) GetUpdatedOk() (*int32, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Updated, true
}

// SetUpdated sets field value
func (o *ObjsBotProfile) SetUpdated(v int32) {
	o.Updated = v
}

func (o ObjsBotProfile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["app_id"] = o.AppId
	}
	if true {
		toSerialize["deleted"] = o.Deleted
	}
	if true {
		toSerialize["icons"] = o.Icons
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["team_id"] = o.TeamId
	}
	if true {
		toSerialize["updated"] = o.Updated
	}
	return json.Marshal(toSerialize)
}

type NullableObjsBotProfile struct {
	value *ObjsBotProfile
	isSet bool
}

func (v NullableObjsBotProfile) Get() *ObjsBotProfile {
	return v.value
}

func (v *NullableObjsBotProfile) Set(val *ObjsBotProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableObjsBotProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableObjsBotProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjsBotProfile(val *ObjsBotProfile) *NullableObjsBotProfile {
	return &NullableObjsBotProfile{value: val, isSet: true}
}

func (v NullableObjsBotProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjsBotProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


