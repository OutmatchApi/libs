/*
Slack Web API

One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

API version: 1.7.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package slack

import (
	"encoding/json"
)

// FilesRevokePublicURLSchema Schema for successful response from files.revokePublicURL method
type FilesRevokePublicURLSchema struct {
	File ObjsFile `json:"file"`
	Ok DefsOkTrue `json:"ok"`
}

// NewFilesRevokePublicURLSchema instantiates a new FilesRevokePublicURLSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesRevokePublicURLSchema(file ObjsFile, ok DefsOkTrue) *FilesRevokePublicURLSchema {
	this := FilesRevokePublicURLSchema{}
	this.File = file
	this.Ok = ok
	return &this
}

// NewFilesRevokePublicURLSchemaWithDefaults instantiates a new FilesRevokePublicURLSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesRevokePublicURLSchemaWithDefaults() *FilesRevokePublicURLSchema {
	this := FilesRevokePublicURLSchema{}
	return &this
}

// GetFile returns the File field value
func (o *FilesRevokePublicURLSchema) GetFile() ObjsFile {
	if o == nil {
		var ret ObjsFile
		return ret
	}

	return o.File
}

// GetFileOk returns a tuple with the File field value
// and a boolean to check if the value has been set.
func (o *FilesRevokePublicURLSchema) GetFileOk() (*ObjsFile, bool) {
	if o == nil {
    return nil, false
	}
	return &o.File, true
}

// SetFile sets field value
func (o *FilesRevokePublicURLSchema) SetFile(v ObjsFile) {
	o.File = v
}

// GetOk returns the Ok field value
func (o *FilesRevokePublicURLSchema) GetOk() DefsOkTrue {
	if o == nil {
		var ret DefsOkTrue
		return ret
	}

	return o.Ok
}

// GetOkOk returns a tuple with the Ok field value
// and a boolean to check if the value has been set.
func (o *FilesRevokePublicURLSchema) GetOkOk() (*DefsOkTrue, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ok, true
}

// SetOk sets field value
func (o *FilesRevokePublicURLSchema) SetOk(v DefsOkTrue) {
	o.Ok = v
}

func (o FilesRevokePublicURLSchema) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["file"] = o.File
	}
	if true {
		toSerialize["ok"] = o.Ok
	}
	return json.Marshal(toSerialize)
}

type NullableFilesRevokePublicURLSchema struct {
	value *FilesRevokePublicURLSchema
	isSet bool
}

func (v NullableFilesRevokePublicURLSchema) Get() *FilesRevokePublicURLSchema {
	return v.value
}

func (v *NullableFilesRevokePublicURLSchema) Set(val *FilesRevokePublicURLSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesRevokePublicURLSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesRevokePublicURLSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesRevokePublicURLSchema(val *FilesRevokePublicURLSchema) *NullableFilesRevokePublicURLSchema {
	return &NullableFilesRevokePublicURLSchema{value: val, isSet: true}
}

func (v NullableFilesRevokePublicURLSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesRevokePublicURLSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


