/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.ReactionsAddErrorSchema
import com.outmatchapi.slack.ReactionsAddSchema
import com.outmatchapi.slack.ReactionsGetErrorSchema
import com.outmatchapi.slack.ReactionsGetSuccessSchemaInner
import com.outmatchapi.slack.ReactionsListErrorSchema
import com.outmatchapi.slack.ReactionsListSchema
import com.outmatchapi.slack.ReactionsRemoveErrorSchema
import com.outmatchapi.slack.ReactionsRemoveSchema

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class ReactionsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * Adds a reaction to an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60;
     * @param channel Channel where the message to add reaction to was posted.
     * @param name Reaction (emoji) name.
     * @param timestamp Timestamp of the message to add reaction to.
     * @return ReactionsAddSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun reactionsAdd(token: kotlin.String, channel: kotlin.String, name: kotlin.String, timestamp: kotlin.String) : ReactionsAddSchema = withContext(Dispatchers.IO) {
        val localVarResponse = reactionsAddWithHttpInfo(token = token, channel = channel, name = name, timestamp = timestamp)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReactionsAddSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Adds a reaction to an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60;
     * @param channel Channel where the message to add reaction to was posted.
     * @param name Reaction (emoji) name.
     * @param timestamp Timestamp of the message to add reaction to.
     * @return ApiResponse<ReactionsAddSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun reactionsAddWithHttpInfo(token: kotlin.String, channel: kotlin.String, name: kotlin.String, timestamp: kotlin.String) : ApiResponse<ReactionsAddSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = reactionsAddRequestConfig(token = token, channel = channel, name = name, timestamp = timestamp)

        return@withContext request<Map<String, PartConfig<*>>, ReactionsAddSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reactionsAdd
     *
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60;
     * @param channel Channel where the message to add reaction to was posted.
     * @param name Reaction (emoji) name.
     * @param timestamp Timestamp of the message to add reaction to.
     * @return RequestConfig
     */
    fun reactionsAddRequestConfig(token: kotlin.String, channel: kotlin.String, name: kotlin.String, timestamp: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "name" to PartConfig(body = name, headers = mutableMapOf()),
            "timestamp" to PartConfig(body = timestamp, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/reactions.add",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Gets reactions for an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60;
     * @param channel Channel where the message to get reactions for was posted. (optional)
     * @param file File to get reactions for. (optional)
     * @param fileComment File comment to get reactions for. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param timestamp Timestamp of the message to get reactions for. (optional)
     * @return kotlin.collections.List<ReactionsGetSuccessSchemaInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun reactionsGet(token: kotlin.String, channel: kotlin.String? = null, file: kotlin.String? = null, fileComment: kotlin.String? = null, full: kotlin.Boolean? = null, timestamp: kotlin.String? = null) : kotlin.collections.List<ReactionsGetSuccessSchemaInner> = withContext(Dispatchers.IO) {
        val localVarResponse = reactionsGetWithHttpInfo(token = token, channel = channel, file = file, fileComment = fileComment, full = full, timestamp = timestamp)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<ReactionsGetSuccessSchemaInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Gets reactions for an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60;
     * @param channel Channel where the message to get reactions for was posted. (optional)
     * @param file File to get reactions for. (optional)
     * @param fileComment File comment to get reactions for. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param timestamp Timestamp of the message to get reactions for. (optional)
     * @return ApiResponse<kotlin.collections.List<ReactionsGetSuccessSchemaInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun reactionsGetWithHttpInfo(token: kotlin.String, channel: kotlin.String?, file: kotlin.String?, fileComment: kotlin.String?, full: kotlin.Boolean?, timestamp: kotlin.String?) : ApiResponse<kotlin.collections.List<ReactionsGetSuccessSchemaInner>?> = withContext(Dispatchers.IO) {
        val localVariableConfig = reactionsGetRequestConfig(token = token, channel = channel, file = file, fileComment = fileComment, full = full, timestamp = timestamp)

        return@withContext request<Unit, kotlin.collections.List<ReactionsGetSuccessSchemaInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reactionsGet
     *
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60;
     * @param channel Channel where the message to get reactions for was posted. (optional)
     * @param file File to get reactions for. (optional)
     * @param fileComment File comment to get reactions for. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param timestamp Timestamp of the message to get reactions for. (optional)
     * @return RequestConfig
     */
    fun reactionsGetRequestConfig(token: kotlin.String, channel: kotlin.String?, file: kotlin.String?, fileComment: kotlin.String?, full: kotlin.Boolean?, timestamp: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (channel != null) {
                    put("channel", listOf(channel.toString()))
                }
                if (file != null) {
                    put("file", listOf(file.toString()))
                }
                if (fileComment != null) {
                    put("file_comment", listOf(fileComment.toString()))
                }
                if (full != null) {
                    put("full", listOf(full.toString()))
                }
                if (timestamp != null) {
                    put("timestamp", listOf(timestamp.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/reactions.get",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Lists reactions made by a user.
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60;
     * @param user Show reactions made by this user. Defaults to the authed user. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @return ReactionsListSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun reactionsList(token: kotlin.String, user: kotlin.String? = null, full: kotlin.Boolean? = null, count: kotlin.Int? = null, page: kotlin.Int? = null, cursor: kotlin.String? = null, limit: kotlin.Int? = null) : ReactionsListSchema = withContext(Dispatchers.IO) {
        val localVarResponse = reactionsListWithHttpInfo(token = token, user = user, full = full, count = count, page = page, cursor = cursor, limit = limit)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReactionsListSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Lists reactions made by a user.
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60;
     * @param user Show reactions made by this user. Defaults to the authed user. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @return ApiResponse<ReactionsListSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun reactionsListWithHttpInfo(token: kotlin.String, user: kotlin.String?, full: kotlin.Boolean?, count: kotlin.Int?, page: kotlin.Int?, cursor: kotlin.String?, limit: kotlin.Int?) : ApiResponse<ReactionsListSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = reactionsListRequestConfig(token = token, user = user, full = full, count = count, page = page, cursor = cursor, limit = limit)

        return@withContext request<Unit, ReactionsListSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reactionsList
     *
     * @param token Authentication token. Requires scope: &#x60;reactions:read&#x60;
     * @param user Show reactions made by this user. Defaults to the authed user. (optional)
     * @param full If true always return the complete reaction list. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @return RequestConfig
     */
    fun reactionsListRequestConfig(token: kotlin.String, user: kotlin.String?, full: kotlin.Boolean?, count: kotlin.Int?, page: kotlin.Int?, cursor: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (user != null) {
                    put("user", listOf(user.toString()))
                }
                if (full != null) {
                    put("full", listOf(full.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/reactions.list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Removes a reaction from an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60;
     * @param name Reaction (emoji) name.
     * @param channel Channel where the message to remove reaction from was posted. (optional)
     * @param file File to remove reaction from. (optional)
     * @param fileComment File comment to remove reaction from. (optional)
     * @param timestamp Timestamp of the message to remove reaction from. (optional)
     * @return ReactionsRemoveSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun reactionsRemove(token: kotlin.String, name: kotlin.String, channel: kotlin.String? = null, file: kotlin.String? = null, fileComment: kotlin.String? = null, timestamp: kotlin.String? = null) : ReactionsRemoveSchema = withContext(Dispatchers.IO) {
        val localVarResponse = reactionsRemoveWithHttpInfo(token = token, name = name, channel = channel, file = file, fileComment = fileComment, timestamp = timestamp)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ReactionsRemoveSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Removes a reaction from an item.
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60;
     * @param name Reaction (emoji) name.
     * @param channel Channel where the message to remove reaction from was posted. (optional)
     * @param file File to remove reaction from. (optional)
     * @param fileComment File comment to remove reaction from. (optional)
     * @param timestamp Timestamp of the message to remove reaction from. (optional)
     * @return ApiResponse<ReactionsRemoveSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun reactionsRemoveWithHttpInfo(token: kotlin.String, name: kotlin.String, channel: kotlin.String?, file: kotlin.String?, fileComment: kotlin.String?, timestamp: kotlin.String?) : ApiResponse<ReactionsRemoveSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = reactionsRemoveRequestConfig(token = token, name = name, channel = channel, file = file, fileComment = fileComment, timestamp = timestamp)

        return@withContext request<Map<String, PartConfig<*>>, ReactionsRemoveSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation reactionsRemove
     *
     * @param token Authentication token. Requires scope: &#x60;reactions:write&#x60;
     * @param name Reaction (emoji) name.
     * @param channel Channel where the message to remove reaction from was posted. (optional)
     * @param file File to remove reaction from. (optional)
     * @param fileComment File comment to remove reaction from. (optional)
     * @param timestamp Timestamp of the message to remove reaction from. (optional)
     * @return RequestConfig
     */
    fun reactionsRemoveRequestConfig(token: kotlin.String, name: kotlin.String, channel: kotlin.String?, file: kotlin.String?, fileComment: kotlin.String?, timestamp: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "file" to PartConfig(body = file, headers = mutableMapOf()),
            "file_comment" to PartConfig(body = fileComment, headers = mutableMapOf()),
            "name" to PartConfig(body = name, headers = mutableMapOf()),
            "timestamp" to PartConfig(body = timestamp, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/reactions.remove",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
