/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.ChatScheduledMessagesListErrorSchema
import com.outmatchapi.slack.ChatScheduledMessagesListSchema

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class ChatScheduledMessagesApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * Returns a list of scheduled messages.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param channel The channel of the scheduled messages (optional)
     * @param latest A UNIX timestamp of the latest value in the time range (optional)
     * @param oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param limit Maximum number of original entries to return. (optional)
     * @param cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @return ChatScheduledMessagesListSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun chatScheduledMessagesList(token: kotlin.String? = null, channel: kotlin.String? = null, latest: java.math.BigDecimal? = null, oldest: java.math.BigDecimal? = null, limit: kotlin.Int? = null, cursor: kotlin.String? = null) : ChatScheduledMessagesListSchema = withContext(Dispatchers.IO) {
        val localVarResponse = chatScheduledMessagesListWithHttpInfo(token = token, channel = channel, latest = latest, oldest = oldest, limit = limit, cursor = cursor)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatScheduledMessagesListSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Returns a list of scheduled messages.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param channel The channel of the scheduled messages (optional)
     * @param latest A UNIX timestamp of the latest value in the time range (optional)
     * @param oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param limit Maximum number of original entries to return. (optional)
     * @param cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @return ApiResponse<ChatScheduledMessagesListSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun chatScheduledMessagesListWithHttpInfo(token: kotlin.String?, channel: kotlin.String?, latest: java.math.BigDecimal?, oldest: java.math.BigDecimal?, limit: kotlin.Int?, cursor: kotlin.String?) : ApiResponse<ChatScheduledMessagesListSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = chatScheduledMessagesListRequestConfig(token = token, channel = channel, latest = latest, oldest = oldest, limit = limit, cursor = cursor)

        return@withContext request<Unit, ChatScheduledMessagesListSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation chatScheduledMessagesList
     *
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param channel The channel of the scheduled messages (optional)
     * @param latest A UNIX timestamp of the latest value in the time range (optional)
     * @param oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param limit Maximum number of original entries to return. (optional)
     * @param cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @return RequestConfig
     */
    fun chatScheduledMessagesListRequestConfig(token: kotlin.String?, channel: kotlin.String?, latest: java.math.BigDecimal?, oldest: java.math.BigDecimal?, limit: kotlin.Int?, cursor: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (channel != null) {
                    put("channel", listOf(channel.toString()))
                }
                if (latest != null) {
                    put("latest", listOf(latest.toString()))
                }
                if (oldest != null) {
                    put("oldest", listOf(oldest.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        token?.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/chat.scheduledMessages.list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
