/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.DefaultErrorTemplate
import com.outmatchapi.slack.DefaultSuccessTemplate

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class AdminUsergroupsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * Add one or more default channels to an IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
     * @param channelIds Comma separated string of channel IDs.
     * @param usergroupId ID of the IDP group to add default channels for.
     * @param teamId The workspace to add default channels in. (optional)
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminUsergroupsAddChannels(token: kotlin.String, channelIds: kotlin.String, usergroupId: kotlin.String, teamId: kotlin.String? = null) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = adminUsergroupsAddChannelsWithHttpInfo(token = token, channelIds = channelIds, usergroupId = usergroupId, teamId = teamId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Add one or more default channels to an IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
     * @param channelIds Comma separated string of channel IDs.
     * @param usergroupId ID of the IDP group to add default channels for.
     * @param teamId The workspace to add default channels in. (optional)
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminUsergroupsAddChannelsWithHttpInfo(token: kotlin.String, channelIds: kotlin.String, usergroupId: kotlin.String, teamId: kotlin.String?) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminUsergroupsAddChannelsRequestConfig(token = token, channelIds = channelIds, usergroupId = usergroupId, teamId = teamId)

        return@withContext request<Map<String, PartConfig<*>>, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminUsergroupsAddChannels
     *
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
     * @param channelIds Comma separated string of channel IDs.
     * @param usergroupId ID of the IDP group to add default channels for.
     * @param teamId The workspace to add default channels in. (optional)
     * @return RequestConfig
     */
    fun adminUsergroupsAddChannelsRequestConfig(token: kotlin.String, channelIds: kotlin.String, usergroupId: kotlin.String, teamId: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel_ids" to PartConfig(body = channelIds, headers = mutableMapOf()),
            "team_id" to PartConfig(body = teamId, headers = mutableMapOf()),
            "usergroup_id" to PartConfig(body = usergroupId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.usergroups.addChannels",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Associate one or more default workspaces with an organization-wide IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
     * @param teamIds A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
     * @param usergroupId An encoded usergroup (IDP Group) ID.
     * @param autoProvision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminUsergroupsAddTeams(token: kotlin.String, teamIds: kotlin.String, usergroupId: kotlin.String, autoProvision: kotlin.Boolean? = null) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = adminUsergroupsAddTeamsWithHttpInfo(token = token, teamIds = teamIds, usergroupId = usergroupId, autoProvision = autoProvision)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Associate one or more default workspaces with an organization-wide IDP group.
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
     * @param teamIds A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
     * @param usergroupId An encoded usergroup (IDP Group) ID.
     * @param autoProvision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminUsergroupsAddTeamsWithHttpInfo(token: kotlin.String, teamIds: kotlin.String, usergroupId: kotlin.String, autoProvision: kotlin.Boolean?) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminUsergroupsAddTeamsRequestConfig(token = token, teamIds = teamIds, usergroupId = usergroupId, autoProvision = autoProvision)

        return@withContext request<Map<String, PartConfig<*>>, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminUsergroupsAddTeams
     *
     * @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
     * @param teamIds A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
     * @param usergroupId An encoded usergroup (IDP Group) ID.
     * @param autoProvision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members. (optional)
     * @return RequestConfig
     */
    fun adminUsergroupsAddTeamsRequestConfig(token: kotlin.String, teamIds: kotlin.String, usergroupId: kotlin.String, autoProvision: kotlin.Boolean?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "auto_provision" to PartConfig(body = autoProvision, headers = mutableMapOf()),
            "team_ids" to PartConfig(body = teamIds, headers = mutableMapOf()),
            "usergroup_id" to PartConfig(body = usergroupId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.usergroups.addTeams",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * List the channels linked to an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60;
     * @param usergroupId ID of the IDP group to list default channels for.
     * @param teamId ID of the the workspace. (optional)
     * @param includeNumMembers Flag to include or exclude the count of members per channel. (optional)
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminUsergroupsListChannels(token: kotlin.String, usergroupId: kotlin.String, teamId: kotlin.String? = null, includeNumMembers: kotlin.Boolean? = null) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = adminUsergroupsListChannelsWithHttpInfo(token = token, usergroupId = usergroupId, teamId = teamId, includeNumMembers = includeNumMembers)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * List the channels linked to an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60;
     * @param usergroupId ID of the IDP group to list default channels for.
     * @param teamId ID of the the workspace. (optional)
     * @param includeNumMembers Flag to include or exclude the count of members per channel. (optional)
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminUsergroupsListChannelsWithHttpInfo(token: kotlin.String, usergroupId: kotlin.String, teamId: kotlin.String?, includeNumMembers: kotlin.Boolean?) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminUsergroupsListChannelsRequestConfig(token = token, usergroupId = usergroupId, teamId = teamId, includeNumMembers = includeNumMembers)

        return@withContext request<Unit, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminUsergroupsListChannels
     *
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60;
     * @param usergroupId ID of the IDP group to list default channels for.
     * @param teamId ID of the the workspace. (optional)
     * @param includeNumMembers Flag to include or exclude the count of members per channel. (optional)
     * @return RequestConfig
     */
    fun adminUsergroupsListChannelsRequestConfig(token: kotlin.String, usergroupId: kotlin.String, teamId: kotlin.String?, includeNumMembers: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("usergroup_id", listOf(usergroupId.toString()))
                if (teamId != null) {
                    put("team_id", listOf(teamId.toString()))
                }
                if (includeNumMembers != null) {
                    put("include_num_members", listOf(includeNumMembers.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/admin.usergroups.listChannels",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Remove one or more default channels from an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
     * @param channelIds Comma-separated string of channel IDs
     * @param usergroupId ID of the IDP Group
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminUsergroupsRemoveChannels(token: kotlin.String, channelIds: kotlin.String, usergroupId: kotlin.String) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = adminUsergroupsRemoveChannelsWithHttpInfo(token = token, channelIds = channelIds, usergroupId = usergroupId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Remove one or more default channels from an org-level IDP group (user group).
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
     * @param channelIds Comma-separated string of channel IDs
     * @param usergroupId ID of the IDP Group
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminUsergroupsRemoveChannelsWithHttpInfo(token: kotlin.String, channelIds: kotlin.String, usergroupId: kotlin.String) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminUsergroupsRemoveChannelsRequestConfig(token = token, channelIds = channelIds, usergroupId = usergroupId)

        return@withContext request<Map<String, PartConfig<*>>, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminUsergroupsRemoveChannels
     *
     * @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
     * @param channelIds Comma-separated string of channel IDs
     * @param usergroupId ID of the IDP Group
     * @return RequestConfig
     */
    fun adminUsergroupsRemoveChannelsRequestConfig(token: kotlin.String, channelIds: kotlin.String, usergroupId: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel_ids" to PartConfig(body = channelIds, headers = mutableMapOf()),
            "usergroup_id" to PartConfig(body = usergroupId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.usergroups.removeChannels",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
