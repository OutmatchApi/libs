/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.DefaultErrorTemplate
import com.outmatchapi.slack.DefaultSuccessTemplate

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class AdminUsersApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * Add an Enterprise user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to add to the workspace.
     * @param channelIds Comma separated values of channel IDs to add user in the new workspace. (optional)
     * @param isRestricted True if user should be added to the workspace as a guest. (optional)
     * @param isUltraRestricted True if user should be added to the workspace as a single-channel guest. (optional)
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminUsersAssign(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String, channelIds: kotlin.String? = null, isRestricted: kotlin.Boolean? = null, isUltraRestricted: kotlin.Boolean? = null) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = adminUsersAssignWithHttpInfo(token = token, teamId = teamId, userId = userId, channelIds = channelIds, isRestricted = isRestricted, isUltraRestricted = isUltraRestricted)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Add an Enterprise user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to add to the workspace.
     * @param channelIds Comma separated values of channel IDs to add user in the new workspace. (optional)
     * @param isRestricted True if user should be added to the workspace as a guest. (optional)
     * @param isUltraRestricted True if user should be added to the workspace as a single-channel guest. (optional)
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminUsersAssignWithHttpInfo(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String, channelIds: kotlin.String?, isRestricted: kotlin.Boolean?, isUltraRestricted: kotlin.Boolean?) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminUsersAssignRequestConfig(token = token, teamId = teamId, userId = userId, channelIds = channelIds, isRestricted = isRestricted, isUltraRestricted = isUltraRestricted)

        return@withContext request<Map<String, PartConfig<*>>, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminUsersAssign
     *
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to add to the workspace.
     * @param channelIds Comma separated values of channel IDs to add user in the new workspace. (optional)
     * @param isRestricted True if user should be added to the workspace as a guest. (optional)
     * @param isUltraRestricted True if user should be added to the workspace as a single-channel guest. (optional)
     * @return RequestConfig
     */
    fun adminUsersAssignRequestConfig(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String, channelIds: kotlin.String?, isRestricted: kotlin.Boolean?, isUltraRestricted: kotlin.Boolean?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel_ids" to PartConfig(body = channelIds, headers = mutableMapOf()),
            "is_restricted" to PartConfig(body = isRestricted, headers = mutableMapOf()),
            "is_ultra_restricted" to PartConfig(body = isUltraRestricted, headers = mutableMapOf()),
            "team_id" to PartConfig(body = teamId, headers = mutableMapOf()),
            "user_id" to PartConfig(body = userId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.users.assign",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Invite a user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param channelIds A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required.
     * @param email The email address of the person to invite.
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param customMessage An optional message to send to the user in the invite email. (optional)
     * @param guestExpirationTs Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
     * @param isRestricted Is this user a multi-channel guest user? (default: false) (optional)
     * @param isUltraRestricted Is this user a single channel guest user? (default: false) (optional)
     * @param realName Full name of the user. (optional)
     * @param resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminUsersInvite(token: kotlin.String, channelIds: kotlin.String, email: kotlin.String, teamId: kotlin.String, customMessage: kotlin.String? = null, guestExpirationTs: kotlin.String? = null, isRestricted: kotlin.Boolean? = null, isUltraRestricted: kotlin.Boolean? = null, realName: kotlin.String? = null, resend: kotlin.Boolean? = null) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = adminUsersInviteWithHttpInfo(token = token, channelIds = channelIds, email = email, teamId = teamId, customMessage = customMessage, guestExpirationTs = guestExpirationTs, isRestricted = isRestricted, isUltraRestricted = isUltraRestricted, realName = realName, resend = resend)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Invite a user to a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param channelIds A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required.
     * @param email The email address of the person to invite.
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param customMessage An optional message to send to the user in the invite email. (optional)
     * @param guestExpirationTs Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
     * @param isRestricted Is this user a multi-channel guest user? (default: false) (optional)
     * @param isUltraRestricted Is this user a single channel guest user? (default: false) (optional)
     * @param realName Full name of the user. (optional)
     * @param resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminUsersInviteWithHttpInfo(token: kotlin.String, channelIds: kotlin.String, email: kotlin.String, teamId: kotlin.String, customMessage: kotlin.String?, guestExpirationTs: kotlin.String?, isRestricted: kotlin.Boolean?, isUltraRestricted: kotlin.Boolean?, realName: kotlin.String?, resend: kotlin.Boolean?) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminUsersInviteRequestConfig(token = token, channelIds = channelIds, email = email, teamId = teamId, customMessage = customMessage, guestExpirationTs = guestExpirationTs, isRestricted = isRestricted, isUltraRestricted = isUltraRestricted, realName = realName, resend = resend)

        return@withContext request<Map<String, PartConfig<*>>, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminUsersInvite
     *
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param channelIds A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required.
     * @param email The email address of the person to invite.
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param customMessage An optional message to send to the user in the invite email. (optional)
     * @param guestExpirationTs Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date. (optional)
     * @param isRestricted Is this user a multi-channel guest user? (default: false) (optional)
     * @param isUltraRestricted Is this user a single channel guest user? (default: false) (optional)
     * @param realName Full name of the user. (optional)
     * @param resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false) (optional)
     * @return RequestConfig
     */
    fun adminUsersInviteRequestConfig(token: kotlin.String, channelIds: kotlin.String, email: kotlin.String, teamId: kotlin.String, customMessage: kotlin.String?, guestExpirationTs: kotlin.String?, isRestricted: kotlin.Boolean?, isUltraRestricted: kotlin.Boolean?, realName: kotlin.String?, resend: kotlin.Boolean?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel_ids" to PartConfig(body = channelIds, headers = mutableMapOf()),
            "custom_message" to PartConfig(body = customMessage, headers = mutableMapOf()),
            "email" to PartConfig(body = email, headers = mutableMapOf()),
            "guest_expiration_ts" to PartConfig(body = guestExpirationTs, headers = mutableMapOf()),
            "is_restricted" to PartConfig(body = isRestricted, headers = mutableMapOf()),
            "is_ultra_restricted" to PartConfig(body = isUltraRestricted, headers = mutableMapOf()),
            "real_name" to PartConfig(body = realName, headers = mutableMapOf()),
            "resend" to PartConfig(body = resend, headers = mutableMapOf()),
            "team_id" to PartConfig(body = teamId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.users.invite",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * List users on a workspace
     * @param token Authentication token. Requires scope: &#x60;admin.users:read&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param limit Limit for how many users to be retrieved per page (optional)
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminUsersList(token: kotlin.String, teamId: kotlin.String, cursor: kotlin.String? = null, limit: kotlin.Int? = null) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = adminUsersListWithHttpInfo(token = token, teamId = teamId, cursor = cursor, limit = limit)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * List users on a workspace
     * @param token Authentication token. Requires scope: &#x60;admin.users:read&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param limit Limit for how many users to be retrieved per page (optional)
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminUsersListWithHttpInfo(token: kotlin.String, teamId: kotlin.String, cursor: kotlin.String?, limit: kotlin.Int?) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminUsersListRequestConfig(token = token, teamId = teamId, cursor = cursor, limit = limit)

        return@withContext request<Unit, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminUsersList
     *
     * @param token Authentication token. Requires scope: &#x60;admin.users:read&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param limit Limit for how many users to be retrieved per page (optional)
     * @return RequestConfig
     */
    fun adminUsersListRequestConfig(token: kotlin.String, teamId: kotlin.String, cursor: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("team_id", listOf(teamId.toString()))
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/admin.users.list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Remove a user from a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to remove.
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminUsersRemove(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = adminUsersRemoveWithHttpInfo(token = token, teamId = teamId, userId = userId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Remove a user from a workspace.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to remove.
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminUsersRemoveWithHttpInfo(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminUsersRemoveRequestConfig(token = token, teamId = teamId, userId = userId)

        return@withContext request<Map<String, PartConfig<*>>, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminUsersRemove
     *
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to remove.
     * @return RequestConfig
     */
    fun adminUsersRemoveRequestConfig(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "team_id" to PartConfig(body = teamId, headers = mutableMapOf()),
            "user_id" to PartConfig(body = userId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.users.remove",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Set an existing guest, regular user, or owner to be an admin user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to designate as an admin.
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminUsersSetAdmin(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = adminUsersSetAdminWithHttpInfo(token = token, teamId = teamId, userId = userId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Set an existing guest, regular user, or owner to be an admin user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to designate as an admin.
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminUsersSetAdminWithHttpInfo(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminUsersSetAdminRequestConfig(token = token, teamId = teamId, userId = userId)

        return@withContext request<Map<String, PartConfig<*>>, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminUsersSetAdmin
     *
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to designate as an admin.
     * @return RequestConfig
     */
    fun adminUsersSetAdminRequestConfig(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "team_id" to PartConfig(body = teamId, headers = mutableMapOf()),
            "user_id" to PartConfig(body = userId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.users.setAdmin",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Set an expiration for a guest user
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param expirationTs Timestamp when guest account should be disabled.
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to set an expiration for.
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminUsersSetExpiration(token: kotlin.String, expirationTs: kotlin.Int, teamId: kotlin.String, userId: kotlin.String) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = adminUsersSetExpirationWithHttpInfo(token = token, expirationTs = expirationTs, teamId = teamId, userId = userId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Set an expiration for a guest user
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param expirationTs Timestamp when guest account should be disabled.
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to set an expiration for.
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminUsersSetExpirationWithHttpInfo(token: kotlin.String, expirationTs: kotlin.Int, teamId: kotlin.String, userId: kotlin.String) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminUsersSetExpirationRequestConfig(token = token, expirationTs = expirationTs, teamId = teamId, userId = userId)

        return@withContext request<Map<String, PartConfig<*>>, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminUsersSetExpiration
     *
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param expirationTs Timestamp when guest account should be disabled.
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to set an expiration for.
     * @return RequestConfig
     */
    fun adminUsersSetExpirationRequestConfig(token: kotlin.String, expirationTs: kotlin.Int, teamId: kotlin.String, userId: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "expiration_ts" to PartConfig(body = expirationTs, headers = mutableMapOf()),
            "team_id" to PartConfig(body = teamId, headers = mutableMapOf()),
            "user_id" to PartConfig(body = userId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.users.setExpiration",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId Id of the user to promote to owner.
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminUsersSetOwner(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = adminUsersSetOwnerWithHttpInfo(token = token, teamId = teamId, userId = userId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Set an existing guest, regular user, or admin user to be a workspace owner.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId Id of the user to promote to owner.
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminUsersSetOwnerWithHttpInfo(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminUsersSetOwnerRequestConfig(token = token, teamId = teamId, userId = userId)

        return@withContext request<Map<String, PartConfig<*>>, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminUsersSetOwner
     *
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId Id of the user to promote to owner.
     * @return RequestConfig
     */
    fun adminUsersSetOwnerRequestConfig(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "team_id" to PartConfig(body = teamId, headers = mutableMapOf()),
            "user_id" to PartConfig(body = userId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.users.setOwner",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Set an existing guest user, admin user, or owner to be a regular user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to designate as a regular user.
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminUsersSetRegular(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = adminUsersSetRegularWithHttpInfo(token = token, teamId = teamId, userId = userId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Set an existing guest user, admin user, or owner to be a regular user.
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to designate as a regular user.
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminUsersSetRegularWithHttpInfo(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminUsersSetRegularRequestConfig(token = token, teamId = teamId, userId = userId)

        return@withContext request<Map<String, PartConfig<*>>, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminUsersSetRegular
     *
     * @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
     * @param teamId The ID (&#x60;T1234&#x60;) of the workspace.
     * @param userId The ID of the user to designate as a regular user.
     * @return RequestConfig
     */
    fun adminUsersSetRegularRequestConfig(token: kotlin.String, teamId: kotlin.String, userId: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "team_id" to PartConfig(body = teamId, headers = mutableMapOf()),
            "user_id" to PartConfig(body = userId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.users.setRegular",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
