/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.DefaultErrorTemplate
import com.outmatchapi.slack.DefaultSuccessTemplate

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class OauthV2Api(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * Exchanges a temporary OAuth verifier code for an access token.
     * @param code The &#x60;code&#x60; param returned via the OAuth callback.
     * @param clientId Issued when you created your application. (optional)
     * @param clientSecret Issued when you created your application. (optional)
     * @param redirectUri This must match the originally submitted URI (if one was sent). (optional)
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun oauthV2Access(code: kotlin.String, clientId: kotlin.String? = null, clientSecret: kotlin.String? = null, redirectUri: kotlin.String? = null) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = oauthV2AccessWithHttpInfo(code = code, clientId = clientId, clientSecret = clientSecret, redirectUri = redirectUri)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Exchanges a temporary OAuth verifier code for an access token.
     * @param code The &#x60;code&#x60; param returned via the OAuth callback.
     * @param clientId Issued when you created your application. (optional)
     * @param clientSecret Issued when you created your application. (optional)
     * @param redirectUri This must match the originally submitted URI (if one was sent). (optional)
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun oauthV2AccessWithHttpInfo(code: kotlin.String, clientId: kotlin.String?, clientSecret: kotlin.String?, redirectUri: kotlin.String?) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = oauthV2AccessRequestConfig(code = code, clientId = clientId, clientSecret = clientSecret, redirectUri = redirectUri)

        return@withContext request<Unit, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation oauthV2Access
     *
     * @param code The &#x60;code&#x60; param returned via the OAuth callback.
     * @param clientId Issued when you created your application. (optional)
     * @param clientSecret Issued when you created your application. (optional)
     * @param redirectUri This must match the originally submitted URI (if one was sent). (optional)
     * @return RequestConfig
     */
    fun oauthV2AccessRequestConfig(code: kotlin.String, clientId: kotlin.String?, clientSecret: kotlin.String?, redirectUri: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (clientId != null) {
                    put("client_id", listOf(clientId.toString()))
                }
                if (clientSecret != null) {
                    put("client_secret", listOf(clientSecret.toString()))
                }
                put("code", listOf(code.toString()))
                if (redirectUri != null) {
                    put("redirect_uri", listOf(redirectUri.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/oauth.v2.access",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
