/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.DefaultErrorTemplate
import com.outmatchapi.slack.DefaultSuccessTemplate
import com.outmatchapi.slack.TeamAccessLogsErrorSchema
import com.outmatchapi.slack.TeamAccessLogsSchema
import com.outmatchapi.slack.TeamInfoErrorSchema
import com.outmatchapi.slack.TeamInfoSchema
import com.outmatchapi.slack.TeamIntegrationLogsErrorSchema
import com.outmatchapi.slack.TeamIntegrationLogsSchema
import com.outmatchapi.slack.TeamProfileGetErrorSchema
import com.outmatchapi.slack.TeamProfileGetSuccessSchema

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class TeamApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * Gets the access logs for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60;
     * @param before End of time range of logs to include in results (inclusive). (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @return TeamAccessLogsSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun teamAccessLogs(token: kotlin.String, before: kotlin.String? = null, count: kotlin.String? = null, page: kotlin.String? = null) : TeamAccessLogsSchema = withContext(Dispatchers.IO) {
        val localVarResponse = teamAccessLogsWithHttpInfo(token = token, before = before, count = count, page = page)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TeamAccessLogsSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Gets the access logs for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60;
     * @param before End of time range of logs to include in results (inclusive). (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @return ApiResponse<TeamAccessLogsSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun teamAccessLogsWithHttpInfo(token: kotlin.String, before: kotlin.String?, count: kotlin.String?, page: kotlin.String?) : ApiResponse<TeamAccessLogsSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = teamAccessLogsRequestConfig(token = token, before = before, count = count, page = page)

        return@withContext request<Unit, TeamAccessLogsSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation teamAccessLogs
     *
     * @param token Authentication token. Requires scope: &#x60;admin&#x60;
     * @param before End of time range of logs to include in results (inclusive). (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @return RequestConfig
     */
    fun teamAccessLogsRequestConfig(token: kotlin.String, before: kotlin.String?, count: kotlin.String?, page: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (before != null) {
                    put("before", listOf(before.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team.accessLogs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Gets billable users information for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60;
     * @param user A user to retrieve the billable information for. Defaults to all users. (optional)
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun teamBillableInfo(token: kotlin.String, user: kotlin.String? = null) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = teamBillableInfoWithHttpInfo(token = token, user = user)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Gets billable users information for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60;
     * @param user A user to retrieve the billable information for. Defaults to all users. (optional)
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun teamBillableInfoWithHttpInfo(token: kotlin.String, user: kotlin.String?) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = teamBillableInfoRequestConfig(token = token, user = user)

        return@withContext request<Unit, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation teamBillableInfo
     *
     * @param token Authentication token. Requires scope: &#x60;admin&#x60;
     * @param user A user to retrieve the billable information for. Defaults to all users. (optional)
     * @return RequestConfig
     */
    fun teamBillableInfoRequestConfig(token: kotlin.String, user: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (user != null) {
                    put("user", listOf(user.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team.billableInfo",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Gets information about the current team.
     * @param token Authentication token. Requires scope: &#x60;team:read&#x60;
     * @param team Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels (optional)
     * @return TeamInfoSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun teamInfo(token: kotlin.String, team: kotlin.String? = null) : TeamInfoSchema = withContext(Dispatchers.IO) {
        val localVarResponse = teamInfoWithHttpInfo(token = token, team = team)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TeamInfoSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Gets information about the current team.
     * @param token Authentication token. Requires scope: &#x60;team:read&#x60;
     * @param team Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels (optional)
     * @return ApiResponse<TeamInfoSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun teamInfoWithHttpInfo(token: kotlin.String, team: kotlin.String?) : ApiResponse<TeamInfoSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = teamInfoRequestConfig(token = token, team = team)

        return@withContext request<Unit, TeamInfoSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation teamInfo
     *
     * @param token Authentication token. Requires scope: &#x60;team:read&#x60;
     * @param team Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels (optional)
     * @return RequestConfig
     */
    fun teamInfoRequestConfig(token: kotlin.String, team: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (team != null) {
                    put("team", listOf(team.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team.info",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Gets the integration logs for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60;
     * @param appId Filter logs to this Slack app. Defaults to all logs. (optional)
     * @param changeType Filter logs with this change type. Defaults to all logs. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param serviceId Filter logs to this service. Defaults to all logs. (optional)
     * @param user Filter logs generated by this userâ€™s actions. Defaults to all logs. (optional)
     * @return TeamIntegrationLogsSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun teamIntegrationLogs(token: kotlin.String, appId: kotlin.String? = null, changeType: kotlin.String? = null, count: kotlin.String? = null, page: kotlin.String? = null, serviceId: kotlin.String? = null, user: kotlin.String? = null) : TeamIntegrationLogsSchema = withContext(Dispatchers.IO) {
        val localVarResponse = teamIntegrationLogsWithHttpInfo(token = token, appId = appId, changeType = changeType, count = count, page = page, serviceId = serviceId, user = user)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TeamIntegrationLogsSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Gets the integration logs for the current team.
     * @param token Authentication token. Requires scope: &#x60;admin&#x60;
     * @param appId Filter logs to this Slack app. Defaults to all logs. (optional)
     * @param changeType Filter logs with this change type. Defaults to all logs. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param serviceId Filter logs to this service. Defaults to all logs. (optional)
     * @param user Filter logs generated by this userâ€™s actions. Defaults to all logs. (optional)
     * @return ApiResponse<TeamIntegrationLogsSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun teamIntegrationLogsWithHttpInfo(token: kotlin.String, appId: kotlin.String?, changeType: kotlin.String?, count: kotlin.String?, page: kotlin.String?, serviceId: kotlin.String?, user: kotlin.String?) : ApiResponse<TeamIntegrationLogsSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = teamIntegrationLogsRequestConfig(token = token, appId = appId, changeType = changeType, count = count, page = page, serviceId = serviceId, user = user)

        return@withContext request<Unit, TeamIntegrationLogsSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation teamIntegrationLogs
     *
     * @param token Authentication token. Requires scope: &#x60;admin&#x60;
     * @param appId Filter logs to this Slack app. Defaults to all logs. (optional)
     * @param changeType Filter logs with this change type. Defaults to all logs. (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param serviceId Filter logs to this service. Defaults to all logs. (optional)
     * @param user Filter logs generated by this userâ€™s actions. Defaults to all logs. (optional)
     * @return RequestConfig
     */
    fun teamIntegrationLogsRequestConfig(token: kotlin.String, appId: kotlin.String?, changeType: kotlin.String?, count: kotlin.String?, page: kotlin.String?, serviceId: kotlin.String?, user: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (appId != null) {
                    put("app_id", listOf(appId.toString()))
                }
                if (changeType != null) {
                    put("change_type", listOf(changeType.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (serviceId != null) {
                    put("service_id", listOf(serviceId.toString()))
                }
                if (user != null) {
                    put("user", listOf(user.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team.integrationLogs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Retrieve a team&#39;s profile.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60;
     * @param visibility Filter by visibility. (optional)
     * @return TeamProfileGetSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun teamProfileGet(token: kotlin.String, visibility: kotlin.String? = null) : TeamProfileGetSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = teamProfileGetWithHttpInfo(token = token, visibility = visibility)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TeamProfileGetSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Retrieve a team&#39;s profile.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60;
     * @param visibility Filter by visibility. (optional)
     * @return ApiResponse<TeamProfileGetSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun teamProfileGetWithHttpInfo(token: kotlin.String, visibility: kotlin.String?) : ApiResponse<TeamProfileGetSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = teamProfileGetRequestConfig(token = token, visibility = visibility)

        return@withContext request<Unit, TeamProfileGetSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation teamProfileGet
     *
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60;
     * @param visibility Filter by visibility. (optional)
     * @return RequestConfig
     */
    fun teamProfileGetRequestConfig(token: kotlin.String, visibility: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (visibility != null) {
                    put("visibility", listOf(visibility.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/team.profile.get",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
