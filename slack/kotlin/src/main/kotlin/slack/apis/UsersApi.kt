/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.APIMethodUsersGetPresence
import com.outmatchapi.slack.UsersConversationsErrorSchema
import com.outmatchapi.slack.UsersConversationsSuccessSchema
import com.outmatchapi.slack.UsersCountsErrorSchema
import com.outmatchapi.slack.UsersDeletePhotoErrorSchema
import com.outmatchapi.slack.UsersDeletePhotoSchema
import com.outmatchapi.slack.UsersIdentityErrorSchema
import com.outmatchapi.slack.UsersIdentitySchemaInner
import com.outmatchapi.slack.UsersInfoErrorSchema
import com.outmatchapi.slack.UsersInfoSuccessSchema
import com.outmatchapi.slack.UsersListErrorSchema
import com.outmatchapi.slack.UsersListSchema
import com.outmatchapi.slack.UsersLookupByEmailErrorSchema
import com.outmatchapi.slack.UsersLookupByEmailSuccessSchema
import com.outmatchapi.slack.UsersProfileGetErrorSchema
import com.outmatchapi.slack.UsersProfileGetSchema
import com.outmatchapi.slack.UsersProfileSetErrorSchema
import com.outmatchapi.slack.UsersProfileSetSchema
import com.outmatchapi.slack.UsersSetActiveErrorSchema
import com.outmatchapi.slack.UsersSetActiveSchema
import com.outmatchapi.slack.UsersSetPhotoErrorSchema
import com.outmatchapi.slack.UsersSetPhotoSchema
import com.outmatchapi.slack.UsersSetPresenceErrorSchema
import com.outmatchapi.slack.UsersSetPresenceSchema

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class UsersApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * List conversations the calling user may access.
     * @param token Authentication token. Requires scope: &#x60;conversations:read&#x60; (optional)
     * @param user Browse conversations by a specific user ID&#39;s membership. Non-public channels are restricted to those where the calling user shares membership. (optional)
     * @param types Mix and match channel types by providing a comma-separated list of any combination of &#x60;public_channel&#x60;, &#x60;private_channel&#x60;, &#x60;mpim&#x60;, &#x60;im&#x60; (optional)
     * @param excludeArchived Set to &#x60;true&#x60; to exclude archived channels from the list (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. Must be an integer no larger than 1000. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @return UsersConversationsSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersConversations(token: kotlin.String? = null, user: kotlin.String? = null, types: kotlin.String? = null, excludeArchived: kotlin.Boolean? = null, limit: kotlin.Int? = null, cursor: kotlin.String? = null) : UsersConversationsSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = usersConversationsWithHttpInfo(token = token, user = user, types = types, excludeArchived = excludeArchived, limit = limit, cursor = cursor)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersConversationsSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * List conversations the calling user may access.
     * @param token Authentication token. Requires scope: &#x60;conversations:read&#x60; (optional)
     * @param user Browse conversations by a specific user ID&#39;s membership. Non-public channels are restricted to those where the calling user shares membership. (optional)
     * @param types Mix and match channel types by providing a comma-separated list of any combination of &#x60;public_channel&#x60;, &#x60;private_channel&#x60;, &#x60;mpim&#x60;, &#x60;im&#x60; (optional)
     * @param excludeArchived Set to &#x60;true&#x60; to exclude archived channels from the list (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. Must be an integer no larger than 1000. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @return ApiResponse<UsersConversationsSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersConversationsWithHttpInfo(token: kotlin.String?, user: kotlin.String?, types: kotlin.String?, excludeArchived: kotlin.Boolean?, limit: kotlin.Int?, cursor: kotlin.String?) : ApiResponse<UsersConversationsSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersConversationsRequestConfig(token = token, user = user, types = types, excludeArchived = excludeArchived, limit = limit, cursor = cursor)

        return@withContext request<Unit, UsersConversationsSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersConversations
     *
     * @param token Authentication token. Requires scope: &#x60;conversations:read&#x60; (optional)
     * @param user Browse conversations by a specific user ID&#39;s membership. Non-public channels are restricted to those where the calling user shares membership. (optional)
     * @param types Mix and match channel types by providing a comma-separated list of any combination of &#x60;public_channel&#x60;, &#x60;private_channel&#x60;, &#x60;mpim&#x60;, &#x60;im&#x60; (optional)
     * @param excludeArchived Set to &#x60;true&#x60; to exclude archived channels from the list (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. Must be an integer no larger than 1000. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @return RequestConfig
     */
    fun usersConversationsRequestConfig(token: kotlin.String?, user: kotlin.String?, types: kotlin.String?, excludeArchived: kotlin.Boolean?, limit: kotlin.Int?, cursor: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (token != null) {
                    put("token", listOf(token.toString()))
                }
                if (user != null) {
                    put("user", listOf(user.toString()))
                }
                if (types != null) {
                    put("types", listOf(types.toString()))
                }
                if (excludeArchived != null) {
                    put("exclude_archived", listOf(excludeArchived.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users.conversations",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Delete the user profile photo
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60;
     * @return UsersDeletePhotoSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersDeletePhoto(token: kotlin.String) : UsersDeletePhotoSchema = withContext(Dispatchers.IO) {
        val localVarResponse = usersDeletePhotoWithHttpInfo(token = token)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersDeletePhotoSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Delete the user profile photo
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60;
     * @return ApiResponse<UsersDeletePhotoSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersDeletePhotoWithHttpInfo(token: kotlin.String) : ApiResponse<UsersDeletePhotoSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersDeletePhotoRequestConfig(token = token)

        return@withContext request<Map<String, PartConfig<*>>, UsersDeletePhotoSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersDeletePhoto
     *
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60;
     * @return RequestConfig
     */
    fun usersDeletePhotoRequestConfig(token: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "token" to PartConfig(body = token, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users.deletePhoto",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Gets user presence information.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60;
     * @param user User to get presence info on. Defaults to the authed user. (optional)
     * @return APIMethodUsersGetPresence
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersGetPresence(token: kotlin.String, user: kotlin.String? = null) : APIMethodUsersGetPresence = withContext(Dispatchers.IO) {
        val localVarResponse = usersGetPresenceWithHttpInfo(token = token, user = user)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as APIMethodUsersGetPresence
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Gets user presence information.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60;
     * @param user User to get presence info on. Defaults to the authed user. (optional)
     * @return ApiResponse<APIMethodUsersGetPresence?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersGetPresenceWithHttpInfo(token: kotlin.String, user: kotlin.String?) : ApiResponse<APIMethodUsersGetPresence?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersGetPresenceRequestConfig(token = token, user = user)

        return@withContext request<Unit, APIMethodUsersGetPresence>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersGetPresence
     *
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60;
     * @param user User to get presence info on. Defaults to the authed user. (optional)
     * @return RequestConfig
     */
    fun usersGetPresenceRequestConfig(token: kotlin.String, user: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (user != null) {
                    put("user", listOf(user.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users.getPresence",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Get a user&#39;s identity.
     * @param token Authentication token. Requires scope: &#x60;identity.basic&#x60; (optional)
     * @return kotlin.collections.List<UsersIdentitySchemaInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersIdentity(token: kotlin.String? = null) : kotlin.collections.List<UsersIdentitySchemaInner> = withContext(Dispatchers.IO) {
        val localVarResponse = usersIdentityWithHttpInfo(token = token)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<UsersIdentitySchemaInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Get a user&#39;s identity.
     * @param token Authentication token. Requires scope: &#x60;identity.basic&#x60; (optional)
     * @return ApiResponse<kotlin.collections.List<UsersIdentitySchemaInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersIdentityWithHttpInfo(token: kotlin.String?) : ApiResponse<kotlin.collections.List<UsersIdentitySchemaInner>?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersIdentityRequestConfig(token = token)

        return@withContext request<Unit, kotlin.collections.List<UsersIdentitySchemaInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersIdentity
     *
     * @param token Authentication token. Requires scope: &#x60;identity.basic&#x60; (optional)
     * @return RequestConfig
     */
    fun usersIdentityRequestConfig(token: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (token != null) {
                    put("token", listOf(token.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users.identity",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Gets information about a user.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60;
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for this user. Defaults to &#x60;false&#x60; (optional)
     * @param user User to get info on (optional)
     * @return UsersInfoSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersInfo(token: kotlin.String, includeLocale: kotlin.Boolean? = null, user: kotlin.String? = null) : UsersInfoSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = usersInfoWithHttpInfo(token = token, includeLocale = includeLocale, user = user)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersInfoSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Gets information about a user.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60;
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for this user. Defaults to &#x60;false&#x60; (optional)
     * @param user User to get info on (optional)
     * @return ApiResponse<UsersInfoSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersInfoWithHttpInfo(token: kotlin.String, includeLocale: kotlin.Boolean?, user: kotlin.String?) : ApiResponse<UsersInfoSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersInfoRequestConfig(token = token, includeLocale = includeLocale, user = user)

        return@withContext request<Unit, UsersInfoSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersInfo
     *
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60;
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for this user. Defaults to &#x60;false&#x60; (optional)
     * @param user User to get info on (optional)
     * @return RequestConfig
     */
    fun usersInfoRequestConfig(token: kotlin.String, includeLocale: kotlin.Boolean?, user: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (includeLocale != null) {
                    put("include_locale", listOf(includeLocale.toString()))
                }
                if (user != null) {
                    put("user", listOf(user.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users.info",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Lists all users in a Slack team.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&#39;t been reached. Providing no &#x60;limit&#x60; value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience &#x60;limit_required&#x60; or HTTP 500 errors. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for users. Defaults to &#x60;false&#x60; (optional)
     * @return UsersListSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersList(token: kotlin.String? = null, limit: kotlin.Int? = null, cursor: kotlin.String? = null, includeLocale: kotlin.Boolean? = null) : UsersListSchema = withContext(Dispatchers.IO) {
        val localVarResponse = usersListWithHttpInfo(token = token, limit = limit, cursor = cursor, includeLocale = includeLocale)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersListSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Lists all users in a Slack team.
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&#39;t been reached. Providing no &#x60;limit&#x60; value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience &#x60;limit_required&#x60; or HTTP 500 errors. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for users. Defaults to &#x60;false&#x60; (optional)
     * @return ApiResponse<UsersListSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersListWithHttpInfo(token: kotlin.String?, limit: kotlin.Int?, cursor: kotlin.String?, includeLocale: kotlin.Boolean?) : ApiResponse<UsersListSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersListRequestConfig(token = token, limit = limit, cursor = cursor, includeLocale = includeLocale)

        return@withContext request<Unit, UsersListSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersList
     *
     * @param token Authentication token. Requires scope: &#x60;users:read&#x60; (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&#39;t been reached. Providing no &#x60;limit&#x60; value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience &#x60;limit_required&#x60; or HTTP 500 errors. (optional)
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param includeLocale Set this to &#x60;true&#x60; to receive the locale for users. Defaults to &#x60;false&#x60; (optional)
     * @return RequestConfig
     */
    fun usersListRequestConfig(token: kotlin.String?, limit: kotlin.Int?, cursor: kotlin.String?, includeLocale: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (token != null) {
                    put("token", listOf(token.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
                if (includeLocale != null) {
                    put("include_locale", listOf(includeLocale.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users.list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Find a user with an email address.
     * @param token Authentication token. Requires scope: &#x60;users:read.email&#x60;
     * @param email An email address belonging to a user in the workspace
     * @return UsersLookupByEmailSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersLookupByEmail(token: kotlin.String, email: kotlin.String) : UsersLookupByEmailSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = usersLookupByEmailWithHttpInfo(token = token, email = email)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersLookupByEmailSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Find a user with an email address.
     * @param token Authentication token. Requires scope: &#x60;users:read.email&#x60;
     * @param email An email address belonging to a user in the workspace
     * @return ApiResponse<UsersLookupByEmailSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersLookupByEmailWithHttpInfo(token: kotlin.String, email: kotlin.String) : ApiResponse<UsersLookupByEmailSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersLookupByEmailRequestConfig(token = token, email = email)

        return@withContext request<Unit, UsersLookupByEmailSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersLookupByEmail
     *
     * @param token Authentication token. Requires scope: &#x60;users:read.email&#x60;
     * @param email An email address belonging to a user in the workspace
     * @return RequestConfig
     */
    fun usersLookupByEmailRequestConfig(token: kotlin.String, email: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                put("email", listOf(email.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users.lookupByEmail",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Retrieves a user&#39;s profile information.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60;
     * @param includeLabels Include labels for each ID in custom profile fields (optional)
     * @param user User to retrieve profile info for (optional)
     * @return UsersProfileGetSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersProfileGet(token: kotlin.String, includeLabels: kotlin.Boolean? = null, user: kotlin.String? = null) : UsersProfileGetSchema = withContext(Dispatchers.IO) {
        val localVarResponse = usersProfileGetWithHttpInfo(token = token, includeLabels = includeLabels, user = user)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersProfileGetSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Retrieves a user&#39;s profile information.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60;
     * @param includeLabels Include labels for each ID in custom profile fields (optional)
     * @param user User to retrieve profile info for (optional)
     * @return ApiResponse<UsersProfileGetSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersProfileGetWithHttpInfo(token: kotlin.String, includeLabels: kotlin.Boolean?, user: kotlin.String?) : ApiResponse<UsersProfileGetSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersProfileGetRequestConfig(token = token, includeLabels = includeLabels, user = user)

        return@withContext request<Unit, UsersProfileGetSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersProfileGet
     *
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60;
     * @param includeLabels Include labels for each ID in custom profile fields (optional)
     * @param user User to retrieve profile info for (optional)
     * @return RequestConfig
     */
    fun usersProfileGetRequestConfig(token: kotlin.String, includeLabels: kotlin.Boolean?, user: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (includeLabels != null) {
                    put("include_labels", listOf(includeLabels.toString()))
                }
                if (user != null) {
                    put("user", listOf(user.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users.profile.get",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Set the profile information for a user.
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60;
     * @param name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @param profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. (optional)
     * @param user ID of user to change. This argument may only be specified by team admins on paid teams. (optional)
     * @param `value` Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @return UsersProfileSetSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersProfileSet(token: kotlin.String, name: kotlin.String? = null, profile: kotlin.String? = null, user: kotlin.String? = null, `value`: kotlin.String? = null) : UsersProfileSetSchema = withContext(Dispatchers.IO) {
        val localVarResponse = usersProfileSetWithHttpInfo(token = token, name = name, profile = profile, user = user, `value` = `value`)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersProfileSetSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Set the profile information for a user.
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60;
     * @param name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @param profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. (optional)
     * @param user ID of user to change. This argument may only be specified by team admins on paid teams. (optional)
     * @param `value` Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @return ApiResponse<UsersProfileSetSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersProfileSetWithHttpInfo(token: kotlin.String, name: kotlin.String?, profile: kotlin.String?, user: kotlin.String?, `value`: kotlin.String?) : ApiResponse<UsersProfileSetSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersProfileSetRequestConfig(token = token, name = name, profile = profile, user = user, `value` = `value`)

        return@withContext request<Map<String, PartConfig<*>>, UsersProfileSetSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersProfileSet
     *
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60;
     * @param name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @param profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. (optional)
     * @param user ID of user to change. This argument may only be specified by team admins on paid teams. (optional)
     * @param `value` Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @return RequestConfig
     */
    fun usersProfileSetRequestConfig(token: kotlin.String, name: kotlin.String?, profile: kotlin.String?, user: kotlin.String?, `value`: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "name" to PartConfig(body = name, headers = mutableMapOf()),
            "profile" to PartConfig(body = profile, headers = mutableMapOf()),
            "user" to PartConfig(body = user, headers = mutableMapOf()),
            "value" to PartConfig(body = `value`, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users.profile.set",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Marked a user as active. Deprecated and non-functional.
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60;
     * @return UsersSetActiveSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersSetActive(token: kotlin.String) : UsersSetActiveSchema = withContext(Dispatchers.IO) {
        val localVarResponse = usersSetActiveWithHttpInfo(token = token)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersSetActiveSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Marked a user as active. Deprecated and non-functional.
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60;
     * @return ApiResponse<UsersSetActiveSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersSetActiveWithHttpInfo(token: kotlin.String) : ApiResponse<UsersSetActiveSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersSetActiveRequestConfig(token = token)

        return@withContext request<Unit, UsersSetActiveSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersSetActive
     *
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60;
     * @return RequestConfig
     */
    fun usersSetActiveRequestConfig(token: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users.setActive",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Set the user profile photo
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60;
     * @param cropW Width/height of crop box (always square) (optional)
     * @param cropX X coordinate of top-left corner of crop box (optional)
     * @param cropY Y coordinate of top-left corner of crop box (optional)
     * @param image File contents via &#x60;multipart/form-data&#x60;. (optional)
     * @return UsersSetPhotoSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersSetPhoto(token: kotlin.String, cropW: kotlin.String? = null, cropX: kotlin.String? = null, cropY: kotlin.String? = null, image: kotlin.String? = null) : UsersSetPhotoSchema = withContext(Dispatchers.IO) {
        val localVarResponse = usersSetPhotoWithHttpInfo(token = token, cropW = cropW, cropX = cropX, cropY = cropY, image = image)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersSetPhotoSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Set the user profile photo
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60;
     * @param cropW Width/height of crop box (always square) (optional)
     * @param cropX X coordinate of top-left corner of crop box (optional)
     * @param cropY Y coordinate of top-left corner of crop box (optional)
     * @param image File contents via &#x60;multipart/form-data&#x60;. (optional)
     * @return ApiResponse<UsersSetPhotoSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersSetPhotoWithHttpInfo(token: kotlin.String, cropW: kotlin.String?, cropX: kotlin.String?, cropY: kotlin.String?, image: kotlin.String?) : ApiResponse<UsersSetPhotoSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersSetPhotoRequestConfig(token = token, cropW = cropW, cropX = cropX, cropY = cropY, image = image)

        return@withContext request<Map<String, PartConfig<*>>, UsersSetPhotoSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersSetPhoto
     *
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60;
     * @param cropW Width/height of crop box (always square) (optional)
     * @param cropX X coordinate of top-left corner of crop box (optional)
     * @param cropY Y coordinate of top-left corner of crop box (optional)
     * @param image File contents via &#x60;multipart/form-data&#x60;. (optional)
     * @return RequestConfig
     */
    fun usersSetPhotoRequestConfig(token: kotlin.String, cropW: kotlin.String?, cropX: kotlin.String?, cropY: kotlin.String?, image: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "crop_w" to PartConfig(body = cropW, headers = mutableMapOf()),
            "crop_x" to PartConfig(body = cropX, headers = mutableMapOf()),
            "crop_y" to PartConfig(body = cropY, headers = mutableMapOf()),
            "image" to PartConfig(body = image, headers = mutableMapOf()),
            "token" to PartConfig(body = token, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users.setPhoto",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Manually sets user presence.
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60;
     * @param presence Either &#x60;auto&#x60; or &#x60;away&#x60;
     * @return UsersSetPresenceSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersSetPresence(token: kotlin.String, presence: kotlin.String) : UsersSetPresenceSchema = withContext(Dispatchers.IO) {
        val localVarResponse = usersSetPresenceWithHttpInfo(token = token, presence = presence)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersSetPresenceSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Manually sets user presence.
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60;
     * @param presence Either &#x60;auto&#x60; or &#x60;away&#x60;
     * @return ApiResponse<UsersSetPresenceSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersSetPresenceWithHttpInfo(token: kotlin.String, presence: kotlin.String) : ApiResponse<UsersSetPresenceSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersSetPresenceRequestConfig(token = token, presence = presence)

        return@withContext request<Map<String, PartConfig<*>>, UsersSetPresenceSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersSetPresence
     *
     * @param token Authentication token. Requires scope: &#x60;users:write&#x60;
     * @param presence Either &#x60;auto&#x60; or &#x60;away&#x60;
     * @return RequestConfig
     */
    fun usersSetPresenceRequestConfig(token: kotlin.String, presence: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "presence" to PartConfig(body = presence, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users.setPresence",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
