/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.UsersProfileGetErrorSchema
import com.outmatchapi.slack.UsersProfileGetSchema
import com.outmatchapi.slack.UsersProfileSetErrorSchema
import com.outmatchapi.slack.UsersProfileSetSchema

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class UsersProfileApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * Retrieves a user&#39;s profile information.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60;
     * @param includeLabels Include labels for each ID in custom profile fields (optional)
     * @param user User to retrieve profile info for (optional)
     * @return UsersProfileGetSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersProfileGet(token: kotlin.String, includeLabels: kotlin.Boolean? = null, user: kotlin.String? = null) : UsersProfileGetSchema = withContext(Dispatchers.IO) {
        val localVarResponse = usersProfileGetWithHttpInfo(token = token, includeLabels = includeLabels, user = user)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersProfileGetSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Retrieves a user&#39;s profile information.
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60;
     * @param includeLabels Include labels for each ID in custom profile fields (optional)
     * @param user User to retrieve profile info for (optional)
     * @return ApiResponse<UsersProfileGetSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersProfileGetWithHttpInfo(token: kotlin.String, includeLabels: kotlin.Boolean?, user: kotlin.String?) : ApiResponse<UsersProfileGetSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersProfileGetRequestConfig(token = token, includeLabels = includeLabels, user = user)

        return@withContext request<Unit, UsersProfileGetSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersProfileGet
     *
     * @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60;
     * @param includeLabels Include labels for each ID in custom profile fields (optional)
     * @param user User to retrieve profile info for (optional)
     * @return RequestConfig
     */
    fun usersProfileGetRequestConfig(token: kotlin.String, includeLabels: kotlin.Boolean?, user: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (includeLabels != null) {
                    put("include_labels", listOf(includeLabels.toString()))
                }
                if (user != null) {
                    put("user", listOf(user.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/users.profile.get",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Set the profile information for a user.
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60;
     * @param name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @param profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. (optional)
     * @param user ID of user to change. This argument may only be specified by team admins on paid teams. (optional)
     * @param `value` Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @return UsersProfileSetSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun usersProfileSet(token: kotlin.String, name: kotlin.String? = null, profile: kotlin.String? = null, user: kotlin.String? = null, `value`: kotlin.String? = null) : UsersProfileSetSchema = withContext(Dispatchers.IO) {
        val localVarResponse = usersProfileSetWithHttpInfo(token = token, name = name, profile = profile, user = user, `value` = `value`)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as UsersProfileSetSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Set the profile information for a user.
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60;
     * @param name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @param profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. (optional)
     * @param user ID of user to change. This argument may only be specified by team admins on paid teams. (optional)
     * @param `value` Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @return ApiResponse<UsersProfileSetSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun usersProfileSetWithHttpInfo(token: kotlin.String, name: kotlin.String?, profile: kotlin.String?, user: kotlin.String?, `value`: kotlin.String?) : ApiResponse<UsersProfileSetSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = usersProfileSetRequestConfig(token = token, name = name, profile = profile, user = user, `value` = `value`)

        return@withContext request<Map<String, PartConfig<*>>, UsersProfileSetSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation usersProfileSet
     *
     * @param token Authentication token. Requires scope: &#x60;users.profile:write&#x60;
     * @param name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @param profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters. (optional)
     * @param user ID of user to change. This argument may only be specified by team admins on paid teams. (optional)
     * @param `value` Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed. (optional)
     * @return RequestConfig
     */
    fun usersProfileSetRequestConfig(token: kotlin.String, name: kotlin.String?, profile: kotlin.String?, user: kotlin.String?, `value`: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "name" to PartConfig(body = name, headers = mutableMapOf()),
            "profile" to PartConfig(body = profile, headers = mutableMapOf()),
            "user" to PartConfig(body = user, headers = mutableMapOf()),
            "value" to PartConfig(body = `value`, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/users.profile.set",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
