/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.DefaultErrorTemplate
import com.outmatchapi.slack.DefaultSuccessTemplate

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class WorkflowsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * Indicate that an app&#39;s step in a workflow completed execution.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution.
     * @param outputs Key-value object of outputs from your step. Keys of this object reflect the configured &#x60;key&#x60; properties of your [&#x60;outputs&#x60;](/reference/workflows/workflow_step#output) array from your &#x60;workflow_step&#x60; object. (optional)
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun workflowsStepCompleted(token: kotlin.String, workflowStepExecuteId: kotlin.String, outputs: kotlin.String? = null) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = workflowsStepCompletedWithHttpInfo(token = token, workflowStepExecuteId = workflowStepExecuteId, outputs = outputs)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Indicate that an app&#39;s step in a workflow completed execution.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution.
     * @param outputs Key-value object of outputs from your step. Keys of this object reflect the configured &#x60;key&#x60; properties of your [&#x60;outputs&#x60;](/reference/workflows/workflow_step#output) array from your &#x60;workflow_step&#x60; object. (optional)
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun workflowsStepCompletedWithHttpInfo(token: kotlin.String, workflowStepExecuteId: kotlin.String, outputs: kotlin.String?) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = workflowsStepCompletedRequestConfig(token = token, workflowStepExecuteId = workflowStepExecuteId, outputs = outputs)

        return@withContext request<Unit, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation workflowsStepCompleted
     *
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution.
     * @param outputs Key-value object of outputs from your step. Keys of this object reflect the configured &#x60;key&#x60; properties of your [&#x60;outputs&#x60;](/reference/workflows/workflow_step#output) array from your &#x60;workflow_step&#x60; object. (optional)
     * @return RequestConfig
     */
    fun workflowsStepCompletedRequestConfig(token: kotlin.String, workflowStepExecuteId: kotlin.String, outputs: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("workflow_step_execute_id", listOf(workflowStepExecuteId.toString()))
                if (outputs != null) {
                    put("outputs", listOf(outputs.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/workflows.stepCompleted",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Indicate that an app&#39;s step in a workflow failed to execute.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution.
     * @param error A JSON-based object with a &#x60;message&#x60; property that should contain a human readable error message.
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun workflowsStepFailed(token: kotlin.String, workflowStepExecuteId: kotlin.String, error: kotlin.String) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = workflowsStepFailedWithHttpInfo(token = token, workflowStepExecuteId = workflowStepExecuteId, error = error)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Indicate that an app&#39;s step in a workflow failed to execute.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution.
     * @param error A JSON-based object with a &#x60;message&#x60; property that should contain a human readable error message.
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun workflowsStepFailedWithHttpInfo(token: kotlin.String, workflowStepExecuteId: kotlin.String, error: kotlin.String) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = workflowsStepFailedRequestConfig(token = token, workflowStepExecuteId = workflowStepExecuteId, error = error)

        return@withContext request<Unit, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation workflowsStepFailed
     *
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
     * @param workflowStepExecuteId Context identifier that maps to the correct workflow step execution.
     * @param error A JSON-based object with a &#x60;message&#x60; property that should contain a human readable error message.
     * @return RequestConfig
     */
    fun workflowsStepFailedRequestConfig(token: kotlin.String, workflowStepExecuteId: kotlin.String, error: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("workflow_step_execute_id", listOf(workflowStepExecuteId.toString()))
                put("error", listOf(error.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/workflows.stepFailed",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Update the configuration for a workflow extension step.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
     * @param workflowStepEditId A context identifier provided with &#x60;view_submission&#x60; payloads used to call back to &#x60;workflows.updateStep&#x60;.
     * @param inputs A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables). (optional)
     * @param outputs An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. (optional)
     * @param stepName An optional field that can be used to override the step name that is shown in the Workflow Builder. (optional)
     * @param stepImageUrl An optional field that can be used to override app image that is shown in the Workflow Builder. (optional)
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun workflowsUpdateStep(token: kotlin.String, workflowStepEditId: kotlin.String, inputs: kotlin.String? = null, outputs: kotlin.String? = null, stepName: kotlin.String? = null, stepImageUrl: kotlin.String? = null) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = workflowsUpdateStepWithHttpInfo(token = token, workflowStepEditId = workflowStepEditId, inputs = inputs, outputs = outputs, stepName = stepName, stepImageUrl = stepImageUrl)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Update the configuration for a workflow extension step.
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
     * @param workflowStepEditId A context identifier provided with &#x60;view_submission&#x60; payloads used to call back to &#x60;workflows.updateStep&#x60;.
     * @param inputs A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables). (optional)
     * @param outputs An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. (optional)
     * @param stepName An optional field that can be used to override the step name that is shown in the Workflow Builder. (optional)
     * @param stepImageUrl An optional field that can be used to override app image that is shown in the Workflow Builder. (optional)
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun workflowsUpdateStepWithHttpInfo(token: kotlin.String, workflowStepEditId: kotlin.String, inputs: kotlin.String?, outputs: kotlin.String?, stepName: kotlin.String?, stepImageUrl: kotlin.String?) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = workflowsUpdateStepRequestConfig(token = token, workflowStepEditId = workflowStepEditId, inputs = inputs, outputs = outputs, stepName = stepName, stepImageUrl = stepImageUrl)

        return@withContext request<Unit, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation workflowsUpdateStep
     *
     * @param token Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
     * @param workflowStepEditId A context identifier provided with &#x60;view_submission&#x60; payloads used to call back to &#x60;workflows.updateStep&#x60;.
     * @param inputs A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables). (optional)
     * @param outputs An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed. (optional)
     * @param stepName An optional field that can be used to override the step name that is shown in the Workflow Builder. (optional)
     * @param stepImageUrl An optional field that can be used to override app image that is shown in the Workflow Builder. (optional)
     * @return RequestConfig
     */
    fun workflowsUpdateStepRequestConfig(token: kotlin.String, workflowStepEditId: kotlin.String, inputs: kotlin.String?, outputs: kotlin.String?, stepName: kotlin.String?, stepImageUrl: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("workflow_step_edit_id", listOf(workflowStepEditId.toString()))
                if (inputs != null) {
                    put("inputs", listOf(inputs.toString()))
                }
                if (outputs != null) {
                    put("outputs", listOf(outputs.toString()))
                }
                if (stepName != null) {
                    put("step_name", listOf(stepName.toString()))
                }
                if (stepImageUrl != null) {
                    put("step_image_url", listOf(stepImageUrl.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/workflows.updateStep",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
