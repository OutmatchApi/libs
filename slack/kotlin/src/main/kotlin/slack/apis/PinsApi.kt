/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.PinsAddErrorSchema
import com.outmatchapi.slack.PinsAddSchema
import com.outmatchapi.slack.PinsListErrorSchema
import com.outmatchapi.slack.PinsListSuccessSchemaInner
import com.outmatchapi.slack.PinsRemoveErrorSchema
import com.outmatchapi.slack.PinsRemoveSchema

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class PinsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * Pins an item to a channel.
     * @param token Authentication token. Requires scope: &#x60;pins:write&#x60;
     * @param channel Channel to pin the item in.
     * @param timestamp Timestamp of the message to pin. (optional)
     * @return PinsAddSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pinsAdd(token: kotlin.String, channel: kotlin.String, timestamp: kotlin.String? = null) : PinsAddSchema = withContext(Dispatchers.IO) {
        val localVarResponse = pinsAddWithHttpInfo(token = token, channel = channel, timestamp = timestamp)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PinsAddSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Pins an item to a channel.
     * @param token Authentication token. Requires scope: &#x60;pins:write&#x60;
     * @param channel Channel to pin the item in.
     * @param timestamp Timestamp of the message to pin. (optional)
     * @return ApiResponse<PinsAddSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun pinsAddWithHttpInfo(token: kotlin.String, channel: kotlin.String, timestamp: kotlin.String?) : ApiResponse<PinsAddSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = pinsAddRequestConfig(token = token, channel = channel, timestamp = timestamp)

        return@withContext request<Map<String, PartConfig<*>>, PinsAddSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pinsAdd
     *
     * @param token Authentication token. Requires scope: &#x60;pins:write&#x60;
     * @param channel Channel to pin the item in.
     * @param timestamp Timestamp of the message to pin. (optional)
     * @return RequestConfig
     */
    fun pinsAddRequestConfig(token: kotlin.String, channel: kotlin.String, timestamp: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "timestamp" to PartConfig(body = timestamp, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/pins.add",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Lists items pinned to a channel.
     * @param token Authentication token. Requires scope: &#x60;pins:read&#x60;
     * @param channel Channel to get pinned items for.
     * @return kotlin.collections.List<PinsListSuccessSchemaInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pinsList(token: kotlin.String, channel: kotlin.String) : kotlin.collections.List<PinsListSuccessSchemaInner> = withContext(Dispatchers.IO) {
        val localVarResponse = pinsListWithHttpInfo(token = token, channel = channel)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.List<PinsListSuccessSchemaInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Lists items pinned to a channel.
     * @param token Authentication token. Requires scope: &#x60;pins:read&#x60;
     * @param channel Channel to get pinned items for.
     * @return ApiResponse<kotlin.collections.List<PinsListSuccessSchemaInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun pinsListWithHttpInfo(token: kotlin.String, channel: kotlin.String) : ApiResponse<kotlin.collections.List<PinsListSuccessSchemaInner>?> = withContext(Dispatchers.IO) {
        val localVariableConfig = pinsListRequestConfig(token = token, channel = channel)

        return@withContext request<Unit, kotlin.collections.List<PinsListSuccessSchemaInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pinsList
     *
     * @param token Authentication token. Requires scope: &#x60;pins:read&#x60;
     * @param channel Channel to get pinned items for.
     * @return RequestConfig
     */
    fun pinsListRequestConfig(token: kotlin.String, channel: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                put("channel", listOf(channel.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/pins.list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Un-pins an item from a channel.
     * @param token Authentication token. Requires scope: &#x60;pins:write&#x60;
     * @param channel Channel where the item is pinned to.
     * @param timestamp Timestamp of the message to un-pin. (optional)
     * @return PinsRemoveSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun pinsRemove(token: kotlin.String, channel: kotlin.String, timestamp: kotlin.String? = null) : PinsRemoveSchema = withContext(Dispatchers.IO) {
        val localVarResponse = pinsRemoveWithHttpInfo(token = token, channel = channel, timestamp = timestamp)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as PinsRemoveSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Un-pins an item from a channel.
     * @param token Authentication token. Requires scope: &#x60;pins:write&#x60;
     * @param channel Channel where the item is pinned to.
     * @param timestamp Timestamp of the message to un-pin. (optional)
     * @return ApiResponse<PinsRemoveSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun pinsRemoveWithHttpInfo(token: kotlin.String, channel: kotlin.String, timestamp: kotlin.String?) : ApiResponse<PinsRemoveSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = pinsRemoveRequestConfig(token = token, channel = channel, timestamp = timestamp)

        return@withContext request<Map<String, PartConfig<*>>, PinsRemoveSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation pinsRemove
     *
     * @param token Authentication token. Requires scope: &#x60;pins:write&#x60;
     * @param channel Channel where the item is pinned to.
     * @param timestamp Timestamp of the message to un-pin. (optional)
     * @return RequestConfig
     */
    fun pinsRemoveRequestConfig(token: kotlin.String, channel: kotlin.String, timestamp: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "timestamp" to PartConfig(body = timestamp, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/pins.remove",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
