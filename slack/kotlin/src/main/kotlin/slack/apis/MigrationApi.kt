/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.MigrationExchangeErrorSchema
import com.outmatchapi.slack.MigrationExchangeSuccessSchema

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class MigrationApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * For Enterprise Grid workspaces, map local user IDs to global user IDs
     * @param token Authentication token. Requires scope: &#x60;tokens.basic&#x60;
     * @param users A comma-separated list of user ids, up to 400 per request
     * @param teamId Specify team_id starts with &#x60;T&#x60; in case of Org Token (optional)
     * @param toOld Specify &#x60;true&#x60; to convert &#x60;W&#x60; global user IDs to workspace-specific &#x60;U&#x60; IDs. Defaults to &#x60;false&#x60;. (optional)
     * @return MigrationExchangeSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun migrationExchange(token: kotlin.String, users: kotlin.String, teamId: kotlin.String? = null, toOld: kotlin.Boolean? = null) : MigrationExchangeSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = migrationExchangeWithHttpInfo(token = token, users = users, teamId = teamId, toOld = toOld)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as MigrationExchangeSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * For Enterprise Grid workspaces, map local user IDs to global user IDs
     * @param token Authentication token. Requires scope: &#x60;tokens.basic&#x60;
     * @param users A comma-separated list of user ids, up to 400 per request
     * @param teamId Specify team_id starts with &#x60;T&#x60; in case of Org Token (optional)
     * @param toOld Specify &#x60;true&#x60; to convert &#x60;W&#x60; global user IDs to workspace-specific &#x60;U&#x60; IDs. Defaults to &#x60;false&#x60;. (optional)
     * @return ApiResponse<MigrationExchangeSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun migrationExchangeWithHttpInfo(token: kotlin.String, users: kotlin.String, teamId: kotlin.String?, toOld: kotlin.Boolean?) : ApiResponse<MigrationExchangeSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = migrationExchangeRequestConfig(token = token, users = users, teamId = teamId, toOld = toOld)

        return@withContext request<Unit, MigrationExchangeSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation migrationExchange
     *
     * @param token Authentication token. Requires scope: &#x60;tokens.basic&#x60;
     * @param users A comma-separated list of user ids, up to 400 per request
     * @param teamId Specify team_id starts with &#x60;T&#x60; in case of Org Token (optional)
     * @param toOld Specify &#x60;true&#x60; to convert &#x60;W&#x60; global user IDs to workspace-specific &#x60;U&#x60; IDs. Defaults to &#x60;false&#x60;. (optional)
     * @return RequestConfig
     */
    fun migrationExchangeRequestConfig(token: kotlin.String, users: kotlin.String, teamId: kotlin.String?, toOld: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                put("users", listOf(users.toString()))
                if (teamId != null) {
                    put("team_id", listOf(teamId.toString()))
                }
                if (toOld != null) {
                    put("to_old", listOf(toOld.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/migration.exchange",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
