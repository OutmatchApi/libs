/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.AdminConversationsArchiveErrorSchema
import com.outmatchapi.slack.AdminConversationsArchiveSchema
import com.outmatchapi.slack.AdminConversationsConvertToPrivateErrorSchema
import com.outmatchapi.slack.AdminConversationsConvertToPrivateSchema
import com.outmatchapi.slack.AdminConversationsCreateErrorSchema
import com.outmatchapi.slack.AdminConversationsCreateSchema
import com.outmatchapi.slack.AdminConversationsDeleteErrorSchema
import com.outmatchapi.slack.AdminConversationsDeleteSchema
import com.outmatchapi.slack.AdminConversationsDisconnectSharedErrorSchema
import com.outmatchapi.slack.AdminConversationsGetConversationPrefsSchema
import com.outmatchapi.slack.AdminConversationsGetTeamsErrorSchema
import com.outmatchapi.slack.AdminConversationsGetTeamsSchema
import com.outmatchapi.slack.AdminConversationsInviteErrorSchema
import com.outmatchapi.slack.AdminConversationsInviteSchema
import com.outmatchapi.slack.AdminConversationsRenameSchema
import com.outmatchapi.slack.AdminConversationsRenameSchema1
import com.outmatchapi.slack.AdminConversationsSearchErrorSchema
import com.outmatchapi.slack.AdminConversationsSearchSchema
import com.outmatchapi.slack.AdminConversationsSetConversationPrefsErrorSchema
import com.outmatchapi.slack.AdminConversationsSetConversationPrefsSchema
import com.outmatchapi.slack.AdminConversationsUnarchiveErrorSchema
import com.outmatchapi.slack.AdminConversationsUnarchiveErrorSchema1
import com.outmatchapi.slack.AdminConversationsUnarchiveErrorSchema2
import com.outmatchapi.slack.AdminConversationsUnarchiveSchema
import com.outmatchapi.slack.DefaultErrorTemplate
import com.outmatchapi.slack.DefaultSuccessTemplate

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class AdminConversationsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * Archive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to archive.
     * @return AdminConversationsArchiveSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminConversationsArchive(token: kotlin.String, channelId: kotlin.String) : AdminConversationsArchiveSchema = withContext(Dispatchers.IO) {
        val localVarResponse = adminConversationsArchiveWithHttpInfo(token = token, channelId = channelId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdminConversationsArchiveSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Archive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to archive.
     * @return ApiResponse<AdminConversationsArchiveSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminConversationsArchiveWithHttpInfo(token: kotlin.String, channelId: kotlin.String) : ApiResponse<AdminConversationsArchiveSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminConversationsArchiveRequestConfig(token = token, channelId = channelId)

        return@withContext request<Map<String, PartConfig<*>>, AdminConversationsArchiveSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminConversationsArchive
     *
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to archive.
     * @return RequestConfig
     */
    fun adminConversationsArchiveRequestConfig(token: kotlin.String, channelId: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel_id" to PartConfig(body = channelId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.conversations.archive",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Convert a public channel to a private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to convert to private.
     * @return AdminConversationsConvertToPrivateSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminConversationsConvertToPrivate(token: kotlin.String, channelId: kotlin.String) : AdminConversationsConvertToPrivateSchema = withContext(Dispatchers.IO) {
        val localVarResponse = adminConversationsConvertToPrivateWithHttpInfo(token = token, channelId = channelId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdminConversationsConvertToPrivateSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Convert a public channel to a private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to convert to private.
     * @return ApiResponse<AdminConversationsConvertToPrivateSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminConversationsConvertToPrivateWithHttpInfo(token: kotlin.String, channelId: kotlin.String) : ApiResponse<AdminConversationsConvertToPrivateSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminConversationsConvertToPrivateRequestConfig(token = token, channelId = channelId)

        return@withContext request<Map<String, PartConfig<*>>, AdminConversationsConvertToPrivateSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminConversationsConvertToPrivate
     *
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to convert to private.
     * @return RequestConfig
     */
    fun adminConversationsConvertToPrivateRequestConfig(token: kotlin.String, channelId: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel_id" to PartConfig(body = channelId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.conversations.convertToPrivate",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Create a public or private channel-based conversation.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param isPrivate When &#x60;true&#x60;, creates a private channel instead of a public channel
     * @param name Name of the public or private channel to create.
     * @param description Description of the public or private channel to create. (optional)
     * @param orgWide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param teamId The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @return AdminConversationsCreateSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminConversationsCreate(token: kotlin.String, isPrivate: kotlin.Boolean, name: kotlin.String, description: kotlin.String? = null, orgWide: kotlin.Boolean? = null, teamId: kotlin.String? = null) : AdminConversationsCreateSchema = withContext(Dispatchers.IO) {
        val localVarResponse = adminConversationsCreateWithHttpInfo(token = token, isPrivate = isPrivate, name = name, description = description, orgWide = orgWide, teamId = teamId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdminConversationsCreateSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Create a public or private channel-based conversation.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param isPrivate When &#x60;true&#x60;, creates a private channel instead of a public channel
     * @param name Name of the public or private channel to create.
     * @param description Description of the public or private channel to create. (optional)
     * @param orgWide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param teamId The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @return ApiResponse<AdminConversationsCreateSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminConversationsCreateWithHttpInfo(token: kotlin.String, isPrivate: kotlin.Boolean, name: kotlin.String, description: kotlin.String?, orgWide: kotlin.Boolean?, teamId: kotlin.String?) : ApiResponse<AdminConversationsCreateSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminConversationsCreateRequestConfig(token = token, isPrivate = isPrivate, name = name, description = description, orgWide = orgWide, teamId = teamId)

        return@withContext request<Map<String, PartConfig<*>>, AdminConversationsCreateSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminConversationsCreate
     *
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param isPrivate When &#x60;true&#x60;, creates a private channel instead of a public channel
     * @param name Name of the public or private channel to create.
     * @param description Description of the public or private channel to create. (optional)
     * @param orgWide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel (optional)
     * @param teamId The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;. (optional)
     * @return RequestConfig
     */
    fun adminConversationsCreateRequestConfig(token: kotlin.String, isPrivate: kotlin.Boolean, name: kotlin.String, description: kotlin.String?, orgWide: kotlin.Boolean?, teamId: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "description" to PartConfig(body = description, headers = mutableMapOf()),
            "is_private" to PartConfig(body = isPrivate, headers = mutableMapOf()),
            "name" to PartConfig(body = name, headers = mutableMapOf()),
            "org_wide" to PartConfig(body = orgWide, headers = mutableMapOf()),
            "team_id" to PartConfig(body = teamId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.conversations.create",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Delete a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to delete.
     * @return AdminConversationsDeleteSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminConversationsDelete(token: kotlin.String, channelId: kotlin.String) : AdminConversationsDeleteSchema = withContext(Dispatchers.IO) {
        val localVarResponse = adminConversationsDeleteWithHttpInfo(token = token, channelId = channelId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdminConversationsDeleteSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Delete a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to delete.
     * @return ApiResponse<AdminConversationsDeleteSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminConversationsDeleteWithHttpInfo(token: kotlin.String, channelId: kotlin.String) : ApiResponse<AdminConversationsDeleteSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminConversationsDeleteRequestConfig(token = token, channelId = channelId)

        return@withContext request<Map<String, PartConfig<*>>, AdminConversationsDeleteSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminConversationsDelete
     *
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to delete.
     * @return RequestConfig
     */
    fun adminConversationsDeleteRequestConfig(token: kotlin.String, channelId: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel_id" to PartConfig(body = channelId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.conversations.delete",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Disconnect a connected channel from one or more workspaces.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to be disconnected from some workspaces.
     * @param leavingTeamIds The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @return AdminConversationsRenameSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminConversationsDisconnectShared(token: kotlin.String, channelId: kotlin.String, leavingTeamIds: kotlin.String? = null) : AdminConversationsRenameSchema = withContext(Dispatchers.IO) {
        val localVarResponse = adminConversationsDisconnectSharedWithHttpInfo(token = token, channelId = channelId, leavingTeamIds = leavingTeamIds)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdminConversationsRenameSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Disconnect a connected channel from one or more workspaces.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to be disconnected from some workspaces.
     * @param leavingTeamIds The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @return ApiResponse<AdminConversationsRenameSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminConversationsDisconnectSharedWithHttpInfo(token: kotlin.String, channelId: kotlin.String, leavingTeamIds: kotlin.String?) : ApiResponse<AdminConversationsRenameSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminConversationsDisconnectSharedRequestConfig(token = token, channelId = channelId, leavingTeamIds = leavingTeamIds)

        return@withContext request<Map<String, PartConfig<*>>, AdminConversationsRenameSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminConversationsDisconnectShared
     *
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to be disconnected from some workspaces.
     * @param leavingTeamIds The team to be removed from the channel. Currently only a single team id can be specified. (optional)
     * @return RequestConfig
     */
    fun adminConversationsDisconnectSharedRequestConfig(token: kotlin.String, channelId: kotlin.String, leavingTeamIds: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel_id" to PartConfig(body = channelId, headers = mutableMapOf()),
            "leaving_team_ids" to PartConfig(body = leavingTeamIds, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.conversations.disconnectShared",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Get conversation preferences for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
     * @param channelId The channel to get preferences for.
     * @return AdminConversationsGetConversationPrefsSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminConversationsGetConversationPrefs(token: kotlin.String, channelId: kotlin.String) : AdminConversationsGetConversationPrefsSchema = withContext(Dispatchers.IO) {
        val localVarResponse = adminConversationsGetConversationPrefsWithHttpInfo(token = token, channelId = channelId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdminConversationsGetConversationPrefsSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Get conversation preferences for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
     * @param channelId The channel to get preferences for.
     * @return ApiResponse<AdminConversationsGetConversationPrefsSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminConversationsGetConversationPrefsWithHttpInfo(token: kotlin.String, channelId: kotlin.String) : ApiResponse<AdminConversationsGetConversationPrefsSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminConversationsGetConversationPrefsRequestConfig(token = token, channelId = channelId)

        return@withContext request<Unit, AdminConversationsGetConversationPrefsSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminConversationsGetConversationPrefs
     *
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
     * @param channelId The channel to get preferences for.
     * @return RequestConfig
     */
    fun adminConversationsGetConversationPrefsRequestConfig(token: kotlin.String, channelId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("channel_id", listOf(channelId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/admin.conversations.getConversationPrefs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
     * @param channelId The channel to determine connected workspaces within the organization for.
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @return AdminConversationsGetTeamsSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminConversationsGetTeams(token: kotlin.String, channelId: kotlin.String, cursor: kotlin.String? = null, limit: kotlin.Int? = null) : AdminConversationsGetTeamsSchema = withContext(Dispatchers.IO) {
        val localVarResponse = adminConversationsGetTeamsWithHttpInfo(token = token, channelId = channelId, cursor = cursor, limit = limit)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdminConversationsGetTeamsSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Get all the workspaces a given public or private channel is connected to within this Enterprise org.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
     * @param channelId The channel to determine connected workspaces within the organization for.
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @return ApiResponse<AdminConversationsGetTeamsSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminConversationsGetTeamsWithHttpInfo(token: kotlin.String, channelId: kotlin.String, cursor: kotlin.String?, limit: kotlin.Int?) : ApiResponse<AdminConversationsGetTeamsSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminConversationsGetTeamsRequestConfig(token = token, channelId = channelId, cursor = cursor, limit = limit)

        return@withContext request<Unit, AdminConversationsGetTeamsSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminConversationsGetTeams
     *
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
     * @param channelId The channel to determine connected workspaces within the organization for.
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page (optional)
     * @param limit The maximum number of items to return. Must be between 1 - 1000 both inclusive. (optional)
     * @return RequestConfig
     */
    fun adminConversationsGetTeamsRequestConfig(token: kotlin.String, channelId: kotlin.String, cursor: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("channel_id", listOf(channelId.toString()))
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/admin.conversations.getTeams",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Invite a user to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel that the users will be invited to.
     * @param userIds The users to invite.
     * @return AdminConversationsInviteSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminConversationsInvite(token: kotlin.String, channelId: kotlin.String, userIds: kotlin.String) : AdminConversationsInviteSchema = withContext(Dispatchers.IO) {
        val localVarResponse = adminConversationsInviteWithHttpInfo(token = token, channelId = channelId, userIds = userIds)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdminConversationsInviteSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Invite a user to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel that the users will be invited to.
     * @param userIds The users to invite.
     * @return ApiResponse<AdminConversationsInviteSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminConversationsInviteWithHttpInfo(token: kotlin.String, channelId: kotlin.String, userIds: kotlin.String) : ApiResponse<AdminConversationsInviteSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminConversationsInviteRequestConfig(token = token, channelId = channelId, userIds = userIds)

        return@withContext request<Map<String, PartConfig<*>>, AdminConversationsInviteSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminConversationsInvite
     *
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel that the users will be invited to.
     * @param userIds The users to invite.
     * @return RequestConfig
     */
    fun adminConversationsInviteRequestConfig(token: kotlin.String, channelId: kotlin.String, userIds: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel_id" to PartConfig(body = channelId, headers = mutableMapOf()),
            "user_ids" to PartConfig(body = userIds, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.conversations.invite",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Rename a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to rename.
     * @param name 
     * @return AdminConversationsRenameSchema1
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminConversationsRename(token: kotlin.String, channelId: kotlin.String, name: kotlin.String) : AdminConversationsRenameSchema1 = withContext(Dispatchers.IO) {
        val localVarResponse = adminConversationsRenameWithHttpInfo(token = token, channelId = channelId, name = name)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdminConversationsRenameSchema1
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Rename a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to rename.
     * @param name 
     * @return ApiResponse<AdminConversationsRenameSchema1?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminConversationsRenameWithHttpInfo(token: kotlin.String, channelId: kotlin.String, name: kotlin.String) : ApiResponse<AdminConversationsRenameSchema1?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminConversationsRenameRequestConfig(token = token, channelId = channelId, name = name)

        return@withContext request<Map<String, PartConfig<*>>, AdminConversationsRenameSchema1>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminConversationsRename
     *
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to rename.
     * @param name 
     * @return RequestConfig
     */
    fun adminConversationsRenameRequestConfig(token: kotlin.String, channelId: kotlin.String, name: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel_id" to PartConfig(body = channelId, headers = mutableMapOf()),
            "name" to PartConfig(body = name, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.conversations.rename",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Search for public or private channels in an Enterprise organization.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
     * @param teamIds Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param query Name of the the channel to query by. (optional)
     * @param limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param searchChannelTypes The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted  (optional)
     * @param sortDir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @return AdminConversationsSearchSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminConversationsSearch(token: kotlin.String, teamIds: kotlin.String? = null, query: kotlin.String? = null, limit: kotlin.Int? = null, cursor: kotlin.String? = null, searchChannelTypes: kotlin.String? = null, sort: kotlin.String? = null, sortDir: kotlin.String? = null) : AdminConversationsSearchSchema = withContext(Dispatchers.IO) {
        val localVarResponse = adminConversationsSearchWithHttpInfo(token = token, teamIds = teamIds, query = query, limit = limit, cursor = cursor, searchChannelTypes = searchChannelTypes, sort = sort, sortDir = sortDir)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdminConversationsSearchSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Search for public or private channels in an Enterprise organization.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
     * @param teamIds Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param query Name of the the channel to query by. (optional)
     * @param limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param searchChannelTypes The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted  (optional)
     * @param sortDir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @return ApiResponse<AdminConversationsSearchSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminConversationsSearchWithHttpInfo(token: kotlin.String, teamIds: kotlin.String?, query: kotlin.String?, limit: kotlin.Int?, cursor: kotlin.String?, searchChannelTypes: kotlin.String?, sort: kotlin.String?, sortDir: kotlin.String?) : ApiResponse<AdminConversationsSearchSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminConversationsSearchRequestConfig(token = token, teamIds = teamIds, query = query, limit = limit, cursor = cursor, searchChannelTypes = searchChannelTypes, sort = sort, sortDir = sortDir)

        return@withContext request<Unit, AdminConversationsSearchSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminConversationsSearch
     *
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
     * @param teamIds Comma separated string of team IDs, signifying the workspaces to search through. (optional)
     * @param query Name of the the channel to query by. (optional)
     * @param limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10. (optional)
     * @param cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page. (optional)
     * @param searchChannelTypes The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types). (optional)
     * @param sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted  (optional)
     * @param sortDir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a) (optional)
     * @return RequestConfig
     */
    fun adminConversationsSearchRequestConfig(token: kotlin.String, teamIds: kotlin.String?, query: kotlin.String?, limit: kotlin.Int?, cursor: kotlin.String?, searchChannelTypes: kotlin.String?, sort: kotlin.String?, sortDir: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (teamIds != null) {
                    put("team_ids", listOf(teamIds.toString()))
                }
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
                if (searchChannelTypes != null) {
                    put("search_channel_types", listOf(searchChannelTypes.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (sortDir != null) {
                    put("sort_dir", listOf(sortDir.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/admin.conversations.search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Set the posting permissions for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to set the prefs for
     * @param prefs The prefs for this channel in a stringified JSON format.
     * @return AdminConversationsSetConversationPrefsSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminConversationsSetConversationPrefs(token: kotlin.String, channelId: kotlin.String, prefs: kotlin.String) : AdminConversationsSetConversationPrefsSchema = withContext(Dispatchers.IO) {
        val localVarResponse = adminConversationsSetConversationPrefsWithHttpInfo(token = token, channelId = channelId, prefs = prefs)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdminConversationsSetConversationPrefsSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Set the posting permissions for a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to set the prefs for
     * @param prefs The prefs for this channel in a stringified JSON format.
     * @return ApiResponse<AdminConversationsSetConversationPrefsSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminConversationsSetConversationPrefsWithHttpInfo(token: kotlin.String, channelId: kotlin.String, prefs: kotlin.String) : ApiResponse<AdminConversationsSetConversationPrefsSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminConversationsSetConversationPrefsRequestConfig(token = token, channelId = channelId, prefs = prefs)

        return@withContext request<Map<String, PartConfig<*>>, AdminConversationsSetConversationPrefsSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminConversationsSetConversationPrefs
     *
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to set the prefs for
     * @param prefs The prefs for this channel in a stringified JSON format.
     * @return RequestConfig
     */
    fun adminConversationsSetConversationPrefsRequestConfig(token: kotlin.String, channelId: kotlin.String, prefs: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel_id" to PartConfig(body = channelId, headers = mutableMapOf()),
            "prefs" to PartConfig(body = prefs, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.conversations.setConversationPrefs",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The encoded &#x60;channel_id&#x60; to add or remove to workspaces.
     * @param orgChannel True if channel has to be converted to an org channel (optional)
     * @param targetTeamIds A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param teamId The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminConversationsSetTeams(token: kotlin.String, channelId: kotlin.String, orgChannel: kotlin.Boolean? = null, targetTeamIds: kotlin.String? = null, teamId: kotlin.String? = null) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = adminConversationsSetTeamsWithHttpInfo(token = token, channelId = channelId, orgChannel = orgChannel, targetTeamIds = targetTeamIds, teamId = teamId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Set the workspaces in an Enterprise grid org that connect to a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The encoded &#x60;channel_id&#x60; to add or remove to workspaces.
     * @param orgChannel True if channel has to be converted to an org channel (optional)
     * @param targetTeamIds A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param teamId The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminConversationsSetTeamsWithHttpInfo(token: kotlin.String, channelId: kotlin.String, orgChannel: kotlin.Boolean?, targetTeamIds: kotlin.String?, teamId: kotlin.String?) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminConversationsSetTeamsRequestConfig(token = token, channelId = channelId, orgChannel = orgChannel, targetTeamIds = targetTeamIds, teamId = teamId)

        return@withContext request<Map<String, PartConfig<*>>, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminConversationsSetTeams
     *
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The encoded &#x60;channel_id&#x60; to add or remove to workspaces.
     * @param orgChannel True if channel has to be converted to an org channel (optional)
     * @param targetTeamIds A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide. (optional)
     * @param teamId The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel. (optional)
     * @return RequestConfig
     */
    fun adminConversationsSetTeamsRequestConfig(token: kotlin.String, channelId: kotlin.String, orgChannel: kotlin.Boolean?, targetTeamIds: kotlin.String?, teamId: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel_id" to PartConfig(body = channelId, headers = mutableMapOf()),
            "org_channel" to PartConfig(body = orgChannel, headers = mutableMapOf()),
            "target_team_ids" to PartConfig(body = targetTeamIds, headers = mutableMapOf()),
            "team_id" to PartConfig(body = teamId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.conversations.setTeams",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Unarchive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to unarchive.
     * @return AdminConversationsUnarchiveSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun adminConversationsUnarchive(token: kotlin.String, channelId: kotlin.String) : AdminConversationsUnarchiveSchema = withContext(Dispatchers.IO) {
        val localVarResponse = adminConversationsUnarchiveWithHttpInfo(token = token, channelId = channelId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AdminConversationsUnarchiveSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Unarchive a public or private channel.
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to unarchive.
     * @return ApiResponse<AdminConversationsUnarchiveSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun adminConversationsUnarchiveWithHttpInfo(token: kotlin.String, channelId: kotlin.String) : ApiResponse<AdminConversationsUnarchiveSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = adminConversationsUnarchiveRequestConfig(token = token, channelId = channelId)

        return@withContext request<Map<String, PartConfig<*>>, AdminConversationsUnarchiveSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation adminConversationsUnarchive
     *
     * @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
     * @param channelId The channel to unarchive.
     * @return RequestConfig
     */
    fun adminConversationsUnarchiveRequestConfig(token: kotlin.String, channelId: kotlin.String) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel_id" to PartConfig(body = channelId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/admin.conversations.unarchive",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
