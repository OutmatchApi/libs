/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.ChatDeleteErrorSchema
import com.outmatchapi.slack.ChatDeleteScheduledMessageErrorSchema
import com.outmatchapi.slack.ChatDeleteScheduledMessageSchema
import com.outmatchapi.slack.ChatDeleteSuccessSchema
import com.outmatchapi.slack.ChatGetPermalinkErrorSchema
import com.outmatchapi.slack.ChatGetPermalinkSuccessSchema
import com.outmatchapi.slack.ChatMeMessageErrorSchema
import com.outmatchapi.slack.ChatMeMessageSchema
import com.outmatchapi.slack.ChatPostEphemeralErrorSchema
import com.outmatchapi.slack.ChatPostEphemeralSuccessSchema
import com.outmatchapi.slack.ChatPostMessageErrorSchema
import com.outmatchapi.slack.ChatPostMessageSuccessSchema
import com.outmatchapi.slack.ChatScheduleMessageErrorSchema
import com.outmatchapi.slack.ChatScheduleMessageSuccessSchema
import com.outmatchapi.slack.ChatScheduledMessagesListErrorSchema
import com.outmatchapi.slack.ChatScheduledMessagesListSchema
import com.outmatchapi.slack.ChatUnfurlErrorSchema
import com.outmatchapi.slack.ChatUnfurlSuccessSchema
import com.outmatchapi.slack.ChatUpdateErrorSchema
import com.outmatchapi.slack.ChatUpdateSuccessSchema

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class ChatApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * Deletes a message.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param channel Channel containing the message to be deleted. (optional)
     * @param ts Timestamp of the message to be deleted. (optional)
     * @return ChatDeleteSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun chatDelete(token: kotlin.String? = null, asUser: kotlin.Boolean? = null, channel: kotlin.String? = null, ts: java.math.BigDecimal? = null) : ChatDeleteSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = chatDeleteWithHttpInfo(token = token, asUser = asUser, channel = channel, ts = ts)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatDeleteSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Deletes a message.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param channel Channel containing the message to be deleted. (optional)
     * @param ts Timestamp of the message to be deleted. (optional)
     * @return ApiResponse<ChatDeleteSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun chatDeleteWithHttpInfo(token: kotlin.String?, asUser: kotlin.Boolean?, channel: kotlin.String?, ts: java.math.BigDecimal?) : ApiResponse<ChatDeleteSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = chatDeleteRequestConfig(token = token, asUser = asUser, channel = channel, ts = ts)

        return@withContext request<Map<String, PartConfig<*>>, ChatDeleteSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation chatDelete
     *
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @param channel Channel containing the message to be deleted. (optional)
     * @param ts Timestamp of the message to be deleted. (optional)
     * @return RequestConfig
     */
    fun chatDeleteRequestConfig(token: kotlin.String?, asUser: kotlin.Boolean?, channel: kotlin.String?, ts: java.math.BigDecimal?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "as_user" to PartConfig(body = asUser, headers = mutableMapOf()),
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "ts" to PartConfig(body = ts, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token?.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/chat.delete",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Deletes a pending scheduled message from the queue.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
     * @param channel The channel the scheduled_message is posting to
     * @param scheduledMessageId &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @return ChatDeleteScheduledMessageSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun chatDeleteScheduledMessage(token: kotlin.String, channel: kotlin.String, scheduledMessageId: kotlin.String, asUser: kotlin.Boolean? = null) : ChatDeleteScheduledMessageSchema = withContext(Dispatchers.IO) {
        val localVarResponse = chatDeleteScheduledMessageWithHttpInfo(token = token, channel = channel, scheduledMessageId = scheduledMessageId, asUser = asUser)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatDeleteScheduledMessageSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Deletes a pending scheduled message from the queue.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
     * @param channel The channel the scheduled_message is posting to
     * @param scheduledMessageId &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @return ApiResponse<ChatDeleteScheduledMessageSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun chatDeleteScheduledMessageWithHttpInfo(token: kotlin.String, channel: kotlin.String, scheduledMessageId: kotlin.String, asUser: kotlin.Boolean?) : ApiResponse<ChatDeleteScheduledMessageSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = chatDeleteScheduledMessageRequestConfig(token = token, channel = channel, scheduledMessageId = scheduledMessageId, asUser = asUser)

        return@withContext request<Map<String, PartConfig<*>>, ChatDeleteScheduledMessageSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation chatDeleteScheduledMessage
     *
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
     * @param channel The channel the scheduled_message is posting to
     * @param scheduledMessageId &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage
     * @param asUser Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope. (optional)
     * @return RequestConfig
     */
    fun chatDeleteScheduledMessageRequestConfig(token: kotlin.String, channel: kotlin.String, scheduledMessageId: kotlin.String, asUser: kotlin.Boolean?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "as_user" to PartConfig(body = asUser, headers = mutableMapOf()),
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "scheduled_message_id" to PartConfig(body = scheduledMessageId, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/chat.deleteScheduledMessage",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Retrieve a permalink URL for a specific extant message
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param channel The ID of the conversation or channel containing the message
     * @param messageTs A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel
     * @return ChatGetPermalinkSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun chatGetPermalink(token: kotlin.String, channel: kotlin.String, messageTs: kotlin.String) : ChatGetPermalinkSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = chatGetPermalinkWithHttpInfo(token = token, channel = channel, messageTs = messageTs)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatGetPermalinkSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Retrieve a permalink URL for a specific extant message
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param channel The ID of the conversation or channel containing the message
     * @param messageTs A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel
     * @return ApiResponse<ChatGetPermalinkSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun chatGetPermalinkWithHttpInfo(token: kotlin.String, channel: kotlin.String, messageTs: kotlin.String) : ApiResponse<ChatGetPermalinkSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = chatGetPermalinkRequestConfig(token = token, channel = channel, messageTs = messageTs)

        return@withContext request<Unit, ChatGetPermalinkSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation chatGetPermalink
     *
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param channel The ID of the conversation or channel containing the message
     * @param messageTs A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel
     * @return RequestConfig
     */
    fun chatGetPermalinkRequestConfig(token: kotlin.String, channel: kotlin.String, messageTs: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                put("channel", listOf(channel.toString()))
                put("message_ts", listOf(messageTs.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/chat.getPermalink",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Share a me message into a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. (optional)
     * @param text Text of the message to send. (optional)
     * @return ChatMeMessageSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun chatMeMessage(token: kotlin.String? = null, channel: kotlin.String? = null, text: kotlin.String? = null) : ChatMeMessageSchema = withContext(Dispatchers.IO) {
        val localVarResponse = chatMeMessageWithHttpInfo(token = token, channel = channel, text = text)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatMeMessageSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Share a me message into a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. (optional)
     * @param text Text of the message to send. (optional)
     * @return ApiResponse<ChatMeMessageSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun chatMeMessageWithHttpInfo(token: kotlin.String?, channel: kotlin.String?, text: kotlin.String?) : ApiResponse<ChatMeMessageSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = chatMeMessageRequestConfig(token = token, channel = channel, text = text)

        return@withContext request<Map<String, PartConfig<*>>, ChatMeMessageSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation chatMeMessage
     *
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name. (optional)
     * @param text Text of the message to send. (optional)
     * @return RequestConfig
     */
    fun chatMeMessageRequestConfig(token: kotlin.String?, channel: kotlin.String?, text: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "text" to PartConfig(body = text, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token?.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/chat.meMessage",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Sends an ephemeral message to a user in a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.
     * @param user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument.
     * @param asUser Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @return ChatPostEphemeralSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun chatPostEphemeral(token: kotlin.String, channel: kotlin.String, user: kotlin.String, asUser: kotlin.Boolean? = null, attachments: kotlin.String? = null, blocks: kotlin.String? = null, iconEmoji: kotlin.String? = null, iconUrl: kotlin.String? = null, linkNames: kotlin.Boolean? = null, parse: kotlin.String? = null, text: kotlin.String? = null, threadTs: kotlin.String? = null, username: kotlin.String? = null) : ChatPostEphemeralSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = chatPostEphemeralWithHttpInfo(token = token, channel = channel, user = user, asUser = asUser, attachments = attachments, blocks = blocks, iconEmoji = iconEmoji, iconUrl = iconUrl, linkNames = linkNames, parse = parse, text = text, threadTs = threadTs, username = username)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatPostEphemeralSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Sends an ephemeral message to a user in a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.
     * @param user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument.
     * @param asUser Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @return ApiResponse<ChatPostEphemeralSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun chatPostEphemeralWithHttpInfo(token: kotlin.String, channel: kotlin.String, user: kotlin.String, asUser: kotlin.Boolean?, attachments: kotlin.String?, blocks: kotlin.String?, iconEmoji: kotlin.String?, iconUrl: kotlin.String?, linkNames: kotlin.Boolean?, parse: kotlin.String?, text: kotlin.String?, threadTs: kotlin.String?, username: kotlin.String?) : ApiResponse<ChatPostEphemeralSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = chatPostEphemeralRequestConfig(token = token, channel = channel, user = user, asUser = asUser, attachments = attachments, blocks = blocks, iconEmoji = iconEmoji, iconUrl = iconUrl, linkNames = linkNames, parse = parse, text = text, threadTs = threadTs, username = username)

        return@withContext request<Map<String, PartConfig<*>>, ChatPostEphemeralSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation chatPostEphemeral
     *
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.
     * @param user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument.
     * @param asUser Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @return RequestConfig
     */
    fun chatPostEphemeralRequestConfig(token: kotlin.String, channel: kotlin.String, user: kotlin.String, asUser: kotlin.Boolean?, attachments: kotlin.String?, blocks: kotlin.String?, iconEmoji: kotlin.String?, iconUrl: kotlin.String?, linkNames: kotlin.Boolean?, parse: kotlin.String?, text: kotlin.String?, threadTs: kotlin.String?, username: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "as_user" to PartConfig(body = asUser, headers = mutableMapOf()),
            "attachments" to PartConfig(body = attachments, headers = mutableMapOf()),
            "blocks" to PartConfig(body = blocks, headers = mutableMapOf()),
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "icon_emoji" to PartConfig(body = iconEmoji, headers = mutableMapOf()),
            "icon_url" to PartConfig(body = iconUrl, headers = mutableMapOf()),
            "link_names" to PartConfig(body = linkNames, headers = mutableMapOf()),
            "parse" to PartConfig(body = parse, headers = mutableMapOf()),
            "text" to PartConfig(body = text, headers = mutableMapOf()),
            "thread_ts" to PartConfig(body = threadTs, headers = mutableMapOf()),
            "user" to PartConfig(body = user, headers = mutableMapOf()),
            "username" to PartConfig(body = username, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/chat.postEphemeral",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Sends a message to a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @return ChatPostMessageSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun chatPostMessage(token: kotlin.String, channel: kotlin.String, asUser: kotlin.String? = null, attachments: kotlin.String? = null, blocks: kotlin.String? = null, iconEmoji: kotlin.String? = null, iconUrl: kotlin.String? = null, linkNames: kotlin.Boolean? = null, mrkdwn: kotlin.Boolean? = null, parse: kotlin.String? = null, replyBroadcast: kotlin.Boolean? = null, text: kotlin.String? = null, threadTs: kotlin.String? = null, unfurlLinks: kotlin.Boolean? = null, unfurlMedia: kotlin.Boolean? = null, username: kotlin.String? = null) : ChatPostMessageSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = chatPostMessageWithHttpInfo(token = token, channel = channel, asUser = asUser, attachments = attachments, blocks = blocks, iconEmoji = iconEmoji, iconUrl = iconUrl, linkNames = linkNames, mrkdwn = mrkdwn, parse = parse, replyBroadcast = replyBroadcast, text = text, threadTs = threadTs, unfurlLinks = unfurlLinks, unfurlMedia = unfurlMedia, username = username)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatPostMessageSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Sends a message to a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @return ApiResponse<ChatPostMessageSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun chatPostMessageWithHttpInfo(token: kotlin.String, channel: kotlin.String, asUser: kotlin.String?, attachments: kotlin.String?, blocks: kotlin.String?, iconEmoji: kotlin.String?, iconUrl: kotlin.String?, linkNames: kotlin.Boolean?, mrkdwn: kotlin.Boolean?, parse: kotlin.String?, replyBroadcast: kotlin.Boolean?, text: kotlin.String?, threadTs: kotlin.String?, unfurlLinks: kotlin.Boolean?, unfurlMedia: kotlin.Boolean?, username: kotlin.String?) : ApiResponse<ChatPostMessageSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = chatPostMessageRequestConfig(token = token, channel = channel, asUser = asUser, attachments = attachments, blocks = blocks, iconEmoji = iconEmoji, iconUrl = iconUrl, linkNames = linkNames, mrkdwn = mrkdwn, parse = parse, replyBroadcast = replyBroadcast, text = text, threadTs = threadTs, unfurlLinks = unfurlLinks, unfurlMedia = unfurlMedia, username = username)

        return@withContext request<Map<String, PartConfig<*>>, ChatPostMessageSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation chatPostMessage
     *
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
     * @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param iconEmoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param iconUrl URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting). (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @param username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below. (optional)
     * @return RequestConfig
     */
    fun chatPostMessageRequestConfig(token: kotlin.String, channel: kotlin.String, asUser: kotlin.String?, attachments: kotlin.String?, blocks: kotlin.String?, iconEmoji: kotlin.String?, iconUrl: kotlin.String?, linkNames: kotlin.Boolean?, mrkdwn: kotlin.Boolean?, parse: kotlin.String?, replyBroadcast: kotlin.Boolean?, text: kotlin.String?, threadTs: kotlin.String?, unfurlLinks: kotlin.Boolean?, unfurlMedia: kotlin.Boolean?, username: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "as_user" to PartConfig(body = asUser, headers = mutableMapOf()),
            "attachments" to PartConfig(body = attachments, headers = mutableMapOf()),
            "blocks" to PartConfig(body = blocks, headers = mutableMapOf()),
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "icon_emoji" to PartConfig(body = iconEmoji, headers = mutableMapOf()),
            "icon_url" to PartConfig(body = iconUrl, headers = mutableMapOf()),
            "link_names" to PartConfig(body = linkNames, headers = mutableMapOf()),
            "mrkdwn" to PartConfig(body = mrkdwn, headers = mutableMapOf()),
            "parse" to PartConfig(body = parse, headers = mutableMapOf()),
            "reply_broadcast" to PartConfig(body = replyBroadcast, headers = mutableMapOf()),
            "text" to PartConfig(body = text, headers = mutableMapOf()),
            "thread_ts" to PartConfig(body = threadTs, headers = mutableMapOf()),
            "unfurl_links" to PartConfig(body = unfurlLinks, headers = mutableMapOf()),
            "unfurl_media" to PartConfig(body = unfurlMedia, headers = mutableMapOf()),
            "username" to PartConfig(body = username, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/chat.postMessage",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Schedules a message to be sent to a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting). (optional)
     * @param postAt Unix EPOCH timestamp of time in future to send the message. (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @return ChatScheduleMessageSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun chatScheduleMessage(token: kotlin.String? = null, asUser: kotlin.Boolean? = null, attachments: kotlin.String? = null, blocks: kotlin.String? = null, channel: kotlin.String? = null, linkNames: kotlin.Boolean? = null, parse: kotlin.String? = null, postAt: kotlin.String? = null, replyBroadcast: kotlin.Boolean? = null, text: kotlin.String? = null, threadTs: java.math.BigDecimal? = null, unfurlLinks: kotlin.Boolean? = null, unfurlMedia: kotlin.Boolean? = null) : ChatScheduleMessageSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = chatScheduleMessageWithHttpInfo(token = token, asUser = asUser, attachments = attachments, blocks = blocks, channel = channel, linkNames = linkNames, parse = parse, postAt = postAt, replyBroadcast = replyBroadcast, text = text, threadTs = threadTs, unfurlLinks = unfurlLinks, unfurlMedia = unfurlMedia)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatScheduleMessageSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Schedules a message to be sent to a channel.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting). (optional)
     * @param postAt Unix EPOCH timestamp of time in future to send the message. (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @return ApiResponse<ChatScheduleMessageSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun chatScheduleMessageWithHttpInfo(token: kotlin.String?, asUser: kotlin.Boolean?, attachments: kotlin.String?, blocks: kotlin.String?, channel: kotlin.String?, linkNames: kotlin.Boolean?, parse: kotlin.String?, postAt: kotlin.String?, replyBroadcast: kotlin.Boolean?, text: kotlin.String?, threadTs: java.math.BigDecimal?, unfurlLinks: kotlin.Boolean?, unfurlMedia: kotlin.Boolean?) : ApiResponse<ChatScheduleMessageSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = chatScheduleMessageRequestConfig(token = token, asUser = asUser, attachments = attachments, blocks = blocks, channel = channel, linkNames = linkNames, parse = parse, postAt = postAt, replyBroadcast = replyBroadcast, text = text, threadTs = threadTs, unfurlLinks = unfurlLinks, unfurlMedia = unfurlMedia)

        return@withContext request<Map<String, PartConfig<*>>, ChatScheduleMessageSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation chatScheduleMessage
     *
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60; (optional)
     * @param asUser Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship). (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. (optional)
     * @param blocks A JSON-based array of structured blocks, presented as a URL-encoded string. (optional)
     * @param channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details. (optional)
     * @param linkNames Find and link channel names and usernames. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting). (optional)
     * @param postAt Unix EPOCH timestamp of time in future to send the message. (optional)
     * @param replyBroadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;. (optional)
     * @param text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail. (optional)
     * @param threadTs Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead. (optional)
     * @param unfurlLinks Pass true to enable unfurling of primarily text-based content. (optional)
     * @param unfurlMedia Pass false to disable unfurling of media content. (optional)
     * @return RequestConfig
     */
    fun chatScheduleMessageRequestConfig(token: kotlin.String?, asUser: kotlin.Boolean?, attachments: kotlin.String?, blocks: kotlin.String?, channel: kotlin.String?, linkNames: kotlin.Boolean?, parse: kotlin.String?, postAt: kotlin.String?, replyBroadcast: kotlin.Boolean?, text: kotlin.String?, threadTs: java.math.BigDecimal?, unfurlLinks: kotlin.Boolean?, unfurlMedia: kotlin.Boolean?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "as_user" to PartConfig(body = asUser, headers = mutableMapOf()),
            "attachments" to PartConfig(body = attachments, headers = mutableMapOf()),
            "blocks" to PartConfig(body = blocks, headers = mutableMapOf()),
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "link_names" to PartConfig(body = linkNames, headers = mutableMapOf()),
            "parse" to PartConfig(body = parse, headers = mutableMapOf()),
            "post_at" to PartConfig(body = postAt, headers = mutableMapOf()),
            "reply_broadcast" to PartConfig(body = replyBroadcast, headers = mutableMapOf()),
            "text" to PartConfig(body = text, headers = mutableMapOf()),
            "thread_ts" to PartConfig(body = threadTs, headers = mutableMapOf()),
            "unfurl_links" to PartConfig(body = unfurlLinks, headers = mutableMapOf()),
            "unfurl_media" to PartConfig(body = unfurlMedia, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token?.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/chat.scheduleMessage",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Returns a list of scheduled messages.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param channel The channel of the scheduled messages (optional)
     * @param latest A UNIX timestamp of the latest value in the time range (optional)
     * @param oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param limit Maximum number of original entries to return. (optional)
     * @param cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @return ChatScheduledMessagesListSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun chatScheduledMessagesList(token: kotlin.String? = null, channel: kotlin.String? = null, latest: java.math.BigDecimal? = null, oldest: java.math.BigDecimal? = null, limit: kotlin.Int? = null, cursor: kotlin.String? = null) : ChatScheduledMessagesListSchema = withContext(Dispatchers.IO) {
        val localVarResponse = chatScheduledMessagesListWithHttpInfo(token = token, channel = channel, latest = latest, oldest = oldest, limit = limit, cursor = cursor)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatScheduledMessagesListSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Returns a list of scheduled messages.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param channel The channel of the scheduled messages (optional)
     * @param latest A UNIX timestamp of the latest value in the time range (optional)
     * @param oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param limit Maximum number of original entries to return. (optional)
     * @param cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @return ApiResponse<ChatScheduledMessagesListSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun chatScheduledMessagesListWithHttpInfo(token: kotlin.String?, channel: kotlin.String?, latest: java.math.BigDecimal?, oldest: java.math.BigDecimal?, limit: kotlin.Int?, cursor: kotlin.String?) : ApiResponse<ChatScheduledMessagesListSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = chatScheduledMessagesListRequestConfig(token = token, channel = channel, latest = latest, oldest = oldest, limit = limit, cursor = cursor)

        return@withContext request<Unit, ChatScheduledMessagesListSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation chatScheduledMessagesList
     *
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param channel The channel of the scheduled messages (optional)
     * @param latest A UNIX timestamp of the latest value in the time range (optional)
     * @param oldest A UNIX timestamp of the oldest value in the time range (optional)
     * @param limit Maximum number of original entries to return. (optional)
     * @param cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from. (optional)
     * @return RequestConfig
     */
    fun chatScheduledMessagesListRequestConfig(token: kotlin.String?, channel: kotlin.String?, latest: java.math.BigDecimal?, oldest: java.math.BigDecimal?, limit: kotlin.Int?, cursor: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (channel != null) {
                    put("channel", listOf(channel.toString()))
                }
                if (latest != null) {
                    put("latest", listOf(latest.toString()))
                }
                if (oldest != null) {
                    put("oldest", listOf(oldest.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        token?.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/chat.scheduledMessages.list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Provide custom unfurl behavior for user-posted URLs
     * @param token Authentication token. Requires scope: &#x60;links:write&#x60;
     * @param channel Channel ID of the message
     * @param ts Timestamp of the message to add unfurl behavior to.
     * @param unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. (optional)
     * @param userAuthMessage Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior (optional)
     * @param userAuthRequired Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain (optional)
     * @param userAuthUrl Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. (optional)
     * @return ChatUnfurlSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun chatUnfurl(token: kotlin.String, channel: kotlin.String, ts: kotlin.String, unfurls: kotlin.String? = null, userAuthMessage: kotlin.String? = null, userAuthRequired: kotlin.Boolean? = null, userAuthUrl: kotlin.String? = null) : ChatUnfurlSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = chatUnfurlWithHttpInfo(token = token, channel = channel, ts = ts, unfurls = unfurls, userAuthMessage = userAuthMessage, userAuthRequired = userAuthRequired, userAuthUrl = userAuthUrl)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatUnfurlSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Provide custom unfurl behavior for user-posted URLs
     * @param token Authentication token. Requires scope: &#x60;links:write&#x60;
     * @param channel Channel ID of the message
     * @param ts Timestamp of the message to add unfurl behavior to.
     * @param unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. (optional)
     * @param userAuthMessage Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior (optional)
     * @param userAuthRequired Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain (optional)
     * @param userAuthUrl Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. (optional)
     * @return ApiResponse<ChatUnfurlSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun chatUnfurlWithHttpInfo(token: kotlin.String, channel: kotlin.String, ts: kotlin.String, unfurls: kotlin.String?, userAuthMessage: kotlin.String?, userAuthRequired: kotlin.Boolean?, userAuthUrl: kotlin.String?) : ApiResponse<ChatUnfurlSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = chatUnfurlRequestConfig(token = token, channel = channel, ts = ts, unfurls = unfurls, userAuthMessage = userAuthMessage, userAuthRequired = userAuthRequired, userAuthUrl = userAuthUrl)

        return@withContext request<Map<String, PartConfig<*>>, ChatUnfurlSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation chatUnfurl
     *
     * @param token Authentication token. Requires scope: &#x60;links:write&#x60;
     * @param channel Channel ID of the message
     * @param ts Timestamp of the message to add unfurl behavior to.
     * @param unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments. (optional)
     * @param userAuthMessage Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior (optional)
     * @param userAuthRequired Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain (optional)
     * @param userAuthUrl Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded. (optional)
     * @return RequestConfig
     */
    fun chatUnfurlRequestConfig(token: kotlin.String, channel: kotlin.String, ts: kotlin.String, unfurls: kotlin.String?, userAuthMessage: kotlin.String?, userAuthRequired: kotlin.Boolean?, userAuthUrl: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "ts" to PartConfig(body = ts, headers = mutableMapOf()),
            "unfurls" to PartConfig(body = unfurls, headers = mutableMapOf()),
            "user_auth_message" to PartConfig(body = userAuthMessage, headers = mutableMapOf()),
            "user_auth_required" to PartConfig(body = userAuthRequired, headers = mutableMapOf()),
            "user_auth_url" to PartConfig(body = userAuthUrl, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/chat.unfurl",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Updates a message.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
     * @param channel Channel containing the message to be updated.
     * @param ts Timestamp of the message to be updated.
     * @param asUser Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field. (optional)
     * @param blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field. (optional)
     * @param linkNames Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;. (optional)
     * @param text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;. (optional)
     * @return ChatUpdateSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun chatUpdate(token: kotlin.String, channel: kotlin.String, ts: kotlin.String, asUser: kotlin.String? = null, attachments: kotlin.String? = null, blocks: kotlin.String? = null, linkNames: kotlin.String? = null, parse: kotlin.String? = null, text: kotlin.String? = null) : ChatUpdateSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = chatUpdateWithHttpInfo(token = token, channel = channel, ts = ts, asUser = asUser, attachments = attachments, blocks = blocks, linkNames = linkNames, parse = parse, text = text)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ChatUpdateSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Updates a message.
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
     * @param channel Channel containing the message to be updated.
     * @param ts Timestamp of the message to be updated.
     * @param asUser Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field. (optional)
     * @param blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field. (optional)
     * @param linkNames Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;. (optional)
     * @param text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;. (optional)
     * @return ApiResponse<ChatUpdateSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun chatUpdateWithHttpInfo(token: kotlin.String, channel: kotlin.String, ts: kotlin.String, asUser: kotlin.String?, attachments: kotlin.String?, blocks: kotlin.String?, linkNames: kotlin.String?, parse: kotlin.String?, text: kotlin.String?) : ApiResponse<ChatUpdateSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = chatUpdateRequestConfig(token = token, channel = channel, ts = ts, asUser = asUser, attachments = attachments, blocks = blocks, linkNames = linkNames, parse = parse, text = text)

        return@withContext request<Map<String, PartConfig<*>>, ChatUpdateSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation chatUpdate
     *
     * @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
     * @param channel Channel containing the message to be updated.
     * @param ts Timestamp of the message to be updated.
     * @param asUser Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users. (optional)
     * @param attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field. (optional)
     * @param blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field. (optional)
     * @param linkNames Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;. (optional)
     * @param parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;. (optional)
     * @param text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;. (optional)
     * @return RequestConfig
     */
    fun chatUpdateRequestConfig(token: kotlin.String, channel: kotlin.String, ts: kotlin.String, asUser: kotlin.String?, attachments: kotlin.String?, blocks: kotlin.String?, linkNames: kotlin.String?, parse: kotlin.String?, text: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "as_user" to PartConfig(body = asUser, headers = mutableMapOf()),
            "attachments" to PartConfig(body = attachments, headers = mutableMapOf()),
            "blocks" to PartConfig(body = blocks, headers = mutableMapOf()),
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "link_names" to PartConfig(body = linkNames, headers = mutableMapOf()),
            "parse" to PartConfig(body = parse, headers = mutableMapOf()),
            "text" to PartConfig(body = text, headers = mutableMapOf()),
            "ts" to PartConfig(body = ts, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/chat.update",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
