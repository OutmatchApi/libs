/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.StarsAddErrorSchema
import com.outmatchapi.slack.StarsAddSchema
import com.outmatchapi.slack.StarsListErrorSchema
import com.outmatchapi.slack.StarsListSchema
import com.outmatchapi.slack.StarsRemoveErrorSchema
import com.outmatchapi.slack.StarsRemoveSchema

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class StarsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * Adds a star to an item.
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60;
     * @param channel Channel to add star to, or channel where the message to add star to was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param file File to add star to. (optional)
     * @param fileComment File comment to add star to. (optional)
     * @param timestamp Timestamp of the message to add star to. (optional)
     * @return StarsAddSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun starsAdd(token: kotlin.String, channel: kotlin.String? = null, file: kotlin.String? = null, fileComment: kotlin.String? = null, timestamp: kotlin.String? = null) : StarsAddSchema = withContext(Dispatchers.IO) {
        val localVarResponse = starsAddWithHttpInfo(token = token, channel = channel, file = file, fileComment = fileComment, timestamp = timestamp)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StarsAddSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Adds a star to an item.
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60;
     * @param channel Channel to add star to, or channel where the message to add star to was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param file File to add star to. (optional)
     * @param fileComment File comment to add star to. (optional)
     * @param timestamp Timestamp of the message to add star to. (optional)
     * @return ApiResponse<StarsAddSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun starsAddWithHttpInfo(token: kotlin.String, channel: kotlin.String?, file: kotlin.String?, fileComment: kotlin.String?, timestamp: kotlin.String?) : ApiResponse<StarsAddSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = starsAddRequestConfig(token = token, channel = channel, file = file, fileComment = fileComment, timestamp = timestamp)

        return@withContext request<Map<String, PartConfig<*>>, StarsAddSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation starsAdd
     *
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60;
     * @param channel Channel to add star to, or channel where the message to add star to was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param file File to add star to. (optional)
     * @param fileComment File comment to add star to. (optional)
     * @param timestamp Timestamp of the message to add star to. (optional)
     * @return RequestConfig
     */
    fun starsAddRequestConfig(token: kotlin.String, channel: kotlin.String?, file: kotlin.String?, fileComment: kotlin.String?, timestamp: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "file" to PartConfig(body = file, headers = mutableMapOf()),
            "file_comment" to PartConfig(body = fileComment, headers = mutableMapOf()),
            "timestamp" to PartConfig(body = timestamp, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/stars.add",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Lists stars for a user.
     * @param token Authentication token. Requires scope: &#x60;stars:read&#x60; (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @return StarsListSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun starsList(token: kotlin.String? = null, count: kotlin.String? = null, page: kotlin.String? = null, cursor: kotlin.String? = null, limit: kotlin.Int? = null) : StarsListSchema = withContext(Dispatchers.IO) {
        val localVarResponse = starsListWithHttpInfo(token = token, count = count, page = page, cursor = cursor, limit = limit)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StarsListSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Lists stars for a user.
     * @param token Authentication token. Requires scope: &#x60;stars:read&#x60; (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @return ApiResponse<StarsListSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun starsListWithHttpInfo(token: kotlin.String?, count: kotlin.String?, page: kotlin.String?, cursor: kotlin.String?, limit: kotlin.Int?) : ApiResponse<StarsListSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = starsListRequestConfig(token = token, count = count, page = page, cursor = cursor, limit = limit)

        return@withContext request<Unit, StarsListSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation starsList
     *
     * @param token Authentication token. Requires scope: &#x60;stars:read&#x60; (optional)
     * @param count  (optional)
     * @param page  (optional)
     * @param cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details. (optional)
     * @param limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. (optional)
     * @return RequestConfig
     */
    fun starsListRequestConfig(token: kotlin.String?, count: kotlin.String?, page: kotlin.String?, cursor: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (token != null) {
                    put("token", listOf(token.toString()))
                }
                if (count != null) {
                    put("count", listOf(count.toString()))
                }
                if (page != null) {
                    put("page", listOf(page.toString()))
                }
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/stars.list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Removes a star from an item.
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60;
     * @param channel Channel to remove star from, or channel where the message to remove star from was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param file File to remove star from. (optional)
     * @param fileComment File comment to remove star from. (optional)
     * @param timestamp Timestamp of the message to remove star from. (optional)
     * @return StarsRemoveSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun starsRemove(token: kotlin.String, channel: kotlin.String? = null, file: kotlin.String? = null, fileComment: kotlin.String? = null, timestamp: kotlin.String? = null) : StarsRemoveSchema = withContext(Dispatchers.IO) {
        val localVarResponse = starsRemoveWithHttpInfo(token = token, channel = channel, file = file, fileComment = fileComment, timestamp = timestamp)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as StarsRemoveSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Removes a star from an item.
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60;
     * @param channel Channel to remove star from, or channel where the message to remove star from was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param file File to remove star from. (optional)
     * @param fileComment File comment to remove star from. (optional)
     * @param timestamp Timestamp of the message to remove star from. (optional)
     * @return ApiResponse<StarsRemoveSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun starsRemoveWithHttpInfo(token: kotlin.String, channel: kotlin.String?, file: kotlin.String?, fileComment: kotlin.String?, timestamp: kotlin.String?) : ApiResponse<StarsRemoveSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = starsRemoveRequestConfig(token = token, channel = channel, file = file, fileComment = fileComment, timestamp = timestamp)

        return@withContext request<Map<String, PartConfig<*>>, StarsRemoveSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation starsRemove
     *
     * @param token Authentication token. Requires scope: &#x60;stars:write&#x60;
     * @param channel Channel to remove star from, or channel where the message to remove star from was posted (used with &#x60;timestamp&#x60;). (optional)
     * @param file File to remove star from. (optional)
     * @param fileComment File comment to remove star from. (optional)
     * @param timestamp Timestamp of the message to remove star from. (optional)
     * @return RequestConfig
     */
    fun starsRemoveRequestConfig(token: kotlin.String, channel: kotlin.String?, file: kotlin.String?, fileComment: kotlin.String?, timestamp: kotlin.String?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "channel" to PartConfig(body = channel, headers = mutableMapOf()),
            "file" to PartConfig(body = file, headers = mutableMapOf()),
            "file_comment" to PartConfig(body = fileComment, headers = mutableMapOf()),
            "timestamp" to PartConfig(body = timestamp, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/stars.remove",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
