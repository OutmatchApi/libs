/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package slack.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.slack.ApiPermissionsScopesListSuccessSchema
import com.outmatchapi.slack.AppsPermissionsInfoErrorSchema
import com.outmatchapi.slack.AppsPermissionsInfoSchema
import com.outmatchapi.slack.AppsPermissionsRequestErrorSchema
import com.outmatchapi.slack.AppsPermissionsRequestSchema
import com.outmatchapi.slack.AppsPermissionsResourcesListErrorSchema
import com.outmatchapi.slack.AppsPermissionsResourcesListSuccessSchema
import com.outmatchapi.slack.AppsPermissionsScopesListErrorSchema
import com.outmatchapi.slack.AppsUninstallErrorSchema
import com.outmatchapi.slack.AppsUninstallSchema
import com.outmatchapi.slack.DefaultErrorTemplate
import com.outmatchapi.slack.DefaultSuccessTemplate

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import slack.infrastructure.ApiClient
import slack.infrastructure.ApiResponse
import slack.infrastructure.ClientException
import slack.infrastructure.ClientError
import slack.infrastructure.ServerException
import slack.infrastructure.ServerError
import slack.infrastructure.MultiValueMap
import slack.infrastructure.PartConfig
import slack.infrastructure.RequestConfig
import slack.infrastructure.RequestMethod
import slack.infrastructure.ResponseType
import slack.infrastructure.Success
import slack.infrastructure.toMultiValue

class AppsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://slack.com/api")
        }
    }

    /**
     * 
     * Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
     * @param token Authentication token. Requires scope: &#x60;authorizations:read&#x60;
     * @param eventContext 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun appsEventAuthorizationsList(token: kotlin.String, eventContext: kotlin.String, cursor: kotlin.String? = null, limit: kotlin.Int? = null) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = appsEventAuthorizationsListWithHttpInfo(token = token, eventContext = eventContext, cursor = cursor, limit = limit)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
     * @param token Authentication token. Requires scope: &#x60;authorizations:read&#x60;
     * @param eventContext 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun appsEventAuthorizationsListWithHttpInfo(token: kotlin.String, eventContext: kotlin.String, cursor: kotlin.String?, limit: kotlin.Int?) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = appsEventAuthorizationsListRequestConfig(token = token, eventContext = eventContext, cursor = cursor, limit = limit)

        return@withContext request<Unit, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation appsEventAuthorizationsList
     *
     * @param token Authentication token. Requires scope: &#x60;authorizations:read&#x60;
     * @param eventContext 
     * @param cursor  (optional)
     * @param limit  (optional)
     * @return RequestConfig
     */
    fun appsEventAuthorizationsListRequestConfig(token: kotlin.String, eventContext: kotlin.String, cursor: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("event_context", listOf(eventContext.toString()))
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        token.apply { localVariableHeaders["token"] = this.toString() }
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/apps.event.authorizations.list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Returns list of permissions this app has on a team.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @return AppsPermissionsInfoSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun appsPermissionsInfo(token: kotlin.String? = null) : AppsPermissionsInfoSchema = withContext(Dispatchers.IO) {
        val localVarResponse = appsPermissionsInfoWithHttpInfo(token = token)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AppsPermissionsInfoSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Returns list of permissions this app has on a team.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @return ApiResponse<AppsPermissionsInfoSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun appsPermissionsInfoWithHttpInfo(token: kotlin.String?) : ApiResponse<AppsPermissionsInfoSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = appsPermissionsInfoRequestConfig(token = token)

        return@withContext request<Unit, AppsPermissionsInfoSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation appsPermissionsInfo
     *
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @return RequestConfig
     */
    fun appsPermissionsInfoRequestConfig(token: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (token != null) {
                    put("token", listOf(token.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/apps.permissions.info",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Allows an app to request additional scopes
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param scopes A comma separated list of scopes to request for
     * @param triggerId Token used to trigger the permissions API
     * @return AppsPermissionsRequestSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun appsPermissionsRequest(token: kotlin.String, scopes: kotlin.String, triggerId: kotlin.String) : AppsPermissionsRequestSchema = withContext(Dispatchers.IO) {
        val localVarResponse = appsPermissionsRequestWithHttpInfo(token = token, scopes = scopes, triggerId = triggerId)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AppsPermissionsRequestSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Allows an app to request additional scopes
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param scopes A comma separated list of scopes to request for
     * @param triggerId Token used to trigger the permissions API
     * @return ApiResponse<AppsPermissionsRequestSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun appsPermissionsRequestWithHttpInfo(token: kotlin.String, scopes: kotlin.String, triggerId: kotlin.String) : ApiResponse<AppsPermissionsRequestSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = appsPermissionsRequestRequestConfig(token = token, scopes = scopes, triggerId = triggerId)

        return@withContext request<Unit, AppsPermissionsRequestSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation appsPermissionsRequest
     *
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param scopes A comma separated list of scopes to request for
     * @param triggerId Token used to trigger the permissions API
     * @return RequestConfig
     */
    fun appsPermissionsRequestRequestConfig(token: kotlin.String, scopes: kotlin.String, triggerId: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                put("scopes", listOf(scopes.toString()))
                put("trigger_id", listOf(triggerId.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/apps.permissions.request",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Returns list of resource grants this app has on a team.
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param limit The maximum number of items to return. (optional)
     * @return AppsPermissionsResourcesListSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun appsPermissionsResourcesList(token: kotlin.String, cursor: kotlin.String? = null, limit: kotlin.Int? = null) : AppsPermissionsResourcesListSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = appsPermissionsResourcesListWithHttpInfo(token = token, cursor = cursor, limit = limit)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AppsPermissionsResourcesListSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Returns list of resource grants this app has on a team.
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param limit The maximum number of items to return. (optional)
     * @return ApiResponse<AppsPermissionsResourcesListSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun appsPermissionsResourcesListWithHttpInfo(token: kotlin.String, cursor: kotlin.String?, limit: kotlin.Int?) : ApiResponse<AppsPermissionsResourcesListSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = appsPermissionsResourcesListRequestConfig(token = token, cursor = cursor, limit = limit)

        return@withContext request<Unit, AppsPermissionsResourcesListSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation appsPermissionsResourcesList
     *
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param limit The maximum number of items to return. (optional)
     * @return RequestConfig
     */
    fun appsPermissionsResourcesListRequestConfig(token: kotlin.String, cursor: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/apps.permissions.resources.list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Returns list of scopes this app has on a team.
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @return ApiPermissionsScopesListSuccessSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun appsPermissionsScopesList(token: kotlin.String) : ApiPermissionsScopesListSuccessSchema = withContext(Dispatchers.IO) {
        val localVarResponse = appsPermissionsScopesListWithHttpInfo(token = token)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ApiPermissionsScopesListSuccessSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Returns list of scopes this app has on a team.
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @return ApiResponse<ApiPermissionsScopesListSuccessSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun appsPermissionsScopesListWithHttpInfo(token: kotlin.String) : ApiResponse<ApiPermissionsScopesListSuccessSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = appsPermissionsScopesListRequestConfig(token = token)

        return@withContext request<Unit, ApiPermissionsScopesListSuccessSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation appsPermissionsScopesList
     *
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @return RequestConfig
     */
    fun appsPermissionsScopesListRequestConfig(token: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/apps.permissions.scopes.list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Returns list of user grants and corresponding scopes this app has on a team.
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param limit The maximum number of items to return. (optional)
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun appsPermissionsUsersList(token: kotlin.String, cursor: kotlin.String? = null, limit: kotlin.Int? = null) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = appsPermissionsUsersListWithHttpInfo(token = token, cursor = cursor, limit = limit)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Returns list of user grants and corresponding scopes this app has on a team.
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param limit The maximum number of items to return. (optional)
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun appsPermissionsUsersListWithHttpInfo(token: kotlin.String, cursor: kotlin.String?, limit: kotlin.Int?) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = appsPermissionsUsersListRequestConfig(token = token, cursor = cursor, limit = limit)

        return@withContext request<Unit, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation appsPermissionsUsersList
     *
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail. (optional)
     * @param limit The maximum number of items to return. (optional)
     * @return RequestConfig
     */
    fun appsPermissionsUsersListRequestConfig(token: kotlin.String, cursor: kotlin.String?, limit: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                if (cursor != null) {
                    put("cursor", listOf(cursor.toString()))
                }
                if (limit != null) {
                    put("limit", listOf(limit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/apps.permissions.users.list",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param scopes A comma separated list of user scopes to request for
     * @param triggerId Token used to trigger the request
     * @param user The user this scope is being requested for
     * @return DefaultSuccessTemplate
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun appsPermissionsUsersRequest(token: kotlin.String, scopes: kotlin.String, triggerId: kotlin.String, user: kotlin.String) : DefaultSuccessTemplate = withContext(Dispatchers.IO) {
        val localVarResponse = appsPermissionsUsersRequestWithHttpInfo(token = token, scopes = scopes, triggerId = triggerId, user = user)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as DefaultSuccessTemplate
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Enables an app to trigger a permissions modal to grant an app access to a user access scope.
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param scopes A comma separated list of user scopes to request for
     * @param triggerId Token used to trigger the request
     * @param user The user this scope is being requested for
     * @return ApiResponse<DefaultSuccessTemplate?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun appsPermissionsUsersRequestWithHttpInfo(token: kotlin.String, scopes: kotlin.String, triggerId: kotlin.String, user: kotlin.String) : ApiResponse<DefaultSuccessTemplate?> = withContext(Dispatchers.IO) {
        val localVariableConfig = appsPermissionsUsersRequestRequestConfig(token = token, scopes = scopes, triggerId = triggerId, user = user)

        return@withContext request<Unit, DefaultSuccessTemplate>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation appsPermissionsUsersRequest
     *
     * @param token Authentication token. Requires scope: &#x60;none&#x60;
     * @param scopes A comma separated list of user scopes to request for
     * @param triggerId Token used to trigger the request
     * @param user The user this scope is being requested for
     * @return RequestConfig
     */
    fun appsPermissionsUsersRequestRequestConfig(token: kotlin.String, scopes: kotlin.String, triggerId: kotlin.String, user: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("token", listOf(token.toString()))
                put("scopes", listOf(scopes.toString()))
                put("trigger_id", listOf(triggerId.toString()))
                put("user", listOf(user.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/apps.permissions.users.request",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * 
     * Uninstalls your app from a workspace.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param clientId Issued when you created your application. (optional)
     * @param clientSecret Issued when you created your application. (optional)
     * @return AppsUninstallSchema
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun appsUninstall(token: kotlin.String? = null, clientId: kotlin.String? = null, clientSecret: kotlin.String? = null) : AppsUninstallSchema = withContext(Dispatchers.IO) {
        val localVarResponse = appsUninstallWithHttpInfo(token = token, clientId = clientId, clientSecret = clientSecret)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AppsUninstallSchema
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * Uninstalls your app from a workspace.
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param clientId Issued when you created your application. (optional)
     * @param clientSecret Issued when you created your application. (optional)
     * @return ApiResponse<AppsUninstallSchema?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun appsUninstallWithHttpInfo(token: kotlin.String?, clientId: kotlin.String?, clientSecret: kotlin.String?) : ApiResponse<AppsUninstallSchema?> = withContext(Dispatchers.IO) {
        val localVariableConfig = appsUninstallRequestConfig(token = token, clientId = clientId, clientSecret = clientSecret)

        return@withContext request<Unit, AppsUninstallSchema>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation appsUninstall
     *
     * @param token Authentication token. Requires scope: &#x60;none&#x60; (optional)
     * @param clientId Issued when you created your application. (optional)
     * @param clientSecret Issued when you created your application. (optional)
     * @return RequestConfig
     */
    fun appsUninstallRequestConfig(token: kotlin.String?, clientId: kotlin.String?, clientSecret: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (token != null) {
                    put("token", listOf(token.toString()))
                }
                if (clientId != null) {
                    put("client_id", listOf(clientId.toString()))
                }
                if (clientSecret != null) {
                    put("client_secret", listOf(clientSecret.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/apps.uninstall",
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
