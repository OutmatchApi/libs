=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for slack::ReactionsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ReactionsApi' do
  before do
    # run before each test
    @api_instance = slack::ReactionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ReactionsApi' do
    it 'should create an instance of ReactionsApi' do
      expect(@api_instance).to be_instance_of(slack::ReactionsApi)
    end
  end

  # unit tests for reactions_add
  # Adds a reaction to an item.
  # @param token Authentication token. Requires scope: &#x60;reactions:write&#x60;
  # @param channel Channel where the message to add reaction to was posted.
  # @param name Reaction (emoji) name.
  # @param timestamp Timestamp of the message to add reaction to.
  # @param [Hash] opts the optional parameters
  # @return [ReactionsAddSchema]
  describe 'reactions_add test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reactions_get
  # Gets reactions for an item.
  # @param token Authentication token. Requires scope: &#x60;reactions:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :channel Channel where the message to get reactions for was posted.
  # @option opts [String] :file File to get reactions for.
  # @option opts [String] :file_comment File comment to get reactions for.
  # @option opts [Boolean] :full If true always return the complete reaction list.
  # @option opts [String] :timestamp Timestamp of the message to get reactions for.
  # @return [Array<ReactionsGetSuccessSchemaInner>]
  describe 'reactions_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reactions_list
  # Lists reactions made by a user.
  # @param token Authentication token. Requires scope: &#x60;reactions:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user Show reactions made by this user. Defaults to the authed user.
  # @option opts [Boolean] :full If true always return the complete reaction list.
  # @option opts [Integer] :count 
  # @option opts [Integer] :page 
  # @option opts [String] :cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details.
  # @option opts [Integer] :limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached.
  # @return [ReactionsListSchema]
  describe 'reactions_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reactions_remove
  # Removes a reaction from an item.
  # @param token Authentication token. Requires scope: &#x60;reactions:write&#x60;
  # @param name Reaction (emoji) name.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :channel Channel where the message to remove reaction from was posted.
  # @option opts [String] :file File to remove reaction from.
  # @option opts [String] :file_comment File comment to remove reaction from.
  # @option opts [String] :timestamp Timestamp of the message to remove reaction from.
  # @return [ReactionsRemoveSchema]
  describe 'reactions_remove test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
