=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for slack::SearchApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'SearchApi' do
  before do
    # run before each test
    @api_instance = slack::SearchApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SearchApi' do
    it 'should create an instance of SearchApi' do
      expect(@api_instance).to be_instance_of(slack::SearchApi)
    end
  end

  # unit tests for search_messages
  # Searches for messages matching a query.
  # @param token Authentication token. Requires scope: &#x60;search:read&#x60;
  # @param query Search query.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :count Pass the number of results you want per \&quot;page\&quot;. Maximum of &#x60;100&#x60;.
  # @option opts [Boolean] :highlight Pass a value of &#x60;true&#x60; to enable query highlight markers (see below).
  # @option opts [Integer] :page 
  # @option opts [String] :sort Return matches sorted by either &#x60;score&#x60; or &#x60;timestamp&#x60;.
  # @option opts [String] :sort_dir Change sort direction to ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;).
  # @return [DefaultSuccessTemplate]
  describe 'search_messages test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
