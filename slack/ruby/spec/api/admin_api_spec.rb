=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for slack::AdminApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AdminApi' do
  before do
    # run before each test
    @api_instance = slack::AdminApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AdminApi' do
    it 'should create an instance of AdminApi' do
      expect(@api_instance).to be_instance_of(slack::AdminApi)
    end
  end

  # unit tests for admin_apps_approve
  # Approve an app for installation on a workspace.
  # @param token Authentication token. Requires scope: &#x60;admin.apps:write&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :app_id The id of the app to approve.
  # @option opts [String] :request_id The id of the request to approve.
  # @option opts [String] :team_id 
  # @return [DefaultSuccessTemplate]
  describe 'admin_apps_approve test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_apps_approved_list
  # List approved apps for an org or workspace.
  # @param token Authentication token. Requires scope: &#x60;admin.apps:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
  # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
  # @option opts [String] :team_id 
  # @option opts [String] :enterprise_id 
  # @return [DefaultSuccessTemplate]
  describe 'admin_apps_approved_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_apps_requests_list
  # List app requests for a team/workspace.
  # @param token Authentication token. Requires scope: &#x60;admin.apps:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
  # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
  # @option opts [String] :team_id 
  # @return [DefaultSuccessTemplate]
  describe 'admin_apps_requests_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_apps_restrict
  # Restrict an app for installation on a workspace.
  # @param token Authentication token. Requires scope: &#x60;admin.apps:write&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :app_id The id of the app to restrict.
  # @option opts [String] :request_id The id of the request to restrict.
  # @option opts [String] :team_id 
  # @return [DefaultSuccessTemplate]
  describe 'admin_apps_restrict test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_apps_restricted_list
  # List restricted apps for an org or workspace.
  # @param token Authentication token. Requires scope: &#x60;admin.apps:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
  # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
  # @option opts [String] :team_id 
  # @option opts [String] :enterprise_id 
  # @return [DefaultSuccessTemplate]
  describe 'admin_apps_restricted_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_archive
  # Archive a public or private channel.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
  # @param channel_id The channel to archive.
  # @param [Hash] opts the optional parameters
  # @return [AdminConversationsArchiveSchema]
  describe 'admin_conversations_archive test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_convert_to_private
  # Convert a public channel to a private channel.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
  # @param channel_id The channel to convert to private.
  # @param [Hash] opts the optional parameters
  # @return [AdminConversationsConvertToPrivateSchema]
  describe 'admin_conversations_convert_to_private test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_create
  # Create a public or private channel-based conversation.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
  # @param is_private When &#x60;true&#x60;, creates a private channel instead of a public channel
  # @param name Name of the public or private channel to create.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :description Description of the public or private channel to create.
  # @option opts [Boolean] :org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel
  # @option opts [String] :team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;.
  # @return [AdminConversationsCreateSchema]
  describe 'admin_conversations_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_delete
  # Delete a public or private channel.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
  # @param channel_id The channel to delete.
  # @param [Hash] opts the optional parameters
  # @return [AdminConversationsDeleteSchema]
  describe 'admin_conversations_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_disconnect_shared
  # Disconnect a connected channel from one or more workspaces.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
  # @param channel_id The channel to be disconnected from some workspaces.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified.
  # @return [AdminConversationsRenameSchema]
  describe 'admin_conversations_disconnect_shared test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_ekm_list_original_connected_channel_info
  # List all disconnected channelsâ€”i.e., channels that were once connected to other workspaces and then disconnectedâ€”and the corresponding original channel IDs for key revocation with EKM.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :channel_ids A comma-separated list of channels to filter to.
  # @option opts [String] :team_ids A comma-separated list of the workspaces to which the channels you would like returned belong.
  # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
  # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
  # @return [DefaultSuccessTemplate]
  describe 'admin_conversations_ekm_list_original_connected_channel_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_get_conversation_prefs
  # Get conversation preferences for a public or private channel.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
  # @param channel_id The channel to get preferences for.
  # @param [Hash] opts the optional parameters
  # @return [AdminConversationsGetConversationPrefsSchema]
  describe 'admin_conversations_get_conversation_prefs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_get_teams
  # Get all the workspaces a given public or private channel is connected to within this Enterprise org.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
  # @param channel_id The channel to determine connected workspaces within the organization for.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
  # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
  # @return [AdminConversationsGetTeamsSchema]
  describe 'admin_conversations_get_teams test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_invite
  # Invite a user to a public or private channel.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
  # @param channel_id The channel that the users will be invited to.
  # @param user_ids The users to invite.
  # @param [Hash] opts the optional parameters
  # @return [AdminConversationsInviteSchema]
  describe 'admin_conversations_invite test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_rename
  # Rename a public or private channel.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
  # @param channel_id The channel to rename.
  # @param name 
  # @param [Hash] opts the optional parameters
  # @return [AdminConversationsRenameSchema1]
  describe 'admin_conversations_rename test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_restrict_access_add_group
  # Add an allowlist of IDP groups for accessing a channel
  # @param channel_id The channel to link this group to.
  # @param group_id The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
  # @return [DefaultSuccessTemplate]
  describe 'admin_conversations_restrict_access_add_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_restrict_access_list_groups
  # List all IDP Groups linked to a channel
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
  # @param channel_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
  # @return [DefaultSuccessTemplate]
  describe 'admin_conversations_restrict_access_list_groups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_restrict_access_remove_group
  # Remove a linked IDP group linked from a private channel
  # @param channel_id The channel to remove the linked group from.
  # @param group_id The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.
  # @param team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_conversations_restrict_access_remove_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_search
  # Search for public or private channels in an Enterprise organization.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_ids Comma separated string of team IDs, signifying the workspaces to search through.
  # @option opts [String] :query Name of the the channel to query by.
  # @option opts [Integer] :limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
  # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
  # @option opts [String] :search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types).
  # @option opts [String] :sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted 
  # @option opts [String] :sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a)
  # @return [AdminConversationsSearchSchema]
  describe 'admin_conversations_search test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_set_conversation_prefs
  # Set the posting permissions for a public or private channel.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
  # @param channel_id The channel to set the prefs for
  # @param prefs The prefs for this channel in a stringified JSON format.
  # @param [Hash] opts the optional parameters
  # @return [AdminConversationsSetConversationPrefsSchema]
  describe 'admin_conversations_set_conversation_prefs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_set_teams
  # Set the workspaces in an Enterprise grid org that connect to a public or private channel.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
  # @param channel_id The encoded &#x60;channel_id&#x60; to add or remove to workspaces.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :org_channel True if channel has to be converted to an org channel
  # @option opts [String] :target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
  # @option opts [String] :team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.
  # @return [DefaultSuccessTemplate]
  describe 'admin_conversations_set_teams test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_conversations_unarchive
  # Unarchive a public or private channel.
  # @param token Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
  # @param channel_id The channel to unarchive.
  # @param [Hash] opts the optional parameters
  # @return [AdminConversationsUnarchiveSchema]
  describe 'admin_conversations_unarchive test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_emoji_add
  # Add an emoji.
  # @param name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
  # @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
  # @param url The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_emoji_add test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_emoji_add_alias
  # Add an emoji alias.
  # @param alias_for The alias of the emoji.
  # @param name The name of the emoji to be aliased. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
  # @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_emoji_add_alias test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_emoji_list
  # List emoji for an Enterprise Grid organization.
  # @param token Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
  # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
  # @return [DefaultSuccessTemplate]
  describe 'admin_emoji_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_emoji_remove
  # Remove an emoji across an Enterprise Grid organization
  # @param name The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
  # @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_emoji_remove test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_emoji_rename
  # Rename an emoji.
  # @param name The name of the emoji to be renamed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
  # @param new_name The new name of the emoji.
  # @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_emoji_rename test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_invite_requests_approve
  # Approve a workspace invite request.
  # @param token Authentication token. Requires scope: &#x60;admin.invites:write&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [AdminInviteRequestsApproveRequest] :admin_invite_requests_approve_request 
  # @return [DefaultSuccessTemplate]
  describe 'admin_invite_requests_approve test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_invite_requests_approved_list
  # List all approved workspace invite requests.
  # @param token Authentication token. Requires scope: &#x60;admin.invites:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id ID for the workspace where the invite requests were made.
  # @option opts [String] :cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response
  # @option opts [Integer] :limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
  # @return [DefaultSuccessTemplate]
  describe 'admin_invite_requests_approved_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_invite_requests_denied_list
  # List all denied workspace invite requests.
  # @param token Authentication token. Requires scope: &#x60;admin.invites:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id ID for the workspace where the invite requests were made.
  # @option opts [String] :cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous api response
  # @option opts [Integer] :limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive
  # @return [DefaultSuccessTemplate]
  describe 'admin_invite_requests_denied_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_invite_requests_deny
  # Deny a workspace invite request.
  # @param token Authentication token. Requires scope: &#x60;admin.invites:write&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [AdminInviteRequestsApproveRequest] :admin_invite_requests_approve_request 
  # @return [DefaultSuccessTemplate]
  describe 'admin_invite_requests_deny test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_invite_requests_list
  # List all pending workspace invite requests.
  # @param token Authentication token. Requires scope: &#x60;admin.invites:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id ID for the workspace where the invite requests were made.
  # @option opts [String] :cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response
  # @option opts [Integer] :limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
  # @return [DefaultSuccessTemplate]
  describe 'admin_invite_requests_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_teams_admins_list
  # List all of the admins on a given workspace.
  # @param token Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
  # @param team_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum number of items to return.
  # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
  # @return [DefaultSuccessTemplate]
  describe 'admin_teams_admins_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_teams_create
  # Create an Enterprise team.
  # @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
  # @param team_domain Team domain (for example, slacksoftballteam).
  # @param team_name Team name (for example, Slack Softball Team).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_description Description for the team.
  # @option opts [String] :team_discoverability Who can join the team. A team&#39;s discoverability can be &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;invite_only&#x60;, or &#x60;unlisted&#x60;.
  # @return [DefaultSuccessTemplate]
  describe 'admin_teams_create test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_teams_list
  # List all teams on an Enterprise organization
  # @param token Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 100 both inclusive.
  # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
  # @return [DefaultSuccessTemplate]
  describe 'admin_teams_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_teams_owners_list
  # List all of the owners on a given workspace.
  # @param token Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
  # @param team_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
  # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
  # @return [DefaultSuccessTemplate]
  describe 'admin_teams_owners_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_teams_settings_info
  # Fetch information about settings in a workspace
  # @param token Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
  # @param team_id 
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_teams_settings_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_teams_settings_set_default_channels
  # Set the default channels of a workspace.
  # @param channel_ids An array of channel IDs.
  # @param team_id ID for the workspace to set the default channel for.
  # @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_teams_settings_set_default_channels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_teams_settings_set_description
  # Set the description of a given workspace.
  # @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
  # @param description The new description for the workspace.
  # @param team_id ID for the workspace to set the description for.
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_teams_settings_set_description test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_teams_settings_set_discoverability
  # An API method that allows admins to set the discoverability of a given workspace
  # @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
  # @param discoverability This workspace&#39;s discovery setting. It must be set to one of &#x60;open&#x60;, &#x60;invite_only&#x60;, &#x60;closed&#x60;, or &#x60;unlisted&#x60;.
  # @param team_id The ID of the workspace to set discoverability on.
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_teams_settings_set_discoverability test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_teams_settings_set_icon
  # Sets the icon of a workspace.
  # @param image_url Image URL for the icon
  # @param team_id ID for the workspace to set the icon for.
  # @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_teams_settings_set_icon test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_teams_settings_set_name
  # Set the name of a given workspace.
  # @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
  # @param name The new name of the workspace.
  # @param team_id ID for the workspace to set the name for.
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_teams_settings_set_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_usergroups_add_channels
  # Add one or more default channels to an IDP group.
  # @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
  # @param channel_ids Comma separated string of channel IDs.
  # @param usergroup_id ID of the IDP group to add default channels for.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id The workspace to add default channels in.
  # @return [DefaultSuccessTemplate]
  describe 'admin_usergroups_add_channels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_usergroups_add_teams
  # Associate one or more default workspaces with an organization-wide IDP group.
  # @param token Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
  # @param team_ids A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
  # @param usergroup_id An encoded usergroup (IDP Group) ID.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members.
  # @return [DefaultSuccessTemplate]
  describe 'admin_usergroups_add_teams test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_usergroups_list_channels
  # List the channels linked to an org-level IDP group (user group).
  # @param token Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60;
  # @param usergroup_id ID of the IDP group to list default channels for.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team_id ID of the the workspace.
  # @option opts [Boolean] :include_num_members Flag to include or exclude the count of members per channel.
  # @return [DefaultSuccessTemplate]
  describe 'admin_usergroups_list_channels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_usergroups_remove_channels
  # Remove one or more default channels from an org-level IDP group (user group).
  # @param token Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
  # @param channel_ids Comma-separated string of channel IDs
  # @param usergroup_id ID of the IDP Group
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_usergroups_remove_channels test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_users_assign
  # Add an Enterprise user to a workspace.
  # @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
  # @param team_id The ID (&#x60;T1234&#x60;) of the workspace.
  # @param user_id The ID of the user to add to the workspace.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :channel_ids Comma separated values of channel IDs to add user in the new workspace.
  # @option opts [Boolean] :is_restricted True if user should be added to the workspace as a guest.
  # @option opts [Boolean] :is_ultra_restricted True if user should be added to the workspace as a single-channel guest.
  # @return [DefaultSuccessTemplate]
  describe 'admin_users_assign test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_users_invite
  # Invite a user to a workspace.
  # @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
  # @param channel_ids A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required.
  # @param email The email address of the person to invite.
  # @param team_id The ID (&#x60;T1234&#x60;) of the workspace.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :custom_message An optional message to send to the user in the invite email.
  # @option opts [String] :guest_expiration_ts Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
  # @option opts [Boolean] :is_restricted Is this user a multi-channel guest user? (default: false)
  # @option opts [Boolean] :is_ultra_restricted Is this user a single channel guest user? (default: false)
  # @option opts [String] :real_name Full name of the user.
  # @option opts [Boolean] :resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
  # @return [DefaultSuccessTemplate]
  describe 'admin_users_invite test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_users_list
  # List users on a workspace
  # @param token Authentication token. Requires scope: &#x60;admin.users:read&#x60;
  # @param team_id The ID (&#x60;T1234&#x60;) of the workspace.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
  # @option opts [Integer] :limit Limit for how many users to be retrieved per page
  # @return [DefaultSuccessTemplate]
  describe 'admin_users_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_users_remove
  # Remove a user from a workspace.
  # @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
  # @param team_id The ID (&#x60;T1234&#x60;) of the workspace.
  # @param user_id The ID of the user to remove.
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_users_remove test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_users_session_invalidate
  # Invalidate a single session for a user by session_id
  # @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
  # @param session_id 
  # @param team_id ID of the team that the session belongs to
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_users_session_invalidate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_users_session_reset
  # Wipes all valid sessions on all devices for a given user
  # @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
  # @param user_id The ID of the user to wipe sessions for
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :mobile_only Only expire mobile sessions (default: false)
  # @option opts [Boolean] :web_only Only expire web sessions (default: false)
  # @return [DefaultSuccessTemplate]
  describe 'admin_users_session_reset test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_users_set_admin
  # Set an existing guest, regular user, or owner to be an admin user.
  # @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
  # @param team_id The ID (&#x60;T1234&#x60;) of the workspace.
  # @param user_id The ID of the user to designate as an admin.
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_users_set_admin test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_users_set_expiration
  # Set an expiration for a guest user
  # @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
  # @param expiration_ts Timestamp when guest account should be disabled.
  # @param team_id The ID (&#x60;T1234&#x60;) of the workspace.
  # @param user_id The ID of the user to set an expiration for.
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_users_set_expiration test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_users_set_owner
  # Set an existing guest, regular user, or admin user to be a workspace owner.
  # @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
  # @param team_id The ID (&#x60;T1234&#x60;) of the workspace.
  # @param user_id Id of the user to promote to owner.
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_users_set_owner test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for admin_users_set_regular
  # Set an existing guest user, admin user, or owner to be a regular user.
  # @param token Authentication token. Requires scope: &#x60;admin.users:write&#x60;
  # @param team_id The ID (&#x60;T1234&#x60;) of the workspace.
  # @param user_id The ID of the user to designate as a regular user.
  # @param [Hash] opts the optional parameters
  # @return [DefaultSuccessTemplate]
  describe 'admin_users_set_regular test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
