=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for slack::TeamApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'TeamApi' do
  before do
    # run before each test
    @api_instance = slack::TeamApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TeamApi' do
    it 'should create an instance of TeamApi' do
      expect(@api_instance).to be_instance_of(slack::TeamApi)
    end
  end

  # unit tests for team_access_logs
  # Gets the access logs for the current team.
  # @param token Authentication token. Requires scope: &#x60;admin&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :before End of time range of logs to include in results (inclusive).
  # @option opts [String] :count 
  # @option opts [String] :page 
  # @return [TeamAccessLogsSchema]
  describe 'team_access_logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for team_billable_info
  # Gets billable users information for the current team.
  # @param token Authentication token. Requires scope: &#x60;admin&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :user A user to retrieve the billable information for. Defaults to all users.
  # @return [DefaultSuccessTemplate]
  describe 'team_billable_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for team_info
  # Gets information about the current team.
  # @param token Authentication token. Requires scope: &#x60;team:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :team Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels
  # @return [TeamInfoSchema]
  describe 'team_info test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for team_integration_logs
  # Gets the integration logs for the current team.
  # @param token Authentication token. Requires scope: &#x60;admin&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :app_id Filter logs to this Slack app. Defaults to all logs.
  # @option opts [String] :change_type Filter logs with this change type. Defaults to all logs.
  # @option opts [String] :count 
  # @option opts [String] :page 
  # @option opts [String] :service_id Filter logs to this service. Defaults to all logs.
  # @option opts [String] :user Filter logs generated by this userâ€™s actions. Defaults to all logs.
  # @return [TeamIntegrationLogsSchema]
  describe 'team_integration_logs test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for team_profile_get
  # Retrieve a team&#39;s profile.
  # @param token Authentication token. Requires scope: &#x60;users.profile:read&#x60;
  # @param [Hash] opts the optional parameters
  # @option opts [String] :visibility Filter by visibility.
  # @return [TeamProfileGetSuccessSchema]
  describe 'team_profile_get test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
