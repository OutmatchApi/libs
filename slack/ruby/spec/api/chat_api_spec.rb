=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'spec_helper'
require 'json'

# Unit tests for slack::ChatApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ChatApi' do
  before do
    # run before each test
    @api_instance = slack::ChatApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ChatApi' do
    it 'should create an instance of ChatApi' do
      expect(@api_instance).to be_instance_of(slack::ChatApi)
    end
  end

  # unit tests for chat_delete
  # Deletes a message.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token Authentication token. Requires scope: &#x60;chat:write&#x60;
  # @option opts [Boolean] :as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope.
  # @option opts [String] :channel Channel containing the message to be deleted.
  # @option opts [Float] :ts Timestamp of the message to be deleted.
  # @return [ChatDeleteSuccessSchema]
  describe 'chat_delete test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for chat_delete_scheduled_message
  # Deletes a pending scheduled message from the queue.
  # @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
  # @param channel The channel the scheduled_message is posting to
  # @param scheduled_message_id &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope.
  # @return [ChatDeleteScheduledMessageSchema]
  describe 'chat_delete_scheduled_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for chat_get_permalink
  # Retrieve a permalink URL for a specific extant message
  # @param token Authentication token. Requires scope: &#x60;none&#x60;
  # @param channel The ID of the conversation or channel containing the message
  # @param message_ts A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel
  # @param [Hash] opts the optional parameters
  # @return [ChatGetPermalinkSuccessSchema]
  describe 'chat_get_permalink test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for chat_me_message
  # Share a me message into a channel.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token Authentication token. Requires scope: &#x60;chat:write&#x60;
  # @option opts [String] :channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.
  # @option opts [String] :text Text of the message to send.
  # @return [ChatMeMessageSchema]
  describe 'chat_me_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for chat_post_ephemeral
  # Sends an ephemeral message to a user in a channel.
  # @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
  # @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.
  # @param user &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :as_user Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.
  # @option opts [String] :attachments A JSON-based array of structured attachments, presented as a URL-encoded string.
  # @option opts [String] :blocks A JSON-based array of structured blocks, presented as a URL-encoded string.
  # @option opts [String] :icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below.
  # @option opts [String] :icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below.
  # @option opts [Boolean] :link_names Find and link channel names and usernames.
  # @option opts [String] :parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting).
  # @option opts [String] :text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
  # @option opts [String] :thread_ts Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread.
  # @option opts [String] :username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below.
  # @return [ChatPostEphemeralSuccessSchema]
  describe 'chat_post_ephemeral test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for chat_post_message
  # Sends a message to a channel.
  # @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
  # @param channel Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.
  # @option opts [String] :attachments A JSON-based array of structured attachments, presented as a URL-encoded string.
  # @option opts [String] :blocks A JSON-based array of structured blocks, presented as a URL-encoded string.
  # @option opts [String] :icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below.
  # @option opts [String] :icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below.
  # @option opts [Boolean] :link_names Find and link channel names and usernames.
  # @option opts [Boolean] :mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default.
  # @option opts [String] :parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting).
  # @option opts [Boolean] :reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;.
  # @option opts [String] :text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
  # @option opts [String] :thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead.
  # @option opts [Boolean] :unfurl_links Pass true to enable unfurling of primarily text-based content.
  # @option opts [Boolean] :unfurl_media Pass false to disable unfurling of media content.
  # @option opts [String] :username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below.
  # @return [ChatPostMessageSuccessSchema]
  describe 'chat_post_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for chat_schedule_message
  # Schedules a message to be sent to a channel.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token Authentication token. Requires scope: &#x60;chat:write&#x60;
  # @option opts [Boolean] :as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship).
  # @option opts [String] :attachments A JSON-based array of structured attachments, presented as a URL-encoded string.
  # @option opts [String] :blocks A JSON-based array of structured blocks, presented as a URL-encoded string.
  # @option opts [String] :channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
  # @option opts [Boolean] :link_names Find and link channel names and usernames.
  # @option opts [String] :parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting).
  # @option opts [String] :post_at Unix EPOCH timestamp of time in future to send the message.
  # @option opts [Boolean] :reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;.
  # @option opts [String] :text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
  # @option opts [Float] :thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead.
  # @option opts [Boolean] :unfurl_links Pass true to enable unfurling of primarily text-based content.
  # @option opts [Boolean] :unfurl_media Pass false to disable unfurling of media content.
  # @return [ChatScheduleMessageSuccessSchema]
  describe 'chat_schedule_message test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for chat_scheduled_messages_list
  # Returns a list of scheduled messages.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :token Authentication token. Requires scope: &#x60;none&#x60;
  # @option opts [String] :channel The channel of the scheduled messages
  # @option opts [Float] :latest A UNIX timestamp of the latest value in the time range
  # @option opts [Float] :oldest A UNIX timestamp of the oldest value in the time range
  # @option opts [Integer] :limit Maximum number of original entries to return.
  # @option opts [String] :cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from.
  # @return [ChatScheduledMessagesListSchema]
  describe 'chat_scheduled_messages_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for chat_unfurl
  # Provide custom unfurl behavior for user-posted URLs
  # @param token Authentication token. Requires scope: &#x60;links:write&#x60;
  # @param channel Channel ID of the message
  # @param ts Timestamp of the message to add unfurl behavior to.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.
  # @option opts [String] :user_auth_message Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior
  # @option opts [Boolean] :user_auth_required Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain
  # @option opts [String] :user_auth_url Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.
  # @return [ChatUnfurlSuccessSchema]
  describe 'chat_unfurl test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for chat_update
  # Updates a message.
  # @param token Authentication token. Requires scope: &#x60;chat:write&#x60;
  # @param channel Channel containing the message to be updated.
  # @param ts Timestamp of the message to be updated.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :as_user Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.
  # @option opts [String] :attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field.
  # @option opts [String] :blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field.
  # @option opts [String] :link_names Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;.
  # @option opts [String] :parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;.
  # @option opts [String] :text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;.
  # @return [ChatUpdateSuccessSchema]
  describe 'chat_update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
