=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module slack
  class ObjsTeam
    attr_accessor :archived

    attr_accessor :avatar_base_url

    attr_accessor :created

    attr_accessor :date_create

    attr_accessor :deleted

    attr_accessor :description

    attr_accessor :discoverable

    attr_accessor :domain

    attr_accessor :email_domain

    attr_accessor :enterprise_id

    attr_accessor :enterprise_name

    attr_accessor :external_org_migrations

    attr_accessor :has_compliance_export

    attr_accessor :icon

    attr_accessor :id

    attr_accessor :is_assigned

    attr_accessor :is_enterprise

    attr_accessor :is_over_storage_limit

    attr_accessor :limit_ts

    attr_accessor :locale

    attr_accessor :messages_count

    attr_accessor :msg_edit_window_mins

    attr_accessor :name

    attr_accessor :over_integrations_limit

    attr_accessor :over_storage_limit

    attr_accessor :pay_prod_cur

    attr_accessor :plan

    attr_accessor :primary_owner

    attr_accessor :sso_provider

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'archived' => :'archived',
        :'avatar_base_url' => :'avatar_base_url',
        :'created' => :'created',
        :'date_create' => :'date_create',
        :'deleted' => :'deleted',
        :'description' => :'description',
        :'discoverable' => :'discoverable',
        :'domain' => :'domain',
        :'email_domain' => :'email_domain',
        :'enterprise_id' => :'enterprise_id',
        :'enterprise_name' => :'enterprise_name',
        :'external_org_migrations' => :'external_org_migrations',
        :'has_compliance_export' => :'has_compliance_export',
        :'icon' => :'icon',
        :'id' => :'id',
        :'is_assigned' => :'is_assigned',
        :'is_enterprise' => :'is_enterprise',
        :'is_over_storage_limit' => :'is_over_storage_limit',
        :'limit_ts' => :'limit_ts',
        :'locale' => :'locale',
        :'messages_count' => :'messages_count',
        :'msg_edit_window_mins' => :'msg_edit_window_mins',
        :'name' => :'name',
        :'over_integrations_limit' => :'over_integrations_limit',
        :'over_storage_limit' => :'over_storage_limit',
        :'pay_prod_cur' => :'pay_prod_cur',
        :'plan' => :'plan',
        :'primary_owner' => :'primary_owner',
        :'sso_provider' => :'sso_provider'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'archived' => :'Boolean',
        :'avatar_base_url' => :'String',
        :'created' => :'Integer',
        :'date_create' => :'Integer',
        :'deleted' => :'Boolean',
        :'description' => :'String',
        :'discoverable' => :'Array<ObjsTeamDiscoverableInner>',
        :'domain' => :'String',
        :'email_domain' => :'String',
        :'enterprise_id' => :'String',
        :'enterprise_name' => :'String',
        :'external_org_migrations' => :'ObjsExternalOrgMigrations',
        :'has_compliance_export' => :'Boolean',
        :'icon' => :'ObjsIcon',
        :'id' => :'String',
        :'is_assigned' => :'Boolean',
        :'is_enterprise' => :'Integer',
        :'is_over_storage_limit' => :'Boolean',
        :'limit_ts' => :'Integer',
        :'locale' => :'String',
        :'messages_count' => :'Integer',
        :'msg_edit_window_mins' => :'Integer',
        :'name' => :'String',
        :'over_integrations_limit' => :'Boolean',
        :'over_storage_limit' => :'Boolean',
        :'pay_prod_cur' => :'String',
        :'plan' => :'String',
        :'primary_owner' => :'ObjsPrimaryOwner',
        :'sso_provider' => :'ObjsTeamSsoProvider'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'description',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `slack::ObjsTeam` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `slack::ObjsTeam`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'archived')
        self.archived = attributes[:'archived']
      end

      if attributes.key?(:'avatar_base_url')
        self.avatar_base_url = attributes[:'avatar_base_url']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'date_create')
        self.date_create = attributes[:'date_create']
      end

      if attributes.key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'discoverable')
        if (value = attributes[:'discoverable']).is_a?(Array)
          self.discoverable = value
        end
      end

      if attributes.key?(:'domain')
        self.domain = attributes[:'domain']
      end

      if attributes.key?(:'email_domain')
        self.email_domain = attributes[:'email_domain']
      end

      if attributes.key?(:'enterprise_id')
        self.enterprise_id = attributes[:'enterprise_id']
      end

      if attributes.key?(:'enterprise_name')
        self.enterprise_name = attributes[:'enterprise_name']
      end

      if attributes.key?(:'external_org_migrations')
        self.external_org_migrations = attributes[:'external_org_migrations']
      end

      if attributes.key?(:'has_compliance_export')
        self.has_compliance_export = attributes[:'has_compliance_export']
      end

      if attributes.key?(:'icon')
        self.icon = attributes[:'icon']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'is_assigned')
        self.is_assigned = attributes[:'is_assigned']
      end

      if attributes.key?(:'is_enterprise')
        self.is_enterprise = attributes[:'is_enterprise']
      end

      if attributes.key?(:'is_over_storage_limit')
        self.is_over_storage_limit = attributes[:'is_over_storage_limit']
      end

      if attributes.key?(:'limit_ts')
        self.limit_ts = attributes[:'limit_ts']
      end

      if attributes.key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.key?(:'messages_count')
        self.messages_count = attributes[:'messages_count']
      end

      if attributes.key?(:'msg_edit_window_mins')
        self.msg_edit_window_mins = attributes[:'msg_edit_window_mins']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'over_integrations_limit')
        self.over_integrations_limit = attributes[:'over_integrations_limit']
      end

      if attributes.key?(:'over_storage_limit')
        self.over_storage_limit = attributes[:'over_storage_limit']
      end

      if attributes.key?(:'pay_prod_cur')
        self.pay_prod_cur = attributes[:'pay_prod_cur']
      end

      if attributes.key?(:'plan')
        self.plan = attributes[:'plan']
      end

      if attributes.key?(:'primary_owner')
        self.primary_owner = attributes[:'primary_owner']
      end

      if attributes.key?(:'sso_provider')
        self.sso_provider = attributes[:'sso_provider']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @domain.nil?
        invalid_properties.push('invalid value for "domain", domain cannot be nil.')
      end

      if @email_domain.nil?
        invalid_properties.push('invalid value for "email_domain", email_domain cannot be nil.')
      end

      pattern = Regexp.new(/^[E][A-Z0-9]{8,}$/)
      if !@enterprise_id.nil? && @enterprise_id !~ pattern
        invalid_properties.push("invalid value for \"enterprise_id\", must conform to the pattern #{pattern}.")
      end

      if @icon.nil?
        invalid_properties.push('invalid value for "icon", icon cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if @id !~ pattern
        invalid_properties.push("invalid value for \"id\", must conform to the pattern #{pattern}.")
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @domain.nil?
      return false if @email_domain.nil?
      return false if !@enterprise_id.nil? && @enterprise_id !~ Regexp.new(/^[E][A-Z0-9]{8,}$/)
      return false if @icon.nil?
      return false if @id.nil?
      return false if @id !~ Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      return false if @name.nil?
      plan_validator = EnumAttributeValidator.new('String', ["", "std", "plus", "compliance", "enterprise"])
      return false unless plan_validator.valid?(@plan)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] enterprise_id Value to be assigned
    def enterprise_id=(enterprise_id)
      pattern = Regexp.new(/^[E][A-Z0-9]{8,}$/)
      if !enterprise_id.nil? && enterprise_id !~ pattern
        fail ArgumentError, "invalid value for \"enterprise_id\", must conform to the pattern #{pattern}."
      end

      @enterprise_id = enterprise_id
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if id !~ pattern
        fail ArgumentError, "invalid value for \"id\", must conform to the pattern #{pattern}."
      end

      @id = id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] plan Object to be assigned
    def plan=(plan)
      validator = EnumAttributeValidator.new('String', ["", "std", "plus", "compliance", "enterprise"])
      unless validator.valid?(plan)
        fail ArgumentError, "invalid value for \"plan\", must be one of #{validator.allowable_values}."
      end
      @plan = plan
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          archived == o.archived &&
          avatar_base_url == o.avatar_base_url &&
          created == o.created &&
          date_create == o.date_create &&
          deleted == o.deleted &&
          description == o.description &&
          discoverable == o.discoverable &&
          domain == o.domain &&
          email_domain == o.email_domain &&
          enterprise_id == o.enterprise_id &&
          enterprise_name == o.enterprise_name &&
          external_org_migrations == o.external_org_migrations &&
          has_compliance_export == o.has_compliance_export &&
          icon == o.icon &&
          id == o.id &&
          is_assigned == o.is_assigned &&
          is_enterprise == o.is_enterprise &&
          is_over_storage_limit == o.is_over_storage_limit &&
          limit_ts == o.limit_ts &&
          locale == o.locale &&
          messages_count == o.messages_count &&
          msg_edit_window_mins == o.msg_edit_window_mins &&
          name == o.name &&
          over_integrations_limit == o.over_integrations_limit &&
          over_storage_limit == o.over_storage_limit &&
          pay_prod_cur == o.pay_prod_cur &&
          plan == o.plan &&
          primary_owner == o.primary_owner &&
          sso_provider == o.sso_provider
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [archived, avatar_base_url, created, date_create, deleted, description, discoverable, domain, email_domain, enterprise_id, enterprise_name, external_org_migrations, has_compliance_export, icon, id, is_assigned, is_enterprise, is_over_storage_limit, limit_ts, locale, messages_count, msg_edit_window_mins, name, over_integrations_limit, over_storage_limit, pay_prod_cur, plan, primary_owner, sso_provider].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = slack.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
