=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module slack
  class UsersIdentitySchemaInnerAnyOf3Team
    attr_accessor :domain

    attr_accessor :id

    attr_accessor :image_102

    attr_accessor :image_132

    attr_accessor :image_230

    attr_accessor :image_34

    attr_accessor :image_44

    attr_accessor :image_68

    attr_accessor :image_88

    attr_accessor :image_default

    attr_accessor :name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'domain' => :'domain',
        :'id' => :'id',
        :'image_102' => :'image_102',
        :'image_132' => :'image_132',
        :'image_230' => :'image_230',
        :'image_34' => :'image_34',
        :'image_44' => :'image_44',
        :'image_68' => :'image_68',
        :'image_88' => :'image_88',
        :'image_default' => :'image_default',
        :'name' => :'name'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'domain' => :'String',
        :'id' => :'String',
        :'image_102' => :'String',
        :'image_132' => :'String',
        :'image_230' => :'String',
        :'image_34' => :'String',
        :'image_44' => :'String',
        :'image_68' => :'String',
        :'image_88' => :'String',
        :'image_default' => :'Boolean',
        :'name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `slack::UsersIdentitySchemaInnerAnyOf3Team` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `slack::UsersIdentitySchemaInnerAnyOf3Team`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'domain')
        self.domain = attributes[:'domain']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'image_102')
        self.image_102 = attributes[:'image_102']
      end

      if attributes.key?(:'image_132')
        self.image_132 = attributes[:'image_132']
      end

      if attributes.key?(:'image_230')
        self.image_230 = attributes[:'image_230']
      end

      if attributes.key?(:'image_34')
        self.image_34 = attributes[:'image_34']
      end

      if attributes.key?(:'image_44')
        self.image_44 = attributes[:'image_44']
      end

      if attributes.key?(:'image_68')
        self.image_68 = attributes[:'image_68']
      end

      if attributes.key?(:'image_88')
        self.image_88 = attributes[:'image_88']
      end

      if attributes.key?(:'image_default')
        self.image_default = attributes[:'image_default']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @domain.nil?
        invalid_properties.push('invalid value for "domain", domain cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      pattern = Regexp.new(/^[T][A-Z0-9]{2,}$/)
      if @id !~ pattern
        invalid_properties.push("invalid value for \"id\", must conform to the pattern #{pattern}.")
      end

      if @image_102.nil?
        invalid_properties.push('invalid value for "image_102", image_102 cannot be nil.')
      end

      if @image_132.nil?
        invalid_properties.push('invalid value for "image_132", image_132 cannot be nil.')
      end

      if @image_230.nil?
        invalid_properties.push('invalid value for "image_230", image_230 cannot be nil.')
      end

      if @image_34.nil?
        invalid_properties.push('invalid value for "image_34", image_34 cannot be nil.')
      end

      if @image_44.nil?
        invalid_properties.push('invalid value for "image_44", image_44 cannot be nil.')
      end

      if @image_68.nil?
        invalid_properties.push('invalid value for "image_68", image_68 cannot be nil.')
      end

      if @image_88.nil?
        invalid_properties.push('invalid value for "image_88", image_88 cannot be nil.')
      end

      if @image_default.nil?
        invalid_properties.push('invalid value for "image_default", image_default cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @domain.nil?
      return false if @id.nil?
      return false if @id !~ Regexp.new(/^[T][A-Z0-9]{2,}$/)
      return false if @image_102.nil?
      return false if @image_132.nil?
      return false if @image_230.nil?
      return false if @image_34.nil?
      return false if @image_44.nil?
      return false if @image_68.nil?
      return false if @image_88.nil?
      return false if @image_default.nil?
      return false if @name.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      pattern = Regexp.new(/^[T][A-Z0-9]{2,}$/)
      if id !~ pattern
        fail ArgumentError, "invalid value for \"id\", must conform to the pattern #{pattern}."
      end

      @id = id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          domain == o.domain &&
          id == o.id &&
          image_102 == o.image_102 &&
          image_132 == o.image_132 &&
          image_230 == o.image_230 &&
          image_34 == o.image_34 &&
          image_44 == o.image_44 &&
          image_68 == o.image_68 &&
          image_88 == o.image_88 &&
          image_default == o.image_default &&
          name == o.name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [domain, id, image_102, image_132, image_230, image_34, image_44, image_68, image_88, image_default, name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = slack.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
