=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module slack
  class ObjsUserInner
    # refercing to bug: https://jira.tinyspeck.com/browse/EVALUE-1559
    attr_accessor :color

    attr_accessor :deleted

    attr_accessor :enterprise_user

    attr_accessor :has_2fa

    attr_accessor :id

    attr_accessor :is_admin

    attr_accessor :is_app_user

    attr_accessor :is_bot

    attr_accessor :is_external

    attr_accessor :is_forgotten

    attr_accessor :is_invited_user

    attr_accessor :is_owner

    attr_accessor :is_primary_owner

    attr_accessor :is_restricted

    attr_accessor :is_stranger

    attr_accessor :is_ultra_restricted

    attr_accessor :locale

    attr_accessor :name

    attr_accessor :presence

    attr_accessor :profile

    attr_accessor :real_name

    attr_accessor :team

    attr_accessor :team_id

    attr_accessor :team_profile

    attr_accessor :two_factor_type

    attr_accessor :tz

    attr_accessor :tz_label

    attr_accessor :tz_offset

    attr_accessor :updated

    attr_accessor :teams

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'color' => :'color',
        :'deleted' => :'deleted',
        :'enterprise_user' => :'enterprise_user',
        :'has_2fa' => :'has_2fa',
        :'id' => :'id',
        :'is_admin' => :'is_admin',
        :'is_app_user' => :'is_app_user',
        :'is_bot' => :'is_bot',
        :'is_external' => :'is_external',
        :'is_forgotten' => :'is_forgotten',
        :'is_invited_user' => :'is_invited_user',
        :'is_owner' => :'is_owner',
        :'is_primary_owner' => :'is_primary_owner',
        :'is_restricted' => :'is_restricted',
        :'is_stranger' => :'is_stranger',
        :'is_ultra_restricted' => :'is_ultra_restricted',
        :'locale' => :'locale',
        :'name' => :'name',
        :'presence' => :'presence',
        :'profile' => :'profile',
        :'real_name' => :'real_name',
        :'team' => :'team',
        :'team_id' => :'team_id',
        :'team_profile' => :'team_profile',
        :'two_factor_type' => :'two_factor_type',
        :'tz' => :'tz',
        :'tz_label' => :'tz_label',
        :'tz_offset' => :'tz_offset',
        :'updated' => :'updated',
        :'teams' => :'teams'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'color' => :'String',
        :'deleted' => :'Boolean',
        :'enterprise_user' => :'ObjsEnterpriseUser',
        :'has_2fa' => :'Boolean',
        :'id' => :'String',
        :'is_admin' => :'Boolean',
        :'is_app_user' => :'Boolean',
        :'is_bot' => :'Boolean',
        :'is_external' => :'Boolean',
        :'is_forgotten' => :'Boolean',
        :'is_invited_user' => :'Boolean',
        :'is_owner' => :'Boolean',
        :'is_primary_owner' => :'Boolean',
        :'is_restricted' => :'Boolean',
        :'is_stranger' => :'Boolean',
        :'is_ultra_restricted' => :'Boolean',
        :'locale' => :'String',
        :'name' => :'String',
        :'presence' => :'String',
        :'profile' => :'ObjsUserProfile',
        :'real_name' => :'String',
        :'team' => :'String',
        :'team_id' => :'String',
        :'team_profile' => :'ObjsUserInnerAnyOfTeamProfile',
        :'two_factor_type' => :'String',
        :'tz' => :'Array<ObjsTeamDiscoverableInner>',
        :'tz_label' => :'String',
        :'tz_offset' => :'Float',
        :'updated' => :'Float',
        :'teams' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
      :'ObjsUserInnerAnyOf',
      :'ObjsUserInnerAnyOf1'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `slack::ObjsUserInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `slack::ObjsUserInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.key?(:'enterprise_user')
        self.enterprise_user = attributes[:'enterprise_user']
      end

      if attributes.key?(:'has_2fa')
        self.has_2fa = attributes[:'has_2fa']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'is_admin')
        self.is_admin = attributes[:'is_admin']
      end

      if attributes.key?(:'is_app_user')
        self.is_app_user = attributes[:'is_app_user']
      end

      if attributes.key?(:'is_bot')
        self.is_bot = attributes[:'is_bot']
      end

      if attributes.key?(:'is_external')
        self.is_external = attributes[:'is_external']
      end

      if attributes.key?(:'is_forgotten')
        self.is_forgotten = attributes[:'is_forgotten']
      end

      if attributes.key?(:'is_invited_user')
        self.is_invited_user = attributes[:'is_invited_user']
      end

      if attributes.key?(:'is_owner')
        self.is_owner = attributes[:'is_owner']
      end

      if attributes.key?(:'is_primary_owner')
        self.is_primary_owner = attributes[:'is_primary_owner']
      end

      if attributes.key?(:'is_restricted')
        self.is_restricted = attributes[:'is_restricted']
      end

      if attributes.key?(:'is_stranger')
        self.is_stranger = attributes[:'is_stranger']
      end

      if attributes.key?(:'is_ultra_restricted')
        self.is_ultra_restricted = attributes[:'is_ultra_restricted']
      end

      if attributes.key?(:'locale')
        self.locale = attributes[:'locale']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'presence')
        self.presence = attributes[:'presence']
      end

      if attributes.key?(:'profile')
        self.profile = attributes[:'profile']
      end

      if attributes.key?(:'real_name')
        self.real_name = attributes[:'real_name']
      end

      if attributes.key?(:'team')
        self.team = attributes[:'team']
      end

      if attributes.key?(:'team_id')
        self.team_id = attributes[:'team_id']
      end

      if attributes.key?(:'team_profile')
        self.team_profile = attributes[:'team_profile']
      end

      if attributes.key?(:'two_factor_type')
        self.two_factor_type = attributes[:'two_factor_type']
      end

      if attributes.key?(:'tz')
        if (value = attributes[:'tz']).is_a?(Array)
          self.tz = value
        end
      end

      if attributes.key?(:'tz_label')
        self.tz_label = attributes[:'tz_label']
      end

      if attributes.key?(:'tz_offset')
        self.tz_offset = attributes[:'tz_offset']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.key?(:'teams')
        if (value = attributes[:'teams']).is_a?(Array)
          self.teams = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      pattern = Regexp.new(/^([a-fA-F0-9]{6})?$/)
      if !@color.nil? && @color !~ pattern
        invalid_properties.push("invalid value for \"color\", must conform to the pattern #{pattern}.")
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if @id !~ pattern
        invalid_properties.push("invalid value for \"id\", must conform to the pattern #{pattern}.")
      end

      if @is_app_user.nil?
        invalid_properties.push('invalid value for "is_app_user", is_app_user cannot be nil.')
      end

      if @is_bot.nil?
        invalid_properties.push('invalid value for "is_bot", is_bot cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @profile.nil?
        invalid_properties.push('invalid value for "profile", profile cannot be nil.')
      end

      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if !@team.nil? && @team !~ pattern
        invalid_properties.push("invalid value for \"team\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if !@team_id.nil? && @team_id !~ pattern
        invalid_properties.push("invalid value for \"team_id\", must conform to the pattern #{pattern}.")
      end

      if @updated.nil?
        invalid_properties.push('invalid value for "updated", updated cannot be nil.')
      end

      if !@teams.nil? && @teams.length < 1
        invalid_properties.push('invalid value for "teams", number of items must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@color.nil? && @color !~ Regexp.new(/^([a-fA-F0-9]{6})?$/)
      return false if @id.nil?
      return false if @id !~ Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      return false if @is_app_user.nil?
      return false if @is_bot.nil?
      return false if @name.nil?
      return false if @profile.nil?
      return false if !@team.nil? && @team !~ Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      return false if !@team_id.nil? && @team_id !~ Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      return false if @updated.nil?
      return false if !@teams.nil? && @teams.length < 1
      _any_of_found = false
      self.class.openapi_any_of.each do |_class|
        _any_of = slack.const_get(_class).build_from_hash(self.to_hash)
        if _any_of.valid?
          _any_of_found = true
        end
      end

      if !_any_of_found
        return false
      end

      true
    end

    # Custom attribute writer method with validation
    # @param [Object] color Value to be assigned
    def color=(color)
      pattern = Regexp.new(/^([a-fA-F0-9]{6})?$/)
      if !color.nil? && color !~ pattern
        fail ArgumentError, "invalid value for \"color\", must conform to the pattern #{pattern}."
      end

      @color = color
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if id !~ pattern
        fail ArgumentError, "invalid value for \"id\", must conform to the pattern #{pattern}."
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] team Value to be assigned
    def team=(team)
      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if !team.nil? && team !~ pattern
        fail ArgumentError, "invalid value for \"team\", must conform to the pattern #{pattern}."
      end

      @team = team
    end

    # Custom attribute writer method with validation
    # @param [Object] team_id Value to be assigned
    def team_id=(team_id)
      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if !team_id.nil? && team_id !~ pattern
        fail ArgumentError, "invalid value for \"team_id\", must conform to the pattern #{pattern}."
      end

      @team_id = team_id
    end

    # Custom attribute writer method with validation
    # @param [Object] teams Value to be assigned
    def teams=(teams)
      if !teams.nil? && teams.length < 1
        fail ArgumentError, 'invalid value for "teams", number of items must be greater than or equal to 1.'
      end

      @teams = teams
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          color == o.color &&
          deleted == o.deleted &&
          enterprise_user == o.enterprise_user &&
          has_2fa == o.has_2fa &&
          id == o.id &&
          is_admin == o.is_admin &&
          is_app_user == o.is_app_user &&
          is_bot == o.is_bot &&
          is_external == o.is_external &&
          is_forgotten == o.is_forgotten &&
          is_invited_user == o.is_invited_user &&
          is_owner == o.is_owner &&
          is_primary_owner == o.is_primary_owner &&
          is_restricted == o.is_restricted &&
          is_stranger == o.is_stranger &&
          is_ultra_restricted == o.is_ultra_restricted &&
          locale == o.locale &&
          name == o.name &&
          presence == o.presence &&
          profile == o.profile &&
          real_name == o.real_name &&
          team == o.team &&
          team_id == o.team_id &&
          team_profile == o.team_profile &&
          two_factor_type == o.two_factor_type &&
          tz == o.tz &&
          tz_label == o.tz_label &&
          tz_offset == o.tz_offset &&
          updated == o.updated &&
          teams == o.teams
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [color, deleted, enterprise_user, has_2fa, id, is_admin, is_app_user, is_bot, is_external, is_forgotten, is_invited_user, is_owner, is_primary_owner, is_restricted, is_stranger, is_ultra_restricted, locale, name, presence, profile, real_name, team, team_id, team_profile, two_factor_type, tz, tz_label, tz_offset, updated, teams].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = slack.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
