=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module slack
  class ObjsMessage
    attr_accessor :attachments

    # This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.
    attr_accessor :blocks

    attr_accessor :bot_id

    attr_accessor :bot_profile

    attr_accessor :client_msg_id

    attr_accessor :comment

    attr_accessor :display_as_bot

    attr_accessor :file

    attr_accessor :files

    attr_accessor :icons

    attr_accessor :inviter

    attr_accessor :is_delayed_message

    attr_accessor :is_intro

    attr_accessor :is_starred

    attr_accessor :last_read

    attr_accessor :latest_reply

    attr_accessor :name

    attr_accessor :old_name

    attr_accessor :parent_user_id

    attr_accessor :permalink

    attr_accessor :pinned_to

    attr_accessor :purpose

    attr_accessor :reactions

    attr_accessor :reply_count

    attr_accessor :reply_users

    attr_accessor :reply_users_count

    attr_accessor :source_team

    attr_accessor :subscribed

    attr_accessor :subtype

    attr_accessor :team

    attr_accessor :text

    attr_accessor :thread_ts

    attr_accessor :topic

    attr_accessor :ts

    attr_accessor :type

    attr_accessor :unread_count

    attr_accessor :upload

    attr_accessor :user

    attr_accessor :user_profile

    attr_accessor :user_team

    attr_accessor :username

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'attachments' => :'attachments',
        :'blocks' => :'blocks',
        :'bot_id' => :'bot_id',
        :'bot_profile' => :'bot_profile',
        :'client_msg_id' => :'client_msg_id',
        :'comment' => :'comment',
        :'display_as_bot' => :'display_as_bot',
        :'file' => :'file',
        :'files' => :'files',
        :'icons' => :'icons',
        :'inviter' => :'inviter',
        :'is_delayed_message' => :'is_delayed_message',
        :'is_intro' => :'is_intro',
        :'is_starred' => :'is_starred',
        :'last_read' => :'last_read',
        :'latest_reply' => :'latest_reply',
        :'name' => :'name',
        :'old_name' => :'old_name',
        :'parent_user_id' => :'parent_user_id',
        :'permalink' => :'permalink',
        :'pinned_to' => :'pinned_to',
        :'purpose' => :'purpose',
        :'reactions' => :'reactions',
        :'reply_count' => :'reply_count',
        :'reply_users' => :'reply_users',
        :'reply_users_count' => :'reply_users_count',
        :'source_team' => :'source_team',
        :'subscribed' => :'subscribed',
        :'subtype' => :'subtype',
        :'team' => :'team',
        :'text' => :'text',
        :'thread_ts' => :'thread_ts',
        :'topic' => :'topic',
        :'ts' => :'ts',
        :'type' => :'type',
        :'unread_count' => :'unread_count',
        :'upload' => :'upload',
        :'user' => :'user',
        :'user_profile' => :'user_profile',
        :'user_team' => :'user_team',
        :'username' => :'username'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'attachments' => :'Array<ObjsMessageAttachmentsInner>',
        :'blocks' => :'Array<BlocksInner>',
        :'bot_id' => :'Array<ObjsMessageBotIdInner>',
        :'bot_profile' => :'ObjsBotProfile',
        :'client_msg_id' => :'String',
        :'comment' => :'ObjsComment',
        :'display_as_bot' => :'Boolean',
        :'file' => :'ObjsFile',
        :'files' => :'Array<ObjsFile>',
        :'icons' => :'ObjsMessageIcons',
        :'inviter' => :'String',
        :'is_delayed_message' => :'Boolean',
        :'is_intro' => :'Boolean',
        :'is_starred' => :'Boolean',
        :'last_read' => :'String',
        :'latest_reply' => :'String',
        :'name' => :'String',
        :'old_name' => :'String',
        :'parent_user_id' => :'String',
        :'permalink' => :'String',
        :'pinned_to' => :'Array<String>',
        :'purpose' => :'String',
        :'reactions' => :'Array<ObjsReaction>',
        :'reply_count' => :'Integer',
        :'reply_users' => :'Array<String>',
        :'reply_users_count' => :'Integer',
        :'source_team' => :'String',
        :'subscribed' => :'Boolean',
        :'subtype' => :'String',
        :'team' => :'String',
        :'text' => :'String',
        :'thread_ts' => :'String',
        :'topic' => :'String',
        :'ts' => :'String',
        :'type' => :'String',
        :'unread_count' => :'Integer',
        :'upload' => :'Boolean',
        :'user' => :'String',
        :'user_profile' => :'ObjsUserProfileShort',
        :'user_team' => :'String',
        :'username' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `slack::ObjsMessage` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `slack::ObjsMessage`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'attachments')
        if (value = attributes[:'attachments']).is_a?(Array)
          self.attachments = value
        end
      end

      if attributes.key?(:'blocks')
        if (value = attributes[:'blocks']).is_a?(Array)
          self.blocks = value
        end
      end

      if attributes.key?(:'bot_id')
        if (value = attributes[:'bot_id']).is_a?(Array)
          self.bot_id = value
        end
      end

      if attributes.key?(:'bot_profile')
        self.bot_profile = attributes[:'bot_profile']
      end

      if attributes.key?(:'client_msg_id')
        self.client_msg_id = attributes[:'client_msg_id']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'display_as_bot')
        self.display_as_bot = attributes[:'display_as_bot']
      end

      if attributes.key?(:'file')
        self.file = attributes[:'file']
      end

      if attributes.key?(:'files')
        if (value = attributes[:'files']).is_a?(Array)
          self.files = value
        end
      end

      if attributes.key?(:'icons')
        self.icons = attributes[:'icons']
      end

      if attributes.key?(:'inviter')
        self.inviter = attributes[:'inviter']
      end

      if attributes.key?(:'is_delayed_message')
        self.is_delayed_message = attributes[:'is_delayed_message']
      end

      if attributes.key?(:'is_intro')
        self.is_intro = attributes[:'is_intro']
      end

      if attributes.key?(:'is_starred')
        self.is_starred = attributes[:'is_starred']
      end

      if attributes.key?(:'last_read')
        self.last_read = attributes[:'last_read']
      end

      if attributes.key?(:'latest_reply')
        self.latest_reply = attributes[:'latest_reply']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'old_name')
        self.old_name = attributes[:'old_name']
      end

      if attributes.key?(:'parent_user_id')
        self.parent_user_id = attributes[:'parent_user_id']
      end

      if attributes.key?(:'permalink')
        self.permalink = attributes[:'permalink']
      end

      if attributes.key?(:'pinned_to')
        if (value = attributes[:'pinned_to']).is_a?(Array)
          self.pinned_to = value
        end
      end

      if attributes.key?(:'purpose')
        self.purpose = attributes[:'purpose']
      end

      if attributes.key?(:'reactions')
        if (value = attributes[:'reactions']).is_a?(Array)
          self.reactions = value
        end
      end

      if attributes.key?(:'reply_count')
        self.reply_count = attributes[:'reply_count']
      end

      if attributes.key?(:'reply_users')
        if (value = attributes[:'reply_users']).is_a?(Array)
          self.reply_users = value
        end
      end

      if attributes.key?(:'reply_users_count')
        self.reply_users_count = attributes[:'reply_users_count']
      end

      if attributes.key?(:'source_team')
        self.source_team = attributes[:'source_team']
      end

      if attributes.key?(:'subscribed')
        self.subscribed = attributes[:'subscribed']
      end

      if attributes.key?(:'subtype')
        self.subtype = attributes[:'subtype']
      end

      if attributes.key?(:'team')
        self.team = attributes[:'team']
      end

      if attributes.key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.key?(:'thread_ts')
        self.thread_ts = attributes[:'thread_ts']
      end

      if attributes.key?(:'topic')
        self.topic = attributes[:'topic']
      end

      if attributes.key?(:'ts')
        self.ts = attributes[:'ts']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'unread_count')
        self.unread_count = attributes[:'unread_count']
      end

      if attributes.key?(:'upload')
        self.upload = attributes[:'upload']
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.key?(:'user_profile')
        self.user_profile = attributes[:'user_profile']
      end

      if attributes.key?(:'user_team')
        self.user_team = attributes[:'user_team']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@attachments.nil? && @attachments.length < 1
        invalid_properties.push('invalid value for "attachments", number of items must be greater than or equal to 1.')
      end

      if !@files.nil? && @files.length < 1
        invalid_properties.push('invalid value for "files", number of items must be greater than or equal to 1.')
      end

      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if !@inviter.nil? && @inviter !~ pattern
        invalid_properties.push("invalid value for \"inviter\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d{10}\.\d{6}$/)
      if !@last_read.nil? && @last_read !~ pattern
        invalid_properties.push("invalid value for \"last_read\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^\d{10}\.\d{6}$/)
      if !@latest_reply.nil? && @latest_reply !~ pattern
        invalid_properties.push("invalid value for \"latest_reply\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if !@parent_user_id.nil? && @parent_user_id !~ pattern
        invalid_properties.push("invalid value for \"parent_user_id\", must conform to the pattern #{pattern}.")
      end

      if !@reply_users.nil? && @reply_users.length < 1
        invalid_properties.push('invalid value for "reply_users", number of items must be greater than or equal to 1.')
      end

      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if !@source_team.nil? && @source_team !~ pattern
        invalid_properties.push("invalid value for \"source_team\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if !@team.nil? && @team !~ pattern
        invalid_properties.push("invalid value for \"team\", must conform to the pattern #{pattern}.")
      end

      if @text.nil?
        invalid_properties.push('invalid value for "text", text cannot be nil.')
      end

      pattern = Regexp.new(/^\d{10}\.\d{6}$/)
      if !@thread_ts.nil? && @thread_ts !~ pattern
        invalid_properties.push("invalid value for \"thread_ts\", must conform to the pattern #{pattern}.")
      end

      if @ts.nil?
        invalid_properties.push('invalid value for "ts", ts cannot be nil.')
      end

      pattern = Regexp.new(/^\d{10}\.\d{6}$/)
      if @ts !~ pattern
        invalid_properties.push("invalid value for \"ts\", must conform to the pattern #{pattern}.")
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if !@user.nil? && @user !~ pattern
        invalid_properties.push("invalid value for \"user\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if !@user_team.nil? && @user_team !~ pattern
        invalid_properties.push("invalid value for \"user_team\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@attachments.nil? && @attachments.length < 1
      return false if !@files.nil? && @files.length < 1
      return false if !@inviter.nil? && @inviter !~ Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      return false if !@last_read.nil? && @last_read !~ Regexp.new(/^\d{10}\.\d{6}$/)
      return false if !@latest_reply.nil? && @latest_reply !~ Regexp.new(/^\d{10}\.\d{6}$/)
      return false if !@parent_user_id.nil? && @parent_user_id !~ Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      return false if !@reply_users.nil? && @reply_users.length < 1
      return false if !@source_team.nil? && @source_team !~ Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      return false if !@team.nil? && @team !~ Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      return false if @text.nil?
      return false if !@thread_ts.nil? && @thread_ts !~ Regexp.new(/^\d{10}\.\d{6}$/)
      return false if @ts.nil?
      return false if @ts !~ Regexp.new(/^\d{10}\.\d{6}$/)
      return false if @type.nil?
      return false if !@user.nil? && @user !~ Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      return false if !@user_team.nil? && @user_team !~ Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] attachments Value to be assigned
    def attachments=(attachments)
      if !attachments.nil? && attachments.length < 1
        fail ArgumentError, 'invalid value for "attachments", number of items must be greater than or equal to 1.'
      end

      @attachments = attachments
    end

    # Custom attribute writer method with validation
    # @param [Object] files Value to be assigned
    def files=(files)
      if !files.nil? && files.length < 1
        fail ArgumentError, 'invalid value for "files", number of items must be greater than or equal to 1.'
      end

      @files = files
    end

    # Custom attribute writer method with validation
    # @param [Object] inviter Value to be assigned
    def inviter=(inviter)
      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if !inviter.nil? && inviter !~ pattern
        fail ArgumentError, "invalid value for \"inviter\", must conform to the pattern #{pattern}."
      end

      @inviter = inviter
    end

    # Custom attribute writer method with validation
    # @param [Object] last_read Value to be assigned
    def last_read=(last_read)
      pattern = Regexp.new(/^\d{10}\.\d{6}$/)
      if !last_read.nil? && last_read !~ pattern
        fail ArgumentError, "invalid value for \"last_read\", must conform to the pattern #{pattern}."
      end

      @last_read = last_read
    end

    # Custom attribute writer method with validation
    # @param [Object] latest_reply Value to be assigned
    def latest_reply=(latest_reply)
      pattern = Regexp.new(/^\d{10}\.\d{6}$/)
      if !latest_reply.nil? && latest_reply !~ pattern
        fail ArgumentError, "invalid value for \"latest_reply\", must conform to the pattern #{pattern}."
      end

      @latest_reply = latest_reply
    end

    # Custom attribute writer method with validation
    # @param [Object] parent_user_id Value to be assigned
    def parent_user_id=(parent_user_id)
      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if !parent_user_id.nil? && parent_user_id !~ pattern
        fail ArgumentError, "invalid value for \"parent_user_id\", must conform to the pattern #{pattern}."
      end

      @parent_user_id = parent_user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] reply_users Value to be assigned
    def reply_users=(reply_users)
      if !reply_users.nil? && reply_users.length < 1
        fail ArgumentError, 'invalid value for "reply_users", number of items must be greater than or equal to 1.'
      end

      @reply_users = reply_users
    end

    # Custom attribute writer method with validation
    # @param [Object] source_team Value to be assigned
    def source_team=(source_team)
      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if !source_team.nil? && source_team !~ pattern
        fail ArgumentError, "invalid value for \"source_team\", must conform to the pattern #{pattern}."
      end

      @source_team = source_team
    end

    # Custom attribute writer method with validation
    # @param [Object] team Value to be assigned
    def team=(team)
      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if !team.nil? && team !~ pattern
        fail ArgumentError, "invalid value for \"team\", must conform to the pattern #{pattern}."
      end

      @team = team
    end

    # Custom attribute writer method with validation
    # @param [Object] thread_ts Value to be assigned
    def thread_ts=(thread_ts)
      pattern = Regexp.new(/^\d{10}\.\d{6}$/)
      if !thread_ts.nil? && thread_ts !~ pattern
        fail ArgumentError, "invalid value for \"thread_ts\", must conform to the pattern #{pattern}."
      end

      @thread_ts = thread_ts
    end

    # Custom attribute writer method with validation
    # @param [Object] ts Value to be assigned
    def ts=(ts)
      if ts.nil?
        fail ArgumentError, 'ts cannot be nil'
      end

      pattern = Regexp.new(/^\d{10}\.\d{6}$/)
      if ts !~ pattern
        fail ArgumentError, "invalid value for \"ts\", must conform to the pattern #{pattern}."
      end

      @ts = ts
    end

    # Custom attribute writer method with validation
    # @param [Object] user Value to be assigned
    def user=(user)
      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if !user.nil? && user !~ pattern
        fail ArgumentError, "invalid value for \"user\", must conform to the pattern #{pattern}."
      end

      @user = user
    end

    # Custom attribute writer method with validation
    # @param [Object] user_team Value to be assigned
    def user_team=(user_team)
      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if !user_team.nil? && user_team !~ pattern
        fail ArgumentError, "invalid value for \"user_team\", must conform to the pattern #{pattern}."
      end

      @user_team = user_team
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          attachments == o.attachments &&
          blocks == o.blocks &&
          bot_id == o.bot_id &&
          bot_profile == o.bot_profile &&
          client_msg_id == o.client_msg_id &&
          comment == o.comment &&
          display_as_bot == o.display_as_bot &&
          file == o.file &&
          files == o.files &&
          icons == o.icons &&
          inviter == o.inviter &&
          is_delayed_message == o.is_delayed_message &&
          is_intro == o.is_intro &&
          is_starred == o.is_starred &&
          last_read == o.last_read &&
          latest_reply == o.latest_reply &&
          name == o.name &&
          old_name == o.old_name &&
          parent_user_id == o.parent_user_id &&
          permalink == o.permalink &&
          pinned_to == o.pinned_to &&
          purpose == o.purpose &&
          reactions == o.reactions &&
          reply_count == o.reply_count &&
          reply_users == o.reply_users &&
          reply_users_count == o.reply_users_count &&
          source_team == o.source_team &&
          subscribed == o.subscribed &&
          subtype == o.subtype &&
          team == o.team &&
          text == o.text &&
          thread_ts == o.thread_ts &&
          topic == o.topic &&
          ts == o.ts &&
          type == o.type &&
          unread_count == o.unread_count &&
          upload == o.upload &&
          user == o.user &&
          user_profile == o.user_profile &&
          user_team == o.user_team &&
          username == o.username
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [attachments, blocks, bot_id, bot_profile, client_msg_id, comment, display_as_bot, file, files, icons, inviter, is_delayed_message, is_intro, is_starred, last_read, latest_reply, name, old_name, parent_user_id, permalink, pinned_to, purpose, reactions, reply_count, reply_users, reply_users_count, source_team, subscribed, subtype, team, text, thread_ts, topic, ts, type, unread_count, upload, user, user_profile, user_team, username].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = slack.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
