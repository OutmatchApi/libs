=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module slack
  class ObjsSubteam
    attr_accessor :auto_provision

    attr_accessor :auto_type

    attr_accessor :channel_count

    attr_accessor :created_by

    attr_accessor :date_create

    attr_accessor :date_delete

    attr_accessor :date_update

    attr_accessor :deleted_by

    attr_accessor :description

    attr_accessor :enterprise_subteam_id

    attr_accessor :handle

    attr_accessor :id

    attr_accessor :is_external

    attr_accessor :is_subteam

    attr_accessor :is_usergroup

    attr_accessor :name

    attr_accessor :prefs

    attr_accessor :team_id

    attr_accessor :updated_by

    attr_accessor :user_count

    attr_accessor :users

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'auto_provision' => :'auto_provision',
        :'auto_type' => :'auto_type',
        :'channel_count' => :'channel_count',
        :'created_by' => :'created_by',
        :'date_create' => :'date_create',
        :'date_delete' => :'date_delete',
        :'date_update' => :'date_update',
        :'deleted_by' => :'deleted_by',
        :'description' => :'description',
        :'enterprise_subteam_id' => :'enterprise_subteam_id',
        :'handle' => :'handle',
        :'id' => :'id',
        :'is_external' => :'is_external',
        :'is_subteam' => :'is_subteam',
        :'is_usergroup' => :'is_usergroup',
        :'name' => :'name',
        :'prefs' => :'prefs',
        :'team_id' => :'team_id',
        :'updated_by' => :'updated_by',
        :'user_count' => :'user_count',
        :'users' => :'users'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'auto_provision' => :'Boolean',
        :'auto_type' => :'Array<ObjsSubteamAutoTypeInner>',
        :'channel_count' => :'Integer',
        :'created_by' => :'String',
        :'date_create' => :'Integer',
        :'date_delete' => :'Integer',
        :'date_update' => :'Integer',
        :'deleted_by' => :'Array<ObjsSubteamDeletedByInner>',
        :'description' => :'String',
        :'enterprise_subteam_id' => :'String',
        :'handle' => :'String',
        :'id' => :'String',
        :'is_external' => :'Boolean',
        :'is_subteam' => :'Boolean',
        :'is_usergroup' => :'Boolean',
        :'name' => :'String',
        :'prefs' => :'ObjsSubteamPrefs',
        :'team_id' => :'String',
        :'updated_by' => :'String',
        :'user_count' => :'Integer',
        :'users' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `slack::ObjsSubteam` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `slack::ObjsSubteam`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'auto_provision')
        self.auto_provision = attributes[:'auto_provision']
      end

      if attributes.key?(:'auto_type')
        if (value = attributes[:'auto_type']).is_a?(Array)
          self.auto_type = value
        end
      end

      if attributes.key?(:'channel_count')
        self.channel_count = attributes[:'channel_count']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'date_create')
        self.date_create = attributes[:'date_create']
      end

      if attributes.key?(:'date_delete')
        self.date_delete = attributes[:'date_delete']
      end

      if attributes.key?(:'date_update')
        self.date_update = attributes[:'date_update']
      end

      if attributes.key?(:'deleted_by')
        if (value = attributes[:'deleted_by']).is_a?(Array)
          self.deleted_by = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'enterprise_subteam_id')
        self.enterprise_subteam_id = attributes[:'enterprise_subteam_id']
      end

      if attributes.key?(:'handle')
        self.handle = attributes[:'handle']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'is_external')
        self.is_external = attributes[:'is_external']
      end

      if attributes.key?(:'is_subteam')
        self.is_subteam = attributes[:'is_subteam']
      end

      if attributes.key?(:'is_usergroup')
        self.is_usergroup = attributes[:'is_usergroup']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'prefs')
        self.prefs = attributes[:'prefs']
      end

      if attributes.key?(:'team_id')
        self.team_id = attributes[:'team_id']
      end

      if attributes.key?(:'updated_by')
        self.updated_by = attributes[:'updated_by']
      end

      if attributes.key?(:'user_count')
        self.user_count = attributes[:'user_count']
      end

      if attributes.key?(:'users')
        if (value = attributes[:'users']).is_a?(Array)
          self.users = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @auto_provision.nil?
        invalid_properties.push('invalid value for "auto_provision", auto_provision cannot be nil.')
      end

      if @auto_type.nil?
        invalid_properties.push('invalid value for "auto_type", auto_type cannot be nil.')
      end

      if @created_by.nil?
        invalid_properties.push('invalid value for "created_by", created_by cannot be nil.')
      end

      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if @created_by !~ pattern
        invalid_properties.push("invalid value for \"created_by\", must conform to the pattern #{pattern}.")
      end

      if @date_create.nil?
        invalid_properties.push('invalid value for "date_create", date_create cannot be nil.')
      end

      if @date_delete.nil?
        invalid_properties.push('invalid value for "date_delete", date_delete cannot be nil.')
      end

      if @date_update.nil?
        invalid_properties.push('invalid value for "date_update", date_update cannot be nil.')
      end

      if @deleted_by.nil?
        invalid_properties.push('invalid value for "deleted_by", deleted_by cannot be nil.')
      end

      if @description.nil?
        invalid_properties.push('invalid value for "description", description cannot be nil.')
      end

      if @enterprise_subteam_id.nil?
        invalid_properties.push('invalid value for "enterprise_subteam_id", enterprise_subteam_id cannot be nil.')
      end

      if @handle.nil?
        invalid_properties.push('invalid value for "handle", handle cannot be nil.')
      end

      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      pattern = Regexp.new(/^S[A-Z0-9]{2,}$/)
      if @id !~ pattern
        invalid_properties.push("invalid value for \"id\", must conform to the pattern #{pattern}.")
      end

      if @is_external.nil?
        invalid_properties.push('invalid value for "is_external", is_external cannot be nil.')
      end

      if @is_subteam.nil?
        invalid_properties.push('invalid value for "is_subteam", is_subteam cannot be nil.')
      end

      if @is_usergroup.nil?
        invalid_properties.push('invalid value for "is_usergroup", is_usergroup cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @prefs.nil?
        invalid_properties.push('invalid value for "prefs", prefs cannot be nil.')
      end

      if @team_id.nil?
        invalid_properties.push('invalid value for "team_id", team_id cannot be nil.')
      end

      pattern = Regexp.new(/^[T][A-Z0-9]{2,}$/)
      if @team_id !~ pattern
        invalid_properties.push("invalid value for \"team_id\", must conform to the pattern #{pattern}.")
      end

      if @updated_by.nil?
        invalid_properties.push('invalid value for "updated_by", updated_by cannot be nil.')
      end

      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if @updated_by !~ pattern
        invalid_properties.push("invalid value for \"updated_by\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @auto_provision.nil?
      return false if @auto_type.nil?
      return false if @created_by.nil?
      return false if @created_by !~ Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      return false if @date_create.nil?
      return false if @date_delete.nil?
      return false if @date_update.nil?
      return false if @deleted_by.nil?
      return false if @description.nil?
      return false if @enterprise_subteam_id.nil?
      return false if @handle.nil?
      return false if @id.nil?
      return false if @id !~ Regexp.new(/^S[A-Z0-9]{2,}$/)
      return false if @is_external.nil?
      return false if @is_subteam.nil?
      return false if @is_usergroup.nil?
      return false if @name.nil?
      return false if @prefs.nil?
      return false if @team_id.nil?
      return false if @team_id !~ Regexp.new(/^[T][A-Z0-9]{2,}$/)
      return false if @updated_by.nil?
      return false if @updated_by !~ Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] created_by Value to be assigned
    def created_by=(created_by)
      if created_by.nil?
        fail ArgumentError, 'created_by cannot be nil'
      end

      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if created_by !~ pattern
        fail ArgumentError, "invalid value for \"created_by\", must conform to the pattern #{pattern}."
      end

      @created_by = created_by
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      pattern = Regexp.new(/^S[A-Z0-9]{2,}$/)
      if id !~ pattern
        fail ArgumentError, "invalid value for \"id\", must conform to the pattern #{pattern}."
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] team_id Value to be assigned
    def team_id=(team_id)
      if team_id.nil?
        fail ArgumentError, 'team_id cannot be nil'
      end

      pattern = Regexp.new(/^[T][A-Z0-9]{2,}$/)
      if team_id !~ pattern
        fail ArgumentError, "invalid value for \"team_id\", must conform to the pattern #{pattern}."
      end

      @team_id = team_id
    end

    # Custom attribute writer method with validation
    # @param [Object] updated_by Value to be assigned
    def updated_by=(updated_by)
      if updated_by.nil?
        fail ArgumentError, 'updated_by cannot be nil'
      end

      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if updated_by !~ pattern
        fail ArgumentError, "invalid value for \"updated_by\", must conform to the pattern #{pattern}."
      end

      @updated_by = updated_by
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          auto_provision == o.auto_provision &&
          auto_type == o.auto_type &&
          channel_count == o.channel_count &&
          created_by == o.created_by &&
          date_create == o.date_create &&
          date_delete == o.date_delete &&
          date_update == o.date_update &&
          deleted_by == o.deleted_by &&
          description == o.description &&
          enterprise_subteam_id == o.enterprise_subteam_id &&
          handle == o.handle &&
          id == o.id &&
          is_external == o.is_external &&
          is_subteam == o.is_subteam &&
          is_usergroup == o.is_usergroup &&
          name == o.name &&
          prefs == o.prefs &&
          team_id == o.team_id &&
          updated_by == o.updated_by &&
          user_count == o.user_count &&
          users == o.users
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [auto_provision, auto_type, channel_count, created_by, date_create, date_delete, date_update, deleted_by, description, enterprise_subteam_id, handle, id, is_external, is_subteam, is_usergroup, name, prefs, team_id, updated_by, user_count, users].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = slack.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
