=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module slack
  class ObjsFile
    attr_accessor :channels

    attr_accessor :comments_count

    attr_accessor :created

    attr_accessor :date_delete

    attr_accessor :display_as_bot

    attr_accessor :editable

    attr_accessor :editor

    attr_accessor :external_id

    attr_accessor :external_type

    attr_accessor :external_url

    attr_accessor :filetype

    attr_accessor :groups

    attr_accessor :has_rich_preview

    attr_accessor :id

    attr_accessor :image_exif_rotation

    attr_accessor :ims

    attr_accessor :is_external

    attr_accessor :is_public

    attr_accessor :is_starred

    attr_accessor :is_tombstoned

    attr_accessor :last_editor

    attr_accessor :mimetype

    attr_accessor :mode

    attr_accessor :name

    attr_accessor :non_owner_editable

    attr_accessor :num_stars

    attr_accessor :original_h

    attr_accessor :original_w

    attr_accessor :permalink

    attr_accessor :permalink_public

    attr_accessor :pinned_info

    attr_accessor :pinned_to

    attr_accessor :pretty_type

    attr_accessor :preview

    attr_accessor :public_url_shared

    attr_accessor :reactions

    attr_accessor :shares

    attr_accessor :size

    attr_accessor :source_team

    attr_accessor :state

    attr_accessor :thumb_1024

    attr_accessor :thumb_1024_h

    attr_accessor :thumb_1024_w

    attr_accessor :thumb_160

    attr_accessor :thumb_360

    attr_accessor :thumb_360_h

    attr_accessor :thumb_360_w

    attr_accessor :thumb_480

    attr_accessor :thumb_480_h

    attr_accessor :thumb_480_w

    attr_accessor :thumb_64

    attr_accessor :thumb_720

    attr_accessor :thumb_720_h

    attr_accessor :thumb_720_w

    attr_accessor :thumb_80

    attr_accessor :thumb_800

    attr_accessor :thumb_800_h

    attr_accessor :thumb_800_w

    attr_accessor :thumb_960

    attr_accessor :thumb_960_h

    attr_accessor :thumb_960_w

    attr_accessor :thumb_tiny

    attr_accessor :timestamp

    attr_accessor :title

    attr_accessor :updated

    attr_accessor :url_private

    attr_accessor :url_private_download

    attr_accessor :user

    attr_accessor :user_team

    attr_accessor :username

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'channels' => :'channels',
        :'comments_count' => :'comments_count',
        :'created' => :'created',
        :'date_delete' => :'date_delete',
        :'display_as_bot' => :'display_as_bot',
        :'editable' => :'editable',
        :'editor' => :'editor',
        :'external_id' => :'external_id',
        :'external_type' => :'external_type',
        :'external_url' => :'external_url',
        :'filetype' => :'filetype',
        :'groups' => :'groups',
        :'has_rich_preview' => :'has_rich_preview',
        :'id' => :'id',
        :'image_exif_rotation' => :'image_exif_rotation',
        :'ims' => :'ims',
        :'is_external' => :'is_external',
        :'is_public' => :'is_public',
        :'is_starred' => :'is_starred',
        :'is_tombstoned' => :'is_tombstoned',
        :'last_editor' => :'last_editor',
        :'mimetype' => :'mimetype',
        :'mode' => :'mode',
        :'name' => :'name',
        :'non_owner_editable' => :'non_owner_editable',
        :'num_stars' => :'num_stars',
        :'original_h' => :'original_h',
        :'original_w' => :'original_w',
        :'permalink' => :'permalink',
        :'permalink_public' => :'permalink_public',
        :'pinned_info' => :'pinned_info',
        :'pinned_to' => :'pinned_to',
        :'pretty_type' => :'pretty_type',
        :'preview' => :'preview',
        :'public_url_shared' => :'public_url_shared',
        :'reactions' => :'reactions',
        :'shares' => :'shares',
        :'size' => :'size',
        :'source_team' => :'source_team',
        :'state' => :'state',
        :'thumb_1024' => :'thumb_1024',
        :'thumb_1024_h' => :'thumb_1024_h',
        :'thumb_1024_w' => :'thumb_1024_w',
        :'thumb_160' => :'thumb_160',
        :'thumb_360' => :'thumb_360',
        :'thumb_360_h' => :'thumb_360_h',
        :'thumb_360_w' => :'thumb_360_w',
        :'thumb_480' => :'thumb_480',
        :'thumb_480_h' => :'thumb_480_h',
        :'thumb_480_w' => :'thumb_480_w',
        :'thumb_64' => :'thumb_64',
        :'thumb_720' => :'thumb_720',
        :'thumb_720_h' => :'thumb_720_h',
        :'thumb_720_w' => :'thumb_720_w',
        :'thumb_80' => :'thumb_80',
        :'thumb_800' => :'thumb_800',
        :'thumb_800_h' => :'thumb_800_h',
        :'thumb_800_w' => :'thumb_800_w',
        :'thumb_960' => :'thumb_960',
        :'thumb_960_h' => :'thumb_960_h',
        :'thumb_960_w' => :'thumb_960_w',
        :'thumb_tiny' => :'thumb_tiny',
        :'timestamp' => :'timestamp',
        :'title' => :'title',
        :'updated' => :'updated',
        :'url_private' => :'url_private',
        :'url_private_download' => :'url_private_download',
        :'user' => :'user',
        :'user_team' => :'user_team',
        :'username' => :'username'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'channels' => :'Array<String>',
        :'comments_count' => :'Integer',
        :'created' => :'Integer',
        :'date_delete' => :'Integer',
        :'display_as_bot' => :'Boolean',
        :'editable' => :'Boolean',
        :'editor' => :'String',
        :'external_id' => :'String',
        :'external_type' => :'String',
        :'external_url' => :'String',
        :'filetype' => :'String',
        :'groups' => :'Array<String>',
        :'has_rich_preview' => :'Boolean',
        :'id' => :'String',
        :'image_exif_rotation' => :'Integer',
        :'ims' => :'Array<String>',
        :'is_external' => :'Boolean',
        :'is_public' => :'Boolean',
        :'is_starred' => :'Boolean',
        :'is_tombstoned' => :'Boolean',
        :'last_editor' => :'String',
        :'mimetype' => :'String',
        :'mode' => :'String',
        :'name' => :'String',
        :'non_owner_editable' => :'Boolean',
        :'num_stars' => :'Integer',
        :'original_h' => :'Integer',
        :'original_w' => :'Integer',
        :'permalink' => :'String',
        :'permalink_public' => :'String',
        :'pinned_info' => :'Object',
        :'pinned_to' => :'Array<String>',
        :'pretty_type' => :'String',
        :'preview' => :'String',
        :'public_url_shared' => :'Boolean',
        :'reactions' => :'Array<ObjsReaction>',
        :'shares' => :'ObjsFileShares',
        :'size' => :'Integer',
        :'source_team' => :'String',
        :'state' => :'String',
        :'thumb_1024' => :'String',
        :'thumb_1024_h' => :'Integer',
        :'thumb_1024_w' => :'Integer',
        :'thumb_160' => :'String',
        :'thumb_360' => :'String',
        :'thumb_360_h' => :'Integer',
        :'thumb_360_w' => :'Integer',
        :'thumb_480' => :'String',
        :'thumb_480_h' => :'Integer',
        :'thumb_480_w' => :'Integer',
        :'thumb_64' => :'String',
        :'thumb_720' => :'String',
        :'thumb_720_h' => :'Integer',
        :'thumb_720_w' => :'Integer',
        :'thumb_80' => :'String',
        :'thumb_800' => :'String',
        :'thumb_800_h' => :'Integer',
        :'thumb_800_w' => :'Integer',
        :'thumb_960' => :'String',
        :'thumb_960_h' => :'Integer',
        :'thumb_960_w' => :'Integer',
        :'thumb_tiny' => :'String',
        :'timestamp' => :'Integer',
        :'title' => :'String',
        :'updated' => :'Integer',
        :'url_private' => :'String',
        :'url_private_download' => :'String',
        :'user' => :'String',
        :'user_team' => :'String',
        :'username' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `slack::ObjsFile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `slack::ObjsFile`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'channels')
        if (value = attributes[:'channels']).is_a?(Array)
          self.channels = value
        end
      end

      if attributes.key?(:'comments_count')
        self.comments_count = attributes[:'comments_count']
      end

      if attributes.key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.key?(:'date_delete')
        self.date_delete = attributes[:'date_delete']
      end

      if attributes.key?(:'display_as_bot')
        self.display_as_bot = attributes[:'display_as_bot']
      end

      if attributes.key?(:'editable')
        self.editable = attributes[:'editable']
      end

      if attributes.key?(:'editor')
        self.editor = attributes[:'editor']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'external_type')
        self.external_type = attributes[:'external_type']
      end

      if attributes.key?(:'external_url')
        self.external_url = attributes[:'external_url']
      end

      if attributes.key?(:'filetype')
        self.filetype = attributes[:'filetype']
      end

      if attributes.key?(:'groups')
        if (value = attributes[:'groups']).is_a?(Array)
          self.groups = value
        end
      end

      if attributes.key?(:'has_rich_preview')
        self.has_rich_preview = attributes[:'has_rich_preview']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'image_exif_rotation')
        self.image_exif_rotation = attributes[:'image_exif_rotation']
      end

      if attributes.key?(:'ims')
        if (value = attributes[:'ims']).is_a?(Array)
          self.ims = value
        end
      end

      if attributes.key?(:'is_external')
        self.is_external = attributes[:'is_external']
      end

      if attributes.key?(:'is_public')
        self.is_public = attributes[:'is_public']
      end

      if attributes.key?(:'is_starred')
        self.is_starred = attributes[:'is_starred']
      end

      if attributes.key?(:'is_tombstoned')
        self.is_tombstoned = attributes[:'is_tombstoned']
      end

      if attributes.key?(:'last_editor')
        self.last_editor = attributes[:'last_editor']
      end

      if attributes.key?(:'mimetype')
        self.mimetype = attributes[:'mimetype']
      end

      if attributes.key?(:'mode')
        self.mode = attributes[:'mode']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'non_owner_editable')
        self.non_owner_editable = attributes[:'non_owner_editable']
      end

      if attributes.key?(:'num_stars')
        self.num_stars = attributes[:'num_stars']
      end

      if attributes.key?(:'original_h')
        self.original_h = attributes[:'original_h']
      end

      if attributes.key?(:'original_w')
        self.original_w = attributes[:'original_w']
      end

      if attributes.key?(:'permalink')
        self.permalink = attributes[:'permalink']
      end

      if attributes.key?(:'permalink_public')
        self.permalink_public = attributes[:'permalink_public']
      end

      if attributes.key?(:'pinned_info')
        self.pinned_info = attributes[:'pinned_info']
      end

      if attributes.key?(:'pinned_to')
        if (value = attributes[:'pinned_to']).is_a?(Array)
          self.pinned_to = value
        end
      end

      if attributes.key?(:'pretty_type')
        self.pretty_type = attributes[:'pretty_type']
      end

      if attributes.key?(:'preview')
        self.preview = attributes[:'preview']
      end

      if attributes.key?(:'public_url_shared')
        self.public_url_shared = attributes[:'public_url_shared']
      end

      if attributes.key?(:'reactions')
        if (value = attributes[:'reactions']).is_a?(Array)
          self.reactions = value
        end
      end

      if attributes.key?(:'shares')
        self.shares = attributes[:'shares']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'source_team')
        self.source_team = attributes[:'source_team']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'thumb_1024')
        self.thumb_1024 = attributes[:'thumb_1024']
      end

      if attributes.key?(:'thumb_1024_h')
        self.thumb_1024_h = attributes[:'thumb_1024_h']
      end

      if attributes.key?(:'thumb_1024_w')
        self.thumb_1024_w = attributes[:'thumb_1024_w']
      end

      if attributes.key?(:'thumb_160')
        self.thumb_160 = attributes[:'thumb_160']
      end

      if attributes.key?(:'thumb_360')
        self.thumb_360 = attributes[:'thumb_360']
      end

      if attributes.key?(:'thumb_360_h')
        self.thumb_360_h = attributes[:'thumb_360_h']
      end

      if attributes.key?(:'thumb_360_w')
        self.thumb_360_w = attributes[:'thumb_360_w']
      end

      if attributes.key?(:'thumb_480')
        self.thumb_480 = attributes[:'thumb_480']
      end

      if attributes.key?(:'thumb_480_h')
        self.thumb_480_h = attributes[:'thumb_480_h']
      end

      if attributes.key?(:'thumb_480_w')
        self.thumb_480_w = attributes[:'thumb_480_w']
      end

      if attributes.key?(:'thumb_64')
        self.thumb_64 = attributes[:'thumb_64']
      end

      if attributes.key?(:'thumb_720')
        self.thumb_720 = attributes[:'thumb_720']
      end

      if attributes.key?(:'thumb_720_h')
        self.thumb_720_h = attributes[:'thumb_720_h']
      end

      if attributes.key?(:'thumb_720_w')
        self.thumb_720_w = attributes[:'thumb_720_w']
      end

      if attributes.key?(:'thumb_80')
        self.thumb_80 = attributes[:'thumb_80']
      end

      if attributes.key?(:'thumb_800')
        self.thumb_800 = attributes[:'thumb_800']
      end

      if attributes.key?(:'thumb_800_h')
        self.thumb_800_h = attributes[:'thumb_800_h']
      end

      if attributes.key?(:'thumb_800_w')
        self.thumb_800_w = attributes[:'thumb_800_w']
      end

      if attributes.key?(:'thumb_960')
        self.thumb_960 = attributes[:'thumb_960']
      end

      if attributes.key?(:'thumb_960_h')
        self.thumb_960_h = attributes[:'thumb_960_h']
      end

      if attributes.key?(:'thumb_960_w')
        self.thumb_960_w = attributes[:'thumb_960_w']
      end

      if attributes.key?(:'thumb_tiny')
        self.thumb_tiny = attributes[:'thumb_tiny']
      end

      if attributes.key?(:'timestamp')
        self.timestamp = attributes[:'timestamp']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.key?(:'url_private')
        self.url_private = attributes[:'url_private']
      end

      if attributes.key?(:'url_private_download')
        self.url_private_download = attributes[:'url_private_download']
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end

      if attributes.key?(:'user_team')
        self.user_team = attributes[:'user_team']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if !@editor.nil? && @editor !~ pattern
        invalid_properties.push("invalid value for \"editor\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[F][A-Z0-9]{8,}$/)
      if !@id.nil? && @id !~ pattern
        invalid_properties.push("invalid value for \"id\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if !@last_editor.nil? && @last_editor !~ pattern
        invalid_properties.push("invalid value for \"last_editor\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[T][A-Z0-9]{2,}$/)
      if !@source_team.nil? && @source_team !~ pattern
        invalid_properties.push("invalid value for \"source_team\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^[T][A-Z0-9]{2,}$/)
      if !@user_team.nil? && @user_team !~ pattern
        invalid_properties.push("invalid value for \"user_team\", must conform to the pattern #{pattern}.")
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@editor.nil? && @editor !~ Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      return false if !@id.nil? && @id !~ Regexp.new(/^[F][A-Z0-9]{8,}$/)
      return false if !@last_editor.nil? && @last_editor !~ Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      return false if !@source_team.nil? && @source_team !~ Regexp.new(/^[T][A-Z0-9]{2,}$/)
      return false if !@user_team.nil? && @user_team !~ Regexp.new(/^[T][A-Z0-9]{2,}$/)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] channels Value to be assigned
    def channels=(channels)
      @channels = channels
    end

    # Custom attribute writer method with validation
    # @param [Object] editor Value to be assigned
    def editor=(editor)
      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if !editor.nil? && editor !~ pattern
        fail ArgumentError, "invalid value for \"editor\", must conform to the pattern #{pattern}."
      end

      @editor = editor
    end

    # Custom attribute writer method with validation
    # @param [Object] groups Value to be assigned
    def groups=(groups)
      @groups = groups
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      pattern = Regexp.new(/^[F][A-Z0-9]{8,}$/)
      if !id.nil? && id !~ pattern
        fail ArgumentError, "invalid value for \"id\", must conform to the pattern #{pattern}."
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] ims Value to be assigned
    def ims=(ims)
      @ims = ims
    end

    # Custom attribute writer method with validation
    # @param [Object] last_editor Value to be assigned
    def last_editor=(last_editor)
      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if !last_editor.nil? && last_editor !~ pattern
        fail ArgumentError, "invalid value for \"last_editor\", must conform to the pattern #{pattern}."
      end

      @last_editor = last_editor
    end

    # Custom attribute writer method with validation
    # @param [Object] source_team Value to be assigned
    def source_team=(source_team)
      pattern = Regexp.new(/^[T][A-Z0-9]{2,}$/)
      if !source_team.nil? && source_team !~ pattern
        fail ArgumentError, "invalid value for \"source_team\", must conform to the pattern #{pattern}."
      end

      @source_team = source_team
    end

    # Custom attribute writer method with validation
    # @param [Object] user_team Value to be assigned
    def user_team=(user_team)
      pattern = Regexp.new(/^[T][A-Z0-9]{2,}$/)
      if !user_team.nil? && user_team !~ pattern
        fail ArgumentError, "invalid value for \"user_team\", must conform to the pattern #{pattern}."
      end

      @user_team = user_team
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          channels == o.channels &&
          comments_count == o.comments_count &&
          created == o.created &&
          date_delete == o.date_delete &&
          display_as_bot == o.display_as_bot &&
          editable == o.editable &&
          editor == o.editor &&
          external_id == o.external_id &&
          external_type == o.external_type &&
          external_url == o.external_url &&
          filetype == o.filetype &&
          groups == o.groups &&
          has_rich_preview == o.has_rich_preview &&
          id == o.id &&
          image_exif_rotation == o.image_exif_rotation &&
          ims == o.ims &&
          is_external == o.is_external &&
          is_public == o.is_public &&
          is_starred == o.is_starred &&
          is_tombstoned == o.is_tombstoned &&
          last_editor == o.last_editor &&
          mimetype == o.mimetype &&
          mode == o.mode &&
          name == o.name &&
          non_owner_editable == o.non_owner_editable &&
          num_stars == o.num_stars &&
          original_h == o.original_h &&
          original_w == o.original_w &&
          permalink == o.permalink &&
          permalink_public == o.permalink_public &&
          pinned_info == o.pinned_info &&
          pinned_to == o.pinned_to &&
          pretty_type == o.pretty_type &&
          preview == o.preview &&
          public_url_shared == o.public_url_shared &&
          reactions == o.reactions &&
          shares == o.shares &&
          size == o.size &&
          source_team == o.source_team &&
          state == o.state &&
          thumb_1024 == o.thumb_1024 &&
          thumb_1024_h == o.thumb_1024_h &&
          thumb_1024_w == o.thumb_1024_w &&
          thumb_160 == o.thumb_160 &&
          thumb_360 == o.thumb_360 &&
          thumb_360_h == o.thumb_360_h &&
          thumb_360_w == o.thumb_360_w &&
          thumb_480 == o.thumb_480 &&
          thumb_480_h == o.thumb_480_h &&
          thumb_480_w == o.thumb_480_w &&
          thumb_64 == o.thumb_64 &&
          thumb_720 == o.thumb_720 &&
          thumb_720_h == o.thumb_720_h &&
          thumb_720_w == o.thumb_720_w &&
          thumb_80 == o.thumb_80 &&
          thumb_800 == o.thumb_800 &&
          thumb_800_h == o.thumb_800_h &&
          thumb_800_w == o.thumb_800_w &&
          thumb_960 == o.thumb_960 &&
          thumb_960_h == o.thumb_960_h &&
          thumb_960_w == o.thumb_960_w &&
          thumb_tiny == o.thumb_tiny &&
          timestamp == o.timestamp &&
          title == o.title &&
          updated == o.updated &&
          url_private == o.url_private &&
          url_private_download == o.url_private_download &&
          user == o.user &&
          user_team == o.user_team &&
          username == o.username
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [channels, comments_count, created, date_delete, display_as_bot, editable, editor, external_id, external_type, external_url, filetype, groups, has_rich_preview, id, image_exif_rotation, ims, is_external, is_public, is_starred, is_tombstoned, last_editor, mimetype, mode, name, non_owner_editable, num_stars, original_h, original_w, permalink, permalink_public, pinned_info, pinned_to, pretty_type, preview, public_url_shared, reactions, shares, size, source_team, state, thumb_1024, thumb_1024_h, thumb_1024_w, thumb_160, thumb_360, thumb_360_h, thumb_360_w, thumb_480, thumb_480_h, thumb_480_w, thumb_64, thumb_720, thumb_720_h, thumb_720_w, thumb_80, thumb_800, thumb_800_h, thumb_800_w, thumb_960, thumb_960_h, thumb_960_w, thumb_tiny, timestamp, title, updated, url_private, url_private_download, user, user_team, username].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = slack.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
