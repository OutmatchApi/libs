=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module slack
  class TeamIntegrationLogsSchemaLogsInner
    attr_accessor :admin_app_id

    attr_accessor :app_id

    attr_accessor :app_type

    attr_accessor :change_type

    attr_accessor :channel

    attr_accessor :date

    attr_accessor :scope

    attr_accessor :service_id

    attr_accessor :service_type

    attr_accessor :user_id

    attr_accessor :user_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'admin_app_id' => :'admin_app_id',
        :'app_id' => :'app_id',
        :'app_type' => :'app_type',
        :'change_type' => :'change_type',
        :'channel' => :'channel',
        :'date' => :'date',
        :'scope' => :'scope',
        :'service_id' => :'service_id',
        :'service_type' => :'service_type',
        :'user_id' => :'user_id',
        :'user_name' => :'user_name'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'admin_app_id' => :'String',
        :'app_id' => :'String',
        :'app_type' => :'String',
        :'change_type' => :'String',
        :'channel' => :'String',
        :'date' => :'String',
        :'scope' => :'String',
        :'service_id' => :'String',
        :'service_type' => :'String',
        :'user_id' => :'String',
        :'user_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `slack::TeamIntegrationLogsSchemaLogsInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `slack::TeamIntegrationLogsSchemaLogsInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'admin_app_id')
        self.admin_app_id = attributes[:'admin_app_id']
      end

      if attributes.key?(:'app_id')
        self.app_id = attributes[:'app_id']
      end

      if attributes.key?(:'app_type')
        self.app_type = attributes[:'app_type']
      end

      if attributes.key?(:'change_type')
        self.change_type = attributes[:'change_type']
      end

      if attributes.key?(:'channel')
        self.channel = attributes[:'channel']
      end

      if attributes.key?(:'date')
        self.date = attributes[:'date']
      end

      if attributes.key?(:'scope')
        self.scope = attributes[:'scope']
      end

      if attributes.key?(:'service_id')
        self.service_id = attributes[:'service_id']
      end

      if attributes.key?(:'service_type')
        self.service_type = attributes[:'service_type']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'user_name')
        self.user_name = attributes[:'user_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      pattern = Regexp.new(/^A[A-Z0-9]{1,}$/)
      if !@admin_app_id.nil? && @admin_app_id !~ pattern
        invalid_properties.push("invalid value for \"admin_app_id\", must conform to the pattern #{pattern}.")
      end

      if @app_id.nil?
        invalid_properties.push('invalid value for "app_id", app_id cannot be nil.')
      end

      pattern = Regexp.new(/^A[A-Z0-9]{1,}$/)
      if @app_id !~ pattern
        invalid_properties.push("invalid value for \"app_id\", must conform to the pattern #{pattern}.")
      end

      if @app_type.nil?
        invalid_properties.push('invalid value for "app_type", app_type cannot be nil.')
      end

      if @change_type.nil?
        invalid_properties.push('invalid value for "change_type", change_type cannot be nil.')
      end

      pattern = Regexp.new(/^[CGD][A-Z0-9]{8,}$/)
      if !@channel.nil? && @channel !~ pattern
        invalid_properties.push("invalid value for \"channel\", must conform to the pattern #{pattern}.")
      end

      if @date.nil?
        invalid_properties.push('invalid value for "date", date cannot be nil.')
      end

      if @scope.nil?
        invalid_properties.push('invalid value for "scope", scope cannot be nil.')
      end

      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if @user_id !~ pattern
        invalid_properties.push("invalid value for \"user_id\", must conform to the pattern #{pattern}.")
      end

      if @user_name.nil?
        invalid_properties.push('invalid value for "user_name", user_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@admin_app_id.nil? && @admin_app_id !~ Regexp.new(/^A[A-Z0-9]{1,}$/)
      return false if @app_id.nil?
      return false if @app_id !~ Regexp.new(/^A[A-Z0-9]{1,}$/)
      return false if @app_type.nil?
      return false if @change_type.nil?
      return false if !@channel.nil? && @channel !~ Regexp.new(/^[CGD][A-Z0-9]{8,}$/)
      return false if @date.nil?
      return false if @scope.nil?
      return false if @user_id.nil?
      return false if @user_id !~ Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      return false if @user_name.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] admin_app_id Value to be assigned
    def admin_app_id=(admin_app_id)
      pattern = Regexp.new(/^A[A-Z0-9]{1,}$/)
      if !admin_app_id.nil? && admin_app_id !~ pattern
        fail ArgumentError, "invalid value for \"admin_app_id\", must conform to the pattern #{pattern}."
      end

      @admin_app_id = admin_app_id
    end

    # Custom attribute writer method with validation
    # @param [Object] app_id Value to be assigned
    def app_id=(app_id)
      if app_id.nil?
        fail ArgumentError, 'app_id cannot be nil'
      end

      pattern = Regexp.new(/^A[A-Z0-9]{1,}$/)
      if app_id !~ pattern
        fail ArgumentError, "invalid value for \"app_id\", must conform to the pattern #{pattern}."
      end

      @app_id = app_id
    end

    # Custom attribute writer method with validation
    # @param [Object] channel Value to be assigned
    def channel=(channel)
      pattern = Regexp.new(/^[CGD][A-Z0-9]{8,}$/)
      if !channel.nil? && channel !~ pattern
        fail ArgumentError, "invalid value for \"channel\", must conform to the pattern #{pattern}."
      end

      @channel = channel
    end

    # Custom attribute writer method with validation
    # @param [Object] user_id Value to be assigned
    def user_id=(user_id)
      if user_id.nil?
        fail ArgumentError, 'user_id cannot be nil'
      end

      pattern = Regexp.new(/^[UW][A-Z0-9]{2,}$/)
      if user_id !~ pattern
        fail ArgumentError, "invalid value for \"user_id\", must conform to the pattern #{pattern}."
      end

      @user_id = user_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          admin_app_id == o.admin_app_id &&
          app_id == o.app_id &&
          app_type == o.app_type &&
          change_type == o.change_type &&
          channel == o.channel &&
          date == o.date &&
          scope == o.scope &&
          service_id == o.service_id &&
          service_type == o.service_type &&
          user_id == o.user_id &&
          user_name == o.user_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [admin_app_id, app_id, app_type, change_type, channel, date, scope, service_id, service_type, user_id, user_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = slack.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
