=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'date'
require 'time'

module slack
  class ObjsUserProfile
    attr_accessor :always_active

    attr_accessor :api_app_id

    attr_accessor :avatar_hash

    attr_accessor :bot_id

    attr_accessor :display_name

    attr_accessor :display_name_normalized

    attr_accessor :email

    attr_accessor :fields

    attr_accessor :first_name

    attr_accessor :guest_expiration_ts

    attr_accessor :guest_invited_by

    attr_accessor :image_1024

    attr_accessor :image_192

    attr_accessor :image_24

    attr_accessor :image_32

    attr_accessor :image_48

    attr_accessor :image_512

    attr_accessor :image_72

    attr_accessor :image_original

    attr_accessor :is_app_user

    attr_accessor :is_custom_image

    attr_accessor :is_restricted

    attr_accessor :is_ultra_restricted

    attr_accessor :last_avatar_image_hash

    attr_accessor :last_name

    attr_accessor :memberships_count

    attr_accessor :name

    attr_accessor :phone

    attr_accessor :pronouns

    attr_accessor :real_name

    attr_accessor :real_name_normalized

    attr_accessor :skype

    attr_accessor :status_default_emoji

    attr_accessor :status_default_text

    attr_accessor :status_default_text_canonical

    attr_accessor :status_emoji

    attr_accessor :status_expiration

    attr_accessor :status_text

    attr_accessor :status_text_canonical

    attr_accessor :team

    attr_accessor :title

    attr_accessor :updated

    attr_accessor :user_id

    attr_accessor :username

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'always_active' => :'always_active',
        :'api_app_id' => :'api_app_id',
        :'avatar_hash' => :'avatar_hash',
        :'bot_id' => :'bot_id',
        :'display_name' => :'display_name',
        :'display_name_normalized' => :'display_name_normalized',
        :'email' => :'email',
        :'fields' => :'fields',
        :'first_name' => :'first_name',
        :'guest_expiration_ts' => :'guest_expiration_ts',
        :'guest_invited_by' => :'guest_invited_by',
        :'image_1024' => :'image_1024',
        :'image_192' => :'image_192',
        :'image_24' => :'image_24',
        :'image_32' => :'image_32',
        :'image_48' => :'image_48',
        :'image_512' => :'image_512',
        :'image_72' => :'image_72',
        :'image_original' => :'image_original',
        :'is_app_user' => :'is_app_user',
        :'is_custom_image' => :'is_custom_image',
        :'is_restricted' => :'is_restricted',
        :'is_ultra_restricted' => :'is_ultra_restricted',
        :'last_avatar_image_hash' => :'last_avatar_image_hash',
        :'last_name' => :'last_name',
        :'memberships_count' => :'memberships_count',
        :'name' => :'name',
        :'phone' => :'phone',
        :'pronouns' => :'pronouns',
        :'real_name' => :'real_name',
        :'real_name_normalized' => :'real_name_normalized',
        :'skype' => :'skype',
        :'status_default_emoji' => :'status_default_emoji',
        :'status_default_text' => :'status_default_text',
        :'status_default_text_canonical' => :'status_default_text_canonical',
        :'status_emoji' => :'status_emoji',
        :'status_expiration' => :'status_expiration',
        :'status_text' => :'status_text',
        :'status_text_canonical' => :'status_text_canonical',
        :'team' => :'team',
        :'title' => :'title',
        :'updated' => :'updated',
        :'user_id' => :'user_id',
        :'username' => :'username'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'always_active' => :'Boolean',
        :'api_app_id' => :'String',
        :'avatar_hash' => :'String',
        :'bot_id' => :'String',
        :'display_name' => :'String',
        :'display_name_normalized' => :'String',
        :'email' => :'String',
        :'fields' => :'Array<Object>',
        :'first_name' => :'String',
        :'guest_expiration_ts' => :'Integer',
        :'guest_invited_by' => :'String',
        :'image_1024' => :'String',
        :'image_192' => :'String',
        :'image_24' => :'String',
        :'image_32' => :'String',
        :'image_48' => :'String',
        :'image_512' => :'String',
        :'image_72' => :'String',
        :'image_original' => :'String',
        :'is_app_user' => :'Boolean',
        :'is_custom_image' => :'Boolean',
        :'is_restricted' => :'Boolean',
        :'is_ultra_restricted' => :'Boolean',
        :'last_avatar_image_hash' => :'String',
        :'last_name' => :'String',
        :'memberships_count' => :'Integer',
        :'name' => :'String',
        :'phone' => :'String',
        :'pronouns' => :'String',
        :'real_name' => :'String',
        :'real_name_normalized' => :'String',
        :'skype' => :'String',
        :'status_default_emoji' => :'String',
        :'status_default_text' => :'String',
        :'status_default_text_canonical' => :'String',
        :'status_emoji' => :'String',
        :'status_expiration' => :'Integer',
        :'status_text' => :'String',
        :'status_text_canonical' => :'String',
        :'team' => :'String',
        :'title' => :'String',
        :'updated' => :'Integer',
        :'user_id' => :'String',
        :'username' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'email',
        :'fields',
        :'first_name',
        :'guest_expiration_ts',
        :'guest_invited_by',
        :'image_1024',
        :'image_192',
        :'image_24',
        :'image_32',
        :'image_48',
        :'image_512',
        :'image_72',
        :'image_original',
        :'is_restricted',
        :'is_ultra_restricted',
        :'last_name',
        :'name',
        :'status_default_text_canonical',
        :'status_text_canonical',
        :'username'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `slack::ObjsUserProfile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `slack::ObjsUserProfile`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'always_active')
        self.always_active = attributes[:'always_active']
      end

      if attributes.key?(:'api_app_id')
        self.api_app_id = attributes[:'api_app_id']
      end

      if attributes.key?(:'avatar_hash')
        self.avatar_hash = attributes[:'avatar_hash']
      end

      if attributes.key?(:'bot_id')
        self.bot_id = attributes[:'bot_id']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'display_name_normalized')
        self.display_name_normalized = attributes[:'display_name_normalized']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'fields')
        if (value = attributes[:'fields']).is_a?(Array)
          self.fields = value
        end
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'guest_expiration_ts')
        self.guest_expiration_ts = attributes[:'guest_expiration_ts']
      end

      if attributes.key?(:'guest_invited_by')
        self.guest_invited_by = attributes[:'guest_invited_by']
      end

      if attributes.key?(:'image_1024')
        self.image_1024 = attributes[:'image_1024']
      end

      if attributes.key?(:'image_192')
        self.image_192 = attributes[:'image_192']
      end

      if attributes.key?(:'image_24')
        self.image_24 = attributes[:'image_24']
      end

      if attributes.key?(:'image_32')
        self.image_32 = attributes[:'image_32']
      end

      if attributes.key?(:'image_48')
        self.image_48 = attributes[:'image_48']
      end

      if attributes.key?(:'image_512')
        self.image_512 = attributes[:'image_512']
      end

      if attributes.key?(:'image_72')
        self.image_72 = attributes[:'image_72']
      end

      if attributes.key?(:'image_original')
        self.image_original = attributes[:'image_original']
      end

      if attributes.key?(:'is_app_user')
        self.is_app_user = attributes[:'is_app_user']
      end

      if attributes.key?(:'is_custom_image')
        self.is_custom_image = attributes[:'is_custom_image']
      end

      if attributes.key?(:'is_restricted')
        self.is_restricted = attributes[:'is_restricted']
      end

      if attributes.key?(:'is_ultra_restricted')
        self.is_ultra_restricted = attributes[:'is_ultra_restricted']
      end

      if attributes.key?(:'last_avatar_image_hash')
        self.last_avatar_image_hash = attributes[:'last_avatar_image_hash']
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'memberships_count')
        self.memberships_count = attributes[:'memberships_count']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'pronouns')
        self.pronouns = attributes[:'pronouns']
      end

      if attributes.key?(:'real_name')
        self.real_name = attributes[:'real_name']
      end

      if attributes.key?(:'real_name_normalized')
        self.real_name_normalized = attributes[:'real_name_normalized']
      end

      if attributes.key?(:'skype')
        self.skype = attributes[:'skype']
      end

      if attributes.key?(:'status_default_emoji')
        self.status_default_emoji = attributes[:'status_default_emoji']
      end

      if attributes.key?(:'status_default_text')
        self.status_default_text = attributes[:'status_default_text']
      end

      if attributes.key?(:'status_default_text_canonical')
        self.status_default_text_canonical = attributes[:'status_default_text_canonical']
      end

      if attributes.key?(:'status_emoji')
        self.status_emoji = attributes[:'status_emoji']
      end

      if attributes.key?(:'status_expiration')
        self.status_expiration = attributes[:'status_expiration']
      end

      if attributes.key?(:'status_text')
        self.status_text = attributes[:'status_text']
      end

      if attributes.key?(:'status_text_canonical')
        self.status_text_canonical = attributes[:'status_text_canonical']
      end

      if attributes.key?(:'team')
        self.team = attributes[:'team']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      pattern = Regexp.new(/^(A[A-Z0-9]{1,})?$/)
      if !@api_app_id.nil? && @api_app_id !~ pattern
        invalid_properties.push("invalid value for \"api_app_id\", must conform to the pattern #{pattern}.")
      end

      if @avatar_hash.nil?
        invalid_properties.push('invalid value for "avatar_hash", avatar_hash cannot be nil.')
      end

      pattern = Regexp.new(/^B[A-Z0-9]{8,}$/)
      if !@bot_id.nil? && @bot_id !~ pattern
        invalid_properties.push("invalid value for \"bot_id\", must conform to the pattern #{pattern}.")
      end

      if @display_name.nil?
        invalid_properties.push('invalid value for "display_name", display_name cannot be nil.')
      end

      if @display_name_normalized.nil?
        invalid_properties.push('invalid value for "display_name_normalized", display_name_normalized cannot be nil.')
      end

      if @phone.nil?
        invalid_properties.push('invalid value for "phone", phone cannot be nil.')
      end

      if @real_name.nil?
        invalid_properties.push('invalid value for "real_name", real_name cannot be nil.')
      end

      if @real_name_normalized.nil?
        invalid_properties.push('invalid value for "real_name_normalized", real_name_normalized cannot be nil.')
      end

      if @skype.nil?
        invalid_properties.push('invalid value for "skype", skype cannot be nil.')
      end

      if @status_emoji.nil?
        invalid_properties.push('invalid value for "status_emoji", status_emoji cannot be nil.')
      end

      if @status_text.nil?
        invalid_properties.push('invalid value for "status_text", status_text cannot be nil.')
      end

      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if !@team.nil? && @team !~ pattern
        invalid_properties.push("invalid value for \"team\", must conform to the pattern #{pattern}.")
      end

      if @title.nil?
        invalid_properties.push('invalid value for "title", title cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@api_app_id.nil? && @api_app_id !~ Regexp.new(/^(A[A-Z0-9]{1,})?$/)
      return false if @avatar_hash.nil?
      return false if !@bot_id.nil? && @bot_id !~ Regexp.new(/^B[A-Z0-9]{8,}$/)
      return false if @display_name.nil?
      return false if @display_name_normalized.nil?
      return false if @phone.nil?
      return false if @real_name.nil?
      return false if @real_name_normalized.nil?
      return false if @skype.nil?
      return false if @status_emoji.nil?
      return false if @status_text.nil?
      return false if !@team.nil? && @team !~ Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      return false if @title.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] api_app_id Value to be assigned
    def api_app_id=(api_app_id)
      pattern = Regexp.new(/^(A[A-Z0-9]{1,})?$/)
      if !api_app_id.nil? && api_app_id !~ pattern
        fail ArgumentError, "invalid value for \"api_app_id\", must conform to the pattern #{pattern}."
      end

      @api_app_id = api_app_id
    end

    # Custom attribute writer method with validation
    # @param [Object] bot_id Value to be assigned
    def bot_id=(bot_id)
      pattern = Regexp.new(/^B[A-Z0-9]{8,}$/)
      if !bot_id.nil? && bot_id !~ pattern
        fail ArgumentError, "invalid value for \"bot_id\", must conform to the pattern #{pattern}."
      end

      @bot_id = bot_id
    end

    # Custom attribute writer method with validation
    # @param [Object] team Value to be assigned
    def team=(team)
      pattern = Regexp.new(/^[TE][A-Z0-9]{8,}$/)
      if !team.nil? && team !~ pattern
        fail ArgumentError, "invalid value for \"team\", must conform to the pattern #{pattern}."
      end

      @team = team
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          always_active == o.always_active &&
          api_app_id == o.api_app_id &&
          avatar_hash == o.avatar_hash &&
          bot_id == o.bot_id &&
          display_name == o.display_name &&
          display_name_normalized == o.display_name_normalized &&
          email == o.email &&
          fields == o.fields &&
          first_name == o.first_name &&
          guest_expiration_ts == o.guest_expiration_ts &&
          guest_invited_by == o.guest_invited_by &&
          image_1024 == o.image_1024 &&
          image_192 == o.image_192 &&
          image_24 == o.image_24 &&
          image_32 == o.image_32 &&
          image_48 == o.image_48 &&
          image_512 == o.image_512 &&
          image_72 == o.image_72 &&
          image_original == o.image_original &&
          is_app_user == o.is_app_user &&
          is_custom_image == o.is_custom_image &&
          is_restricted == o.is_restricted &&
          is_ultra_restricted == o.is_ultra_restricted &&
          last_avatar_image_hash == o.last_avatar_image_hash &&
          last_name == o.last_name &&
          memberships_count == o.memberships_count &&
          name == o.name &&
          phone == o.phone &&
          pronouns == o.pronouns &&
          real_name == o.real_name &&
          real_name_normalized == o.real_name_normalized &&
          skype == o.skype &&
          status_default_emoji == o.status_default_emoji &&
          status_default_text == o.status_default_text &&
          status_default_text_canonical == o.status_default_text_canonical &&
          status_emoji == o.status_emoji &&
          status_expiration == o.status_expiration &&
          status_text == o.status_text &&
          status_text_canonical == o.status_text_canonical &&
          team == o.team &&
          title == o.title &&
          updated == o.updated &&
          user_id == o.user_id &&
          username == o.username
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [always_active, api_app_id, avatar_hash, bot_id, display_name, display_name_normalized, email, fields, first_name, guest_expiration_ts, guest_invited_by, image_1024, image_192, image_24, image_32, image_48, image_512, image_72, image_original, is_app_user, is_custom_image, is_restricted, is_ultra_restricted, last_avatar_image_hash, last_name, memberships_count, name, phone, pronouns, real_name, real_name_normalized, skype, status_default_emoji, status_default_text, status_default_text_canonical, status_emoji, status_expiration, status_text, status_text_canonical, team, title, updated, user_id, username].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = slack.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
