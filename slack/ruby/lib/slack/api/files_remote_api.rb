=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class FilesRemoteApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds a file from a remote service
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @option opts [String] :external_url URL of the remote file.
    # @option opts [String] :filetype type of file
    # @option opts [String] :indexable_file_contents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.
    # @option opts [String] :preview_image Preview of the document via &#x60;multipart/form-data&#x60;.
    # @option opts [String] :title Title of the file being shared.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:write&#x60;
    # @return [DefaultSuccessTemplate]
    def files_remote_add(opts = {})
      data, _status_code, _headers = files_remote_add_with_http_info(opts)
      data
    end

    # Adds a file from a remote service
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @option opts [String] :external_url URL of the remote file.
    # @option opts [String] :filetype type of file
    # @option opts [String] :indexable_file_contents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.
    # @option opts [String] :preview_image Preview of the document via &#x60;multipart/form-data&#x60;.
    # @option opts [String] :title Title of the file being shared.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:write&#x60;
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def files_remote_add_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesRemoteApi.files_remote_add ...'
      end
      # resource path
      local_var_path = '/files.remote.add'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      form_params['external_url'] = opts[:'external_url'] if !opts[:'external_url'].nil?
      form_params['filetype'] = opts[:'filetype'] if !opts[:'filetype'].nil?
      form_params['indexable_file_contents'] = opts[:'indexable_file_contents'] if !opts[:'indexable_file_contents'].nil?
      form_params['preview_image'] = opts[:'preview_image'] if !opts[:'preview_image'].nil?
      form_params['title'] = opts[:'title'] if !opts[:'title'].nil?
      form_params['token'] = opts[:'token'] if !opts[:'token'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesRemoteApi.files_remote_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesRemoteApi#files_remote_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve information about a remote file added to Slack
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:read&#x60;
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @return [DefaultSuccessTemplate]
    def files_remote_info(opts = {})
      data, _status_code, _headers = files_remote_info_with_http_info(opts)
      data
    end

    # Retrieve information about a remote file added to Slack
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:read&#x60;
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def files_remote_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesRemoteApi.files_remote_info ...'
      end
      # resource path
      local_var_path = '/files.remote.info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'file'] = opts[:'file'] if !opts[:'file'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesRemoteApi.files_remote_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesRemoteApi#files_remote_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve information about a remote file added to Slack
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:read&#x60;
    # @option opts [String] :channel Filter files appearing in a specific channel, indicated by its ID.
    # @option opts [Float] :ts_from Filter files created after this timestamp (inclusive).
    # @option opts [Float] :ts_to Filter files created before this timestamp (inclusive).
    # @option opts [Integer] :limit The maximum number of items to return.
    # @option opts [String] :cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.
    # @return [DefaultSuccessTemplate]
    def files_remote_list(opts = {})
      data, _status_code, _headers = files_remote_list_with_http_info(opts)
      data
    end

    # Retrieve information about a remote file added to Slack
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:read&#x60;
    # @option opts [String] :channel Filter files appearing in a specific channel, indicated by its ID.
    # @option opts [Float] :ts_from Filter files created after this timestamp (inclusive).
    # @option opts [Float] :ts_to Filter files created before this timestamp (inclusive).
    # @option opts [Integer] :limit The maximum number of items to return.
    # @option opts [String] :cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def files_remote_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesRemoteApi.files_remote_list ...'
      end
      # resource path
      local_var_path = '/files.remote.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'channel'] = opts[:'channel'] if !opts[:'channel'].nil?
      query_params[:'ts_from'] = opts[:'ts_from'] if !opts[:'ts_from'].nil?
      query_params[:'ts_to'] = opts[:'ts_to'] if !opts[:'ts_to'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesRemoteApi.files_remote_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesRemoteApi#files_remote_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a remote file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:write&#x60;
    # @return [DefaultSuccessTemplate]
    def files_remote_remove(opts = {})
      data, _status_code, _headers = files_remote_remove_with_http_info(opts)
      data
    end

    # Remove a remote file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:write&#x60;
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def files_remote_remove_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesRemoteApi.files_remote_remove ...'
      end
      # resource path
      local_var_path = '/files.remote.remove'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['token'] = opts[:'token'] if !opts[:'token'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesRemoteApi.files_remote_remove",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesRemoteApi#files_remote_remove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Share a remote file into a channel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:share&#x60;
    # @option opts [String] :file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required.
    # @option opts [String] :external_id The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required.
    # @option opts [String] :channels Comma-separated list of channel IDs where the file will be shared.
    # @return [DefaultSuccessTemplate]
    def files_remote_share(opts = {})
      data, _status_code, _headers = files_remote_share_with_http_info(opts)
      data
    end

    # Share a remote file into a channel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:share&#x60;
    # @option opts [String] :file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required.
    # @option opts [String] :external_id The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required.
    # @option opts [String] :channels Comma-separated list of channel IDs where the file will be shared.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def files_remote_share_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesRemoteApi.files_remote_share ...'
      end
      # resource path
      local_var_path = '/files.remote.share'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'file'] = opts[:'file'] if !opts[:'file'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'channels'] = opts[:'channels'] if !opts[:'channels'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesRemoteApi.files_remote_share",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesRemoteApi#files_remote_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an existing remote file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @option opts [String] :external_url URL of the remote file.
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :filetype type of file
    # @option opts [String] :indexable_file_contents File containing contents that can be used to improve searchability for the remote file.
    # @option opts [String] :preview_image Preview of the document via &#x60;multipart/form-data&#x60;.
    # @option opts [String] :title Title of the file being shared.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:write&#x60;
    # @return [DefaultSuccessTemplate]
    def files_remote_update(opts = {})
      data, _status_code, _headers = files_remote_update_with_http_info(opts)
      data
    end

    # Updates an existing remote file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @option opts [String] :external_url URL of the remote file.
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :filetype type of file
    # @option opts [String] :indexable_file_contents File containing contents that can be used to improve searchability for the remote file.
    # @option opts [String] :preview_image Preview of the document via &#x60;multipart/form-data&#x60;.
    # @option opts [String] :title Title of the file being shared.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:write&#x60;
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def files_remote_update_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesRemoteApi.files_remote_update ...'
      end
      # resource path
      local_var_path = '/files.remote.update'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      form_params['external_url'] = opts[:'external_url'] if !opts[:'external_url'].nil?
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['filetype'] = opts[:'filetype'] if !opts[:'filetype'].nil?
      form_params['indexable_file_contents'] = opts[:'indexable_file_contents'] if !opts[:'indexable_file_contents'].nil?
      form_params['preview_image'] = opts[:'preview_image'] if !opts[:'preview_image'].nil?
      form_params['title'] = opts[:'title'] if !opts[:'title'].nil?
      form_params['token'] = opts[:'token'] if !opts[:'token'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesRemoteApi.files_remote_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesRemoteApi#files_remote_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
