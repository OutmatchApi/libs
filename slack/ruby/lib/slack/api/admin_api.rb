=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class AdminApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Approve an app for installation on a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.apps:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id The id of the app to approve.
    # @option opts [String] :request_id The id of the request to approve.
    # @option opts [String] :team_id 
    # @return [DefaultSuccessTemplate]
    def admin_apps_approve(token, opts = {})
      data, _status_code, _headers = admin_apps_approve_with_http_info(token, opts)
      data
    end

    # Approve an app for installation on a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.apps:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id The id of the app to approve.
    # @option opts [String] :request_id The id of the request to approve.
    # @option opts [String] :team_id 
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_apps_approve_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_apps_approve ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_apps_approve"
      end
      # resource path
      local_var_path = '/admin.apps.approve'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?
      form_params['request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      form_params['team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_apps_approve",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_apps_approve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List approved apps for an org or workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.apps:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
    # @option opts [String] :team_id 
    # @option opts [String] :enterprise_id 
    # @return [DefaultSuccessTemplate]
    def admin_apps_approved_list(token, opts = {})
      data, _status_code, _headers = admin_apps_approved_list_with_http_info(token, opts)
      data
    end

    # List approved apps for an org or workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.apps:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
    # @option opts [String] :team_id 
    # @option opts [String] :enterprise_id 
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_apps_approved_list_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_apps_approved_list ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_apps_approved_list"
      end
      # resource path
      local_var_path = '/admin.apps.approved.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'enterprise_id'] = opts[:'enterprise_id'] if !opts[:'enterprise_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_apps_approved_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_apps_approved_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List app requests for a team/workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.apps:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
    # @option opts [String] :team_id 
    # @return [DefaultSuccessTemplate]
    def admin_apps_requests_list(token, opts = {})
      data, _status_code, _headers = admin_apps_requests_list_with_http_info(token, opts)
      data
    end

    # List app requests for a team/workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.apps:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
    # @option opts [String] :team_id 
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_apps_requests_list_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_apps_requests_list ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_apps_requests_list"
      end
      # resource path
      local_var_path = '/admin.apps.requests.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_apps_requests_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_apps_requests_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Restrict an app for installation on a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.apps:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id The id of the app to restrict.
    # @option opts [String] :request_id The id of the request to restrict.
    # @option opts [String] :team_id 
    # @return [DefaultSuccessTemplate]
    def admin_apps_restrict(token, opts = {})
      data, _status_code, _headers = admin_apps_restrict_with_http_info(token, opts)
      data
    end

    # Restrict an app for installation on a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.apps:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :app_id The id of the app to restrict.
    # @option opts [String] :request_id The id of the request to restrict.
    # @option opts [String] :team_id 
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_apps_restrict_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_apps_restrict ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_apps_restrict"
      end
      # resource path
      local_var_path = '/admin.apps.restrict'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?
      form_params['request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      form_params['team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_apps_restrict",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_apps_restrict\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List restricted apps for an org or workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.apps:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
    # @option opts [String] :team_id 
    # @option opts [String] :enterprise_id 
    # @return [DefaultSuccessTemplate]
    def admin_apps_restricted_list(token, opts = {})
      data, _status_code, _headers = admin_apps_restricted_list_with_http_info(token, opts)
      data
    end

    # List restricted apps for an org or workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.apps:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
    # @option opts [String] :team_id 
    # @option opts [String] :enterprise_id 
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_apps_restricted_list_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_apps_restricted_list ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_apps_restricted_list"
      end
      # resource path
      local_var_path = '/admin.apps.restricted.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'enterprise_id'] = opts[:'enterprise_id'] if !opts[:'enterprise_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_apps_restricted_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_apps_restricted_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Archive a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to archive.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsArchiveSchema]
    def admin_conversations_archive(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_archive_with_http_info(token, channel_id, opts)
      data
    end

    # Archive a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to archive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsArchiveSchema, Integer, Hash)>] AdminConversationsArchiveSchema data, response status code and response headers
    def admin_conversations_archive_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_archive ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_archive"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_archive"
      end
      # resource path
      local_var_path = '/admin.conversations.archive'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsArchiveSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_archive",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_archive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert a public channel to a private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to convert to private.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsConvertToPrivateSchema]
    def admin_conversations_convert_to_private(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_convert_to_private_with_http_info(token, channel_id, opts)
      data
    end

    # Convert a public channel to a private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to convert to private.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsConvertToPrivateSchema, Integer, Hash)>] AdminConversationsConvertToPrivateSchema data, response status code and response headers
    def admin_conversations_convert_to_private_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_convert_to_private ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_convert_to_private"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_convert_to_private"
      end
      # resource path
      local_var_path = '/admin.conversations.convertToPrivate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsConvertToPrivateSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_convert_to_private",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_convert_to_private\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a public or private channel-based conversation.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param is_private [Boolean] When &#x60;true&#x60;, creates a private channel instead of a public channel
    # @param name [String] Name of the public or private channel to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of the public or private channel to create.
    # @option opts [Boolean] :org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel
    # @option opts [String] :team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;.
    # @return [AdminConversationsCreateSchema]
    def admin_conversations_create(token, is_private, name, opts = {})
      data, _status_code, _headers = admin_conversations_create_with_http_info(token, is_private, name, opts)
      data
    end

    # Create a public or private channel-based conversation.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param is_private [Boolean] When &#x60;true&#x60;, creates a private channel instead of a public channel
    # @param name [String] Name of the public or private channel to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of the public or private channel to create.
    # @option opts [Boolean] :org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel
    # @option opts [String] :team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;.
    # @return [Array<(AdminConversationsCreateSchema, Integer, Hash)>] AdminConversationsCreateSchema data, response status code and response headers
    def admin_conversations_create_with_http_info(token, is_private, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_create ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_create"
      end
      # verify the required parameter 'is_private' is set
      if @api_client.config.client_side_validation && is_private.nil?
        fail ArgumentError, "Missing the required parameter 'is_private' when calling AdminApi.admin_conversations_create"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.admin_conversations_create"
      end
      # resource path
      local_var_path = '/admin.conversations.create'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['is_private'] = is_private
      form_params['name'] = name
      form_params['description'] = opts[:'description'] if !opts[:'description'].nil?
      form_params['org_wide'] = opts[:'org_wide'] if !opts[:'org_wide'].nil?
      form_params['team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsCreateSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to delete.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsDeleteSchema]
    def admin_conversations_delete(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_delete_with_http_info(token, channel_id, opts)
      data
    end

    # Delete a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsDeleteSchema, Integer, Hash)>] AdminConversationsDeleteSchema data, response status code and response headers
    def admin_conversations_delete_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_delete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_delete"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_delete"
      end
      # resource path
      local_var_path = '/admin.conversations.delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsDeleteSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disconnect a connected channel from one or more workspaces.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to be disconnected from some workspaces.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified.
    # @return [AdminConversationsRenameSchema]
    def admin_conversations_disconnect_shared(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_disconnect_shared_with_http_info(token, channel_id, opts)
      data
    end

    # Disconnect a connected channel from one or more workspaces.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to be disconnected from some workspaces.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified.
    # @return [Array<(AdminConversationsRenameSchema, Integer, Hash)>] AdminConversationsRenameSchema data, response status code and response headers
    def admin_conversations_disconnect_shared_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_disconnect_shared ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_disconnect_shared"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_disconnect_shared"
      end
      # resource path
      local_var_path = '/admin.conversations.disconnectShared'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id
      form_params['leaving_team_ids'] = opts[:'leaving_team_ids'] if !opts[:'leaving_team_ids'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsRenameSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_disconnect_shared",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_disconnect_shared\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all disconnected channelsâ€”i.e., channels that were once connected to other workspaces and then disconnectedâ€”and the corresponding original channel IDs for key revocation with EKM.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel_ids A comma-separated list of channels to filter to.
    # @option opts [String] :team_ids A comma-separated list of the workspaces to which the channels you would like returned belong.
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @return [DefaultSuccessTemplate]
    def admin_conversations_ekm_list_original_connected_channel_info(token, opts = {})
      data, _status_code, _headers = admin_conversations_ekm_list_original_connected_channel_info_with_http_info(token, opts)
      data
    end

    # List all disconnected channelsâ€”i.e., channels that were once connected to other workspaces and then disconnectedâ€”and the corresponding original channel IDs for key revocation with EKM.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel_ids A comma-separated list of channels to filter to.
    # @option opts [String] :team_ids A comma-separated list of the workspaces to which the channels you would like returned belong.
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_conversations_ekm_list_original_connected_channel_info_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_ekm_list_original_connected_channel_info ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_ekm_list_original_connected_channel_info"
      end
      # resource path
      local_var_path = '/admin.conversations.ekm.listOriginalConnectedChannelInfo'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'channel_ids'] = opts[:'channel_ids'] if !opts[:'channel_ids'].nil?
      query_params[:'team_ids'] = opts[:'team_ids'] if !opts[:'team_ids'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_ekm_list_original_connected_channel_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_ekm_list_original_connected_channel_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get conversation preferences for a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param channel_id [String] The channel to get preferences for.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsGetConversationPrefsSchema]
    def admin_conversations_get_conversation_prefs(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_get_conversation_prefs_with_http_info(token, channel_id, opts)
      data
    end

    # Get conversation preferences for a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param channel_id [String] The channel to get preferences for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsGetConversationPrefsSchema, Integer, Hash)>] AdminConversationsGetConversationPrefsSchema data, response status code and response headers
    def admin_conversations_get_conversation_prefs_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_get_conversation_prefs ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_get_conversation_prefs"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_get_conversation_prefs"
      end
      # resource path
      local_var_path = '/admin.conversations.getConversationPrefs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channel_id'] = channel_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsGetConversationPrefsSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_get_conversation_prefs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_get_conversation_prefs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all the workspaces a given public or private channel is connected to within this Enterprise org.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param channel_id [String] The channel to determine connected workspaces within the organization for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @return [AdminConversationsGetTeamsSchema]
    def admin_conversations_get_teams(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_get_teams_with_http_info(token, channel_id, opts)
      data
    end

    # Get all the workspaces a given public or private channel is connected to within this Enterprise org.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param channel_id [String] The channel to determine connected workspaces within the organization for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @return [Array<(AdminConversationsGetTeamsSchema, Integer, Hash)>] AdminConversationsGetTeamsSchema data, response status code and response headers
    def admin_conversations_get_teams_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_get_teams ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_get_teams"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_get_teams"
      end
      # resource path
      local_var_path = '/admin.conversations.getTeams'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channel_id'] = channel_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsGetTeamsSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_get_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_get_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invite a user to a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel that the users will be invited to.
    # @param user_ids [String] The users to invite.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsInviteSchema]
    def admin_conversations_invite(token, channel_id, user_ids, opts = {})
      data, _status_code, _headers = admin_conversations_invite_with_http_info(token, channel_id, user_ids, opts)
      data
    end

    # Invite a user to a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel that the users will be invited to.
    # @param user_ids [String] The users to invite.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsInviteSchema, Integer, Hash)>] AdminConversationsInviteSchema data, response status code and response headers
    def admin_conversations_invite_with_http_info(token, channel_id, user_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_invite ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_invite"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_invite"
      end
      # verify the required parameter 'user_ids' is set
      if @api_client.config.client_side_validation && user_ids.nil?
        fail ArgumentError, "Missing the required parameter 'user_ids' when calling AdminApi.admin_conversations_invite"
      end
      # resource path
      local_var_path = '/admin.conversations.invite'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id
      form_params['user_ids'] = user_ids

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsInviteSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_invite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rename a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to rename.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsRenameSchema1]
    def admin_conversations_rename(token, channel_id, name, opts = {})
      data, _status_code, _headers = admin_conversations_rename_with_http_info(token, channel_id, name, opts)
      data
    end

    # Rename a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to rename.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsRenameSchema1, Integer, Hash)>] AdminConversationsRenameSchema1 data, response status code and response headers
    def admin_conversations_rename_with_http_info(token, channel_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_rename ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_rename"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_rename"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.admin_conversations_rename"
      end
      # resource path
      local_var_path = '/admin.conversations.rename'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id
      form_params['name'] = name

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsRenameSchema1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_rename",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_rename\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an allowlist of IDP groups for accessing a channel
    # @param channel_id [String] The channel to link this group to.
    # @param group_id [String] The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    # @return [DefaultSuccessTemplate]
    def admin_conversations_restrict_access_add_group(channel_id, group_id, token, opts = {})
      data, _status_code, _headers = admin_conversations_restrict_access_add_group_with_http_info(channel_id, group_id, token, opts)
      data
    end

    # Add an allowlist of IDP groups for accessing a channel
    # @param channel_id [String] The channel to link this group to.
    # @param group_id [String] The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_conversations_restrict_access_add_group_with_http_info(channel_id, group_id, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_restrict_access_add_group ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_restrict_access_add_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdminApi.admin_conversations_restrict_access_add_group"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_restrict_access_add_group"
      end
      # resource path
      local_var_path = '/admin.conversations.restrictAccess.addGroup'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id
      form_params['group_id'] = group_id
      form_params['token'] = token
      form_params['team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_restrict_access_add_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_restrict_access_add_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all IDP Groups linked to a channel
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param channel_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    # @return [DefaultSuccessTemplate]
    def admin_conversations_restrict_access_list_groups(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_restrict_access_list_groups_with_http_info(token, channel_id, opts)
      data
    end

    # List all IDP Groups linked to a channel
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param channel_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_conversations_restrict_access_list_groups_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_restrict_access_list_groups ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_restrict_access_list_groups"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_restrict_access_list_groups"
      end
      # resource path
      local_var_path = '/admin.conversations.restrictAccess.listGroups'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'channel_id'] = channel_id
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_restrict_access_list_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_restrict_access_list_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a linked IDP group linked from a private channel
    # @param channel_id [String] The channel to remove the linked group from.
    # @param group_id [String] The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.
    # @param team_id [String] The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_conversations_restrict_access_remove_group(channel_id, group_id, team_id, token, opts = {})
      data, _status_code, _headers = admin_conversations_restrict_access_remove_group_with_http_info(channel_id, group_id, team_id, token, opts)
      data
    end

    # Remove a linked IDP group linked from a private channel
    # @param channel_id [String] The channel to remove the linked group from.
    # @param group_id [String] The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.
    # @param team_id [String] The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_conversations_restrict_access_remove_group_with_http_info(channel_id, group_id, team_id, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_restrict_access_remove_group ...'
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_restrict_access_remove_group"
      end
      # verify the required parameter 'group_id' is set
      if @api_client.config.client_side_validation && group_id.nil?
        fail ArgumentError, "Missing the required parameter 'group_id' when calling AdminApi.admin_conversations_restrict_access_remove_group"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_conversations_restrict_access_remove_group"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_restrict_access_remove_group"
      end
      # resource path
      local_var_path = '/admin.conversations.restrictAccess.removeGroup'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id
      form_params['group_id'] = group_id
      form_params['team_id'] = team_id
      form_params['token'] = token

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_restrict_access_remove_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_restrict_access_remove_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for public or private channels in an Enterprise organization.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_ids Comma separated string of team IDs, signifying the workspaces to search through.
    # @option opts [String] :query Name of the the channel to query by.
    # @option opts [Integer] :limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @option opts [String] :search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types).
    # @option opts [String] :sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted 
    # @option opts [String] :sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a)
    # @return [AdminConversationsSearchSchema]
    def admin_conversations_search(token, opts = {})
      data, _status_code, _headers = admin_conversations_search_with_http_info(token, opts)
      data
    end

    # Search for public or private channels in an Enterprise organization.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_ids Comma separated string of team IDs, signifying the workspaces to search through.
    # @option opts [String] :query Name of the the channel to query by.
    # @option opts [Integer] :limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @option opts [String] :search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types).
    # @option opts [String] :sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted 
    # @option opts [String] :sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a)
    # @return [Array<(AdminConversationsSearchSchema, Integer, Hash)>] AdminConversationsSearchSchema data, response status code and response headers
    def admin_conversations_search_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_search ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_search"
      end
      # resource path
      local_var_path = '/admin.conversations.search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'team_ids'] = opts[:'team_ids'] if !opts[:'team_ids'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'search_channel_types'] = opts[:'search_channel_types'] if !opts[:'search_channel_types'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sort_dir'] = opts[:'sort_dir'] if !opts[:'sort_dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsSearchSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the posting permissions for a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to set the prefs for
    # @param prefs [String] The prefs for this channel in a stringified JSON format.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsSetConversationPrefsSchema]
    def admin_conversations_set_conversation_prefs(token, channel_id, prefs, opts = {})
      data, _status_code, _headers = admin_conversations_set_conversation_prefs_with_http_info(token, channel_id, prefs, opts)
      data
    end

    # Set the posting permissions for a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to set the prefs for
    # @param prefs [String] The prefs for this channel in a stringified JSON format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsSetConversationPrefsSchema, Integer, Hash)>] AdminConversationsSetConversationPrefsSchema data, response status code and response headers
    def admin_conversations_set_conversation_prefs_with_http_info(token, channel_id, prefs, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_set_conversation_prefs ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_set_conversation_prefs"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_set_conversation_prefs"
      end
      # verify the required parameter 'prefs' is set
      if @api_client.config.client_side_validation && prefs.nil?
        fail ArgumentError, "Missing the required parameter 'prefs' when calling AdminApi.admin_conversations_set_conversation_prefs"
      end
      # resource path
      local_var_path = '/admin.conversations.setConversationPrefs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id
      form_params['prefs'] = prefs

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsSetConversationPrefsSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_set_conversation_prefs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_set_conversation_prefs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the workspaces in an Enterprise grid org that connect to a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The encoded &#x60;channel_id&#x60; to add or remove to workspaces.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :org_channel True if channel has to be converted to an org channel
    # @option opts [String] :target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
    # @option opts [String] :team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.
    # @return [DefaultSuccessTemplate]
    def admin_conversations_set_teams(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_set_teams_with_http_info(token, channel_id, opts)
      data
    end

    # Set the workspaces in an Enterprise grid org that connect to a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The encoded &#x60;channel_id&#x60; to add or remove to workspaces.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :org_channel True if channel has to be converted to an org channel
    # @option opts [String] :target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
    # @option opts [String] :team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_conversations_set_teams_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_set_teams ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_set_teams"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_set_teams"
      end
      # resource path
      local_var_path = '/admin.conversations.setTeams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id
      form_params['org_channel'] = opts[:'org_channel'] if !opts[:'org_channel'].nil?
      form_params['target_team_ids'] = opts[:'target_team_ids'] if !opts[:'target_team_ids'].nil?
      form_params['team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_set_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_set_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unarchive a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to unarchive.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsUnarchiveSchema]
    def admin_conversations_unarchive(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_unarchive_with_http_info(token, channel_id, opts)
      data
    end

    # Unarchive a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to unarchive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsUnarchiveSchema, Integer, Hash)>] AdminConversationsUnarchiveSchema data, response status code and response headers
    def admin_conversations_unarchive_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_conversations_unarchive ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_conversations_unarchive"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminApi.admin_conversations_unarchive"
      end
      # resource path
      local_var_path = '/admin.conversations.unarchive'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsUnarchiveSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_conversations_unarchive",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_conversations_unarchive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an emoji.
    # @param name [String] The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param url [String] The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_emoji_add(name, token, url, opts = {})
      data, _status_code, _headers = admin_emoji_add_with_http_info(name, token, url, opts)
      data
    end

    # Add an emoji.
    # @param name [String] The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param url [String] The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_emoji_add_with_http_info(name, token, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_emoji_add ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.admin_emoji_add"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_emoji_add"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling AdminApi.admin_emoji_add"
      end
      # resource path
      local_var_path = '/admin.emoji.add'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = name
      form_params['token'] = token
      form_params['url'] = url

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_emoji_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_emoji_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an emoji alias.
    # @param alias_for [String] The alias of the emoji.
    # @param name [String] The name of the emoji to be aliased. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_emoji_add_alias(alias_for, name, token, opts = {})
      data, _status_code, _headers = admin_emoji_add_alias_with_http_info(alias_for, name, token, opts)
      data
    end

    # Add an emoji alias.
    # @param alias_for [String] The alias of the emoji.
    # @param name [String] The name of the emoji to be aliased. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_emoji_add_alias_with_http_info(alias_for, name, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_emoji_add_alias ...'
      end
      # verify the required parameter 'alias_for' is set
      if @api_client.config.client_side_validation && alias_for.nil?
        fail ArgumentError, "Missing the required parameter 'alias_for' when calling AdminApi.admin_emoji_add_alias"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.admin_emoji_add_alias"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_emoji_add_alias"
      end
      # resource path
      local_var_path = '/admin.emoji.addAlias'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['alias_for'] = alias_for
      form_params['name'] = name
      form_params['token'] = token

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_emoji_add_alias",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_emoji_add_alias\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List emoji for an Enterprise Grid organization.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @return [DefaultSuccessTemplate]
    def admin_emoji_list(token, opts = {})
      data, _status_code, _headers = admin_emoji_list_with_http_info(token, opts)
      data
    end

    # List emoji for an Enterprise Grid organization.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_emoji_list_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_emoji_list ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_emoji_list"
      end
      # resource path
      local_var_path = '/admin.emoji.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_emoji_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_emoji_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove an emoji across an Enterprise Grid organization
    # @param name [String] The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_emoji_remove(name, token, opts = {})
      data, _status_code, _headers = admin_emoji_remove_with_http_info(name, token, opts)
      data
    end

    # Remove an emoji across an Enterprise Grid organization
    # @param name [String] The name of the emoji to be removed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_emoji_remove_with_http_info(name, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_emoji_remove ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.admin_emoji_remove"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_emoji_remove"
      end
      # resource path
      local_var_path = '/admin.emoji.remove'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = name
      form_params['token'] = token

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_emoji_remove",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_emoji_remove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rename an emoji.
    # @param name [String] The name of the emoji to be renamed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
    # @param new_name [String] The new name of the emoji.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_emoji_rename(name, new_name, token, opts = {})
      data, _status_code, _headers = admin_emoji_rename_with_http_info(name, new_name, token, opts)
      data
    end

    # Rename an emoji.
    # @param name [String] The name of the emoji to be renamed. Colons (&#x60;:myemoji:&#x60;) around the value are not required, although they may be included.
    # @param new_name [String] The new name of the emoji.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_emoji_rename_with_http_info(name, new_name, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_emoji_rename ...'
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.admin_emoji_rename"
      end
      # verify the required parameter 'new_name' is set
      if @api_client.config.client_side_validation && new_name.nil?
        fail ArgumentError, "Missing the required parameter 'new_name' when calling AdminApi.admin_emoji_rename"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_emoji_rename"
      end
      # resource path
      local_var_path = '/admin.emoji.rename'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = name
      form_params['new_name'] = new_name
      form_params['token'] = token

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_emoji_rename",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_emoji_rename\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Approve a workspace invite request.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.invites:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [AdminInviteRequestsApproveRequest] :admin_invite_requests_approve_request 
    # @return [DefaultSuccessTemplate]
    def admin_invite_requests_approve(token, opts = {})
      data, _status_code, _headers = admin_invite_requests_approve_with_http_info(token, opts)
      data
    end

    # Approve a workspace invite request.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.invites:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [AdminInviteRequestsApproveRequest] :admin_invite_requests_approve_request 
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_invite_requests_approve_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_invite_requests_approve ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_invite_requests_approve"
      end
      # resource path
      local_var_path = '/admin.inviteRequests.approve'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'admin_invite_requests_approve_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_invite_requests_approve",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_invite_requests_approve\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all approved workspace invite requests.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.invites:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id ID for the workspace where the invite requests were made.
    # @option opts [String] :cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response
    # @option opts [Integer] :limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    # @return [DefaultSuccessTemplate]
    def admin_invite_requests_approved_list(token, opts = {})
      data, _status_code, _headers = admin_invite_requests_approved_list_with_http_info(token, opts)
      data
    end

    # List all approved workspace invite requests.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.invites:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id ID for the workspace where the invite requests were made.
    # @option opts [String] :cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response
    # @option opts [Integer] :limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_invite_requests_approved_list_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_invite_requests_approved_list ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_invite_requests_approved_list"
      end
      # resource path
      local_var_path = '/admin.inviteRequests.approved.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_invite_requests_approved_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_invite_requests_approved_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all denied workspace invite requests.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.invites:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id ID for the workspace where the invite requests were made.
    # @option opts [String] :cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous api response
    # @option opts [Integer] :limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive
    # @return [DefaultSuccessTemplate]
    def admin_invite_requests_denied_list(token, opts = {})
      data, _status_code, _headers = admin_invite_requests_denied_list_with_http_info(token, opts)
      data
    end

    # List all denied workspace invite requests.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.invites:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id ID for the workspace where the invite requests were made.
    # @option opts [String] :cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous api response
    # @option opts [Integer] :limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_invite_requests_denied_list_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_invite_requests_denied_list ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_invite_requests_denied_list"
      end
      # resource path
      local_var_path = '/admin.inviteRequests.denied.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_invite_requests_denied_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_invite_requests_denied_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deny a workspace invite request.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.invites:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [AdminInviteRequestsApproveRequest] :admin_invite_requests_approve_request 
    # @return [DefaultSuccessTemplate]
    def admin_invite_requests_deny(token, opts = {})
      data, _status_code, _headers = admin_invite_requests_deny_with_http_info(token, opts)
      data
    end

    # Deny a workspace invite request.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.invites:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [AdminInviteRequestsApproveRequest] :admin_invite_requests_approve_request 
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_invite_requests_deny_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_invite_requests_deny ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_invite_requests_deny"
      end
      # resource path
      local_var_path = '/admin.inviteRequests.deny'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'admin_invite_requests_approve_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_invite_requests_deny",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_invite_requests_deny\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all pending workspace invite requests.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.invites:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id ID for the workspace where the invite requests were made.
    # @option opts [String] :cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response
    # @option opts [Integer] :limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    # @return [DefaultSuccessTemplate]
    def admin_invite_requests_list(token, opts = {})
      data, _status_code, _headers = admin_invite_requests_list_with_http_info(token, opts)
      data
    end

    # List all pending workspace invite requests.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.invites:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id ID for the workspace where the invite requests were made.
    # @option opts [String] :cursor Value of the &#x60;next_cursor&#x60; field sent as part of the previous API response
    # @option opts [Integer] :limit The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_invite_requests_list_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_invite_requests_list ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_invite_requests_list"
      end
      # resource path
      local_var_path = '/admin.inviteRequests.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_invite_requests_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_invite_requests_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all of the admins on a given workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
    # @param team_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum number of items to return.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @return [DefaultSuccessTemplate]
    def admin_teams_admins_list(token, team_id, opts = {})
      data, _status_code, _headers = admin_teams_admins_list_with_http_info(token, team_id, opts)
      data
    end

    # List all of the admins on a given workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
    # @param team_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum number of items to return.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_teams_admins_list_with_http_info(token, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_teams_admins_list ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_teams_admins_list"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_teams_admins_list"
      end
      # resource path
      local_var_path = '/admin.teams.admins.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'team_id'] = team_id
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_teams_admins_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_teams_admins_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create an Enterprise team.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param team_domain [String] Team domain (for example, slacksoftballteam).
    # @param team_name [String] Team name (for example, Slack Softball Team).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_description Description for the team.
    # @option opts [String] :team_discoverability Who can join the team. A team&#39;s discoverability can be &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;invite_only&#x60;, or &#x60;unlisted&#x60;.
    # @return [DefaultSuccessTemplate]
    def admin_teams_create(token, team_domain, team_name, opts = {})
      data, _status_code, _headers = admin_teams_create_with_http_info(token, team_domain, team_name, opts)
      data
    end

    # Create an Enterprise team.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param team_domain [String] Team domain (for example, slacksoftballteam).
    # @param team_name [String] Team name (for example, Slack Softball Team).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_description Description for the team.
    # @option opts [String] :team_discoverability Who can join the team. A team&#39;s discoverability can be &#x60;open&#x60;, &#x60;closed&#x60;, &#x60;invite_only&#x60;, or &#x60;unlisted&#x60;.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_teams_create_with_http_info(token, team_domain, team_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_teams_create ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_teams_create"
      end
      # verify the required parameter 'team_domain' is set
      if @api_client.config.client_side_validation && team_domain.nil?
        fail ArgumentError, "Missing the required parameter 'team_domain' when calling AdminApi.admin_teams_create"
      end
      # verify the required parameter 'team_name' is set
      if @api_client.config.client_side_validation && team_name.nil?
        fail ArgumentError, "Missing the required parameter 'team_name' when calling AdminApi.admin_teams_create"
      end
      # resource path
      local_var_path = '/admin.teams.create'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['team_domain'] = team_domain
      form_params['team_name'] = team_name
      form_params['team_description'] = opts[:'team_description'] if !opts[:'team_description'].nil?
      form_params['team_discoverability'] = opts[:'team_discoverability'] if !opts[:'team_discoverability'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_teams_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_teams_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all teams on an Enterprise organization
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 100 both inclusive.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @return [DefaultSuccessTemplate]
    def admin_teams_list(token, opts = {})
      data, _status_code, _headers = admin_teams_list_with_http_info(token, opts)
      data
    end

    # List all teams on an Enterprise organization
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 100 both inclusive.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_teams_list_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_teams_list ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_teams_list"
      end
      # resource path
      local_var_path = '/admin.teams.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_teams_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_teams_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all of the owners on a given workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
    # @param team_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @return [DefaultSuccessTemplate]
    def admin_teams_owners_list(token, team_id, opts = {})
      data, _status_code, _headers = admin_teams_owners_list_with_http_info(token, team_id, opts)
      data
    end

    # List all of the owners on a given workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
    # @param team_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_teams_owners_list_with_http_info(token, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_teams_owners_list ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_teams_owners_list"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_teams_owners_list"
      end
      # resource path
      local_var_path = '/admin.teams.owners.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'team_id'] = team_id
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_teams_owners_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_teams_owners_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Fetch information about settings in a workspace
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
    # @param team_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_teams_settings_info(token, team_id, opts = {})
      data, _status_code, _headers = admin_teams_settings_info_with_http_info(token, team_id, opts)
      data
    end

    # Fetch information about settings in a workspace
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:read&#x60;
    # @param team_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_teams_settings_info_with_http_info(token, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_teams_settings_info ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_teams_settings_info"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_teams_settings_info"
      end
      # resource path
      local_var_path = '/admin.teams.settings.info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'team_id'] = team_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_teams_settings_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_teams_settings_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the default channels of a workspace.
    # @param channel_ids [String] An array of channel IDs.
    # @param team_id [String] ID for the workspace to set the default channel for.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_teams_settings_set_default_channels(channel_ids, team_id, token, opts = {})
      data, _status_code, _headers = admin_teams_settings_set_default_channels_with_http_info(channel_ids, team_id, token, opts)
      data
    end

    # Set the default channels of a workspace.
    # @param channel_ids [String] An array of channel IDs.
    # @param team_id [String] ID for the workspace to set the default channel for.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_teams_settings_set_default_channels_with_http_info(channel_ids, team_id, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_teams_settings_set_default_channels ...'
      end
      # verify the required parameter 'channel_ids' is set
      if @api_client.config.client_side_validation && channel_ids.nil?
        fail ArgumentError, "Missing the required parameter 'channel_ids' when calling AdminApi.admin_teams_settings_set_default_channels"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_teams_settings_set_default_channels"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_teams_settings_set_default_channels"
      end
      # resource path
      local_var_path = '/admin.teams.settings.setDefaultChannels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_ids'] = channel_ids
      form_params['team_id'] = team_id
      form_params['token'] = token

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_teams_settings_set_default_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_teams_settings_set_default_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the description of a given workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param description [String] The new description for the workspace.
    # @param team_id [String] ID for the workspace to set the description for.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_teams_settings_set_description(token, description, team_id, opts = {})
      data, _status_code, _headers = admin_teams_settings_set_description_with_http_info(token, description, team_id, opts)
      data
    end

    # Set the description of a given workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param description [String] The new description for the workspace.
    # @param team_id [String] ID for the workspace to set the description for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_teams_settings_set_description_with_http_info(token, description, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_teams_settings_set_description ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_teams_settings_set_description"
      end
      # verify the required parameter 'description' is set
      if @api_client.config.client_side_validation && description.nil?
        fail ArgumentError, "Missing the required parameter 'description' when calling AdminApi.admin_teams_settings_set_description"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_teams_settings_set_description"
      end
      # resource path
      local_var_path = '/admin.teams.settings.setDescription'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['description'] = description
      form_params['team_id'] = team_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_teams_settings_set_description",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_teams_settings_set_description\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # An API method that allows admins to set the discoverability of a given workspace
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param discoverability [String] This workspace&#39;s discovery setting. It must be set to one of &#x60;open&#x60;, &#x60;invite_only&#x60;, &#x60;closed&#x60;, or &#x60;unlisted&#x60;.
    # @param team_id [String] The ID of the workspace to set discoverability on.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_teams_settings_set_discoverability(token, discoverability, team_id, opts = {})
      data, _status_code, _headers = admin_teams_settings_set_discoverability_with_http_info(token, discoverability, team_id, opts)
      data
    end

    # An API method that allows admins to set the discoverability of a given workspace
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param discoverability [String] This workspace&#39;s discovery setting. It must be set to one of &#x60;open&#x60;, &#x60;invite_only&#x60;, &#x60;closed&#x60;, or &#x60;unlisted&#x60;.
    # @param team_id [String] The ID of the workspace to set discoverability on.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_teams_settings_set_discoverability_with_http_info(token, discoverability, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_teams_settings_set_discoverability ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_teams_settings_set_discoverability"
      end
      # verify the required parameter 'discoverability' is set
      if @api_client.config.client_side_validation && discoverability.nil?
        fail ArgumentError, "Missing the required parameter 'discoverability' when calling AdminApi.admin_teams_settings_set_discoverability"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_teams_settings_set_discoverability"
      end
      # resource path
      local_var_path = '/admin.teams.settings.setDiscoverability'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['discoverability'] = discoverability
      form_params['team_id'] = team_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_teams_settings_set_discoverability",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_teams_settings_set_discoverability\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sets the icon of a workspace.
    # @param image_url [String] Image URL for the icon
    # @param team_id [String] ID for the workspace to set the icon for.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_teams_settings_set_icon(image_url, team_id, token, opts = {})
      data, _status_code, _headers = admin_teams_settings_set_icon_with_http_info(image_url, team_id, token, opts)
      data
    end

    # Sets the icon of a workspace.
    # @param image_url [String] Image URL for the icon
    # @param team_id [String] ID for the workspace to set the icon for.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_teams_settings_set_icon_with_http_info(image_url, team_id, token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_teams_settings_set_icon ...'
      end
      # verify the required parameter 'image_url' is set
      if @api_client.config.client_side_validation && image_url.nil?
        fail ArgumentError, "Missing the required parameter 'image_url' when calling AdminApi.admin_teams_settings_set_icon"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_teams_settings_set_icon"
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_teams_settings_set_icon"
      end
      # resource path
      local_var_path = '/admin.teams.settings.setIcon'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['image_url'] = image_url
      form_params['team_id'] = team_id
      form_params['token'] = token

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_teams_settings_set_icon",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_teams_settings_set_icon\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the name of a given workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param name [String] The new name of the workspace.
    # @param team_id [String] ID for the workspace to set the name for.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_teams_settings_set_name(token, name, team_id, opts = {})
      data, _status_code, _headers = admin_teams_settings_set_name_with_http_info(token, name, team_id, opts)
      data
    end

    # Set the name of a given workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param name [String] The new name of the workspace.
    # @param team_id [String] ID for the workspace to set the name for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_teams_settings_set_name_with_http_info(token, name, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_teams_settings_set_name ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_teams_settings_set_name"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminApi.admin_teams_settings_set_name"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_teams_settings_set_name"
      end
      # resource path
      local_var_path = '/admin.teams.settings.setName'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = name
      form_params['team_id'] = team_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_teams_settings_set_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_teams_settings_set_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add one or more default channels to an IDP group.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
    # @param channel_ids [String] Comma separated string of channel IDs.
    # @param usergroup_id [String] ID of the IDP group to add default channels for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id The workspace to add default channels in.
    # @return [DefaultSuccessTemplate]
    def admin_usergroups_add_channels(token, channel_ids, usergroup_id, opts = {})
      data, _status_code, _headers = admin_usergroups_add_channels_with_http_info(token, channel_ids, usergroup_id, opts)
      data
    end

    # Add one or more default channels to an IDP group.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
    # @param channel_ids [String] Comma separated string of channel IDs.
    # @param usergroup_id [String] ID of the IDP group to add default channels for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id The workspace to add default channels in.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_usergroups_add_channels_with_http_info(token, channel_ids, usergroup_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_usergroups_add_channels ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_usergroups_add_channels"
      end
      # verify the required parameter 'channel_ids' is set
      if @api_client.config.client_side_validation && channel_ids.nil?
        fail ArgumentError, "Missing the required parameter 'channel_ids' when calling AdminApi.admin_usergroups_add_channels"
      end
      # verify the required parameter 'usergroup_id' is set
      if @api_client.config.client_side_validation && usergroup_id.nil?
        fail ArgumentError, "Missing the required parameter 'usergroup_id' when calling AdminApi.admin_usergroups_add_channels"
      end
      # resource path
      local_var_path = '/admin.usergroups.addChannels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_ids'] = channel_ids
      form_params['usergroup_id'] = usergroup_id
      form_params['team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_usergroups_add_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_usergroups_add_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate one or more default workspaces with an organization-wide IDP group.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param team_ids [String] A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
    # @param usergroup_id [String] An encoded usergroup (IDP Group) ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members.
    # @return [DefaultSuccessTemplate]
    def admin_usergroups_add_teams(token, team_ids, usergroup_id, opts = {})
      data, _status_code, _headers = admin_usergroups_add_teams_with_http_info(token, team_ids, usergroup_id, opts)
      data
    end

    # Associate one or more default workspaces with an organization-wide IDP group.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param team_ids [String] A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
    # @param usergroup_id [String] An encoded usergroup (IDP Group) ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_usergroups_add_teams_with_http_info(token, team_ids, usergroup_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_usergroups_add_teams ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_usergroups_add_teams"
      end
      # verify the required parameter 'team_ids' is set
      if @api_client.config.client_side_validation && team_ids.nil?
        fail ArgumentError, "Missing the required parameter 'team_ids' when calling AdminApi.admin_usergroups_add_teams"
      end
      # verify the required parameter 'usergroup_id' is set
      if @api_client.config.client_side_validation && usergroup_id.nil?
        fail ArgumentError, "Missing the required parameter 'usergroup_id' when calling AdminApi.admin_usergroups_add_teams"
      end
      # resource path
      local_var_path = '/admin.usergroups.addTeams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['team_ids'] = team_ids
      form_params['usergroup_id'] = usergroup_id
      form_params['auto_provision'] = opts[:'auto_provision'] if !opts[:'auto_provision'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_usergroups_add_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_usergroups_add_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the channels linked to an org-level IDP group (user group).
    # @param token [String] Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60;
    # @param usergroup_id [String] ID of the IDP group to list default channels for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id ID of the the workspace.
    # @option opts [Boolean] :include_num_members Flag to include or exclude the count of members per channel.
    # @return [DefaultSuccessTemplate]
    def admin_usergroups_list_channels(token, usergroup_id, opts = {})
      data, _status_code, _headers = admin_usergroups_list_channels_with_http_info(token, usergroup_id, opts)
      data
    end

    # List the channels linked to an org-level IDP group (user group).
    # @param token [String] Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60;
    # @param usergroup_id [String] ID of the IDP group to list default channels for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id ID of the the workspace.
    # @option opts [Boolean] :include_num_members Flag to include or exclude the count of members per channel.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_usergroups_list_channels_with_http_info(token, usergroup_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_usergroups_list_channels ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_usergroups_list_channels"
      end
      # verify the required parameter 'usergroup_id' is set
      if @api_client.config.client_side_validation && usergroup_id.nil?
        fail ArgumentError, "Missing the required parameter 'usergroup_id' when calling AdminApi.admin_usergroups_list_channels"
      end
      # resource path
      local_var_path = '/admin.usergroups.listChannels'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'usergroup_id'] = usergroup_id
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'include_num_members'] = opts[:'include_num_members'] if !opts[:'include_num_members'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_usergroups_list_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_usergroups_list_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove one or more default channels from an org-level IDP group (user group).
    # @param token [String] Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
    # @param channel_ids [String] Comma-separated string of channel IDs
    # @param usergroup_id [String] ID of the IDP Group
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_usergroups_remove_channels(token, channel_ids, usergroup_id, opts = {})
      data, _status_code, _headers = admin_usergroups_remove_channels_with_http_info(token, channel_ids, usergroup_id, opts)
      data
    end

    # Remove one or more default channels from an org-level IDP group (user group).
    # @param token [String] Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
    # @param channel_ids [String] Comma-separated string of channel IDs
    # @param usergroup_id [String] ID of the IDP Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_usergroups_remove_channels_with_http_info(token, channel_ids, usergroup_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_usergroups_remove_channels ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_usergroups_remove_channels"
      end
      # verify the required parameter 'channel_ids' is set
      if @api_client.config.client_side_validation && channel_ids.nil?
        fail ArgumentError, "Missing the required parameter 'channel_ids' when calling AdminApi.admin_usergroups_remove_channels"
      end
      # verify the required parameter 'usergroup_id' is set
      if @api_client.config.client_side_validation && usergroup_id.nil?
        fail ArgumentError, "Missing the required parameter 'usergroup_id' when calling AdminApi.admin_usergroups_remove_channels"
      end
      # resource path
      local_var_path = '/admin.usergroups.removeChannels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_ids'] = channel_ids
      form_params['usergroup_id'] = usergroup_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_usergroups_remove_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_usergroups_remove_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add an Enterprise user to a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to add to the workspace.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel_ids Comma separated values of channel IDs to add user in the new workspace.
    # @option opts [Boolean] :is_restricted True if user should be added to the workspace as a guest.
    # @option opts [Boolean] :is_ultra_restricted True if user should be added to the workspace as a single-channel guest.
    # @return [DefaultSuccessTemplate]
    def admin_users_assign(token, team_id, user_id, opts = {})
      data, _status_code, _headers = admin_users_assign_with_http_info(token, team_id, user_id, opts)
      data
    end

    # Add an Enterprise user to a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to add to the workspace.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel_ids Comma separated values of channel IDs to add user in the new workspace.
    # @option opts [Boolean] :is_restricted True if user should be added to the workspace as a guest.
    # @option opts [Boolean] :is_ultra_restricted True if user should be added to the workspace as a single-channel guest.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_assign_with_http_info(token, team_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_users_assign ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_users_assign"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_users_assign"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.admin_users_assign"
      end
      # resource path
      local_var_path = '/admin.users.assign'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['team_id'] = team_id
      form_params['user_id'] = user_id
      form_params['channel_ids'] = opts[:'channel_ids'] if !opts[:'channel_ids'].nil?
      form_params['is_restricted'] = opts[:'is_restricted'] if !opts[:'is_restricted'].nil?
      form_params['is_ultra_restricted'] = opts[:'is_ultra_restricted'] if !opts[:'is_ultra_restricted'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_users_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_users_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invite a user to a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param channel_ids [String] A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required.
    # @param email [String] The email address of the person to invite.
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_message An optional message to send to the user in the invite email.
    # @option opts [String] :guest_expiration_ts Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
    # @option opts [Boolean] :is_restricted Is this user a multi-channel guest user? (default: false)
    # @option opts [Boolean] :is_ultra_restricted Is this user a single channel guest user? (default: false)
    # @option opts [String] :real_name Full name of the user.
    # @option opts [Boolean] :resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
    # @return [DefaultSuccessTemplate]
    def admin_users_invite(token, channel_ids, email, team_id, opts = {})
      data, _status_code, _headers = admin_users_invite_with_http_info(token, channel_ids, email, team_id, opts)
      data
    end

    # Invite a user to a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param channel_ids [String] A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required.
    # @param email [String] The email address of the person to invite.
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_message An optional message to send to the user in the invite email.
    # @option opts [String] :guest_expiration_ts Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
    # @option opts [Boolean] :is_restricted Is this user a multi-channel guest user? (default: false)
    # @option opts [Boolean] :is_ultra_restricted Is this user a single channel guest user? (default: false)
    # @option opts [String] :real_name Full name of the user.
    # @option opts [Boolean] :resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_invite_with_http_info(token, channel_ids, email, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_users_invite ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_users_invite"
      end
      # verify the required parameter 'channel_ids' is set
      if @api_client.config.client_side_validation && channel_ids.nil?
        fail ArgumentError, "Missing the required parameter 'channel_ids' when calling AdminApi.admin_users_invite"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AdminApi.admin_users_invite"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_users_invite"
      end
      # resource path
      local_var_path = '/admin.users.invite'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_ids'] = channel_ids
      form_params['email'] = email
      form_params['team_id'] = team_id
      form_params['custom_message'] = opts[:'custom_message'] if !opts[:'custom_message'].nil?
      form_params['guest_expiration_ts'] = opts[:'guest_expiration_ts'] if !opts[:'guest_expiration_ts'].nil?
      form_params['is_restricted'] = opts[:'is_restricted'] if !opts[:'is_restricted'].nil?
      form_params['is_ultra_restricted'] = opts[:'is_ultra_restricted'] if !opts[:'is_ultra_restricted'].nil?
      form_params['real_name'] = opts[:'real_name'] if !opts[:'real_name'].nil?
      form_params['resend'] = opts[:'resend'] if !opts[:'resend'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_users_invite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_users_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List users on a workspace
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:read&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @option opts [Integer] :limit Limit for how many users to be retrieved per page
    # @return [DefaultSuccessTemplate]
    def admin_users_list(token, team_id, opts = {})
      data, _status_code, _headers = admin_users_list_with_http_info(token, team_id, opts)
      data
    end

    # List users on a workspace
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:read&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @option opts [Integer] :limit Limit for how many users to be retrieved per page
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_list_with_http_info(token, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_users_list ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_users_list"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_users_list"
      end
      # resource path
      local_var_path = '/admin.users.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'team_id'] = team_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_users_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_users_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to remove.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_users_remove(token, team_id, user_id, opts = {})
      data, _status_code, _headers = admin_users_remove_with_http_info(token, team_id, user_id, opts)
      data
    end

    # Remove a user from a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to remove.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_remove_with_http_info(token, team_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_users_remove ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_users_remove"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_users_remove"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.admin_users_remove"
      end
      # resource path
      local_var_path = '/admin.users.remove'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['team_id'] = team_id
      form_params['user_id'] = user_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_users_remove",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_users_remove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invalidate a single session for a user by session_id
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param session_id [Integer] 
    # @param team_id [String] ID of the team that the session belongs to
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_users_session_invalidate(token, session_id, team_id, opts = {})
      data, _status_code, _headers = admin_users_session_invalidate_with_http_info(token, session_id, team_id, opts)
      data
    end

    # Invalidate a single session for a user by session_id
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param session_id [Integer] 
    # @param team_id [String] ID of the team that the session belongs to
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_session_invalidate_with_http_info(token, session_id, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_users_session_invalidate ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_users_session_invalidate"
      end
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling AdminApi.admin_users_session_invalidate"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_users_session_invalidate"
      end
      # resource path
      local_var_path = '/admin.users.session.invalidate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['session_id'] = session_id
      form_params['team_id'] = team_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_users_session_invalidate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_users_session_invalidate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Wipes all valid sessions on all devices for a given user
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param user_id [String] The ID of the user to wipe sessions for
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :mobile_only Only expire mobile sessions (default: false)
    # @option opts [Boolean] :web_only Only expire web sessions (default: false)
    # @return [DefaultSuccessTemplate]
    def admin_users_session_reset(token, user_id, opts = {})
      data, _status_code, _headers = admin_users_session_reset_with_http_info(token, user_id, opts)
      data
    end

    # Wipes all valid sessions on all devices for a given user
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param user_id [String] The ID of the user to wipe sessions for
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :mobile_only Only expire mobile sessions (default: false)
    # @option opts [Boolean] :web_only Only expire web sessions (default: false)
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_session_reset_with_http_info(token, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_users_session_reset ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_users_session_reset"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.admin_users_session_reset"
      end
      # resource path
      local_var_path = '/admin.users.session.reset'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['user_id'] = user_id
      form_params['mobile_only'] = opts[:'mobile_only'] if !opts[:'mobile_only'].nil?
      form_params['web_only'] = opts[:'web_only'] if !opts[:'web_only'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_users_session_reset",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_users_session_reset\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an existing guest, regular user, or owner to be an admin user.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to designate as an admin.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_users_set_admin(token, team_id, user_id, opts = {})
      data, _status_code, _headers = admin_users_set_admin_with_http_info(token, team_id, user_id, opts)
      data
    end

    # Set an existing guest, regular user, or owner to be an admin user.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to designate as an admin.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_set_admin_with_http_info(token, team_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_users_set_admin ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_users_set_admin"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_users_set_admin"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.admin_users_set_admin"
      end
      # resource path
      local_var_path = '/admin.users.setAdmin'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['team_id'] = team_id
      form_params['user_id'] = user_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_users_set_admin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_users_set_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an expiration for a guest user
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param expiration_ts [Integer] Timestamp when guest account should be disabled.
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to set an expiration for.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_users_set_expiration(token, expiration_ts, team_id, user_id, opts = {})
      data, _status_code, _headers = admin_users_set_expiration_with_http_info(token, expiration_ts, team_id, user_id, opts)
      data
    end

    # Set an expiration for a guest user
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param expiration_ts [Integer] Timestamp when guest account should be disabled.
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to set an expiration for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_set_expiration_with_http_info(token, expiration_ts, team_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_users_set_expiration ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_users_set_expiration"
      end
      # verify the required parameter 'expiration_ts' is set
      if @api_client.config.client_side_validation && expiration_ts.nil?
        fail ArgumentError, "Missing the required parameter 'expiration_ts' when calling AdminApi.admin_users_set_expiration"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_users_set_expiration"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.admin_users_set_expiration"
      end
      # resource path
      local_var_path = '/admin.users.setExpiration'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['expiration_ts'] = expiration_ts
      form_params['team_id'] = team_id
      form_params['user_id'] = user_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_users_set_expiration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_users_set_expiration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an existing guest, regular user, or admin user to be a workspace owner.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] Id of the user to promote to owner.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_users_set_owner(token, team_id, user_id, opts = {})
      data, _status_code, _headers = admin_users_set_owner_with_http_info(token, team_id, user_id, opts)
      data
    end

    # Set an existing guest, regular user, or admin user to be a workspace owner.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] Id of the user to promote to owner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_set_owner_with_http_info(token, team_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_users_set_owner ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_users_set_owner"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_users_set_owner"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.admin_users_set_owner"
      end
      # resource path
      local_var_path = '/admin.users.setOwner'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['team_id'] = team_id
      form_params['user_id'] = user_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_users_set_owner",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_users_set_owner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an existing guest user, admin user, or owner to be a regular user.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to designate as a regular user.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_users_set_regular(token, team_id, user_id, opts = {})
      data, _status_code, _headers = admin_users_set_regular_with_http_info(token, team_id, user_id, opts)
      data
    end

    # Set an existing guest user, admin user, or owner to be a regular user.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to designate as a regular user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_set_regular_with_http_info(token, team_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminApi.admin_users_set_regular ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminApi.admin_users_set_regular"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminApi.admin_users_set_regular"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminApi.admin_users_set_regular"
      end
      # resource path
      local_var_path = '/admin.users.setRegular'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['team_id'] = team_id
      form_params['user_id'] = user_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminApi.admin_users_set_regular",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminApi#admin_users_set_regular\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
