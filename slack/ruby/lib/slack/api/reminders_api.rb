=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class RemindersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a reminder.
    # @param token [String] Authentication token. Requires scope: &#x60;reminders:write&#x60;
    # @param text [String] The content of the reminder
    # @param time [String] When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \\\&quot;in 15 minutes,\\\&quot; or \\\&quot;every Thursday\\\&quot;)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.
    # @return [RemindersAddSchema]
    def reminders_add(token, text, time, opts = {})
      data, _status_code, _headers = reminders_add_with_http_info(token, text, time, opts)
      data
    end

    # Creates a reminder.
    # @param token [String] Authentication token. Requires scope: &#x60;reminders:write&#x60;
    # @param text [String] The content of the reminder
    # @param time [String] When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \\\&quot;in 15 minutes,\\\&quot; or \\\&quot;every Thursday\\\&quot;)
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user The user who will receive the reminder. If no user is specified, the reminder will go to user who created it.
    # @return [Array<(RemindersAddSchema, Integer, Hash)>] RemindersAddSchema data, response status code and response headers
    def reminders_add_with_http_info(token, text, time, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RemindersApi.reminders_add ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling RemindersApi.reminders_add"
      end
      # verify the required parameter 'text' is set
      if @api_client.config.client_side_validation && text.nil?
        fail ArgumentError, "Missing the required parameter 'text' when calling RemindersApi.reminders_add"
      end
      # verify the required parameter 'time' is set
      if @api_client.config.client_side_validation && time.nil?
        fail ArgumentError, "Missing the required parameter 'time' when calling RemindersApi.reminders_add"
      end
      # resource path
      local_var_path = '/reminders.add'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['text'] = text
      form_params['time'] = time
      form_params['user'] = opts[:'user'] if !opts[:'user'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RemindersAddSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"RemindersApi.reminders_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RemindersApi#reminders_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Marks a reminder as complete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;reminders:write&#x60;
    # @option opts [String] :reminder The ID of the reminder to be marked as complete
    # @return [RemindersCompleteSchema]
    def reminders_complete(opts = {})
      data, _status_code, _headers = reminders_complete_with_http_info(opts)
      data
    end

    # Marks a reminder as complete.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;reminders:write&#x60;
    # @option opts [String] :reminder The ID of the reminder to be marked as complete
    # @return [Array<(RemindersCompleteSchema, Integer, Hash)>] RemindersCompleteSchema data, response status code and response headers
    def reminders_complete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RemindersApi.reminders_complete ...'
      end
      # resource path
      local_var_path = '/reminders.complete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['reminder'] = opts[:'reminder'] if !opts[:'reminder'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RemindersCompleteSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"RemindersApi.reminders_complete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RemindersApi#reminders_complete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a reminder.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;reminders:write&#x60;
    # @option opts [String] :reminder The ID of the reminder
    # @return [RemindersDeleteSchema]
    def reminders_delete(opts = {})
      data, _status_code, _headers = reminders_delete_with_http_info(opts)
      data
    end

    # Deletes a reminder.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;reminders:write&#x60;
    # @option opts [String] :reminder The ID of the reminder
    # @return [Array<(RemindersDeleteSchema, Integer, Hash)>] RemindersDeleteSchema data, response status code and response headers
    def reminders_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RemindersApi.reminders_delete ...'
      end
      # resource path
      local_var_path = '/reminders.delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['reminder'] = opts[:'reminder'] if !opts[:'reminder'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RemindersDeleteSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"RemindersApi.reminders_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RemindersApi#reminders_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets information about a reminder.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;reminders:read&#x60;
    # @option opts [String] :reminder The ID of the reminder
    # @return [RemindersInfoSchema]
    def reminders_info(opts = {})
      data, _status_code, _headers = reminders_info_with_http_info(opts)
      data
    end

    # Gets information about a reminder.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;reminders:read&#x60;
    # @option opts [String] :reminder The ID of the reminder
    # @return [Array<(RemindersInfoSchema, Integer, Hash)>] RemindersInfoSchema data, response status code and response headers
    def reminders_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RemindersApi.reminders_info ...'
      end
      # resource path
      local_var_path = '/reminders.info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'reminder'] = opts[:'reminder'] if !opts[:'reminder'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RemindersInfoSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"RemindersApi.reminders_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RemindersApi#reminders_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all reminders created by or for a given user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;reminders:read&#x60;
    # @return [RemindersListSchema]
    def reminders_list(opts = {})
      data, _status_code, _headers = reminders_list_with_http_info(opts)
      data
    end

    # Lists all reminders created by or for a given user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;reminders:read&#x60;
    # @return [Array<(RemindersListSchema, Integer, Hash)>] RemindersListSchema data, response status code and response headers
    def reminders_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RemindersApi.reminders_list ...'
      end
      # resource path
      local_var_path = '/reminders.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RemindersListSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"RemindersApi.reminders_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RemindersApi#reminders_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
