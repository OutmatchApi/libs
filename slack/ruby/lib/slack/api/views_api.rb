=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class ViewsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Open a view for a user.
    # @param token [String] Authentication token. Requires scope: &#x60;none&#x60;
    # @param trigger_id [String] Exchange a trigger to post to the user.
    # @param view [String] A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def views_open(token, trigger_id, view, opts = {})
      data, _status_code, _headers = views_open_with_http_info(token, trigger_id, view, opts)
      data
    end

    # Open a view for a user.
    # @param token [String] Authentication token. Requires scope: &#x60;none&#x60;
    # @param trigger_id [String] Exchange a trigger to post to the user.
    # @param view [String] A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def views_open_with_http_info(token, trigger_id, view, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ViewsApi.views_open ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ViewsApi.views_open"
      end
      # verify the required parameter 'trigger_id' is set
      if @api_client.config.client_side_validation && trigger_id.nil?
        fail ArgumentError, "Missing the required parameter 'trigger_id' when calling ViewsApi.views_open"
      end
      # verify the required parameter 'view' is set
      if @api_client.config.client_side_validation && view.nil?
        fail ArgumentError, "Missing the required parameter 'view' when calling ViewsApi.views_open"
      end
      # resource path
      local_var_path = '/views.open'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'trigger_id'] = trigger_id
      query_params[:'view'] = view

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ViewsApi.views_open",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ViewsApi#views_open\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publish a static view for a User.
    # @param token [String] Authentication token. Requires scope: &#x60;none&#x60;
    # @param user_id [String] &#x60;id&#x60; of the user you want publish a view to.
    # @param view [String] A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :hash A string that represents view state to protect against possible race conditions.
    # @return [DefaultSuccessTemplate]
    def views_publish(token, user_id, view, opts = {})
      data, _status_code, _headers = views_publish_with_http_info(token, user_id, view, opts)
      data
    end

    # Publish a static view for a User.
    # @param token [String] Authentication token. Requires scope: &#x60;none&#x60;
    # @param user_id [String] &#x60;id&#x60; of the user you want publish a view to.
    # @param view [String] A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :hash A string that represents view state to protect against possible race conditions.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def views_publish_with_http_info(token, user_id, view, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ViewsApi.views_publish ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ViewsApi.views_publish"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling ViewsApi.views_publish"
      end
      # verify the required parameter 'view' is set
      if @api_client.config.client_side_validation && view.nil?
        fail ArgumentError, "Missing the required parameter 'view' when calling ViewsApi.views_publish"
      end
      # resource path
      local_var_path = '/views.publish'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'user_id'] = user_id
      query_params[:'view'] = view
      query_params[:'hash'] = opts[:'hash'] if !opts[:'hash'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ViewsApi.views_publish",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ViewsApi#views_publish\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Push a view onto the stack of a root view.
    # @param token [String] Authentication token. Requires scope: &#x60;none&#x60;
    # @param trigger_id [String] Exchange a trigger to post to the user.
    # @param view [String] A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def views_push(token, trigger_id, view, opts = {})
      data, _status_code, _headers = views_push_with_http_info(token, trigger_id, view, opts)
      data
    end

    # Push a view onto the stack of a root view.
    # @param token [String] Authentication token. Requires scope: &#x60;none&#x60;
    # @param trigger_id [String] Exchange a trigger to post to the user.
    # @param view [String] A [view payload](/reference/surfaces/views). This must be a JSON-encoded string.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def views_push_with_http_info(token, trigger_id, view, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ViewsApi.views_push ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ViewsApi.views_push"
      end
      # verify the required parameter 'trigger_id' is set
      if @api_client.config.client_side_validation && trigger_id.nil?
        fail ArgumentError, "Missing the required parameter 'trigger_id' when calling ViewsApi.views_push"
      end
      # verify the required parameter 'view' is set
      if @api_client.config.client_side_validation && view.nil?
        fail ArgumentError, "Missing the required parameter 'view' when calling ViewsApi.views_push"
      end
      # resource path
      local_var_path = '/views.push'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'trigger_id'] = trigger_id
      query_params[:'view'] = view

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ViewsApi.views_push",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ViewsApi#views_push\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an existing view.
    # @param token [String] Authentication token. Requires scope: &#x60;none&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view_id A unique identifier of the view to be updated. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required.
    # @option opts [String] :external_id A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required.
    # @option opts [String] :view A [view object](/reference/surfaces/views). This must be a JSON-encoded string.
    # @option opts [String] :hash A string that represents view state to protect against possible race conditions.
    # @return [DefaultSuccessTemplate]
    def views_update(token, opts = {})
      data, _status_code, _headers = views_update_with_http_info(token, opts)
      data
    end

    # Update an existing view.
    # @param token [String] Authentication token. Requires scope: &#x60;none&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view_id A unique identifier of the view to be updated. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required.
    # @option opts [String] :external_id A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either &#x60;view_id&#x60; or &#x60;external_id&#x60; is required.
    # @option opts [String] :view A [view object](/reference/surfaces/views). This must be a JSON-encoded string.
    # @option opts [String] :hash A string that represents view state to protect against possible race conditions.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def views_update_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ViewsApi.views_update ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ViewsApi.views_update"
      end
      # resource path
      local_var_path = '/views.update'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'view_id'] = opts[:'view_id'] if !opts[:'view_id'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'view'] = opts[:'view'] if !opts[:'view'].nil?
      query_params[:'hash'] = opts[:'hash'] if !opts[:'hash'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ViewsApi.views_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ViewsApi#views_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
