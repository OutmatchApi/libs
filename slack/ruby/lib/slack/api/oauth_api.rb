=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class OauthApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Exchanges a temporary OAuth verifier code for an access token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Issued when you created your application.
    # @option opts [String] :client_secret Issued when you created your application.
    # @option opts [String] :code The &#x60;code&#x60; param returned via the OAuth callback.
    # @option opts [String] :redirect_uri This must match the originally submitted URI (if one was sent).
    # @option opts [Boolean] :single_channel Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps).
    # @return [DefaultSuccessTemplate]
    def oauth_access(opts = {})
      data, _status_code, _headers = oauth_access_with_http_info(opts)
      data
    end

    # Exchanges a temporary OAuth verifier code for an access token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Issued when you created your application.
    # @option opts [String] :client_secret Issued when you created your application.
    # @option opts [String] :code The &#x60;code&#x60; param returned via the OAuth callback.
    # @option opts [String] :redirect_uri This must match the originally submitted URI (if one was sent).
    # @option opts [Boolean] :single_channel Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps).
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def oauth_access_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_access ...'
      end
      # resource path
      local_var_path = '/oauth.access'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'client_id'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      query_params[:'client_secret'] = opts[:'client_secret'] if !opts[:'client_secret'].nil?
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'redirect_uri'] = opts[:'redirect_uri'] if !opts[:'redirect_uri'].nil?
      query_params[:'single_channel'] = opts[:'single_channel'] if !opts[:'single_channel'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exchanges a temporary OAuth verifier code for a workspace token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Issued when you created your application.
    # @option opts [String] :client_secret Issued when you created your application.
    # @option opts [String] :code The &#x60;code&#x60; param returned via the OAuth callback.
    # @option opts [String] :redirect_uri This must match the originally submitted URI (if one was sent).
    # @option opts [Boolean] :single_channel Request the user to add your app only to a single channel.
    # @return [DefaultSuccessTemplate]
    def oauth_token(opts = {})
      data, _status_code, _headers = oauth_token_with_http_info(opts)
      data
    end

    # Exchanges a temporary OAuth verifier code for a workspace token.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Issued when you created your application.
    # @option opts [String] :client_secret Issued when you created your application.
    # @option opts [String] :code The &#x60;code&#x60; param returned via the OAuth callback.
    # @option opts [String] :redirect_uri This must match the originally submitted URI (if one was sent).
    # @option opts [Boolean] :single_channel Request the user to add your app only to a single channel.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def oauth_token_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_token ...'
      end
      # resource path
      local_var_path = '/oauth.token'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'client_id'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      query_params[:'client_secret'] = opts[:'client_secret'] if !opts[:'client_secret'].nil?
      query_params[:'code'] = opts[:'code'] if !opts[:'code'].nil?
      query_params[:'redirect_uri'] = opts[:'redirect_uri'] if !opts[:'redirect_uri'].nil?
      query_params[:'single_channel'] = opts[:'single_channel'] if !opts[:'single_channel'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Exchanges a temporary OAuth verifier code for an access token.
    # @param code [String] The &#x60;code&#x60; param returned via the OAuth callback.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Issued when you created your application.
    # @option opts [String] :client_secret Issued when you created your application.
    # @option opts [String] :redirect_uri This must match the originally submitted URI (if one was sent).
    # @return [DefaultSuccessTemplate]
    def oauth_v2_access(code, opts = {})
      data, _status_code, _headers = oauth_v2_access_with_http_info(code, opts)
      data
    end

    # Exchanges a temporary OAuth verifier code for an access token.
    # @param code [String] The &#x60;code&#x60; param returned via the OAuth callback.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :client_id Issued when you created your application.
    # @option opts [String] :client_secret Issued when you created your application.
    # @option opts [String] :redirect_uri This must match the originally submitted URI (if one was sent).
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def oauth_v2_access_with_http_info(code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: OauthApi.oauth_v2_access ...'
      end
      # verify the required parameter 'code' is set
      if @api_client.config.client_side_validation && code.nil?
        fail ArgumentError, "Missing the required parameter 'code' when calling OauthApi.oauth_v2_access"
      end
      # resource path
      local_var_path = '/oauth.v2.access'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'code'] = code
      query_params[:'client_id'] = opts[:'client_id'] if !opts[:'client_id'].nil?
      query_params[:'client_secret'] = opts[:'client_secret'] if !opts[:'client_secret'].nil?
      query_params[:'redirect_uri'] = opts[:'redirect_uri'] if !opts[:'redirect_uri'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"OauthApi.oauth_v2_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: OauthApi#oauth_v2_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
