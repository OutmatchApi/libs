=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class SearchApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Searches for messages matching a query.
    # @param token [String] Authentication token. Requires scope: &#x60;search:read&#x60;
    # @param query [String] Search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Pass the number of results you want per \&quot;page\&quot;. Maximum of &#x60;100&#x60;.
    # @option opts [Boolean] :highlight Pass a value of &#x60;true&#x60; to enable query highlight markers (see below).
    # @option opts [Integer] :page 
    # @option opts [String] :sort Return matches sorted by either &#x60;score&#x60; or &#x60;timestamp&#x60;.
    # @option opts [String] :sort_dir Change sort direction to ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;).
    # @return [DefaultSuccessTemplate]
    def search_messages(token, query, opts = {})
      data, _status_code, _headers = search_messages_with_http_info(token, query, opts)
      data
    end

    # Searches for messages matching a query.
    # @param token [String] Authentication token. Requires scope: &#x60;search:read&#x60;
    # @param query [String] Search query.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :count Pass the number of results you want per \&quot;page\&quot;. Maximum of &#x60;100&#x60;.
    # @option opts [Boolean] :highlight Pass a value of &#x60;true&#x60; to enable query highlight markers (see below).
    # @option opts [Integer] :page 
    # @option opts [String] :sort Return matches sorted by either &#x60;score&#x60; or &#x60;timestamp&#x60;.
    # @option opts [String] :sort_dir Change sort direction to ascending (&#x60;asc&#x60;) or descending (&#x60;desc&#x60;).
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def search_messages_with_http_info(token, query, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SearchApi.search_messages ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling SearchApi.search_messages"
      end
      # verify the required parameter 'query' is set
      if @api_client.config.client_side_validation && query.nil?
        fail ArgumentError, "Missing the required parameter 'query' when calling SearchApi.search_messages"
      end
      # resource path
      local_var_path = '/search.messages'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'query'] = query
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'highlight'] = opts[:'highlight'] if !opts[:'highlight'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sort_dir'] = opts[:'sort_dir'] if !opts[:'sort_dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"SearchApi.search_messages",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SearchApi#search_messages\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
