=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class UsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List conversations the calling user may access.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;conversations:read&#x60;
    # @option opts [String] :user Browse conversations by a specific user ID&#39;s membership. Non-public channels are restricted to those where the calling user shares membership.
    # @option opts [String] :types Mix and match channel types by providing a comma-separated list of any combination of &#x60;public_channel&#x60;, &#x60;private_channel&#x60;, &#x60;mpim&#x60;, &#x60;im&#x60;
    # @option opts [Boolean] :exclude_archived Set to &#x60;true&#x60; to exclude archived channels from the list
    # @option opts [Integer] :limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. Must be an integer no larger than 1000.
    # @option opts [String] :cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.
    # @return [UsersConversationsSuccessSchema]
    def users_conversations(opts = {})
      data, _status_code, _headers = users_conversations_with_http_info(opts)
      data
    end

    # List conversations the calling user may access.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;conversations:read&#x60;
    # @option opts [String] :user Browse conversations by a specific user ID&#39;s membership. Non-public channels are restricted to those where the calling user shares membership.
    # @option opts [String] :types Mix and match channel types by providing a comma-separated list of any combination of &#x60;public_channel&#x60;, &#x60;private_channel&#x60;, &#x60;mpim&#x60;, &#x60;im&#x60;
    # @option opts [Boolean] :exclude_archived Set to &#x60;true&#x60; to exclude archived channels from the list
    # @option opts [Integer] :limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached. Must be an integer no larger than 1000.
    # @option opts [String] :cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.
    # @return [Array<(UsersConversationsSuccessSchema, Integer, Hash)>] UsersConversationsSuccessSchema data, response status code and response headers
    def users_conversations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_conversations ...'
      end
      # resource path
      local_var_path = '/users.conversations'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'types'] = opts[:'types'] if !opts[:'types'].nil?
      query_params[:'exclude_archived'] = opts[:'exclude_archived'] if !opts[:'exclude_archived'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersConversationsSuccessSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.users_conversations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_conversations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete the user profile photo
    # @param token [String] Authentication token. Requires scope: &#x60;users.profile:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [UsersDeletePhotoSchema]
    def users_delete_photo(token, opts = {})
      data, _status_code, _headers = users_delete_photo_with_http_info(token, opts)
      data
    end

    # Delete the user profile photo
    # @param token [String] Authentication token. Requires scope: &#x60;users.profile:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsersDeletePhotoSchema, Integer, Hash)>] UsersDeletePhotoSchema data, response status code and response headers
    def users_delete_photo_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_delete_photo ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.users_delete_photo"
      end
      # resource path
      local_var_path = '/users.deletePhoto'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['token'] = token

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersDeletePhotoSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.users_delete_photo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_delete_photo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets user presence information.
    # @param token [String] Authentication token. Requires scope: &#x60;users:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user User to get presence info on. Defaults to the authed user.
    # @return [APIMethodUsersGetPresence]
    def users_get_presence(token, opts = {})
      data, _status_code, _headers = users_get_presence_with_http_info(token, opts)
      data
    end

    # Gets user presence information.
    # @param token [String] Authentication token. Requires scope: &#x60;users:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :user User to get presence info on. Defaults to the authed user.
    # @return [Array<(APIMethodUsersGetPresence, Integer, Hash)>] APIMethodUsersGetPresence data, response status code and response headers
    def users_get_presence_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_get_presence ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.users_get_presence"
      end
      # resource path
      local_var_path = '/users.getPresence'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'APIMethodUsersGetPresence'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.users_get_presence",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_get_presence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get a user's identity.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;identity.basic&#x60;
    # @return [Array<UsersIdentitySchemaInner>]
    def users_identity(opts = {})
      data, _status_code, _headers = users_identity_with_http_info(opts)
      data
    end

    # Get a user&#39;s identity.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;identity.basic&#x60;
    # @return [Array<(Array<UsersIdentitySchemaInner>, Integer, Hash)>] Array<UsersIdentitySchemaInner> data, response status code and response headers
    def users_identity_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_identity ...'
      end
      # resource path
      local_var_path = '/users.identity'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<UsersIdentitySchemaInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.users_identity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_identity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets information about a user.
    # @param token [String] Authentication token. Requires scope: &#x60;users:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_locale Set this to &#x60;true&#x60; to receive the locale for this user. Defaults to &#x60;false&#x60;
    # @option opts [String] :user User to get info on
    # @return [UsersInfoSuccessSchema]
    def users_info(token, opts = {})
      data, _status_code, _headers = users_info_with_http_info(token, opts)
      data
    end

    # Gets information about a user.
    # @param token [String] Authentication token. Requires scope: &#x60;users:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_locale Set this to &#x60;true&#x60; to receive the locale for this user. Defaults to &#x60;false&#x60;
    # @option opts [String] :user User to get info on
    # @return [Array<(UsersInfoSuccessSchema, Integer, Hash)>] UsersInfoSuccessSchema data, response status code and response headers
    def users_info_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_info ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.users_info"
      end
      # resource path
      local_var_path = '/users.info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'include_locale'] = opts[:'include_locale'] if !opts[:'include_locale'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersInfoSuccessSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.users_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists all users in a Slack team.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;users:read&#x60;
    # @option opts [Integer] :limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&#39;t been reached. Providing no &#x60;limit&#x60; value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience &#x60;limit_required&#x60; or HTTP 500 errors.
    # @option opts [String] :cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.
    # @option opts [Boolean] :include_locale Set this to &#x60;true&#x60; to receive the locale for users. Defaults to &#x60;false&#x60;
    # @return [UsersListSchema]
    def users_list(opts = {})
      data, _status_code, _headers = users_list_with_http_info(opts)
      data
    end

    # Lists all users in a Slack team.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;users:read&#x60;
    # @option opts [Integer] :limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn&#39;t been reached. Providing no &#x60;limit&#x60; value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience &#x60;limit_required&#x60; or HTTP 500 errors.
    # @option opts [String] :cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.
    # @option opts [Boolean] :include_locale Set this to &#x60;true&#x60; to receive the locale for users. Defaults to &#x60;false&#x60;
    # @return [Array<(UsersListSchema, Integer, Hash)>] UsersListSchema data, response status code and response headers
    def users_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_list ...'
      end
      # resource path
      local_var_path = '/users.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'include_locale'] = opts[:'include_locale'] if !opts[:'include_locale'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersListSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.users_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Find a user with an email address.
    # @param token [String] Authentication token. Requires scope: &#x60;users:read.email&#x60;
    # @param email [String] An email address belonging to a user in the workspace
    # @param [Hash] opts the optional parameters
    # @return [UsersLookupByEmailSuccessSchema]
    def users_lookup_by_email(token, email, opts = {})
      data, _status_code, _headers = users_lookup_by_email_with_http_info(token, email, opts)
      data
    end

    # Find a user with an email address.
    # @param token [String] Authentication token. Requires scope: &#x60;users:read.email&#x60;
    # @param email [String] An email address belonging to a user in the workspace
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsersLookupByEmailSuccessSchema, Integer, Hash)>] UsersLookupByEmailSuccessSchema data, response status code and response headers
    def users_lookup_by_email_with_http_info(token, email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_lookup_by_email ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.users_lookup_by_email"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling UsersApi.users_lookup_by_email"
      end
      # resource path
      local_var_path = '/users.lookupByEmail'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'email'] = email

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersLookupByEmailSuccessSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.users_lookup_by_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_lookup_by_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a user's profile information.
    # @param token [String] Authentication token. Requires scope: &#x60;users.profile:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_labels Include labels for each ID in custom profile fields
    # @option opts [String] :user User to retrieve profile info for
    # @return [UsersProfileGetSchema]
    def users_profile_get(token, opts = {})
      data, _status_code, _headers = users_profile_get_with_http_info(token, opts)
      data
    end

    # Retrieves a user&#39;s profile information.
    # @param token [String] Authentication token. Requires scope: &#x60;users.profile:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_labels Include labels for each ID in custom profile fields
    # @option opts [String] :user User to retrieve profile info for
    # @return [Array<(UsersProfileGetSchema, Integer, Hash)>] UsersProfileGetSchema data, response status code and response headers
    def users_profile_get_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_profile_get ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.users_profile_get"
      end
      # resource path
      local_var_path = '/users.profile.get'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'include_labels'] = opts[:'include_labels'] if !opts[:'include_labels'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersProfileGetSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.users_profile_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_profile_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the profile information for a user.
    # @param token [String] Authentication token. Requires scope: &#x60;users.profile:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed.
    # @option opts [String] :profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.
    # @option opts [String] :user ID of user to change. This argument may only be specified by team admins on paid teams.
    # @option opts [String] :value Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed.
    # @return [UsersProfileSetSchema]
    def users_profile_set(token, opts = {})
      data, _status_code, _headers = users_profile_set_with_http_info(token, opts)
      data
    end

    # Set the profile information for a user.
    # @param token [String] Authentication token. Requires scope: &#x60;users.profile:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Name of a single key to set. Usable only if &#x60;profile&#x60; is not passed.
    # @option opts [String] :profile Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters.
    # @option opts [String] :user ID of user to change. This argument may only be specified by team admins on paid teams.
    # @option opts [String] :value Value to set a single key to. Usable only if &#x60;profile&#x60; is not passed.
    # @return [Array<(UsersProfileSetSchema, Integer, Hash)>] UsersProfileSetSchema data, response status code and response headers
    def users_profile_set_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_profile_set ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.users_profile_set"
      end
      # resource path
      local_var_path = '/users.profile.set'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['name'] = opts[:'name'] if !opts[:'name'].nil?
      form_params['profile'] = opts[:'profile'] if !opts[:'profile'].nil?
      form_params['user'] = opts[:'user'] if !opts[:'user'].nil?
      form_params['value'] = opts[:'value'] if !opts[:'value'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersProfileSetSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.users_profile_set",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_profile_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Marked a user as active. Deprecated and non-functional.
    # @param token [String] Authentication token. Requires scope: &#x60;users:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [UsersSetActiveSchema]
    def users_set_active(token, opts = {})
      data, _status_code, _headers = users_set_active_with_http_info(token, opts)
      data
    end

    # Marked a user as active. Deprecated and non-functional.
    # @param token [String] Authentication token. Requires scope: &#x60;users:write&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsersSetActiveSchema, Integer, Hash)>] UsersSetActiveSchema data, response status code and response headers
    def users_set_active_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_set_active ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.users_set_active"
      end
      # resource path
      local_var_path = '/users.setActive'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersSetActiveSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.users_set_active",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_set_active\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the user profile photo
    # @param token [String] Authentication token. Requires scope: &#x60;users.profile:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :crop_w Width/height of crop box (always square)
    # @option opts [String] :crop_x X coordinate of top-left corner of crop box
    # @option opts [String] :crop_y Y coordinate of top-left corner of crop box
    # @option opts [String] :image File contents via &#x60;multipart/form-data&#x60;.
    # @return [UsersSetPhotoSchema]
    def users_set_photo(token, opts = {})
      data, _status_code, _headers = users_set_photo_with_http_info(token, opts)
      data
    end

    # Set the user profile photo
    # @param token [String] Authentication token. Requires scope: &#x60;users.profile:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :crop_w Width/height of crop box (always square)
    # @option opts [String] :crop_x X coordinate of top-left corner of crop box
    # @option opts [String] :crop_y Y coordinate of top-left corner of crop box
    # @option opts [String] :image File contents via &#x60;multipart/form-data&#x60;.
    # @return [Array<(UsersSetPhotoSchema, Integer, Hash)>] UsersSetPhotoSchema data, response status code and response headers
    def users_set_photo_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_set_photo ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.users_set_photo"
      end
      # resource path
      local_var_path = '/users.setPhoto'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['token'] = token
      form_params['crop_w'] = opts[:'crop_w'] if !opts[:'crop_w'].nil?
      form_params['crop_x'] = opts[:'crop_x'] if !opts[:'crop_x'].nil?
      form_params['crop_y'] = opts[:'crop_y'] if !opts[:'crop_y'].nil?
      form_params['image'] = opts[:'image'] if !opts[:'image'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersSetPhotoSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.users_set_photo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_set_photo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Manually sets user presence.
    # @param token [String] Authentication token. Requires scope: &#x60;users:write&#x60;
    # @param presence [String] Either &#x60;auto&#x60; or &#x60;away&#x60;
    # @param [Hash] opts the optional parameters
    # @return [UsersSetPresenceSchema]
    def users_set_presence(token, presence, opts = {})
      data, _status_code, _headers = users_set_presence_with_http_info(token, presence, opts)
      data
    end

    # Manually sets user presence.
    # @param token [String] Authentication token. Requires scope: &#x60;users:write&#x60;
    # @param presence [String] Either &#x60;auto&#x60; or &#x60;away&#x60;
    # @param [Hash] opts the optional parameters
    # @return [Array<(UsersSetPresenceSchema, Integer, Hash)>] UsersSetPresenceSchema data, response status code and response headers
    def users_set_presence_with_http_info(token, presence, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UsersApi.users_set_presence ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling UsersApi.users_set_presence"
      end
      # verify the required parameter 'presence' is set
      if @api_client.config.client_side_validation && presence.nil?
        fail ArgumentError, "Missing the required parameter 'presence' when calling UsersApi.users_set_presence"
      end
      # resource path
      local_var_path = '/users.setPresence'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['presence'] = presence

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersSetPresenceSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"UsersApi.users_set_presence",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UsersApi#users_set_presence\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
