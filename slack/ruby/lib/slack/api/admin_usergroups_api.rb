=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class AdminUsergroupsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add one or more default channels to an IDP group.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
    # @param channel_ids [String] Comma separated string of channel IDs.
    # @param usergroup_id [String] ID of the IDP group to add default channels for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id The workspace to add default channels in.
    # @return [DefaultSuccessTemplate]
    def admin_usergroups_add_channels(token, channel_ids, usergroup_id, opts = {})
      data, _status_code, _headers = admin_usergroups_add_channels_with_http_info(token, channel_ids, usergroup_id, opts)
      data
    end

    # Add one or more default channels to an IDP group.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
    # @param channel_ids [String] Comma separated string of channel IDs.
    # @param usergroup_id [String] ID of the IDP group to add default channels for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id The workspace to add default channels in.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_usergroups_add_channels_with_http_info(token, channel_ids, usergroup_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminUsergroupsApi.admin_usergroups_add_channels ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminUsergroupsApi.admin_usergroups_add_channels"
      end
      # verify the required parameter 'channel_ids' is set
      if @api_client.config.client_side_validation && channel_ids.nil?
        fail ArgumentError, "Missing the required parameter 'channel_ids' when calling AdminUsergroupsApi.admin_usergroups_add_channels"
      end
      # verify the required parameter 'usergroup_id' is set
      if @api_client.config.client_side_validation && usergroup_id.nil?
        fail ArgumentError, "Missing the required parameter 'usergroup_id' when calling AdminUsergroupsApi.admin_usergroups_add_channels"
      end
      # resource path
      local_var_path = '/admin.usergroups.addChannels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_ids'] = channel_ids
      form_params['usergroup_id'] = usergroup_id
      form_params['team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminUsergroupsApi.admin_usergroups_add_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminUsergroupsApi#admin_usergroups_add_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Associate one or more default workspaces with an organization-wide IDP group.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param team_ids [String] A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
    # @param usergroup_id [String] An encoded usergroup (IDP Group) ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members.
    # @return [DefaultSuccessTemplate]
    def admin_usergroups_add_teams(token, team_ids, usergroup_id, opts = {})
      data, _status_code, _headers = admin_usergroups_add_teams_with_http_info(token, team_ids, usergroup_id, opts)
      data
    end

    # Associate one or more default workspaces with an organization-wide IDP group.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.teams:write&#x60;
    # @param team_ids [String] A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
    # @param usergroup_id [String] An encoded usergroup (IDP Group) ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :auto_provision When &#x60;true&#x60;, this method automatically creates new workspace accounts for the IDP group members.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_usergroups_add_teams_with_http_info(token, team_ids, usergroup_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminUsergroupsApi.admin_usergroups_add_teams ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminUsergroupsApi.admin_usergroups_add_teams"
      end
      # verify the required parameter 'team_ids' is set
      if @api_client.config.client_side_validation && team_ids.nil?
        fail ArgumentError, "Missing the required parameter 'team_ids' when calling AdminUsergroupsApi.admin_usergroups_add_teams"
      end
      # verify the required parameter 'usergroup_id' is set
      if @api_client.config.client_side_validation && usergroup_id.nil?
        fail ArgumentError, "Missing the required parameter 'usergroup_id' when calling AdminUsergroupsApi.admin_usergroups_add_teams"
      end
      # resource path
      local_var_path = '/admin.usergroups.addTeams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['team_ids'] = team_ids
      form_params['usergroup_id'] = usergroup_id
      form_params['auto_provision'] = opts[:'auto_provision'] if !opts[:'auto_provision'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminUsergroupsApi.admin_usergroups_add_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminUsergroupsApi#admin_usergroups_add_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List the channels linked to an org-level IDP group (user group).
    # @param token [String] Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60;
    # @param usergroup_id [String] ID of the IDP group to list default channels for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id ID of the the workspace.
    # @option opts [Boolean] :include_num_members Flag to include or exclude the count of members per channel.
    # @return [DefaultSuccessTemplate]
    def admin_usergroups_list_channels(token, usergroup_id, opts = {})
      data, _status_code, _headers = admin_usergroups_list_channels_with_http_info(token, usergroup_id, opts)
      data
    end

    # List the channels linked to an org-level IDP group (user group).
    # @param token [String] Authentication token. Requires scope: &#x60;admin.usergroups:read&#x60;
    # @param usergroup_id [String] ID of the IDP group to list default channels for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_id ID of the the workspace.
    # @option opts [Boolean] :include_num_members Flag to include or exclude the count of members per channel.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_usergroups_list_channels_with_http_info(token, usergroup_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminUsergroupsApi.admin_usergroups_list_channels ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminUsergroupsApi.admin_usergroups_list_channels"
      end
      # verify the required parameter 'usergroup_id' is set
      if @api_client.config.client_side_validation && usergroup_id.nil?
        fail ArgumentError, "Missing the required parameter 'usergroup_id' when calling AdminUsergroupsApi.admin_usergroups_list_channels"
      end
      # resource path
      local_var_path = '/admin.usergroups.listChannels'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'usergroup_id'] = usergroup_id
      query_params[:'team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?
      query_params[:'include_num_members'] = opts[:'include_num_members'] if !opts[:'include_num_members'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminUsergroupsApi.admin_usergroups_list_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminUsergroupsApi#admin_usergroups_list_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove one or more default channels from an org-level IDP group (user group).
    # @param token [String] Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
    # @param channel_ids [String] Comma-separated string of channel IDs
    # @param usergroup_id [String] ID of the IDP Group
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_usergroups_remove_channels(token, channel_ids, usergroup_id, opts = {})
      data, _status_code, _headers = admin_usergroups_remove_channels_with_http_info(token, channel_ids, usergroup_id, opts)
      data
    end

    # Remove one or more default channels from an org-level IDP group (user group).
    # @param token [String] Authentication token. Requires scope: &#x60;admin.usergroups:write&#x60;
    # @param channel_ids [String] Comma-separated string of channel IDs
    # @param usergroup_id [String] ID of the IDP Group
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_usergroups_remove_channels_with_http_info(token, channel_ids, usergroup_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminUsergroupsApi.admin_usergroups_remove_channels ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminUsergroupsApi.admin_usergroups_remove_channels"
      end
      # verify the required parameter 'channel_ids' is set
      if @api_client.config.client_side_validation && channel_ids.nil?
        fail ArgumentError, "Missing the required parameter 'channel_ids' when calling AdminUsergroupsApi.admin_usergroups_remove_channels"
      end
      # verify the required parameter 'usergroup_id' is set
      if @api_client.config.client_side_validation && usergroup_id.nil?
        fail ArgumentError, "Missing the required parameter 'usergroup_id' when calling AdminUsergroupsApi.admin_usergroups_remove_channels"
      end
      # resource path
      local_var_path = '/admin.usergroups.removeChannels'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_ids'] = channel_ids
      form_params['usergroup_id'] = usergroup_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminUsergroupsApi.admin_usergroups_remove_channels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminUsergroupsApi#admin_usergroups_remove_channels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
