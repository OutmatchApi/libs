=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class FilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes an existing comment on a file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:write:user&#x60;
    # @option opts [String] :file File to delete a comment from.
    # @option opts [String] :id The comment to delete.
    # @return [FilesCommentsDeleteSchema]
    def files_comments_delete(opts = {})
      data, _status_code, _headers = files_comments_delete_with_http_info(opts)
      data
    end

    # Deletes an existing comment on a file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:write:user&#x60;
    # @option opts [String] :file File to delete a comment from.
    # @option opts [String] :id The comment to delete.
    # @return [Array<(FilesCommentsDeleteSchema, Integer, Hash)>] FilesCommentsDeleteSchema data, response status code and response headers
    def files_comments_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_comments_delete ...'
      end
      # resource path
      local_var_path = '/files.comments.delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['id'] = opts[:'id'] if !opts[:'id'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FilesCommentsDeleteSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesApi.files_comments_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_comments_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:write:user&#x60;
    # @option opts [String] :file ID of file to delete.
    # @return [FilesDeleteSchema]
    def files_delete(opts = {})
      data, _status_code, _headers = files_delete_with_http_info(opts)
      data
    end

    # Deletes a file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:write:user&#x60;
    # @option opts [String] :file ID of file to delete.
    # @return [Array<(FilesDeleteSchema, Integer, Hash)>] FilesDeleteSchema data, response status code and response headers
    def files_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_delete ...'
      end
      # resource path
      local_var_path = '/files.delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FilesDeleteSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesApi.files_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets information about a file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:read&#x60;
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :count 
    # @option opts [String] :page 
    # @option opts [Integer] :limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached.
    # @option opts [String] :cursor Parameter for pagination. File comments are paginated for a single file. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection of comments. See [pagination](/docs/pagination) for more details.
    # @return [FilesInfoSchema]
    def files_info(opts = {})
      data, _status_code, _headers = files_info_with_http_info(opts)
      data
    end

    # Gets information about a file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:read&#x60;
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :count 
    # @option opts [String] :page 
    # @option opts [Integer] :limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached.
    # @option opts [String] :cursor Parameter for pagination. File comments are paginated for a single file. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection of comments. See [pagination](/docs/pagination) for more details.
    # @return [Array<(FilesInfoSchema, Integer, Hash)>] FilesInfoSchema data, response status code and response headers
    def files_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_info ...'
      end
      # resource path
      local_var_path = '/files.info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'file'] = opts[:'file'] if !opts[:'file'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FilesInfoSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesApi.files_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List for a team, in a channel, or from a user with applied filters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:read&#x60;
    # @option opts [String] :user Filter files created by a single user.
    # @option opts [String] :channel Filter files appearing in a specific channel, indicated by its ID.
    # @option opts [Float] :ts_from Filter files created after this timestamp (inclusive).
    # @option opts [Float] :ts_to Filter files created before this timestamp (inclusive).
    # @option opts [String] :types Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like &#x60;types&#x3D;spaces,snippets&#x60;.The default value is &#x60;all&#x60;, which does not filter the list.
    # @option opts [String] :count 
    # @option opts [String] :page 
    # @option opts [Boolean] :show_files_hidden_by_limit Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit.
    # @return [FilesListSchema]
    def files_list(opts = {})
      data, _status_code, _headers = files_list_with_http_info(opts)
      data
    end

    # List for a team, in a channel, or from a user with applied filters.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:read&#x60;
    # @option opts [String] :user Filter files created by a single user.
    # @option opts [String] :channel Filter files appearing in a specific channel, indicated by its ID.
    # @option opts [Float] :ts_from Filter files created after this timestamp (inclusive).
    # @option opts [Float] :ts_to Filter files created before this timestamp (inclusive).
    # @option opts [String] :types Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like &#x60;types&#x3D;spaces,snippets&#x60;.The default value is &#x60;all&#x60;, which does not filter the list.
    # @option opts [String] :count 
    # @option opts [String] :page 
    # @option opts [Boolean] :show_files_hidden_by_limit Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit.
    # @return [Array<(FilesListSchema, Integer, Hash)>] FilesListSchema data, response status code and response headers
    def files_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_list ...'
      end
      # resource path
      local_var_path = '/files.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'user'] = opts[:'user'] if !opts[:'user'].nil?
      query_params[:'channel'] = opts[:'channel'] if !opts[:'channel'].nil?
      query_params[:'ts_from'] = opts[:'ts_from'] if !opts[:'ts_from'].nil?
      query_params[:'ts_to'] = opts[:'ts_to'] if !opts[:'ts_to'].nil?
      query_params[:'types'] = opts[:'types'] if !opts[:'types'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'show_files_hidden_by_limit'] = opts[:'show_files_hidden_by_limit'] if !opts[:'show_files_hidden_by_limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FilesListSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesApi.files_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Adds a file from a remote service
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @option opts [String] :external_url URL of the remote file.
    # @option opts [String] :filetype type of file
    # @option opts [String] :indexable_file_contents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.
    # @option opts [String] :preview_image Preview of the document via &#x60;multipart/form-data&#x60;.
    # @option opts [String] :title Title of the file being shared.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:write&#x60;
    # @return [DefaultSuccessTemplate]
    def files_remote_add(opts = {})
      data, _status_code, _headers = files_remote_add_with_http_info(opts)
      data
    end

    # Adds a file from a remote service
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @option opts [String] :external_url URL of the remote file.
    # @option opts [String] :filetype type of file
    # @option opts [String] :indexable_file_contents A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.
    # @option opts [String] :preview_image Preview of the document via &#x60;multipart/form-data&#x60;.
    # @option opts [String] :title Title of the file being shared.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:write&#x60;
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def files_remote_add_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_remote_add ...'
      end
      # resource path
      local_var_path = '/files.remote.add'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      form_params['external_url'] = opts[:'external_url'] if !opts[:'external_url'].nil?
      form_params['filetype'] = opts[:'filetype'] if !opts[:'filetype'].nil?
      form_params['indexable_file_contents'] = opts[:'indexable_file_contents'] if !opts[:'indexable_file_contents'].nil?
      form_params['preview_image'] = opts[:'preview_image'] if !opts[:'preview_image'].nil?
      form_params['title'] = opts[:'title'] if !opts[:'title'].nil?
      form_params['token'] = opts[:'token'] if !opts[:'token'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesApi.files_remote_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_remote_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve information about a remote file added to Slack
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:read&#x60;
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @return [DefaultSuccessTemplate]
    def files_remote_info(opts = {})
      data, _status_code, _headers = files_remote_info_with_http_info(opts)
      data
    end

    # Retrieve information about a remote file added to Slack
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:read&#x60;
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def files_remote_info_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_remote_info ...'
      end
      # resource path
      local_var_path = '/files.remote.info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'file'] = opts[:'file'] if !opts[:'file'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesApi.files_remote_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_remote_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve information about a remote file added to Slack
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:read&#x60;
    # @option opts [String] :channel Filter files appearing in a specific channel, indicated by its ID.
    # @option opts [Float] :ts_from Filter files created after this timestamp (inclusive).
    # @option opts [Float] :ts_to Filter files created before this timestamp (inclusive).
    # @option opts [Integer] :limit The maximum number of items to return.
    # @option opts [String] :cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.
    # @return [DefaultSuccessTemplate]
    def files_remote_list(opts = {})
      data, _status_code, _headers = files_remote_list_with_http_info(opts)
      data
    end

    # Retrieve information about a remote file added to Slack
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:read&#x60;
    # @option opts [String] :channel Filter files appearing in a specific channel, indicated by its ID.
    # @option opts [Float] :ts_from Filter files created after this timestamp (inclusive).
    # @option opts [Float] :ts_to Filter files created before this timestamp (inclusive).
    # @option opts [Integer] :limit The maximum number of items to return.
    # @option opts [String] :cursor Paginate through collections of data by setting the &#x60;cursor&#x60; parameter to a &#x60;next_cursor&#x60; attribute returned by a previous request&#39;s &#x60;response_metadata&#x60;. Default value fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more detail.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def files_remote_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_remote_list ...'
      end
      # resource path
      local_var_path = '/files.remote.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'channel'] = opts[:'channel'] if !opts[:'channel'].nil?
      query_params[:'ts_from'] = opts[:'ts_from'] if !opts[:'ts_from'].nil?
      query_params[:'ts_to'] = opts[:'ts_to'] if !opts[:'ts_to'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesApi.files_remote_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_remote_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a remote file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:write&#x60;
    # @return [DefaultSuccessTemplate]
    def files_remote_remove(opts = {})
      data, _status_code, _headers = files_remote_remove_with_http_info(opts)
      data
    end

    # Remove a remote file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:write&#x60;
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def files_remote_remove_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_remote_remove ...'
      end
      # resource path
      local_var_path = '/files.remote.remove'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['token'] = opts[:'token'] if !opts[:'token'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesApi.files_remote_remove",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_remote_remove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Share a remote file into a channel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:share&#x60;
    # @option opts [String] :file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required.
    # @option opts [String] :external_id The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required.
    # @option opts [String] :channels Comma-separated list of channel IDs where the file will be shared.
    # @return [DefaultSuccessTemplate]
    def files_remote_share(opts = {})
      data, _status_code, _headers = files_remote_share_with_http_info(opts)
      data
    end

    # Share a remote file into a channel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:share&#x60;
    # @option opts [String] :file Specify a file registered with Slack by providing its ID. Either this field or &#x60;external_id&#x60; or both are required.
    # @option opts [String] :external_id The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or &#x60;file&#x60; or both are required.
    # @option opts [String] :channels Comma-separated list of channel IDs where the file will be shared.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def files_remote_share_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_remote_share ...'
      end
      # resource path
      local_var_path = '/files.remote.share'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'file'] = opts[:'file'] if !opts[:'file'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'channels'] = opts[:'channels'] if !opts[:'channels'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesApi.files_remote_share",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_remote_share\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an existing remote file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @option opts [String] :external_url URL of the remote file.
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :filetype type of file
    # @option opts [String] :indexable_file_contents File containing contents that can be used to improve searchability for the remote file.
    # @option opts [String] :preview_image Preview of the document via &#x60;multipart/form-data&#x60;.
    # @option opts [String] :title Title of the file being shared.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:write&#x60;
    # @return [DefaultSuccessTemplate]
    def files_remote_update(opts = {})
      data, _status_code, _headers = files_remote_update_with_http_info(opts)
      data
    end

    # Updates an existing remote file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :external_id Creator defined GUID for the file.
    # @option opts [String] :external_url URL of the remote file.
    # @option opts [String] :file Specify a file by providing its ID.
    # @option opts [String] :filetype type of file
    # @option opts [String] :indexable_file_contents File containing contents that can be used to improve searchability for the remote file.
    # @option opts [String] :preview_image Preview of the document via &#x60;multipart/form-data&#x60;.
    # @option opts [String] :title Title of the file being shared.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;remote_files:write&#x60;
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def files_remote_update_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_remote_update ...'
      end
      # resource path
      local_var_path = '/files.remote.update'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      form_params['external_url'] = opts[:'external_url'] if !opts[:'external_url'].nil?
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['filetype'] = opts[:'filetype'] if !opts[:'filetype'].nil?
      form_params['indexable_file_contents'] = opts[:'indexable_file_contents'] if !opts[:'indexable_file_contents'].nil?
      form_params['preview_image'] = opts[:'preview_image'] if !opts[:'preview_image'].nil?
      form_params['title'] = opts[:'title'] if !opts[:'title'].nil?
      form_params['token'] = opts[:'token'] if !opts[:'token'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesApi.files_remote_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_remote_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Revokes public/external sharing access for a file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:write:user&#x60;
    # @option opts [String] :file File to revoke
    # @return [FilesRevokePublicURLSchema]
    def files_revoke_public_url(opts = {})
      data, _status_code, _headers = files_revoke_public_url_with_http_info(opts)
      data
    end

    # Revokes public/external sharing access for a file
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:write:user&#x60;
    # @option opts [String] :file File to revoke
    # @return [Array<(FilesRevokePublicURLSchema, Integer, Hash)>] FilesRevokePublicURLSchema data, response status code and response headers
    def files_revoke_public_url_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_revoke_public_url ...'
      end
      # resource path
      local_var_path = '/files.revokePublicURL'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FilesRevokePublicURLSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesApi.files_revoke_public_url",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_revoke_public_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Enables a file for public/external sharing.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:write:user&#x60;
    # @option opts [String] :file File to share
    # @return [FilesSharedPublicURLSchema]
    def files_shared_public_url(opts = {})
      data, _status_code, _headers = files_shared_public_url_with_http_info(opts)
      data
    end

    # Enables a file for public/external sharing.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:write:user&#x60;
    # @option opts [String] :file File to share
    # @return [Array<(FilesSharedPublicURLSchema, Integer, Hash)>] FilesSharedPublicURLSchema data, response status code and response headers
    def files_shared_public_url_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_shared_public_url ...'
      end
      # resource path
      local_var_path = '/files.sharedPublicURL'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FilesSharedPublicURLSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesApi.files_shared_public_url",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_shared_public_url\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Uploads or creates a file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channels Comma-separated list of channel names or IDs where the file will be shared.
    # @option opts [String] :content File contents via a POST variable. If omitting this parameter, you must provide a &#x60;file&#x60;.
    # @option opts [String] :file File contents via &#x60;multipart/form-data&#x60;. If omitting this parameter, you must submit &#x60;content&#x60;.
    # @option opts [String] :filename Filename of file.
    # @option opts [String] :filetype A [file type](/types/file#file_types) identifier.
    # @option opts [String] :initial_comment The message text introducing the file in specified &#x60;channels&#x60;.
    # @option opts [Float] :thread_ts Provide another message&#39;s &#x60;ts&#x60; value to upload this file as a reply. Never use a reply&#39;s &#x60;ts&#x60; value; use its parent instead.
    # @option opts [String] :title Title of file.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:write:user&#x60;
    # @return [FilesUploadSchema]
    def files_upload(opts = {})
      data, _status_code, _headers = files_upload_with_http_info(opts)
      data
    end

    # Uploads or creates a file.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channels Comma-separated list of channel names or IDs where the file will be shared.
    # @option opts [String] :content File contents via a POST variable. If omitting this parameter, you must provide a &#x60;file&#x60;.
    # @option opts [String] :file File contents via &#x60;multipart/form-data&#x60;. If omitting this parameter, you must submit &#x60;content&#x60;.
    # @option opts [String] :filename Filename of file.
    # @option opts [String] :filetype A [file type](/types/file#file_types) identifier.
    # @option opts [String] :initial_comment The message text introducing the file in specified &#x60;channels&#x60;.
    # @option opts [Float] :thread_ts Provide another message&#39;s &#x60;ts&#x60; value to upload this file as a reply. Never use a reply&#39;s &#x60;ts&#x60; value; use its parent instead.
    # @option opts [String] :title Title of file.
    # @option opts [String] :token Authentication token. Requires scope: &#x60;files:write:user&#x60;
    # @return [Array<(FilesUploadSchema, Integer, Hash)>] FilesUploadSchema data, response status code and response headers
    def files_upload_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: FilesApi.files_upload ...'
      end
      # resource path
      local_var_path = '/files.upload'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channels'] = opts[:'channels'] if !opts[:'channels'].nil?
      form_params['content'] = opts[:'content'] if !opts[:'content'].nil?
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['filename'] = opts[:'filename'] if !opts[:'filename'].nil?
      form_params['filetype'] = opts[:'filetype'] if !opts[:'filetype'].nil?
      form_params['initial_comment'] = opts[:'initial_comment'] if !opts[:'initial_comment'].nil?
      form_params['thread_ts'] = opts[:'thread_ts'] if !opts[:'thread_ts'].nil?
      form_params['title'] = opts[:'title'] if !opts[:'title'].nil?
      form_params['token'] = opts[:'token'] if !opts[:'token'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'FilesUploadSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"FilesApi.files_upload",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_upload\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
