=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class WorkflowsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Indicate that an app's step in a workflow completed execution.
    # @param token [String] Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
    # @param workflow_step_execute_id [String] Context identifier that maps to the correct workflow step execution.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :outputs Key-value object of outputs from your step. Keys of this object reflect the configured &#x60;key&#x60; properties of your [&#x60;outputs&#x60;](/reference/workflows/workflow_step#output) array from your &#x60;workflow_step&#x60; object.
    # @return [DefaultSuccessTemplate]
    def workflows_step_completed(token, workflow_step_execute_id, opts = {})
      data, _status_code, _headers = workflows_step_completed_with_http_info(token, workflow_step_execute_id, opts)
      data
    end

    # Indicate that an app&#39;s step in a workflow completed execution.
    # @param token [String] Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
    # @param workflow_step_execute_id [String] Context identifier that maps to the correct workflow step execution.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :outputs Key-value object of outputs from your step. Keys of this object reflect the configured &#x60;key&#x60; properties of your [&#x60;outputs&#x60;](/reference/workflows/workflow_step#output) array from your &#x60;workflow_step&#x60; object.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def workflows_step_completed_with_http_info(token, workflow_step_execute_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkflowsApi.workflows_step_completed ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling WorkflowsApi.workflows_step_completed"
      end
      # verify the required parameter 'workflow_step_execute_id' is set
      if @api_client.config.client_side_validation && workflow_step_execute_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_step_execute_id' when calling WorkflowsApi.workflows_step_completed"
      end
      # resource path
      local_var_path = '/workflows.stepCompleted'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workflow_step_execute_id'] = workflow_step_execute_id
      query_params[:'outputs'] = opts[:'outputs'] if !opts[:'outputs'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"WorkflowsApi.workflows_step_completed",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowsApi#workflows_step_completed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Indicate that an app's step in a workflow failed to execute.
    # @param token [String] Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
    # @param workflow_step_execute_id [String] Context identifier that maps to the correct workflow step execution.
    # @param error [String] A JSON-based object with a &#x60;message&#x60; property that should contain a human readable error message.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def workflows_step_failed(token, workflow_step_execute_id, error, opts = {})
      data, _status_code, _headers = workflows_step_failed_with_http_info(token, workflow_step_execute_id, error, opts)
      data
    end

    # Indicate that an app&#39;s step in a workflow failed to execute.
    # @param token [String] Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
    # @param workflow_step_execute_id [String] Context identifier that maps to the correct workflow step execution.
    # @param error [String] A JSON-based object with a &#x60;message&#x60; property that should contain a human readable error message.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def workflows_step_failed_with_http_info(token, workflow_step_execute_id, error, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkflowsApi.workflows_step_failed ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling WorkflowsApi.workflows_step_failed"
      end
      # verify the required parameter 'workflow_step_execute_id' is set
      if @api_client.config.client_side_validation && workflow_step_execute_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_step_execute_id' when calling WorkflowsApi.workflows_step_failed"
      end
      # verify the required parameter 'error' is set
      if @api_client.config.client_side_validation && error.nil?
        fail ArgumentError, "Missing the required parameter 'error' when calling WorkflowsApi.workflows_step_failed"
      end
      # resource path
      local_var_path = '/workflows.stepFailed'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workflow_step_execute_id'] = workflow_step_execute_id
      query_params[:'error'] = error

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"WorkflowsApi.workflows_step_failed",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowsApi#workflows_step_failed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update the configuration for a workflow extension step.
    # @param token [String] Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
    # @param workflow_step_edit_id [String] A context identifier provided with &#x60;view_submission&#x60; payloads used to call back to &#x60;workflows.updateStep&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inputs A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables).
    # @option opts [String] :outputs An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.
    # @option opts [String] :step_name An optional field that can be used to override the step name that is shown in the Workflow Builder.
    # @option opts [String] :step_image_url An optional field that can be used to override app image that is shown in the Workflow Builder.
    # @return [DefaultSuccessTemplate]
    def workflows_update_step(token, workflow_step_edit_id, opts = {})
      data, _status_code, _headers = workflows_update_step_with_http_info(token, workflow_step_edit_id, opts)
      data
    end

    # Update the configuration for a workflow extension step.
    # @param token [String] Authentication token. Requires scope: &#x60;workflow.steps:execute&#x60;
    # @param workflow_step_edit_id [String] A context identifier provided with &#x60;view_submission&#x60; payloads used to call back to &#x60;workflows.updateStep&#x60;.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :inputs A JSON key-value map of inputs required from a user during configuration. This is the data your app expects to receive when the workflow step starts. **Please note**: the embedded variable format is set and replaced by the workflow system. You cannot create custom variables that will be replaced at runtime. [Read more about variables in workflow steps here](/workflows/steps#variables).
    # @option opts [String] :outputs An JSON array of output objects used during step execution. This is the data your app agrees to provide when your workflow step was executed.
    # @option opts [String] :step_name An optional field that can be used to override the step name that is shown in the Workflow Builder.
    # @option opts [String] :step_image_url An optional field that can be used to override app image that is shown in the Workflow Builder.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def workflows_update_step_with_http_info(token, workflow_step_edit_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: WorkflowsApi.workflows_update_step ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling WorkflowsApi.workflows_update_step"
      end
      # verify the required parameter 'workflow_step_edit_id' is set
      if @api_client.config.client_side_validation && workflow_step_edit_id.nil?
        fail ArgumentError, "Missing the required parameter 'workflow_step_edit_id' when calling WorkflowsApi.workflows_update_step"
      end
      # resource path
      local_var_path = '/workflows.updateStep'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'workflow_step_edit_id'] = workflow_step_edit_id
      query_params[:'inputs'] = opts[:'inputs'] if !opts[:'inputs'].nil?
      query_params[:'outputs'] = opts[:'outputs'] if !opts[:'outputs'].nil?
      query_params[:'step_name'] = opts[:'step_name'] if !opts[:'step_name'].nil?
      query_params[:'step_image_url'] = opts[:'step_image_url'] if !opts[:'step_image_url'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"WorkflowsApi.workflows_update_step",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: WorkflowsApi#workflows_update_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
