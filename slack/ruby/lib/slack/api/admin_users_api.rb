=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class AdminUsersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add an Enterprise user to a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to add to the workspace.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel_ids Comma separated values of channel IDs to add user in the new workspace.
    # @option opts [Boolean] :is_restricted True if user should be added to the workspace as a guest.
    # @option opts [Boolean] :is_ultra_restricted True if user should be added to the workspace as a single-channel guest.
    # @return [DefaultSuccessTemplate]
    def admin_users_assign(token, team_id, user_id, opts = {})
      data, _status_code, _headers = admin_users_assign_with_http_info(token, team_id, user_id, opts)
      data
    end

    # Add an Enterprise user to a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to add to the workspace.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel_ids Comma separated values of channel IDs to add user in the new workspace.
    # @option opts [Boolean] :is_restricted True if user should be added to the workspace as a guest.
    # @option opts [Boolean] :is_ultra_restricted True if user should be added to the workspace as a single-channel guest.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_assign_with_http_info(token, team_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminUsersApi.admin_users_assign ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminUsersApi.admin_users_assign"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminUsersApi.admin_users_assign"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminUsersApi.admin_users_assign"
      end
      # resource path
      local_var_path = '/admin.users.assign'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['team_id'] = team_id
      form_params['user_id'] = user_id
      form_params['channel_ids'] = opts[:'channel_ids'] if !opts[:'channel_ids'].nil?
      form_params['is_restricted'] = opts[:'is_restricted'] if !opts[:'is_restricted'].nil?
      form_params['is_ultra_restricted'] = opts[:'is_ultra_restricted'] if !opts[:'is_ultra_restricted'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminUsersApi.admin_users_assign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminUsersApi#admin_users_assign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invite a user to a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param channel_ids [String] A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required.
    # @param email [String] The email address of the person to invite.
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_message An optional message to send to the user in the invite email.
    # @option opts [String] :guest_expiration_ts Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
    # @option opts [Boolean] :is_restricted Is this user a multi-channel guest user? (default: false)
    # @option opts [Boolean] :is_ultra_restricted Is this user a single channel guest user? (default: false)
    # @option opts [String] :real_name Full name of the user.
    # @option opts [Boolean] :resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
    # @return [DefaultSuccessTemplate]
    def admin_users_invite(token, channel_ids, email, team_id, opts = {})
      data, _status_code, _headers = admin_users_invite_with_http_info(token, channel_ids, email, team_id, opts)
      data
    end

    # Invite a user to a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param channel_ids [String] A comma-separated list of &#x60;channel_id&#x60;s for this user to join. At least one channel is required.
    # @param email [String] The email address of the person to invite.
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :custom_message An optional message to send to the user in the invite email.
    # @option opts [String] :guest_expiration_ts Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
    # @option opts [Boolean] :is_restricted Is this user a multi-channel guest user? (default: false)
    # @option opts [Boolean] :is_ultra_restricted Is this user a single channel guest user? (default: false)
    # @option opts [String] :real_name Full name of the user.
    # @option opts [Boolean] :resend Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_invite_with_http_info(token, channel_ids, email, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminUsersApi.admin_users_invite ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminUsersApi.admin_users_invite"
      end
      # verify the required parameter 'channel_ids' is set
      if @api_client.config.client_side_validation && channel_ids.nil?
        fail ArgumentError, "Missing the required parameter 'channel_ids' when calling AdminUsersApi.admin_users_invite"
      end
      # verify the required parameter 'email' is set
      if @api_client.config.client_side_validation && email.nil?
        fail ArgumentError, "Missing the required parameter 'email' when calling AdminUsersApi.admin_users_invite"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminUsersApi.admin_users_invite"
      end
      # resource path
      local_var_path = '/admin.users.invite'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_ids'] = channel_ids
      form_params['email'] = email
      form_params['team_id'] = team_id
      form_params['custom_message'] = opts[:'custom_message'] if !opts[:'custom_message'].nil?
      form_params['guest_expiration_ts'] = opts[:'guest_expiration_ts'] if !opts[:'guest_expiration_ts'].nil?
      form_params['is_restricted'] = opts[:'is_restricted'] if !opts[:'is_restricted'].nil?
      form_params['is_ultra_restricted'] = opts[:'is_ultra_restricted'] if !opts[:'is_ultra_restricted'].nil?
      form_params['real_name'] = opts[:'real_name'] if !opts[:'real_name'].nil?
      form_params['resend'] = opts[:'resend'] if !opts[:'resend'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminUsersApi.admin_users_invite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminUsersApi#admin_users_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List users on a workspace
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:read&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @option opts [Integer] :limit Limit for how many users to be retrieved per page
    # @return [DefaultSuccessTemplate]
    def admin_users_list(token, team_id, opts = {})
      data, _status_code, _headers = admin_users_list_with_http_info(token, team_id, opts)
      data
    end

    # List users on a workspace
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:read&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @option opts [Integer] :limit Limit for how many users to be retrieved per page
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_list_with_http_info(token, team_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminUsersApi.admin_users_list ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminUsersApi.admin_users_list"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminUsersApi.admin_users_list"
      end
      # resource path
      local_var_path = '/admin.users.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'team_id'] = team_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminUsersApi.admin_users_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminUsersApi#admin_users_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove a user from a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to remove.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_users_remove(token, team_id, user_id, opts = {})
      data, _status_code, _headers = admin_users_remove_with_http_info(token, team_id, user_id, opts)
      data
    end

    # Remove a user from a workspace.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to remove.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_remove_with_http_info(token, team_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminUsersApi.admin_users_remove ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminUsersApi.admin_users_remove"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminUsersApi.admin_users_remove"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminUsersApi.admin_users_remove"
      end
      # resource path
      local_var_path = '/admin.users.remove'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['team_id'] = team_id
      form_params['user_id'] = user_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminUsersApi.admin_users_remove",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminUsersApi#admin_users_remove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an existing guest, regular user, or owner to be an admin user.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to designate as an admin.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_users_set_admin(token, team_id, user_id, opts = {})
      data, _status_code, _headers = admin_users_set_admin_with_http_info(token, team_id, user_id, opts)
      data
    end

    # Set an existing guest, regular user, or owner to be an admin user.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to designate as an admin.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_set_admin_with_http_info(token, team_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminUsersApi.admin_users_set_admin ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminUsersApi.admin_users_set_admin"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminUsersApi.admin_users_set_admin"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminUsersApi.admin_users_set_admin"
      end
      # resource path
      local_var_path = '/admin.users.setAdmin'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['team_id'] = team_id
      form_params['user_id'] = user_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminUsersApi.admin_users_set_admin",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminUsersApi#admin_users_set_admin\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an expiration for a guest user
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param expiration_ts [Integer] Timestamp when guest account should be disabled.
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to set an expiration for.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_users_set_expiration(token, expiration_ts, team_id, user_id, opts = {})
      data, _status_code, _headers = admin_users_set_expiration_with_http_info(token, expiration_ts, team_id, user_id, opts)
      data
    end

    # Set an expiration for a guest user
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param expiration_ts [Integer] Timestamp when guest account should be disabled.
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to set an expiration for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_set_expiration_with_http_info(token, expiration_ts, team_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminUsersApi.admin_users_set_expiration ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminUsersApi.admin_users_set_expiration"
      end
      # verify the required parameter 'expiration_ts' is set
      if @api_client.config.client_side_validation && expiration_ts.nil?
        fail ArgumentError, "Missing the required parameter 'expiration_ts' when calling AdminUsersApi.admin_users_set_expiration"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminUsersApi.admin_users_set_expiration"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminUsersApi.admin_users_set_expiration"
      end
      # resource path
      local_var_path = '/admin.users.setExpiration'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['expiration_ts'] = expiration_ts
      form_params['team_id'] = team_id
      form_params['user_id'] = user_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminUsersApi.admin_users_set_expiration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminUsersApi#admin_users_set_expiration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an existing guest, regular user, or admin user to be a workspace owner.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] Id of the user to promote to owner.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_users_set_owner(token, team_id, user_id, opts = {})
      data, _status_code, _headers = admin_users_set_owner_with_http_info(token, team_id, user_id, opts)
      data
    end

    # Set an existing guest, regular user, or admin user to be a workspace owner.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] Id of the user to promote to owner.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_set_owner_with_http_info(token, team_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminUsersApi.admin_users_set_owner ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminUsersApi.admin_users_set_owner"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminUsersApi.admin_users_set_owner"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminUsersApi.admin_users_set_owner"
      end
      # resource path
      local_var_path = '/admin.users.setOwner'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['team_id'] = team_id
      form_params['user_id'] = user_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminUsersApi.admin_users_set_owner",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminUsersApi#admin_users_set_owner\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set an existing guest user, admin user, or owner to be a regular user.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to designate as a regular user.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def admin_users_set_regular(token, team_id, user_id, opts = {})
      data, _status_code, _headers = admin_users_set_regular_with_http_info(token, team_id, user_id, opts)
      data
    end

    # Set an existing guest user, admin user, or owner to be a regular user.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.users:write&#x60;
    # @param team_id [String] The ID (&#x60;T1234&#x60;) of the workspace.
    # @param user_id [String] The ID of the user to designate as a regular user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_users_set_regular_with_http_info(token, team_id, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminUsersApi.admin_users_set_regular ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminUsersApi.admin_users_set_regular"
      end
      # verify the required parameter 'team_id' is set
      if @api_client.config.client_side_validation && team_id.nil?
        fail ArgumentError, "Missing the required parameter 'team_id' when calling AdminUsersApi.admin_users_set_regular"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AdminUsersApi.admin_users_set_regular"
      end
      # resource path
      local_var_path = '/admin.users.setRegular'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['team_id'] = team_id
      form_params['user_id'] = user_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminUsersApi.admin_users_set_regular",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminUsersApi#admin_users_set_regular\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
