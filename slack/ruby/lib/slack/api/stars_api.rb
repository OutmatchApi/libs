=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class StarsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Adds a star to an item.
    # @param token [String] Authentication token. Requires scope: &#x60;stars:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel Channel to add star to, or channel where the message to add star to was posted (used with &#x60;timestamp&#x60;).
    # @option opts [String] :file File to add star to.
    # @option opts [String] :file_comment File comment to add star to.
    # @option opts [String] :timestamp Timestamp of the message to add star to.
    # @return [StarsAddSchema]
    def stars_add(token, opts = {})
      data, _status_code, _headers = stars_add_with_http_info(token, opts)
      data
    end

    # Adds a star to an item.
    # @param token [String] Authentication token. Requires scope: &#x60;stars:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel Channel to add star to, or channel where the message to add star to was posted (used with &#x60;timestamp&#x60;).
    # @option opts [String] :file File to add star to.
    # @option opts [String] :file_comment File comment to add star to.
    # @option opts [String] :timestamp Timestamp of the message to add star to.
    # @return [Array<(StarsAddSchema, Integer, Hash)>] StarsAddSchema data, response status code and response headers
    def stars_add_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StarsApi.stars_add ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling StarsApi.stars_add"
      end
      # resource path
      local_var_path = '/stars.add'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel'] = opts[:'channel'] if !opts[:'channel'].nil?
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['file_comment'] = opts[:'file_comment'] if !opts[:'file_comment'].nil?
      form_params['timestamp'] = opts[:'timestamp'] if !opts[:'timestamp'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StarsAddSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"StarsApi.stars_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StarsApi#stars_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists stars for a user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;stars:read&#x60;
    # @option opts [String] :count 
    # @option opts [String] :page 
    # @option opts [String] :cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details.
    # @option opts [Integer] :limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached.
    # @return [StarsListSchema]
    def stars_list(opts = {})
      data, _status_code, _headers = stars_list_with_http_info(opts)
      data
    end

    # Lists stars for a user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;stars:read&#x60;
    # @option opts [String] :count 
    # @option opts [String] :page 
    # @option opts [String] :cursor Parameter for pagination. Set &#x60;cursor&#x60; equal to the &#x60;next_cursor&#x60; attribute returned by the previous request&#39;s &#x60;response_metadata&#x60;. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \&quot;page\&quot; of the collection. See [pagination](/docs/pagination) for more details.
    # @option opts [Integer] :limit The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn&#39;t been reached.
    # @return [Array<(StarsListSchema, Integer, Hash)>] StarsListSchema data, response status code and response headers
    def stars_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StarsApi.stars_list ...'
      end
      # resource path
      local_var_path = '/stars.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?
      query_params[:'count'] = opts[:'count'] if !opts[:'count'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StarsListSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"StarsApi.stars_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StarsApi#stars_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes a star from an item.
    # @param token [String] Authentication token. Requires scope: &#x60;stars:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel Channel to remove star from, or channel where the message to remove star from was posted (used with &#x60;timestamp&#x60;).
    # @option opts [String] :file File to remove star from.
    # @option opts [String] :file_comment File comment to remove star from.
    # @option opts [String] :timestamp Timestamp of the message to remove star from.
    # @return [StarsRemoveSchema]
    def stars_remove(token, opts = {})
      data, _status_code, _headers = stars_remove_with_http_info(token, opts)
      data
    end

    # Removes a star from an item.
    # @param token [String] Authentication token. Requires scope: &#x60;stars:write&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :channel Channel to remove star from, or channel where the message to remove star from was posted (used with &#x60;timestamp&#x60;).
    # @option opts [String] :file File to remove star from.
    # @option opts [String] :file_comment File comment to remove star from.
    # @option opts [String] :timestamp Timestamp of the message to remove star from.
    # @return [Array<(StarsRemoveSchema, Integer, Hash)>] StarsRemoveSchema data, response status code and response headers
    def stars_remove_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: StarsApi.stars_remove ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling StarsApi.stars_remove"
      end
      # resource path
      local_var_path = '/stars.remove'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel'] = opts[:'channel'] if !opts[:'channel'].nil?
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?
      form_params['file_comment'] = opts[:'file_comment'] if !opts[:'file_comment'].nil?
      form_params['timestamp'] = opts[:'timestamp'] if !opts[:'timestamp'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'StarsRemoveSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"StarsApi.stars_remove",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: StarsApi#stars_remove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
