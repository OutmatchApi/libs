=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class PinsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Pins an item to a channel.
    # @param token [String] Authentication token. Requires scope: &#x60;pins:write&#x60;
    # @param channel [String] Channel to pin the item in.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :timestamp Timestamp of the message to pin.
    # @return [PinsAddSchema]
    def pins_add(token, channel, opts = {})
      data, _status_code, _headers = pins_add_with_http_info(token, channel, opts)
      data
    end

    # Pins an item to a channel.
    # @param token [String] Authentication token. Requires scope: &#x60;pins:write&#x60;
    # @param channel [String] Channel to pin the item in.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :timestamp Timestamp of the message to pin.
    # @return [Array<(PinsAddSchema, Integer, Hash)>] PinsAddSchema data, response status code and response headers
    def pins_add_with_http_info(token, channel, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PinsApi.pins_add ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling PinsApi.pins_add"
      end
      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling PinsApi.pins_add"
      end
      # resource path
      local_var_path = '/pins.add'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel'] = channel
      form_params['timestamp'] = opts[:'timestamp'] if !opts[:'timestamp'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PinsAddSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"PinsApi.pins_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinsApi#pins_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Lists items pinned to a channel.
    # @param token [String] Authentication token. Requires scope: &#x60;pins:read&#x60;
    # @param channel [String] Channel to get pinned items for.
    # @param [Hash] opts the optional parameters
    # @return [Array<PinsListSuccessSchemaInner>]
    def pins_list(token, channel, opts = {})
      data, _status_code, _headers = pins_list_with_http_info(token, channel, opts)
      data
    end

    # Lists items pinned to a channel.
    # @param token [String] Authentication token. Requires scope: &#x60;pins:read&#x60;
    # @param channel [String] Channel to get pinned items for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<PinsListSuccessSchemaInner>, Integer, Hash)>] Array<PinsListSuccessSchemaInner> data, response status code and response headers
    def pins_list_with_http_info(token, channel, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PinsApi.pins_list ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling PinsApi.pins_list"
      end
      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling PinsApi.pins_list"
      end
      # resource path
      local_var_path = '/pins.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'channel'] = channel

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<PinsListSuccessSchemaInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"PinsApi.pins_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinsApi#pins_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Un-pins an item from a channel.
    # @param token [String] Authentication token. Requires scope: &#x60;pins:write&#x60;
    # @param channel [String] Channel where the item is pinned to.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :timestamp Timestamp of the message to un-pin.
    # @return [PinsRemoveSchema]
    def pins_remove(token, channel, opts = {})
      data, _status_code, _headers = pins_remove_with_http_info(token, channel, opts)
      data
    end

    # Un-pins an item from a channel.
    # @param token [String] Authentication token. Requires scope: &#x60;pins:write&#x60;
    # @param channel [String] Channel where the item is pinned to.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :timestamp Timestamp of the message to un-pin.
    # @return [Array<(PinsRemoveSchema, Integer, Hash)>] PinsRemoveSchema data, response status code and response headers
    def pins_remove_with_http_info(token, channel, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PinsApi.pins_remove ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling PinsApi.pins_remove"
      end
      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling PinsApi.pins_remove"
      end
      # resource path
      local_var_path = '/pins.remove'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel'] = channel
      form_params['timestamp'] = opts[:'timestamp'] if !opts[:'timestamp'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PinsRemoveSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"PinsApi.pins_remove",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinsApi#pins_remove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
