=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class CallsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Registers a new Call.
    # @param token [String] Authentication token. Requires scope: &#x60;calls:write&#x60;
    # @param external_unique_id [String] An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service.
    # @param join_url [String] The URL required for a client to join the Call.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_by The valid Slack user ID of the user who created this Call. When this method is called with a user token, the &#x60;created_by&#x60; field is optional and defaults to the authed user of the token. Otherwise, the field is required.
    # @option opts [Integer] :date_start Call start time in UTC UNIX timestamp format
    # @option opts [String] :desktop_app_join_url When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
    # @option opts [String] :external_display_id An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object.
    # @option opts [String] :title The name of the Call.
    # @option opts [String] :users The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
    # @return [DefaultSuccessTemplate]
    def calls_add(token, external_unique_id, join_url, opts = {})
      data, _status_code, _headers = calls_add_with_http_info(token, external_unique_id, join_url, opts)
      data
    end

    # Registers a new Call.
    # @param token [String] Authentication token. Requires scope: &#x60;calls:write&#x60;
    # @param external_unique_id [String] An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service.
    # @param join_url [String] The URL required for a client to join the Call.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :created_by The valid Slack user ID of the user who created this Call. When this method is called with a user token, the &#x60;created_by&#x60; field is optional and defaults to the authed user of the token. Otherwise, the field is required.
    # @option opts [Integer] :date_start Call start time in UTC UNIX timestamp format
    # @option opts [String] :desktop_app_join_url When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
    # @option opts [String] :external_display_id An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object.
    # @option opts [String] :title The name of the Call.
    # @option opts [String] :users The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def calls_add_with_http_info(token, external_unique_id, join_url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallsApi.calls_add ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling CallsApi.calls_add"
      end
      # verify the required parameter 'external_unique_id' is set
      if @api_client.config.client_side_validation && external_unique_id.nil?
        fail ArgumentError, "Missing the required parameter 'external_unique_id' when calling CallsApi.calls_add"
      end
      # verify the required parameter 'join_url' is set
      if @api_client.config.client_side_validation && join_url.nil?
        fail ArgumentError, "Missing the required parameter 'join_url' when calling CallsApi.calls_add"
      end
      # resource path
      local_var_path = '/calls.add'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['external_unique_id'] = external_unique_id
      form_params['join_url'] = join_url
      form_params['created_by'] = opts[:'created_by'] if !opts[:'created_by'].nil?
      form_params['date_start'] = opts[:'date_start'] if !opts[:'date_start'].nil?
      form_params['desktop_app_join_url'] = opts[:'desktop_app_join_url'] if !opts[:'desktop_app_join_url'].nil?
      form_params['external_display_id'] = opts[:'external_display_id'] if !opts[:'external_display_id'].nil?
      form_params['title'] = opts[:'title'] if !opts[:'title'].nil?
      form_params['users'] = opts[:'users'] if !opts[:'users'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"CallsApi.calls_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#calls_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ends a Call.
    # @param token [String] Authentication token. Requires scope: &#x60;calls:write&#x60;
    # @param id [String] &#x60;id&#x60; returned when registering the call using the [&#x60;calls.add&#x60;](/methods/calls.add) method.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :duration Call duration in seconds
    # @return [DefaultSuccessTemplate]
    def calls_end(token, id, opts = {})
      data, _status_code, _headers = calls_end_with_http_info(token, id, opts)
      data
    end

    # Ends a Call.
    # @param token [String] Authentication token. Requires scope: &#x60;calls:write&#x60;
    # @param id [String] &#x60;id&#x60; returned when registering the call using the [&#x60;calls.add&#x60;](/methods/calls.add) method.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :duration Call duration in seconds
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def calls_end_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallsApi.calls_end ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling CallsApi.calls_end"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CallsApi.calls_end"
      end
      # resource path
      local_var_path = '/calls.end'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['id'] = id
      form_params['duration'] = opts[:'duration'] if !opts[:'duration'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"CallsApi.calls_end",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#calls_end\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns information about a Call.
    # @param token [String] Authentication token. Requires scope: &#x60;calls:read&#x60;
    # @param id [String] &#x60;id&#x60; of the Call returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method.
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def calls_info(token, id, opts = {})
      data, _status_code, _headers = calls_info_with_http_info(token, id, opts)
      data
    end

    # Returns information about a Call.
    # @param token [String] Authentication token. Requires scope: &#x60;calls:read&#x60;
    # @param id [String] &#x60;id&#x60; of the Call returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def calls_info_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallsApi.calls_info ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling CallsApi.calls_info"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CallsApi.calls_info"
      end
      # resource path
      local_var_path = '/calls.info'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"CallsApi.calls_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#calls_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Registers new participants added to a Call.
    # @param token [String] Authentication token. Requires scope: &#x60;calls:write&#x60;
    # @param id [String] &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method.
    # @param users [String] The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def calls_participants_add(token, id, users, opts = {})
      data, _status_code, _headers = calls_participants_add_with_http_info(token, id, users, opts)
      data
    end

    # Registers new participants added to a Call.
    # @param token [String] Authentication token. Requires scope: &#x60;calls:write&#x60;
    # @param id [String] &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method.
    # @param users [String] The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def calls_participants_add_with_http_info(token, id, users, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallsApi.calls_participants_add ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling CallsApi.calls_participants_add"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CallsApi.calls_participants_add"
      end
      # verify the required parameter 'users' is set
      if @api_client.config.client_side_validation && users.nil?
        fail ArgumentError, "Missing the required parameter 'users' when calling CallsApi.calls_participants_add"
      end
      # resource path
      local_var_path = '/calls.participants.add'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['id'] = id
      form_params['users'] = users

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"CallsApi.calls_participants_add",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#calls_participants_add\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Registers participants removed from a Call.
    # @param token [String] Authentication token. Requires scope: &#x60;calls:write&#x60;
    # @param id [String] &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method.
    # @param users [String] The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
    # @param [Hash] opts the optional parameters
    # @return [DefaultSuccessTemplate]
    def calls_participants_remove(token, id, users, opts = {})
      data, _status_code, _headers = calls_participants_remove_with_http_info(token, id, users, opts)
      data
    end

    # Registers participants removed from a Call.
    # @param token [String] Authentication token. Requires scope: &#x60;calls:write&#x60;
    # @param id [String] &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method.
    # @param users [String] The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
    # @param [Hash] opts the optional parameters
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def calls_participants_remove_with_http_info(token, id, users, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallsApi.calls_participants_remove ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling CallsApi.calls_participants_remove"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CallsApi.calls_participants_remove"
      end
      # verify the required parameter 'users' is set
      if @api_client.config.client_side_validation && users.nil?
        fail ArgumentError, "Missing the required parameter 'users' when calling CallsApi.calls_participants_remove"
      end
      # resource path
      local_var_path = '/calls.participants.remove'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['id'] = id
      form_params['users'] = users

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"CallsApi.calls_participants_remove",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#calls_participants_remove\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates information about a Call.
    # @param token [String] Authentication token. Requires scope: &#x60;calls:write&#x60;
    # @param id [String] &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :desktop_app_join_url When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
    # @option opts [String] :join_url The URL required for a client to join the Call.
    # @option opts [String] :title The name of the Call.
    # @return [DefaultSuccessTemplate]
    def calls_update(token, id, opts = {})
      data, _status_code, _headers = calls_update_with_http_info(token, id, opts)
      data
    end

    # Updates information about a Call.
    # @param token [String] Authentication token. Requires scope: &#x60;calls:write&#x60;
    # @param id [String] &#x60;id&#x60; returned by the [&#x60;calls.add&#x60;](/methods/calls.add) method.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :desktop_app_join_url When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
    # @option opts [String] :join_url The URL required for a client to join the Call.
    # @option opts [String] :title The name of the Call.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def calls_update_with_http_info(token, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CallsApi.calls_update ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling CallsApi.calls_update"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CallsApi.calls_update"
      end
      # resource path
      local_var_path = '/calls.update'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['id'] = id
      form_params['desktop_app_join_url'] = opts[:'desktop_app_join_url'] if !opts[:'desktop_app_join_url'].nil?
      form_params['join_url'] = opts[:'join_url'] if !opts[:'join_url'].nil?
      form_params['title'] = opts[:'title'] if !opts[:'title'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"CallsApi.calls_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CallsApi#calls_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
