=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class AdminConversationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Archive a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to archive.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsArchiveSchema]
    def admin_conversations_archive(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_archive_with_http_info(token, channel_id, opts)
      data
    end

    # Archive a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to archive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsArchiveSchema, Integer, Hash)>] AdminConversationsArchiveSchema data, response status code and response headers
    def admin_conversations_archive_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminConversationsApi.admin_conversations_archive ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminConversationsApi.admin_conversations_archive"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminConversationsApi.admin_conversations_archive"
      end
      # resource path
      local_var_path = '/admin.conversations.archive'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsArchiveSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminConversationsApi.admin_conversations_archive",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminConversationsApi#admin_conversations_archive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert a public channel to a private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to convert to private.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsConvertToPrivateSchema]
    def admin_conversations_convert_to_private(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_convert_to_private_with_http_info(token, channel_id, opts)
      data
    end

    # Convert a public channel to a private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to convert to private.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsConvertToPrivateSchema, Integer, Hash)>] AdminConversationsConvertToPrivateSchema data, response status code and response headers
    def admin_conversations_convert_to_private_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminConversationsApi.admin_conversations_convert_to_private ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminConversationsApi.admin_conversations_convert_to_private"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminConversationsApi.admin_conversations_convert_to_private"
      end
      # resource path
      local_var_path = '/admin.conversations.convertToPrivate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsConvertToPrivateSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminConversationsApi.admin_conversations_convert_to_private",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminConversationsApi#admin_conversations_convert_to_private\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a public or private channel-based conversation.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param is_private [Boolean] When &#x60;true&#x60;, creates a private channel instead of a public channel
    # @param name [String] Name of the public or private channel to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of the public or private channel to create.
    # @option opts [Boolean] :org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel
    # @option opts [String] :team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;.
    # @return [AdminConversationsCreateSchema]
    def admin_conversations_create(token, is_private, name, opts = {})
      data, _status_code, _headers = admin_conversations_create_with_http_info(token, is_private, name, opts)
      data
    end

    # Create a public or private channel-based conversation.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param is_private [Boolean] When &#x60;true&#x60;, creates a private channel instead of a public channel
    # @param name [String] Name of the public or private channel to create.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :description Description of the public or private channel to create.
    # @option opts [Boolean] :org_wide When &#x60;true&#x60;, the channel will be available org-wide. Note: if the channel is not &#x60;org_wide&#x3D;true&#x60;, you must specify a &#x60;team_id&#x60; for this channel
    # @option opts [String] :team_id The workspace to create the channel in. Note: this argument is required unless you set &#x60;org_wide&#x3D;true&#x60;.
    # @return [Array<(AdminConversationsCreateSchema, Integer, Hash)>] AdminConversationsCreateSchema data, response status code and response headers
    def admin_conversations_create_with_http_info(token, is_private, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminConversationsApi.admin_conversations_create ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminConversationsApi.admin_conversations_create"
      end
      # verify the required parameter 'is_private' is set
      if @api_client.config.client_side_validation && is_private.nil?
        fail ArgumentError, "Missing the required parameter 'is_private' when calling AdminConversationsApi.admin_conversations_create"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminConversationsApi.admin_conversations_create"
      end
      # resource path
      local_var_path = '/admin.conversations.create'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['is_private'] = is_private
      form_params['name'] = name
      form_params['description'] = opts[:'description'] if !opts[:'description'].nil?
      form_params['org_wide'] = opts[:'org_wide'] if !opts[:'org_wide'].nil?
      form_params['team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsCreateSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminConversationsApi.admin_conversations_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminConversationsApi#admin_conversations_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to delete.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsDeleteSchema]
    def admin_conversations_delete(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_delete_with_http_info(token, channel_id, opts)
      data
    end

    # Delete a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsDeleteSchema, Integer, Hash)>] AdminConversationsDeleteSchema data, response status code and response headers
    def admin_conversations_delete_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminConversationsApi.admin_conversations_delete ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminConversationsApi.admin_conversations_delete"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminConversationsApi.admin_conversations_delete"
      end
      # resource path
      local_var_path = '/admin.conversations.delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsDeleteSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminConversationsApi.admin_conversations_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminConversationsApi#admin_conversations_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disconnect a connected channel from one or more workspaces.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to be disconnected from some workspaces.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified.
    # @return [AdminConversationsRenameSchema]
    def admin_conversations_disconnect_shared(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_disconnect_shared_with_http_info(token, channel_id, opts)
      data
    end

    # Disconnect a connected channel from one or more workspaces.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to be disconnected from some workspaces.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :leaving_team_ids The team to be removed from the channel. Currently only a single team id can be specified.
    # @return [Array<(AdminConversationsRenameSchema, Integer, Hash)>] AdminConversationsRenameSchema data, response status code and response headers
    def admin_conversations_disconnect_shared_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminConversationsApi.admin_conversations_disconnect_shared ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminConversationsApi.admin_conversations_disconnect_shared"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminConversationsApi.admin_conversations_disconnect_shared"
      end
      # resource path
      local_var_path = '/admin.conversations.disconnectShared'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id
      form_params['leaving_team_ids'] = opts[:'leaving_team_ids'] if !opts[:'leaving_team_ids'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsRenameSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminConversationsApi.admin_conversations_disconnect_shared",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminConversationsApi#admin_conversations_disconnect_shared\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get conversation preferences for a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param channel_id [String] The channel to get preferences for.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsGetConversationPrefsSchema]
    def admin_conversations_get_conversation_prefs(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_get_conversation_prefs_with_http_info(token, channel_id, opts)
      data
    end

    # Get conversation preferences for a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param channel_id [String] The channel to get preferences for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsGetConversationPrefsSchema, Integer, Hash)>] AdminConversationsGetConversationPrefsSchema data, response status code and response headers
    def admin_conversations_get_conversation_prefs_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminConversationsApi.admin_conversations_get_conversation_prefs ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminConversationsApi.admin_conversations_get_conversation_prefs"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminConversationsApi.admin_conversations_get_conversation_prefs"
      end
      # resource path
      local_var_path = '/admin.conversations.getConversationPrefs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channel_id'] = channel_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsGetConversationPrefsSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminConversationsApi.admin_conversations_get_conversation_prefs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminConversationsApi#admin_conversations_get_conversation_prefs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get all the workspaces a given public or private channel is connected to within this Enterprise org.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param channel_id [String] The channel to determine connected workspaces within the organization for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @return [AdminConversationsGetTeamsSchema]
    def admin_conversations_get_teams(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_get_teams_with_http_info(token, channel_id, opts)
      data
    end

    # Get all the workspaces a given public or private channel is connected to within this Enterprise org.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param channel_id [String] The channel to determine connected workspaces within the organization for.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page
    # @option opts [Integer] :limit The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    # @return [Array<(AdminConversationsGetTeamsSchema, Integer, Hash)>] AdminConversationsGetTeamsSchema data, response status code and response headers
    def admin_conversations_get_teams_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminConversationsApi.admin_conversations_get_teams ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminConversationsApi.admin_conversations_get_teams"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminConversationsApi.admin_conversations_get_teams"
      end
      # resource path
      local_var_path = '/admin.conversations.getTeams'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channel_id'] = channel_id
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsGetTeamsSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminConversationsApi.admin_conversations_get_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminConversationsApi#admin_conversations_get_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Invite a user to a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel that the users will be invited to.
    # @param user_ids [String] The users to invite.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsInviteSchema]
    def admin_conversations_invite(token, channel_id, user_ids, opts = {})
      data, _status_code, _headers = admin_conversations_invite_with_http_info(token, channel_id, user_ids, opts)
      data
    end

    # Invite a user to a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel that the users will be invited to.
    # @param user_ids [String] The users to invite.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsInviteSchema, Integer, Hash)>] AdminConversationsInviteSchema data, response status code and response headers
    def admin_conversations_invite_with_http_info(token, channel_id, user_ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminConversationsApi.admin_conversations_invite ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminConversationsApi.admin_conversations_invite"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminConversationsApi.admin_conversations_invite"
      end
      # verify the required parameter 'user_ids' is set
      if @api_client.config.client_side_validation && user_ids.nil?
        fail ArgumentError, "Missing the required parameter 'user_ids' when calling AdminConversationsApi.admin_conversations_invite"
      end
      # resource path
      local_var_path = '/admin.conversations.invite'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id
      form_params['user_ids'] = user_ids

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsInviteSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminConversationsApi.admin_conversations_invite",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminConversationsApi#admin_conversations_invite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Rename a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to rename.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsRenameSchema1]
    def admin_conversations_rename(token, channel_id, name, opts = {})
      data, _status_code, _headers = admin_conversations_rename_with_http_info(token, channel_id, name, opts)
      data
    end

    # Rename a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to rename.
    # @param name [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsRenameSchema1, Integer, Hash)>] AdminConversationsRenameSchema1 data, response status code and response headers
    def admin_conversations_rename_with_http_info(token, channel_id, name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminConversationsApi.admin_conversations_rename ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminConversationsApi.admin_conversations_rename"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminConversationsApi.admin_conversations_rename"
      end
      # verify the required parameter 'name' is set
      if @api_client.config.client_side_validation && name.nil?
        fail ArgumentError, "Missing the required parameter 'name' when calling AdminConversationsApi.admin_conversations_rename"
      end
      # resource path
      local_var_path = '/admin.conversations.rename'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id
      form_params['name'] = name

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsRenameSchema1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminConversationsApi.admin_conversations_rename",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminConversationsApi#admin_conversations_rename\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search for public or private channels in an Enterprise organization.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_ids Comma separated string of team IDs, signifying the workspaces to search through.
    # @option opts [String] :query Name of the the channel to query by.
    # @option opts [Integer] :limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @option opts [String] :search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types).
    # @option opts [String] :sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted 
    # @option opts [String] :sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a)
    # @return [AdminConversationsSearchSchema]
    def admin_conversations_search(token, opts = {})
      data, _status_code, _headers = admin_conversations_search_with_http_info(token, opts)
      data
    end

    # Search for public or private channels in an Enterprise organization.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:read&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :team_ids Comma separated string of team IDs, signifying the workspaces to search through.
    # @option opts [String] :query Name of the the channel to query by.
    # @option opts [Integer] :limit Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
    # @option opts [String] :cursor Set &#x60;cursor&#x60; to &#x60;next_cursor&#x60; returned by the previous call to list items in the next page.
    # @option opts [String] :search_channel_types The type of channel to include or exclude in the search. For example &#x60;private&#x60; will search private channels, while &#x60;private_exclude&#x60; will exclude them. For a full list of types, check the [Types section](#types).
    # @option opts [String] :sort Possible values are &#x60;relevant&#x60; (search ranking based on what we think is closest), &#x60;name&#x60; (alphabetical), &#x60;member_count&#x60; (number of users in the channel), and &#x60;created&#x60; (date channel was created). You can optionally pair this with the &#x60;sort_dir&#x60; arg to change how it is sorted 
    # @option opts [String] :sort_dir Sort direction. Possible values are &#x60;asc&#x60; for ascending order like (1, 2, 3) or (a, b, c), and &#x60;desc&#x60; for descending order like (3, 2, 1) or (c, b, a)
    # @return [Array<(AdminConversationsSearchSchema, Integer, Hash)>] AdminConversationsSearchSchema data, response status code and response headers
    def admin_conversations_search_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminConversationsApi.admin_conversations_search ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminConversationsApi.admin_conversations_search"
      end
      # resource path
      local_var_path = '/admin.conversations.search'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'team_ids'] = opts[:'team_ids'] if !opts[:'team_ids'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'search_channel_types'] = opts[:'search_channel_types'] if !opts[:'search_channel_types'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sort_dir'] = opts[:'sort_dir'] if !opts[:'sort_dir'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsSearchSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminConversationsApi.admin_conversations_search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminConversationsApi#admin_conversations_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the posting permissions for a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to set the prefs for
    # @param prefs [String] The prefs for this channel in a stringified JSON format.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsSetConversationPrefsSchema]
    def admin_conversations_set_conversation_prefs(token, channel_id, prefs, opts = {})
      data, _status_code, _headers = admin_conversations_set_conversation_prefs_with_http_info(token, channel_id, prefs, opts)
      data
    end

    # Set the posting permissions for a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to set the prefs for
    # @param prefs [String] The prefs for this channel in a stringified JSON format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsSetConversationPrefsSchema, Integer, Hash)>] AdminConversationsSetConversationPrefsSchema data, response status code and response headers
    def admin_conversations_set_conversation_prefs_with_http_info(token, channel_id, prefs, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminConversationsApi.admin_conversations_set_conversation_prefs ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminConversationsApi.admin_conversations_set_conversation_prefs"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminConversationsApi.admin_conversations_set_conversation_prefs"
      end
      # verify the required parameter 'prefs' is set
      if @api_client.config.client_side_validation && prefs.nil?
        fail ArgumentError, "Missing the required parameter 'prefs' when calling AdminConversationsApi.admin_conversations_set_conversation_prefs"
      end
      # resource path
      local_var_path = '/admin.conversations.setConversationPrefs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id
      form_params['prefs'] = prefs

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsSetConversationPrefsSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminConversationsApi.admin_conversations_set_conversation_prefs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminConversationsApi#admin_conversations_set_conversation_prefs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the workspaces in an Enterprise grid org that connect to a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The encoded &#x60;channel_id&#x60; to add or remove to workspaces.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :org_channel True if channel has to be converted to an org channel
    # @option opts [String] :target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
    # @option opts [String] :team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.
    # @return [DefaultSuccessTemplate]
    def admin_conversations_set_teams(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_set_teams_with_http_info(token, channel_id, opts)
      data
    end

    # Set the workspaces in an Enterprise grid org that connect to a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The encoded &#x60;channel_id&#x60; to add or remove to workspaces.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :org_channel True if channel has to be converted to an org channel
    # @option opts [String] :target_team_ids A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
    # @option opts [String] :team_id The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.
    # @return [Array<(DefaultSuccessTemplate, Integer, Hash)>] DefaultSuccessTemplate data, response status code and response headers
    def admin_conversations_set_teams_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminConversationsApi.admin_conversations_set_teams ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminConversationsApi.admin_conversations_set_teams"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminConversationsApi.admin_conversations_set_teams"
      end
      # resource path
      local_var_path = '/admin.conversations.setTeams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id
      form_params['org_channel'] = opts[:'org_channel'] if !opts[:'org_channel'].nil?
      form_params['target_team_ids'] = opts[:'target_team_ids'] if !opts[:'target_team_ids'].nil?
      form_params['team_id'] = opts[:'team_id'] if !opts[:'team_id'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DefaultSuccessTemplate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminConversationsApi.admin_conversations_set_teams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminConversationsApi#admin_conversations_set_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unarchive a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to unarchive.
    # @param [Hash] opts the optional parameters
    # @return [AdminConversationsUnarchiveSchema]
    def admin_conversations_unarchive(token, channel_id, opts = {})
      data, _status_code, _headers = admin_conversations_unarchive_with_http_info(token, channel_id, opts)
      data
    end

    # Unarchive a public or private channel.
    # @param token [String] Authentication token. Requires scope: &#x60;admin.conversations:write&#x60;
    # @param channel_id [String] The channel to unarchive.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AdminConversationsUnarchiveSchema, Integer, Hash)>] AdminConversationsUnarchiveSchema data, response status code and response headers
    def admin_conversations_unarchive_with_http_info(token, channel_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdminConversationsApi.admin_conversations_unarchive ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AdminConversationsApi.admin_conversations_unarchive"
      end
      # verify the required parameter 'channel_id' is set
      if @api_client.config.client_side_validation && channel_id.nil?
        fail ArgumentError, "Missing the required parameter 'channel_id' when calling AdminConversationsApi.admin_conversations_unarchive"
      end
      # resource path
      local_var_path = '/admin.conversations.unarchive'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel_id'] = channel_id

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AdminConversationsUnarchiveSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"AdminConversationsApi.admin_conversations_unarchive",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdminConversationsApi#admin_conversations_unarchive\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
