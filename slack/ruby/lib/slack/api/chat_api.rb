=begin
#Slack Web API

#One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.

The version of the OpenAPI document: 1.7.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module slack
  class ChatApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Deletes a message.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @option opts [Boolean] :as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope.
    # @option opts [String] :channel Channel containing the message to be deleted.
    # @option opts [Float] :ts Timestamp of the message to be deleted.
    # @return [ChatDeleteSuccessSchema]
    def chat_delete(opts = {})
      data, _status_code, _headers = chat_delete_with_http_info(opts)
      data
    end

    # Deletes a message.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @option opts [Boolean] :as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope.
    # @option opts [String] :channel Channel containing the message to be deleted.
    # @option opts [Float] :ts Timestamp of the message to be deleted.
    # @return [Array<(ChatDeleteSuccessSchema, Integer, Hash)>] ChatDeleteSuccessSchema data, response status code and response headers
    def chat_delete_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatApi.chat_delete ...'
      end
      # resource path
      local_var_path = '/chat.delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['as_user'] = opts[:'as_user'] if !opts[:'as_user'].nil?
      form_params['channel'] = opts[:'channel'] if !opts[:'channel'].nil?
      form_params['ts'] = opts[:'ts'] if !opts[:'ts'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChatDeleteSuccessSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ChatApi.chat_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatApi#chat_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a pending scheduled message from the queue.
    # @param token [String] Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @param channel [String] The channel the scheduled_message is posting to
    # @param scheduled_message_id [String] &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope.
    # @return [ChatDeleteScheduledMessageSchema]
    def chat_delete_scheduled_message(token, channel, scheduled_message_id, opts = {})
      data, _status_code, _headers = chat_delete_scheduled_message_with_http_info(token, channel, scheduled_message_id, opts)
      data
    end

    # Deletes a pending scheduled message from the queue.
    # @param token [String] Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @param channel [String] The channel the scheduled_message is posting to
    # @param scheduled_message_id [String] &#x60;scheduled_message_id&#x60; returned from call to chat.scheduleMessage
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :as_user Pass true to delete the message as the authed user with &#x60;chat:write:user&#x60; scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with &#x60;chat:write:bot&#x60; scope.
    # @return [Array<(ChatDeleteScheduledMessageSchema, Integer, Hash)>] ChatDeleteScheduledMessageSchema data, response status code and response headers
    def chat_delete_scheduled_message_with_http_info(token, channel, scheduled_message_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatApi.chat_delete_scheduled_message ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatApi.chat_delete_scheduled_message"
      end
      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling ChatApi.chat_delete_scheduled_message"
      end
      # verify the required parameter 'scheduled_message_id' is set
      if @api_client.config.client_side_validation && scheduled_message_id.nil?
        fail ArgumentError, "Missing the required parameter 'scheduled_message_id' when calling ChatApi.chat_delete_scheduled_message"
      end
      # resource path
      local_var_path = '/chat.deleteScheduledMessage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel'] = channel
      form_params['scheduled_message_id'] = scheduled_message_id
      form_params['as_user'] = opts[:'as_user'] if !opts[:'as_user'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChatDeleteScheduledMessageSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ChatApi.chat_delete_scheduled_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatApi#chat_delete_scheduled_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a permalink URL for a specific extant message
    # @param token [String] Authentication token. Requires scope: &#x60;none&#x60;
    # @param channel [String] The ID of the conversation or channel containing the message
    # @param message_ts [String] A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel
    # @param [Hash] opts the optional parameters
    # @return [ChatGetPermalinkSuccessSchema]
    def chat_get_permalink(token, channel, message_ts, opts = {})
      data, _status_code, _headers = chat_get_permalink_with_http_info(token, channel, message_ts, opts)
      data
    end

    # Retrieve a permalink URL for a specific extant message
    # @param token [String] Authentication token. Requires scope: &#x60;none&#x60;
    # @param channel [String] The ID of the conversation or channel containing the message
    # @param message_ts [String] A message&#39;s &#x60;ts&#x60; value, uniquely identifying it within a channel
    # @param [Hash] opts the optional parameters
    # @return [Array<(ChatGetPermalinkSuccessSchema, Integer, Hash)>] ChatGetPermalinkSuccessSchema data, response status code and response headers
    def chat_get_permalink_with_http_info(token, channel, message_ts, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatApi.chat_get_permalink ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatApi.chat_get_permalink"
      end
      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling ChatApi.chat_get_permalink"
      end
      # verify the required parameter 'message_ts' is set
      if @api_client.config.client_side_validation && message_ts.nil?
        fail ArgumentError, "Missing the required parameter 'message_ts' when calling ChatApi.chat_get_permalink"
      end
      # resource path
      local_var_path = '/chat.getPermalink'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'token'] = token
      query_params[:'channel'] = channel
      query_params[:'message_ts'] = message_ts

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChatGetPermalinkSuccessSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ChatApi.chat_get_permalink",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatApi#chat_get_permalink\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Share a me message into a channel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @option opts [String] :channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.
    # @option opts [String] :text Text of the message to send.
    # @return [ChatMeMessageSchema]
    def chat_me_message(opts = {})
      data, _status_code, _headers = chat_me_message_with_http_info(opts)
      data
    end

    # Share a me message into a channel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @option opts [String] :channel Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.
    # @option opts [String] :text Text of the message to send.
    # @return [Array<(ChatMeMessageSchema, Integer, Hash)>] ChatMeMessageSchema data, response status code and response headers
    def chat_me_message_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatApi.chat_me_message ...'
      end
      # resource path
      local_var_path = '/chat.meMessage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel'] = opts[:'channel'] if !opts[:'channel'].nil?
      form_params['text'] = opts[:'text'] if !opts[:'text'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChatMeMessageSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ChatApi.chat_me_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatApi#chat_me_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sends an ephemeral message to a user in a channel.
    # @param token [String] Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @param channel [String] Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.
    # @param user [String] &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :as_user Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.
    # @option opts [String] :attachments A JSON-based array of structured attachments, presented as a URL-encoded string.
    # @option opts [String] :blocks A JSON-based array of structured blocks, presented as a URL-encoded string.
    # @option opts [String] :icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below.
    # @option opts [String] :icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below.
    # @option opts [Boolean] :link_names Find and link channel names and usernames.
    # @option opts [String] :parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting).
    # @option opts [String] :text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
    # @option opts [String] :thread_ts Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread.
    # @option opts [String] :username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below.
    # @return [ChatPostEphemeralSuccessSchema]
    def chat_post_ephemeral(token, channel, user, opts = {})
      data, _status_code, _headers = chat_post_ephemeral_with_http_info(token, channel, user, opts)
      data
    end

    # Sends an ephemeral message to a user in a channel.
    # @param token [String] Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @param channel [String] Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.
    # @param user [String] &#x60;id&#x60; of the user who will receive the ephemeral message. The user should be in the channel specified by the &#x60;channel&#x60; argument.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :as_user Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.
    # @option opts [String] :attachments A JSON-based array of structured attachments, presented as a URL-encoded string.
    # @option opts [String] :blocks A JSON-based array of structured blocks, presented as a URL-encoded string.
    # @option opts [String] :icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below.
    # @option opts [String] :icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below.
    # @option opts [Boolean] :link_names Find and link channel names and usernames.
    # @option opts [String] :parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting).
    # @option opts [String] :text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
    # @option opts [String] :thread_ts Provide another message&#39;s &#x60;ts&#x60; value to post this message in a thread. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent&#39;s value instead. Ephemeral messages in threads are only shown if there is already an active thread.
    # @option opts [String] :username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below.
    # @return [Array<(ChatPostEphemeralSuccessSchema, Integer, Hash)>] ChatPostEphemeralSuccessSchema data, response status code and response headers
    def chat_post_ephemeral_with_http_info(token, channel, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatApi.chat_post_ephemeral ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatApi.chat_post_ephemeral"
      end
      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling ChatApi.chat_post_ephemeral"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling ChatApi.chat_post_ephemeral"
      end
      # resource path
      local_var_path = '/chat.postEphemeral'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel'] = channel
      form_params['user'] = user
      form_params['as_user'] = opts[:'as_user'] if !opts[:'as_user'].nil?
      form_params['attachments'] = opts[:'attachments'] if !opts[:'attachments'].nil?
      form_params['blocks'] = opts[:'blocks'] if !opts[:'blocks'].nil?
      form_params['icon_emoji'] = opts[:'icon_emoji'] if !opts[:'icon_emoji'].nil?
      form_params['icon_url'] = opts[:'icon_url'] if !opts[:'icon_url'].nil?
      form_params['link_names'] = opts[:'link_names'] if !opts[:'link_names'].nil?
      form_params['parse'] = opts[:'parse'] if !opts[:'parse'].nil?
      form_params['text'] = opts[:'text'] if !opts[:'text'].nil?
      form_params['thread_ts'] = opts[:'thread_ts'] if !opts[:'thread_ts'].nil?
      form_params['username'] = opts[:'username'] if !opts[:'username'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChatPostEphemeralSuccessSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ChatApi.chat_post_ephemeral",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatApi#chat_post_ephemeral\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Sends a message to a channel.
    # @param token [String] Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @param channel [String] Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.
    # @option opts [String] :attachments A JSON-based array of structured attachments, presented as a URL-encoded string.
    # @option opts [String] :blocks A JSON-based array of structured blocks, presented as a URL-encoded string.
    # @option opts [String] :icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below.
    # @option opts [String] :icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below.
    # @option opts [Boolean] :link_names Find and link channel names and usernames.
    # @option opts [Boolean] :mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default.
    # @option opts [String] :parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting).
    # @option opts [Boolean] :reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;.
    # @option opts [String] :text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
    # @option opts [String] :thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead.
    # @option opts [Boolean] :unfurl_links Pass true to enable unfurling of primarily text-based content.
    # @option opts [Boolean] :unfurl_media Pass false to disable unfurling of media content.
    # @option opts [String] :username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below.
    # @return [ChatPostMessageSuccessSchema]
    def chat_post_message(token, channel, opts = {})
      data, _status_code, _headers = chat_post_message_with_http_info(token, channel, opts)
      data
    end

    # Sends a message to a channel.
    # @param token [String] Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @param channel [String] Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.
    # @option opts [String] :attachments A JSON-based array of structured attachments, presented as a URL-encoded string.
    # @option opts [String] :blocks A JSON-based array of structured blocks, presented as a URL-encoded string.
    # @option opts [String] :icon_emoji Emoji to use as the icon for this message. Overrides &#x60;icon_url&#x60;. Must be used in conjunction with &#x60;as_user&#x60; set to &#x60;false&#x60;, otherwise ignored. See [authorship](#authorship) below.
    # @option opts [String] :icon_url URL to an image to use as the icon for this message. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below.
    # @option opts [Boolean] :link_names Find and link channel names and usernames.
    # @option opts [Boolean] :mrkdwn Disable Slack markup parsing by setting to &#x60;false&#x60;. Enabled by default.
    # @option opts [String] :parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [below](#formatting).
    # @option opts [Boolean] :reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;.
    # @option opts [String] :text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
    # @option opts [String] :thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead.
    # @option opts [Boolean] :unfurl_links Pass true to enable unfurling of primarily text-based content.
    # @option opts [Boolean] :unfurl_media Pass false to disable unfurling of media content.
    # @option opts [String] :username Set your bot&#39;s user name. Must be used in conjunction with &#x60;as_user&#x60; set to false, otherwise ignored. See [authorship](#authorship) below.
    # @return [Array<(ChatPostMessageSuccessSchema, Integer, Hash)>] ChatPostMessageSuccessSchema data, response status code and response headers
    def chat_post_message_with_http_info(token, channel, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatApi.chat_post_message ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatApi.chat_post_message"
      end
      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling ChatApi.chat_post_message"
      end
      # resource path
      local_var_path = '/chat.postMessage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel'] = channel
      form_params['as_user'] = opts[:'as_user'] if !opts[:'as_user'].nil?
      form_params['attachments'] = opts[:'attachments'] if !opts[:'attachments'].nil?
      form_params['blocks'] = opts[:'blocks'] if !opts[:'blocks'].nil?
      form_params['icon_emoji'] = opts[:'icon_emoji'] if !opts[:'icon_emoji'].nil?
      form_params['icon_url'] = opts[:'icon_url'] if !opts[:'icon_url'].nil?
      form_params['link_names'] = opts[:'link_names'] if !opts[:'link_names'].nil?
      form_params['mrkdwn'] = opts[:'mrkdwn'] if !opts[:'mrkdwn'].nil?
      form_params['parse'] = opts[:'parse'] if !opts[:'parse'].nil?
      form_params['reply_broadcast'] = opts[:'reply_broadcast'] if !opts[:'reply_broadcast'].nil?
      form_params['text'] = opts[:'text'] if !opts[:'text'].nil?
      form_params['thread_ts'] = opts[:'thread_ts'] if !opts[:'thread_ts'].nil?
      form_params['unfurl_links'] = opts[:'unfurl_links'] if !opts[:'unfurl_links'].nil?
      form_params['unfurl_media'] = opts[:'unfurl_media'] if !opts[:'unfurl_media'].nil?
      form_params['username'] = opts[:'username'] if !opts[:'username'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChatPostMessageSuccessSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ChatApi.chat_post_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatApi#chat_post_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Schedules a message to be sent to a channel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @option opts [Boolean] :as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship).
    # @option opts [String] :attachments A JSON-based array of structured attachments, presented as a URL-encoded string.
    # @option opts [String] :blocks A JSON-based array of structured blocks, presented as a URL-encoded string.
    # @option opts [String] :channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
    # @option opts [Boolean] :link_names Find and link channel names and usernames.
    # @option opts [String] :parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting).
    # @option opts [String] :post_at Unix EPOCH timestamp of time in future to send the message.
    # @option opts [Boolean] :reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;.
    # @option opts [String] :text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
    # @option opts [Float] :thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead.
    # @option opts [Boolean] :unfurl_links Pass true to enable unfurling of primarily text-based content.
    # @option opts [Boolean] :unfurl_media Pass false to disable unfurling of media content.
    # @return [ChatScheduleMessageSuccessSchema]
    def chat_schedule_message(opts = {})
      data, _status_code, _headers = chat_schedule_message_with_http_info(opts)
      data
    end

    # Schedules a message to be sent to a channel.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @option opts [Boolean] :as_user Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship).
    # @option opts [String] :attachments A JSON-based array of structured attachments, presented as a URL-encoded string.
    # @option opts [String] :blocks A JSON-based array of structured blocks, presented as a URL-encoded string.
    # @option opts [String] :channel Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
    # @option opts [Boolean] :link_names Find and link channel names and usernames.
    # @option opts [String] :parse Change how messages are treated. Defaults to &#x60;none&#x60;. See [chat.postMessage](chat.postMessage#formatting).
    # @option opts [String] :post_at Unix EPOCH timestamp of time in future to send the message.
    # @option opts [Boolean] :reply_broadcast Used in conjunction with &#x60;thread_ts&#x60; and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to &#x60;false&#x60;.
    # @option opts [String] :text How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
    # @option opts [Float] :thread_ts Provide another message&#39;s &#x60;ts&#x60; value to make this message a reply. Avoid using a reply&#39;s &#x60;ts&#x60; value; use its parent instead.
    # @option opts [Boolean] :unfurl_links Pass true to enable unfurling of primarily text-based content.
    # @option opts [Boolean] :unfurl_media Pass false to disable unfurling of media content.
    # @return [Array<(ChatScheduleMessageSuccessSchema, Integer, Hash)>] ChatScheduleMessageSuccessSchema data, response status code and response headers
    def chat_schedule_message_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatApi.chat_schedule_message ...'
      end
      # resource path
      local_var_path = '/chat.scheduleMessage'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['as_user'] = opts[:'as_user'] if !opts[:'as_user'].nil?
      form_params['attachments'] = opts[:'attachments'] if !opts[:'attachments'].nil?
      form_params['blocks'] = opts[:'blocks'] if !opts[:'blocks'].nil?
      form_params['channel'] = opts[:'channel'] if !opts[:'channel'].nil?
      form_params['link_names'] = opts[:'link_names'] if !opts[:'link_names'].nil?
      form_params['parse'] = opts[:'parse'] if !opts[:'parse'].nil?
      form_params['post_at'] = opts[:'post_at'] if !opts[:'post_at'].nil?
      form_params['reply_broadcast'] = opts[:'reply_broadcast'] if !opts[:'reply_broadcast'].nil?
      form_params['text'] = opts[:'text'] if !opts[:'text'].nil?
      form_params['thread_ts'] = opts[:'thread_ts'] if !opts[:'thread_ts'].nil?
      form_params['unfurl_links'] = opts[:'unfurl_links'] if !opts[:'unfurl_links'].nil?
      form_params['unfurl_media'] = opts[:'unfurl_media'] if !opts[:'unfurl_media'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChatScheduleMessageSuccessSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ChatApi.chat_schedule_message",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatApi#chat_schedule_message\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of scheduled messages.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;none&#x60;
    # @option opts [String] :channel The channel of the scheduled messages
    # @option opts [Float] :latest A UNIX timestamp of the latest value in the time range
    # @option opts [Float] :oldest A UNIX timestamp of the oldest value in the time range
    # @option opts [Integer] :limit Maximum number of original entries to return.
    # @option opts [String] :cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from.
    # @return [ChatScheduledMessagesListSchema]
    def chat_scheduled_messages_list(opts = {})
      data, _status_code, _headers = chat_scheduled_messages_list_with_http_info(opts)
      data
    end

    # Returns a list of scheduled messages.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :token Authentication token. Requires scope: &#x60;none&#x60;
    # @option opts [String] :channel The channel of the scheduled messages
    # @option opts [Float] :latest A UNIX timestamp of the latest value in the time range
    # @option opts [Float] :oldest A UNIX timestamp of the oldest value in the time range
    # @option opts [Integer] :limit Maximum number of original entries to return.
    # @option opts [String] :cursor For pagination purposes, this is the &#x60;cursor&#x60; value returned from a previous call to &#x60;chat.scheduledmessages.list&#x60; indicating where you want to start this call from.
    # @return [Array<(ChatScheduledMessagesListSchema, Integer, Hash)>] ChatScheduledMessagesListSchema data, response status code and response headers
    def chat_scheduled_messages_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatApi.chat_scheduled_messages_list ...'
      end
      # resource path
      local_var_path = '/chat.scheduledMessages.list'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'channel'] = opts[:'channel'] if !opts[:'channel'].nil?
      query_params[:'latest'] = opts[:'latest'] if !opts[:'latest'].nil?
      query_params[:'oldest'] = opts[:'oldest'] if !opts[:'oldest'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = opts[:'token'] if !opts[:'token'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChatScheduledMessagesListSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ChatApi.chat_scheduled_messages_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatApi#chat_scheduled_messages_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Provide custom unfurl behavior for user-posted URLs
    # @param token [String] Authentication token. Requires scope: &#x60;links:write&#x60;
    # @param channel [String] Channel ID of the message
    # @param ts [String] Timestamp of the message to add unfurl behavior to.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.
    # @option opts [String] :user_auth_message Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior
    # @option opts [Boolean] :user_auth_required Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain
    # @option opts [String] :user_auth_url Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.
    # @return [ChatUnfurlSuccessSchema]
    def chat_unfurl(token, channel, ts, opts = {})
      data, _status_code, _headers = chat_unfurl_with_http_info(token, channel, ts, opts)
      data
    end

    # Provide custom unfurl behavior for user-posted URLs
    # @param token [String] Authentication token. Requires scope: &#x60;links:write&#x60;
    # @param channel [String] Channel ID of the message
    # @param ts [String] Timestamp of the message to add unfurl behavior to.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :unfurls URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.
    # @option opts [String] :user_auth_message Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior
    # @option opts [Boolean] :user_auth_required Set to &#x60;true&#x60; or &#x60;1&#x60; to indicate the user must install your Slack app to trigger unfurls for this domain
    # @option opts [String] :user_auth_url Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.
    # @return [Array<(ChatUnfurlSuccessSchema, Integer, Hash)>] ChatUnfurlSuccessSchema data, response status code and response headers
    def chat_unfurl_with_http_info(token, channel, ts, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatApi.chat_unfurl ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatApi.chat_unfurl"
      end
      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling ChatApi.chat_unfurl"
      end
      # verify the required parameter 'ts' is set
      if @api_client.config.client_side_validation && ts.nil?
        fail ArgumentError, "Missing the required parameter 'ts' when calling ChatApi.chat_unfurl"
      end
      # resource path
      local_var_path = '/chat.unfurl'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel'] = channel
      form_params['ts'] = ts
      form_params['unfurls'] = opts[:'unfurls'] if !opts[:'unfurls'].nil?
      form_params['user_auth_message'] = opts[:'user_auth_message'] if !opts[:'user_auth_message'].nil?
      form_params['user_auth_required'] = opts[:'user_auth_required'] if !opts[:'user_auth_required'].nil?
      form_params['user_auth_url'] = opts[:'user_auth_url'] if !opts[:'user_auth_url'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChatUnfurlSuccessSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ChatApi.chat_unfurl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatApi#chat_unfurl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a message.
    # @param token [String] Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @param channel [String] Channel containing the message to be updated.
    # @param ts [String] Timestamp of the message to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :as_user Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.
    # @option opts [String] :attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field.
    # @option opts [String] :blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field.
    # @option opts [String] :link_names Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;.
    # @option opts [String] :parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;.
    # @option opts [String] :text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;.
    # @return [ChatUpdateSuccessSchema]
    def chat_update(token, channel, ts, opts = {})
      data, _status_code, _headers = chat_update_with_http_info(token, channel, ts, opts)
      data
    end

    # Updates a message.
    # @param token [String] Authentication token. Requires scope: &#x60;chat:write&#x60;
    # @param channel [String] Channel containing the message to be updated.
    # @param ts [String] Timestamp of the message to be updated.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :as_user Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.
    # @option opts [String] :attachments A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting &#x60;text&#x60;. If you don&#39;t include this field, the message&#39;s previous &#x60;attachments&#x60; will be retained. To remove previous &#x60;attachments&#x60;, include an empty array for this field.
    # @option opts [String] :blocks A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don&#39;t include this field, the message&#39;s previous &#x60;blocks&#x60; will be retained. To remove previous &#x60;blocks&#x60;, include an empty array for this field.
    # @option opts [String] :link_names Find and link channel names and usernames. Defaults to &#x60;none&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;none&#x60;.
    # @option opts [String] :parse Change how messages are treated. Defaults to &#x60;client&#x60;, unlike &#x60;chat.postMessage&#x60;. Accepts either &#x60;none&#x60; or &#x60;full&#x60;. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, &#x60;client&#x60;.
    # @option opts [String] :text New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It&#39;s not required when presenting &#x60;blocks&#x60; or &#x60;attachments&#x60;.
    # @return [Array<(ChatUpdateSuccessSchema, Integer, Hash)>] ChatUpdateSuccessSchema data, response status code and response headers
    def chat_update_with_http_info(token, channel, ts, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ChatApi.chat_update ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling ChatApi.chat_update"
      end
      # verify the required parameter 'channel' is set
      if @api_client.config.client_side_validation && channel.nil?
        fail ArgumentError, "Missing the required parameter 'channel' when calling ChatApi.chat_update"
      end
      # verify the required parameter 'ts' is set
      if @api_client.config.client_side_validation && ts.nil?
        fail ArgumentError, "Missing the required parameter 'ts' when calling ChatApi.chat_update"
      end
      # resource path
      local_var_path = '/chat.update'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'token'] = token

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['channel'] = channel
      form_params['ts'] = ts
      form_params['as_user'] = opts[:'as_user'] if !opts[:'as_user'].nil?
      form_params['attachments'] = opts[:'attachments'] if !opts[:'attachments'].nil?
      form_params['blocks'] = opts[:'blocks'] if !opts[:'blocks'].nil?
      form_params['link_names'] = opts[:'link_names'] if !opts[:'link_names'].nil?
      form_params['parse'] = opts[:'parse'] if !opts[:'parse'].nil?
      form_params['text'] = opts[:'text'] if !opts[:'text'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ChatUpdateSuccessSchema'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['slackAuth']

      new_options = opts.merge(
        :operation => :"ChatApi.chat_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChatApi#chat_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
