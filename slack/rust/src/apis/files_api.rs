/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`files_comments_delete`]
#[derive(Clone, Debug, Default)]
pub struct FilesCommentsDeleteParams {
    /// Authentication token. Requires scope: `files:write:user`
    pub token: Option<String>,
    /// File to delete a comment from.
    pub file: Option<String>,
    /// The comment to delete.
    pub id: Option<String>
}

/// struct for passing parameters to the method [`files_delete`]
#[derive(Clone, Debug, Default)]
pub struct FilesDeleteParams {
    /// Authentication token. Requires scope: `files:write:user`
    pub token: Option<String>,
    /// ID of file to delete.
    pub file: Option<String>
}

/// struct for passing parameters to the method [`files_info`]
#[derive(Clone, Debug, Default)]
pub struct FilesInfoParams {
    /// Authentication token. Requires scope: `files:read`
    pub token: Option<String>,
    /// Specify a file by providing its ID.
    pub file: Option<String>,
    pub count: Option<String>,
    pub page: Option<String>,
    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
    pub limit: Option<i32>,
    /// Parameter for pagination. File comments are paginated for a single file. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection of comments. See [pagination](/docs/pagination) for more details.
    pub cursor: Option<String>
}

/// struct for passing parameters to the method [`files_list`]
#[derive(Clone, Debug, Default)]
pub struct FilesListParams {
    /// Authentication token. Requires scope: `files:read`
    pub token: Option<String>,
    /// Filter files created by a single user.
    pub user: Option<String>,
    /// Filter files appearing in a specific channel, indicated by its ID.
    pub channel: Option<String>,
    /// Filter files created after this timestamp (inclusive).
    pub ts_from: Option<f32>,
    /// Filter files created before this timestamp (inclusive).
    pub ts_to: Option<f32>,
    /// Filter files by type ([see below](#file_types)). You can pass multiple values in the types argument, like `types=spaces,snippets`.The default value is `all`, which does not filter the list.
    pub types: Option<String>,
    pub count: Option<String>,
    pub page: Option<String>,
    /// Show truncated file info for files hidden due to being too old, and the team who owns the file being over the file limit.
    pub show_files_hidden_by_limit: Option<bool>
}

/// struct for passing parameters to the method [`files_remote_add`]
#[derive(Clone, Debug, Default)]
pub struct FilesRemoteAddParams {
    /// Creator defined GUID for the file.
    pub external_id: Option<String>,
    /// URL of the remote file.
    pub external_url: Option<String>,
    /// type of file
    pub filetype: Option<String>,
    /// A text file (txt, pdf, doc, etc.) containing textual search terms that are used to improve discovery of the remote file.
    pub indexable_file_contents: Option<String>,
    /// Preview of the document via `multipart/form-data`.
    pub preview_image: Option<String>,
    /// Title of the file being shared.
    pub title: Option<String>,
    /// Authentication token. Requires scope: `remote_files:write`
    pub token: Option<String>
}

/// struct for passing parameters to the method [`files_remote_info`]
#[derive(Clone, Debug, Default)]
pub struct FilesRemoteInfoParams {
    /// Authentication token. Requires scope: `remote_files:read`
    pub token: Option<String>,
    /// Specify a file by providing its ID.
    pub file: Option<String>,
    /// Creator defined GUID for the file.
    pub external_id: Option<String>
}

/// struct for passing parameters to the method [`files_remote_list`]
#[derive(Clone, Debug, Default)]
pub struct FilesRemoteListParams {
    /// Authentication token. Requires scope: `remote_files:read`
    pub token: Option<String>,
    /// Filter files appearing in a specific channel, indicated by its ID.
    pub channel: Option<String>,
    /// Filter files created after this timestamp (inclusive).
    pub ts_from: Option<f32>,
    /// Filter files created before this timestamp (inclusive).
    pub ts_to: Option<f32>,
    /// The maximum number of items to return.
    pub limit: Option<i32>,
    /// Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
    pub cursor: Option<String>
}

/// struct for passing parameters to the method [`files_remote_remove`]
#[derive(Clone, Debug, Default)]
pub struct FilesRemoteRemoveParams {
    /// Creator defined GUID for the file.
    pub external_id: Option<String>,
    /// Specify a file by providing its ID.
    pub file: Option<String>,
    /// Authentication token. Requires scope: `remote_files:write`
    pub token: Option<String>
}

/// struct for passing parameters to the method [`files_remote_share`]
#[derive(Clone, Debug, Default)]
pub struct FilesRemoteShareParams {
    /// Authentication token. Requires scope: `remote_files:share`
    pub token: Option<String>,
    /// Specify a file registered with Slack by providing its ID. Either this field or `external_id` or both are required.
    pub file: Option<String>,
    /// The globally unique identifier (GUID) for the file, as set by the app registering the file with Slack.  Either this field or `file` or both are required.
    pub external_id: Option<String>,
    /// Comma-separated list of channel IDs where the file will be shared.
    pub channels: Option<String>
}

/// struct for passing parameters to the method [`files_remote_update`]
#[derive(Clone, Debug, Default)]
pub struct FilesRemoteUpdateParams {
    /// Creator defined GUID for the file.
    pub external_id: Option<String>,
    /// URL of the remote file.
    pub external_url: Option<String>,
    /// Specify a file by providing its ID.
    pub file: Option<String>,
    /// type of file
    pub filetype: Option<String>,
    /// File containing contents that can be used to improve searchability for the remote file.
    pub indexable_file_contents: Option<String>,
    /// Preview of the document via `multipart/form-data`.
    pub preview_image: Option<String>,
    /// Title of the file being shared.
    pub title: Option<String>,
    /// Authentication token. Requires scope: `remote_files:write`
    pub token: Option<String>
}

/// struct for passing parameters to the method [`files_revoke_public_url`]
#[derive(Clone, Debug, Default)]
pub struct FilesRevokePublicUrlParams {
    /// Authentication token. Requires scope: `files:write:user`
    pub token: Option<String>,
    /// File to revoke
    pub file: Option<String>
}

/// struct for passing parameters to the method [`files_shared_public_url`]
#[derive(Clone, Debug, Default)]
pub struct FilesSharedPublicUrlParams {
    /// Authentication token. Requires scope: `files:write:user`
    pub token: Option<String>,
    /// File to share
    pub file: Option<String>
}

/// struct for passing parameters to the method [`files_upload`]
#[derive(Clone, Debug, Default)]
pub struct FilesUploadParams {
    /// Comma-separated list of channel names or IDs where the file will be shared.
    pub channels: Option<String>,
    /// File contents via a POST variable. If omitting this parameter, you must provide a `file`.
    pub content: Option<String>,
    /// File contents via `multipart/form-data`. If omitting this parameter, you must submit `content`.
    pub file: Option<String>,
    /// Filename of file.
    pub filename: Option<String>,
    /// A [file type](/types/file#file_types) identifier.
    pub filetype: Option<String>,
    /// The message text introducing the file in specified `channels`.
    pub initial_comment: Option<String>,
    /// Provide another message's `ts` value to upload this file as a reply. Never use a reply's `ts` value; use its parent instead.
    pub thread_ts: Option<f32>,
    /// Title of file.
    pub title: Option<String>,
    /// Authentication token. Requires scope: `files:write:user`
    pub token: Option<String>
}


/// struct for typed errors of method [`files_comments_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesCommentsDeleteError {
    DefaultResponse(crate::models::FilesCommentsDeleteErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesDeleteError {
    DefaultResponse(crate::models::FilesDeleteErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesInfoError {
    DefaultResponse(crate::models::FilesInfoErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesListError {
    DefaultResponse(crate::models::FilesListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_remote_add`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesRemoteAddError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_remote_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesRemoteInfoError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_remote_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesRemoteListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_remote_remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesRemoteRemoveError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_remote_share`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesRemoteShareError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_remote_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesRemoteUpdateError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_revoke_public_url`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesRevokePublicUrlError {
    DefaultResponse(crate::models::FilesRevokePublicUrlErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_shared_public_url`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesSharedPublicUrlError {
    DefaultResponse(crate::models::FilesSharedPublicUrlErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`files_upload`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum FilesUploadError {
    DefaultResponse(crate::models::FilesUploadErrorSchema),
    UnknownValue(serde_json::Value),
}


/// Deletes an existing comment on a file.
pub async fn files_comments_delete(configuration: &configuration::Configuration, params: FilesCommentsDeleteParams) -> Result<crate::models::FilesCommentsDeleteSchema, Error<FilesCommentsDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let file = params.file;
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/files.comments.delete", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = token {
        local_var_req_builder = local_var_req_builder.header("token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = file {
        local_var_form_params.insert("file", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = id {
        local_var_form_params.insert("id", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FilesCommentsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deletes a file.
pub async fn files_delete(configuration: &configuration::Configuration, params: FilesDeleteParams) -> Result<crate::models::FilesDeleteSchema, Error<FilesDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let file = params.file;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/files.delete", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = token {
        local_var_req_builder = local_var_req_builder.header("token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = file {
        local_var_form_params.insert("file", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FilesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Gets information about a file.
pub async fn files_info(configuration: &configuration::Configuration, params: FilesInfoParams) -> Result<crate::models::FilesInfoSchema, Error<FilesInfoError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let file = params.file;
    let count = params.count;
    let page = params.page;
    let limit = params.limit;
    let cursor = params.cursor;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/files.info", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = file {
        local_var_req_builder = local_var_req_builder.query(&[("file", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = count {
        local_var_req_builder = local_var_req_builder.query(&[("count", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FilesInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List for a team, in a channel, or from a user with applied filters.
pub async fn files_list(configuration: &configuration::Configuration, params: FilesListParams) -> Result<crate::models::FilesListSchema, Error<FilesListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let user = params.user;
    let channel = params.channel;
    let ts_from = params.ts_from;
    let ts_to = params.ts_to;
    let types = params.types;
    let count = params.count;
    let page = params.page;
    let show_files_hidden_by_limit = params.show_files_hidden_by_limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/files.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user {
        local_var_req_builder = local_var_req_builder.query(&[("user", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = channel {
        local_var_req_builder = local_var_req_builder.query(&[("channel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ts_from {
        local_var_req_builder = local_var_req_builder.query(&[("ts_from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ts_to {
        local_var_req_builder = local_var_req_builder.query(&[("ts_to", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = types {
        local_var_req_builder = local_var_req_builder.query(&[("types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = count {
        local_var_req_builder = local_var_req_builder.query(&[("count", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = show_files_hidden_by_limit {
        local_var_req_builder = local_var_req_builder.query(&[("show_files_hidden_by_limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FilesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Adds a file from a remote service
pub async fn files_remote_add(configuration: &configuration::Configuration, params: FilesRemoteAddParams) -> Result<crate::models::DefaultSuccessTemplate, Error<FilesRemoteAddError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let external_id = params.external_id;
    let external_url = params.external_url;
    let filetype = params.filetype;
    let indexable_file_contents = params.indexable_file_contents;
    let preview_image = params.preview_image;
    let title = params.title;
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/files.remote.add", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = external_id {
        local_var_form_params.insert("external_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = external_url {
        local_var_form_params.insert("external_url", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = filetype {
        local_var_form_params.insert("filetype", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = indexable_file_contents {
        local_var_form_params.insert("indexable_file_contents", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = preview_image {
        local_var_form_params.insert("preview_image", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = title {
        local_var_form_params.insert("title", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = token {
        local_var_form_params.insert("token", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FilesRemoteAddError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve information about a remote file added to Slack
pub async fn files_remote_info(configuration: &configuration::Configuration, params: FilesRemoteInfoParams) -> Result<crate::models::DefaultSuccessTemplate, Error<FilesRemoteInfoError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let file = params.file;
    let external_id = params.external_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/files.remote.info", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = file {
        local_var_req_builder = local_var_req_builder.query(&[("file", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_id {
        local_var_req_builder = local_var_req_builder.query(&[("external_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FilesRemoteInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve information about a remote file added to Slack
pub async fn files_remote_list(configuration: &configuration::Configuration, params: FilesRemoteListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<FilesRemoteListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel = params.channel;
    let ts_from = params.ts_from;
    let ts_to = params.ts_to;
    let limit = params.limit;
    let cursor = params.cursor;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/files.remote.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = channel {
        local_var_req_builder = local_var_req_builder.query(&[("channel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ts_from {
        local_var_req_builder = local_var_req_builder.query(&[("ts_from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ts_to {
        local_var_req_builder = local_var_req_builder.query(&[("ts_to", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FilesRemoteListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove a remote file.
pub async fn files_remote_remove(configuration: &configuration::Configuration, params: FilesRemoteRemoveParams) -> Result<crate::models::DefaultSuccessTemplate, Error<FilesRemoteRemoveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let external_id = params.external_id;
    let file = params.file;
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/files.remote.remove", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = external_id {
        local_var_form_params.insert("external_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = file {
        local_var_form_params.insert("file", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = token {
        local_var_form_params.insert("token", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FilesRemoteRemoveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Share a remote file into a channel.
pub async fn files_remote_share(configuration: &configuration::Configuration, params: FilesRemoteShareParams) -> Result<crate::models::DefaultSuccessTemplate, Error<FilesRemoteShareError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let file = params.file;
    let external_id = params.external_id;
    let channels = params.channels;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/files.remote.share", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = file {
        local_var_req_builder = local_var_req_builder.query(&[("file", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = external_id {
        local_var_req_builder = local_var_req_builder.query(&[("external_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = channels {
        local_var_req_builder = local_var_req_builder.query(&[("channels", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FilesRemoteShareError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates an existing remote file.
pub async fn files_remote_update(configuration: &configuration::Configuration, params: FilesRemoteUpdateParams) -> Result<crate::models::DefaultSuccessTemplate, Error<FilesRemoteUpdateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let external_id = params.external_id;
    let external_url = params.external_url;
    let file = params.file;
    let filetype = params.filetype;
    let indexable_file_contents = params.indexable_file_contents;
    let preview_image = params.preview_image;
    let title = params.title;
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/files.remote.update", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = external_id {
        local_var_form_params.insert("external_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = external_url {
        local_var_form_params.insert("external_url", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = file {
        local_var_form_params.insert("file", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = filetype {
        local_var_form_params.insert("filetype", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = indexable_file_contents {
        local_var_form_params.insert("indexable_file_contents", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = preview_image {
        local_var_form_params.insert("preview_image", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = title {
        local_var_form_params.insert("title", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = token {
        local_var_form_params.insert("token", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FilesRemoteUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Revokes public/external sharing access for a file
pub async fn files_revoke_public_url(configuration: &configuration::Configuration, params: FilesRevokePublicUrlParams) -> Result<crate::models::FilesRevokePublicUrlSchema, Error<FilesRevokePublicUrlError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let file = params.file;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/files.revokePublicURL", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = token {
        local_var_req_builder = local_var_req_builder.header("token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = file {
        local_var_form_params.insert("file", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FilesRevokePublicUrlError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Enables a file for public/external sharing.
pub async fn files_shared_public_url(configuration: &configuration::Configuration, params: FilesSharedPublicUrlParams) -> Result<crate::models::FilesSharedPublicUrlSchema, Error<FilesSharedPublicUrlError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let file = params.file;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/files.sharedPublicURL", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = token {
        local_var_req_builder = local_var_req_builder.header("token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = file {
        local_var_form_params.insert("file", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FilesSharedPublicUrlError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Uploads or creates a file.
pub async fn files_upload(configuration: &configuration::Configuration, params: FilesUploadParams) -> Result<crate::models::FilesUploadSchema, Error<FilesUploadError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let channels = params.channels;
    let content = params.content;
    let file = params.file;
    let filename = params.filename;
    let filetype = params.filetype;
    let initial_comment = params.initial_comment;
    let thread_ts = params.thread_ts;
    let title = params.title;
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/files.upload", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = channels {
        local_var_form_params.insert("channels", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = content {
        local_var_form_params.insert("content", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = file {
        local_var_form_params.insert("file", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = filename {
        local_var_form_params.insert("filename", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = filetype {
        local_var_form_params.insert("filetype", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = initial_comment {
        local_var_form_params.insert("initial_comment", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = thread_ts {
        local_var_form_params.insert("thread_ts", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = title {
        local_var_form_params.insert("title", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = token {
        local_var_form_params.insert("token", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<FilesUploadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

