/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`calls_add`]
#[derive(Clone, Debug, Default)]
pub struct CallsAddParams {
    /// Authentication token. Requires scope: `calls:write`
    pub token: String,
    /// An ID supplied by the 3rd-party Call provider. It must be unique across all Calls from that service.
    pub external_unique_id: String,
    /// The URL required for a client to join the Call.
    pub join_url: String,
    /// The valid Slack user ID of the user who created this Call. When this method is called with a user token, the `created_by` field is optional and defaults to the authed user of the token. Otherwise, the field is required.
    pub created_by: Option<String>,
    /// Call start time in UTC UNIX timestamp format
    pub date_start: Option<i32>,
    /// When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
    pub desktop_app_join_url: Option<String>,
    /// An optional, human-readable ID supplied by the 3rd-party Call provider. If supplied, this ID will be displayed in the Call object.
    pub external_display_id: Option<String>,
    /// The name of the Call.
    pub title: Option<String>,
    /// The list of users to register as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
    pub users: Option<String>
}

/// struct for passing parameters to the method [`calls_end`]
#[derive(Clone, Debug, Default)]
pub struct CallsEndParams {
    /// Authentication token. Requires scope: `calls:write`
    pub token: String,
    /// `id` returned when registering the call using the [`calls.add`](/methods/calls.add) method.
    pub id: String,
    /// Call duration in seconds
    pub duration: Option<i32>
}

/// struct for passing parameters to the method [`calls_info`]
#[derive(Clone, Debug, Default)]
pub struct CallsInfoParams {
    /// Authentication token. Requires scope: `calls:read`
    pub token: String,
    /// `id` of the Call returned by the [`calls.add`](/methods/calls.add) method.
    pub id: String
}

/// struct for passing parameters to the method [`calls_participants_add`]
#[derive(Clone, Debug, Default)]
pub struct CallsParticipantsAddParams {
    /// Authentication token. Requires scope: `calls:write`
    pub token: String,
    /// `id` returned by the [`calls.add`](/methods/calls.add) method.
    pub id: String,
    /// The list of users to add as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
    pub users: String
}

/// struct for passing parameters to the method [`calls_participants_remove`]
#[derive(Clone, Debug, Default)]
pub struct CallsParticipantsRemoveParams {
    /// Authentication token. Requires scope: `calls:write`
    pub token: String,
    /// `id` returned by the [`calls.add`](/methods/calls.add) method.
    pub id: String,
    /// The list of users to remove as participants in the Call. [Read more on how to specify users here](/apis/calls#users).
    pub users: String
}

/// struct for passing parameters to the method [`calls_update`]
#[derive(Clone, Debug, Default)]
pub struct CallsUpdateParams {
    /// Authentication token. Requires scope: `calls:write`
    pub token: String,
    /// `id` returned by the [`calls.add`](/methods/calls.add) method.
    pub id: String,
    /// When supplied, available Slack clients will attempt to directly launch the 3rd-party Call with this URL.
    pub desktop_app_join_url: Option<String>,
    /// The URL required for a client to join the Call.
    pub join_url: Option<String>,
    /// The name of the Call.
    pub title: Option<String>
}


/// struct for typed errors of method [`calls_add`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CallsAddError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`calls_end`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CallsEndError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`calls_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CallsInfoError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`calls_participants_add`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CallsParticipantsAddError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`calls_participants_remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CallsParticipantsRemoveError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`calls_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CallsUpdateError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}


/// Registers a new Call.
pub async fn calls_add(configuration: &configuration::Configuration, params: CallsAddParams) -> Result<crate::models::DefaultSuccessTemplate, Error<CallsAddError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let external_unique_id = params.external_unique_id;
    let join_url = params.join_url;
    let created_by = params.created_by;
    let date_start = params.date_start;
    let desktop_app_join_url = params.desktop_app_join_url;
    let external_display_id = params.external_display_id;
    let title = params.title;
    let users = params.users;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/calls.add", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = created_by {
        local_var_form_params.insert("created_by", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = date_start {
        local_var_form_params.insert("date_start", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = desktop_app_join_url {
        local_var_form_params.insert("desktop_app_join_url", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = external_display_id {
        local_var_form_params.insert("external_display_id", local_var_param_value.to_string());
    }
    local_var_form_params.insert("external_unique_id", external_unique_id.to_string());
    local_var_form_params.insert("join_url", join_url.to_string());
    if let Some(local_var_param_value) = title {
        local_var_form_params.insert("title", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = users {
        local_var_form_params.insert("users", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CallsAddError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Ends a Call.
pub async fn calls_end(configuration: &configuration::Configuration, params: CallsEndParams) -> Result<crate::models::DefaultSuccessTemplate, Error<CallsEndError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let id = params.id;
    let duration = params.duration;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/calls.end", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = duration {
        local_var_form_params.insert("duration", local_var_param_value.to_string());
    }
    local_var_form_params.insert("id", id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CallsEndError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns information about a Call.
pub async fn calls_info(configuration: &configuration::Configuration, params: CallsInfoParams) -> Result<crate::models::DefaultSuccessTemplate, Error<CallsInfoError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let id = params.id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/calls.info", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("id", &id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CallsInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Registers new participants added to a Call.
pub async fn calls_participants_add(configuration: &configuration::Configuration, params: CallsParticipantsAddParams) -> Result<crate::models::DefaultSuccessTemplate, Error<CallsParticipantsAddError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let id = params.id;
    let users = params.users;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/calls.participants.add", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("id", id.to_string());
    local_var_form_params.insert("users", users.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CallsParticipantsAddError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Registers participants removed from a Call.
pub async fn calls_participants_remove(configuration: &configuration::Configuration, params: CallsParticipantsRemoveParams) -> Result<crate::models::DefaultSuccessTemplate, Error<CallsParticipantsRemoveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let id = params.id;
    let users = params.users;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/calls.participants.remove", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("id", id.to_string());
    local_var_form_params.insert("users", users.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CallsParticipantsRemoveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates information about a Call.
pub async fn calls_update(configuration: &configuration::Configuration, params: CallsUpdateParams) -> Result<crate::models::DefaultSuccessTemplate, Error<CallsUpdateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let id = params.id;
    let desktop_app_join_url = params.desktop_app_join_url;
    let join_url = params.join_url;
    let title = params.title;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/calls.update", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = desktop_app_join_url {
        local_var_form_params.insert("desktop_app_join_url", local_var_param_value.to_string());
    }
    local_var_form_params.insert("id", id.to_string());
    if let Some(local_var_param_value) = join_url {
        local_var_form_params.insert("join_url", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = title {
        local_var_form_params.insert("title", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CallsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

