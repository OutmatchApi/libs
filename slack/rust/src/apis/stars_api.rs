/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`stars_add`]
#[derive(Clone, Debug, Default)]
pub struct StarsAddParams {
    /// Authentication token. Requires scope: `stars:write`
    pub token: String,
    /// Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`).
    pub channel: Option<String>,
    /// File to add star to.
    pub file: Option<String>,
    /// File comment to add star to.
    pub file_comment: Option<String>,
    /// Timestamp of the message to add star to.
    pub timestamp: Option<String>
}

/// struct for passing parameters to the method [`stars_list`]
#[derive(Clone, Debug, Default)]
pub struct StarsListParams {
    /// Authentication token. Requires scope: `stars:read`
    pub token: Option<String>,
    pub count: Option<String>,
    pub page: Option<String>,
    /// Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.
    pub cursor: Option<String>,
    /// The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`stars_remove`]
#[derive(Clone, Debug, Default)]
pub struct StarsRemoveParams {
    /// Authentication token. Requires scope: `stars:write`
    pub token: String,
    /// Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`).
    pub channel: Option<String>,
    /// File to remove star from.
    pub file: Option<String>,
    /// File comment to remove star from.
    pub file_comment: Option<String>,
    /// Timestamp of the message to remove star from.
    pub timestamp: Option<String>
}


/// struct for typed errors of method [`stars_add`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StarsAddError {
    DefaultResponse(crate::models::StarsAddErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stars_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StarsListError {
    DefaultResponse(crate::models::StarsListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`stars_remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum StarsRemoveError {
    DefaultResponse(crate::models::StarsRemoveErrorSchema),
    UnknownValue(serde_json::Value),
}


/// Adds a star to an item.
pub async fn stars_add(configuration: &configuration::Configuration, params: StarsAddParams) -> Result<crate::models::StarsAddSchema, Error<StarsAddError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel = params.channel;
    let file = params.file;
    let file_comment = params.file_comment;
    let timestamp = params.timestamp;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/stars.add", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = channel {
        local_var_form_params.insert("channel", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = file {
        local_var_form_params.insert("file", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = file_comment {
        local_var_form_params.insert("file_comment", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = timestamp {
        local_var_form_params.insert("timestamp", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StarsAddError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Lists stars for a user.
pub async fn stars_list(configuration: &configuration::Configuration, params: StarsListParams) -> Result<crate::models::StarsListSchema, Error<StarsListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let count = params.count;
    let page = params.page;
    let cursor = params.cursor;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/stars.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = count {
        local_var_req_builder = local_var_req_builder.query(&[("count", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StarsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Removes a star from an item.
pub async fn stars_remove(configuration: &configuration::Configuration, params: StarsRemoveParams) -> Result<crate::models::StarsRemoveSchema, Error<StarsRemoveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel = params.channel;
    let file = params.file;
    let file_comment = params.file_comment;
    let timestamp = params.timestamp;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/stars.remove", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = channel {
        local_var_form_params.insert("channel", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = file {
        local_var_form_params.insert("file", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = file_comment {
        local_var_form_params.insert("file_comment", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = timestamp {
        local_var_form_params.insert("timestamp", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<StarsRemoveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

