/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`apps_event_authorizations_list`]
#[derive(Clone, Debug, Default)]
pub struct AppsEventAuthorizationsListParams {
    /// Authentication token. Requires scope: `authorizations:read`
    pub token: String,
    pub event_context: String,
    pub cursor: Option<String>,
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`apps_permissions_info`]
#[derive(Clone, Debug, Default)]
pub struct AppsPermissionsInfoParams {
    /// Authentication token. Requires scope: `none`
    pub token: Option<String>
}

/// struct for passing parameters to the method [`apps_permissions_request`]
#[derive(Clone, Debug, Default)]
pub struct AppsPermissionsRequestParams {
    /// Authentication token. Requires scope: `none`
    pub token: String,
    /// A comma separated list of scopes to request for
    pub scopes: String,
    /// Token used to trigger the permissions API
    pub trigger_id: String
}

/// struct for passing parameters to the method [`apps_permissions_resources_list`]
#[derive(Clone, Debug, Default)]
pub struct AppsPermissionsResourcesListParams {
    /// Authentication token. Requires scope: `none`
    pub token: String,
    /// Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
    pub cursor: Option<String>,
    /// The maximum number of items to return.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`apps_permissions_scopes_list`]
#[derive(Clone, Debug, Default)]
pub struct AppsPermissionsScopesListParams {
    /// Authentication token. Requires scope: `none`
    pub token: String
}

/// struct for passing parameters to the method [`apps_permissions_users_list`]
#[derive(Clone, Debug, Default)]
pub struct AppsPermissionsUsersListParams {
    /// Authentication token. Requires scope: `none`
    pub token: String,
    /// Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.
    pub cursor: Option<String>,
    /// The maximum number of items to return.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`apps_permissions_users_request`]
#[derive(Clone, Debug, Default)]
pub struct AppsPermissionsUsersRequestParams {
    /// Authentication token. Requires scope: `none`
    pub token: String,
    /// A comma separated list of user scopes to request for
    pub scopes: String,
    /// Token used to trigger the request
    pub trigger_id: String,
    /// The user this scope is being requested for
    pub user: String
}

/// struct for passing parameters to the method [`apps_uninstall`]
#[derive(Clone, Debug, Default)]
pub struct AppsUninstallParams {
    /// Authentication token. Requires scope: `none`
    pub token: Option<String>,
    /// Issued when you created your application.
    pub client_id: Option<String>,
    /// Issued when you created your application.
    pub client_secret: Option<String>
}


/// struct for typed errors of method [`apps_event_authorizations_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsEventAuthorizationsListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`apps_permissions_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsPermissionsInfoError {
    DefaultResponse(crate::models::AppsPermissionsInfoErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`apps_permissions_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsPermissionsRequestError {
    DefaultResponse(crate::models::AppsPermissionsRequestErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`apps_permissions_resources_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsPermissionsResourcesListError {
    DefaultResponse(crate::models::AppsPermissionsResourcesListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`apps_permissions_scopes_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsPermissionsScopesListError {
    DefaultResponse(crate::models::AppsPermissionsScopesListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`apps_permissions_users_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsPermissionsUsersListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`apps_permissions_users_request`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsPermissionsUsersRequestError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`apps_uninstall`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AppsUninstallError {
    DefaultResponse(crate::models::AppsUninstallErrorSchema),
    UnknownValue(serde_json::Value),
}


/// Get a list of authorizations for the given event context. Each authorization represents an app installation that the event is visible to.
pub async fn apps_event_authorizations_list(configuration: &configuration::Configuration, params: AppsEventAuthorizationsListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AppsEventAuthorizationsListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let event_context = params.event_context;
    let cursor = params.cursor;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/apps.event.authorizations.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("event_context", &event_context.to_string())]);
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AppsEventAuthorizationsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns list of permissions this app has on a team.
pub async fn apps_permissions_info(configuration: &configuration::Configuration, params: AppsPermissionsInfoParams) -> Result<crate::models::AppsPermissionsInfoSchema, Error<AppsPermissionsInfoError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/apps.permissions.info", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AppsPermissionsInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Allows an app to request additional scopes
pub async fn apps_permissions_request(configuration: &configuration::Configuration, params: AppsPermissionsRequestParams) -> Result<crate::models::AppsPermissionsRequestSchema, Error<AppsPermissionsRequestError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let scopes = params.scopes;
    let trigger_id = params.trigger_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/apps.permissions.request", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("scopes", &scopes.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("trigger_id", &trigger_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AppsPermissionsRequestError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns list of resource grants this app has on a team.
pub async fn apps_permissions_resources_list(configuration: &configuration::Configuration, params: AppsPermissionsResourcesListParams) -> Result<crate::models::AppsPermissionsResourcesListSuccessSchema, Error<AppsPermissionsResourcesListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let cursor = params.cursor;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/apps.permissions.resources.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AppsPermissionsResourcesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns list of scopes this app has on a team.
pub async fn apps_permissions_scopes_list(configuration: &configuration::Configuration, params: AppsPermissionsScopesListParams) -> Result<crate::models::ApiPermissionsScopesListSuccessSchema, Error<AppsPermissionsScopesListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/apps.permissions.scopes.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AppsPermissionsScopesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns list of user grants and corresponding scopes this app has on a team.
pub async fn apps_permissions_users_list(configuration: &configuration::Configuration, params: AppsPermissionsUsersListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AppsPermissionsUsersListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let cursor = params.cursor;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/apps.permissions.users.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AppsPermissionsUsersListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Enables an app to trigger a permissions modal to grant an app access to a user access scope.
pub async fn apps_permissions_users_request(configuration: &configuration::Configuration, params: AppsPermissionsUsersRequestParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AppsPermissionsUsersRequestError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let scopes = params.scopes;
    let trigger_id = params.trigger_id;
    let user = params.user;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/apps.permissions.users.request", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("scopes", &scopes.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("trigger_id", &trigger_id.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("user", &user.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AppsPermissionsUsersRequestError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Uninstalls your app from a workspace.
pub async fn apps_uninstall(configuration: &configuration::Configuration, params: AppsUninstallParams) -> Result<crate::models::AppsUninstallSchema, Error<AppsUninstallError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let client_id = params.client_id;
    let client_secret = params.client_secret;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/apps.uninstall", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = token {
        local_var_req_builder = local_var_req_builder.query(&[("token", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = client_id {
        local_var_req_builder = local_var_req_builder.query(&[("client_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = client_secret {
        local_var_req_builder = local_var_req_builder.query(&[("client_secret", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AppsUninstallError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

