/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`chat_delete`]
#[derive(Clone, Debug, Default)]
pub struct ChatDeleteParams {
    /// Authentication token. Requires scope: `chat:write`
    pub token: Option<String>,
    /// Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.
    pub as_user: Option<bool>,
    /// Channel containing the message to be deleted.
    pub channel: Option<String>,
    /// Timestamp of the message to be deleted.
    pub ts: Option<f32>
}

/// struct for passing parameters to the method [`chat_delete_scheduled_message`]
#[derive(Clone, Debug, Default)]
pub struct ChatDeleteScheduledMessageParams {
    /// Authentication token. Requires scope: `chat:write`
    pub token: String,
    /// The channel the scheduled_message is posting to
    pub channel: String,
    /// `scheduled_message_id` returned from call to chat.scheduleMessage
    pub scheduled_message_id: String,
    /// Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.
    pub as_user: Option<bool>
}

/// struct for passing parameters to the method [`chat_get_permalink`]
#[derive(Clone, Debug, Default)]
pub struct ChatGetPermalinkParams {
    /// Authentication token. Requires scope: `none`
    pub token: String,
    /// The ID of the conversation or channel containing the message
    pub channel: String,
    /// A message's `ts` value, uniquely identifying it within a channel
    pub message_ts: String
}

/// struct for passing parameters to the method [`chat_me_message`]
#[derive(Clone, Debug, Default)]
pub struct ChatMeMessageParams {
    /// Authentication token. Requires scope: `chat:write`
    pub token: Option<String>,
    /// Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.
    pub channel: Option<String>,
    /// Text of the message to send.
    pub text: Option<String>
}

/// struct for passing parameters to the method [`chat_post_ephemeral`]
#[derive(Clone, Debug, Default)]
pub struct ChatPostEphemeralParams {
    /// Authentication token. Requires scope: `chat:write`
    pub token: String,
    /// Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.
    pub channel: String,
    /// `id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument.
    pub user: String,
    /// Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.
    pub as_user: Option<bool>,
    /// A JSON-based array of structured attachments, presented as a URL-encoded string.
    pub attachments: Option<String>,
    /// A JSON-based array of structured blocks, presented as a URL-encoded string.
    pub blocks: Option<String>,
    /// Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.
    pub icon_emoji: Option<String>,
    /// URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
    pub icon_url: Option<String>,
    /// Find and link channel names and usernames.
    pub link_names: Option<bool>,
    /// Change how messages are treated. Defaults to `none`. See [below](#formatting).
    pub parse: Option<String>,
    /// How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
    pub text: Option<String>,
    /// Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread.
    pub thread_ts: Option<String>,
    /// Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
    pub username: Option<String>
}

/// struct for passing parameters to the method [`chat_post_message`]
#[derive(Clone, Debug, Default)]
pub struct ChatPostMessageParams {
    /// Authentication token. Requires scope: `chat:write`
    pub token: String,
    /// Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
    pub channel: String,
    /// Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.
    pub as_user: Option<String>,
    /// A JSON-based array of structured attachments, presented as a URL-encoded string.
    pub attachments: Option<String>,
    /// A JSON-based array of structured blocks, presented as a URL-encoded string.
    pub blocks: Option<String>,
    /// Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.
    pub icon_emoji: Option<String>,
    /// URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
    pub icon_url: Option<String>,
    /// Find and link channel names and usernames.
    pub link_names: Option<bool>,
    /// Disable Slack markup parsing by setting to `false`. Enabled by default.
    pub mrkdwn: Option<bool>,
    /// Change how messages are treated. Defaults to `none`. See [below](#formatting).
    pub parse: Option<String>,
    /// Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.
    pub reply_broadcast: Option<bool>,
    /// How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
    pub text: Option<String>,
    /// Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.
    pub thread_ts: Option<String>,
    /// Pass true to enable unfurling of primarily text-based content.
    pub unfurl_links: Option<bool>,
    /// Pass false to disable unfurling of media content.
    pub unfurl_media: Option<bool>,
    /// Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
    pub username: Option<String>
}

/// struct for passing parameters to the method [`chat_schedule_message`]
#[derive(Clone, Debug, Default)]
pub struct ChatScheduleMessageParams {
    /// Authentication token. Requires scope: `chat:write`
    pub token: Option<String>,
    /// Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship).
    pub as_user: Option<bool>,
    /// A JSON-based array of structured attachments, presented as a URL-encoded string.
    pub attachments: Option<String>,
    /// A JSON-based array of structured blocks, presented as a URL-encoded string.
    pub blocks: Option<String>,
    /// Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
    pub channel: Option<String>,
    /// Find and link channel names and usernames.
    pub link_names: Option<bool>,
    /// Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting).
    pub parse: Option<String>,
    /// Unix EPOCH timestamp of time in future to send the message.
    pub post_at: Option<String>,
    /// Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.
    pub reply_broadcast: Option<bool>,
    /// How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
    pub text: Option<String>,
    /// Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.
    pub thread_ts: Option<f32>,
    /// Pass true to enable unfurling of primarily text-based content.
    pub unfurl_links: Option<bool>,
    /// Pass false to disable unfurling of media content.
    pub unfurl_media: Option<bool>
}

/// struct for passing parameters to the method [`chat_scheduled_messages_list`]
#[derive(Clone, Debug, Default)]
pub struct ChatScheduledMessagesListParams {
    /// Authentication token. Requires scope: `none`
    pub token: Option<String>,
    /// The channel of the scheduled messages
    pub channel: Option<String>,
    /// A UNIX timestamp of the latest value in the time range
    pub latest: Option<f32>,
    /// A UNIX timestamp of the oldest value in the time range
    pub oldest: Option<f32>,
    /// Maximum number of original entries to return.
    pub limit: Option<i32>,
    /// For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.
    pub cursor: Option<String>
}

/// struct for passing parameters to the method [`chat_unfurl`]
#[derive(Clone, Debug, Default)]
pub struct ChatUnfurlParams {
    /// Authentication token. Requires scope: `links:write`
    pub token: String,
    /// Channel ID of the message
    pub channel: String,
    /// Timestamp of the message to add unfurl behavior to.
    pub ts: String,
    /// URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments.
    pub unfurls: Option<String>,
    /// Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior
    pub user_auth_message: Option<String>,
    /// Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain
    pub user_auth_required: Option<bool>,
    /// Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded.
    pub user_auth_url: Option<String>
}

/// struct for passing parameters to the method [`chat_update`]
#[derive(Clone, Debug, Default)]
pub struct ChatUpdateParams {
    /// Authentication token. Requires scope: `chat:write`
    pub token: String,
    /// Channel containing the message to be updated.
    pub channel: String,
    /// Timestamp of the message to be updated.
    pub ts: String,
    /// Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.
    pub as_user: Option<String>,
    /// A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field.
    pub attachments: Option<String>,
    /// A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field.
    pub blocks: Option<String>,
    /// Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`.
    pub link_names: Option<String>,
    /// Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`.
    pub parse: Option<String>,
    /// New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`.
    pub text: Option<String>
}


/// struct for typed errors of method [`chat_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatDeleteError {
    DefaultResponse(crate::models::ChatDeleteErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_delete_scheduled_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatDeleteScheduledMessageError {
    DefaultResponse(crate::models::ChatDeleteScheduledMessageErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_get_permalink`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatGetPermalinkError {
    DefaultResponse(crate::models::ChatGetPermalinkErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_me_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatMeMessageError {
    DefaultResponse(crate::models::ChatMeMessageErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_post_ephemeral`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatPostEphemeralError {
    DefaultResponse(crate::models::ChatPostEphemeralErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_post_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatPostMessageError {
    DefaultResponse(crate::models::ChatPostMessageErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_schedule_message`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatScheduleMessageError {
    DefaultResponse(crate::models::ChatScheduleMessageErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_scheduled_messages_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatScheduledMessagesListError {
    DefaultResponse(crate::models::ChatScheduledMessagesListErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_unfurl`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatUnfurlError {
    DefaultResponse(crate::models::ChatUnfurlErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`chat_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ChatUpdateError {
    DefaultResponse(crate::models::ChatUpdateErrorSchema),
    UnknownValue(serde_json::Value),
}


/// Deletes a message.
pub async fn chat_delete(configuration: &configuration::Configuration, params: ChatDeleteParams) -> Result<crate::models::ChatDeleteSuccessSchema, Error<ChatDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let as_user = params.as_user;
    let channel = params.channel;
    let ts = params.ts;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.delete", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = token {
        local_var_req_builder = local_var_req_builder.header("token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = as_user {
        local_var_form_params.insert("as_user", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = channel {
        local_var_form_params.insert("channel", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = ts {
        local_var_form_params.insert("ts", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deletes a pending scheduled message from the queue.
pub async fn chat_delete_scheduled_message(configuration: &configuration::Configuration, params: ChatDeleteScheduledMessageParams) -> Result<crate::models::ChatDeleteScheduledMessageSchema, Error<ChatDeleteScheduledMessageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel = params.channel;
    let scheduled_message_id = params.scheduled_message_id;
    let as_user = params.as_user;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.deleteScheduledMessage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = as_user {
        local_var_form_params.insert("as_user", local_var_param_value.to_string());
    }
    local_var_form_params.insert("channel", channel.to_string());
    local_var_form_params.insert("scheduled_message_id", scheduled_message_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatDeleteScheduledMessageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a permalink URL for a specific extant message
pub async fn chat_get_permalink(configuration: &configuration::Configuration, params: ChatGetPermalinkParams) -> Result<crate::models::ChatGetPermalinkSuccessSchema, Error<ChatGetPermalinkError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel = params.channel;
    let message_ts = params.message_ts;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.getPermalink", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("channel", &channel.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("message_ts", &message_ts.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatGetPermalinkError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Share a me message into a channel.
pub async fn chat_me_message(configuration: &configuration::Configuration, params: ChatMeMessageParams) -> Result<crate::models::ChatMeMessageSchema, Error<ChatMeMessageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel = params.channel;
    let text = params.text;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.meMessage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = token {
        local_var_req_builder = local_var_req_builder.header("token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = channel {
        local_var_form_params.insert("channel", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = text {
        local_var_form_params.insert("text", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatMeMessageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Sends an ephemeral message to a user in a channel.
pub async fn chat_post_ephemeral(configuration: &configuration::Configuration, params: ChatPostEphemeralParams) -> Result<crate::models::ChatPostEphemeralSuccessSchema, Error<ChatPostEphemeralError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel = params.channel;
    let user = params.user;
    let as_user = params.as_user;
    let attachments = params.attachments;
    let blocks = params.blocks;
    let icon_emoji = params.icon_emoji;
    let icon_url = params.icon_url;
    let link_names = params.link_names;
    let parse = params.parse;
    let text = params.text;
    let thread_ts = params.thread_ts;
    let username = params.username;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.postEphemeral", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = as_user {
        local_var_form_params.insert("as_user", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = attachments {
        local_var_form_params.insert("attachments", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = blocks {
        local_var_form_params.insert("blocks", local_var_param_value.to_string());
    }
    local_var_form_params.insert("channel", channel.to_string());
    if let Some(local_var_param_value) = icon_emoji {
        local_var_form_params.insert("icon_emoji", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = icon_url {
        local_var_form_params.insert("icon_url", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = link_names {
        local_var_form_params.insert("link_names", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse {
        local_var_form_params.insert("parse", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = text {
        local_var_form_params.insert("text", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = thread_ts {
        local_var_form_params.insert("thread_ts", local_var_param_value.to_string());
    }
    local_var_form_params.insert("user", user.to_string());
    if let Some(local_var_param_value) = username {
        local_var_form_params.insert("username", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatPostEphemeralError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Sends a message to a channel.
pub async fn chat_post_message(configuration: &configuration::Configuration, params: ChatPostMessageParams) -> Result<crate::models::ChatPostMessageSuccessSchema, Error<ChatPostMessageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel = params.channel;
    let as_user = params.as_user;
    let attachments = params.attachments;
    let blocks = params.blocks;
    let icon_emoji = params.icon_emoji;
    let icon_url = params.icon_url;
    let link_names = params.link_names;
    let mrkdwn = params.mrkdwn;
    let parse = params.parse;
    let reply_broadcast = params.reply_broadcast;
    let text = params.text;
    let thread_ts = params.thread_ts;
    let unfurl_links = params.unfurl_links;
    let unfurl_media = params.unfurl_media;
    let username = params.username;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.postMessage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = as_user {
        local_var_form_params.insert("as_user", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = attachments {
        local_var_form_params.insert("attachments", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = blocks {
        local_var_form_params.insert("blocks", local_var_param_value.to_string());
    }
    local_var_form_params.insert("channel", channel.to_string());
    if let Some(local_var_param_value) = icon_emoji {
        local_var_form_params.insert("icon_emoji", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = icon_url {
        local_var_form_params.insert("icon_url", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = link_names {
        local_var_form_params.insert("link_names", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = mrkdwn {
        local_var_form_params.insert("mrkdwn", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse {
        local_var_form_params.insert("parse", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_broadcast {
        local_var_form_params.insert("reply_broadcast", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = text {
        local_var_form_params.insert("text", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = thread_ts {
        local_var_form_params.insert("thread_ts", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = unfurl_links {
        local_var_form_params.insert("unfurl_links", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = unfurl_media {
        local_var_form_params.insert("unfurl_media", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = username {
        local_var_form_params.insert("username", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatPostMessageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Schedules a message to be sent to a channel.
pub async fn chat_schedule_message(configuration: &configuration::Configuration, params: ChatScheduleMessageParams) -> Result<crate::models::ChatScheduleMessageSuccessSchema, Error<ChatScheduleMessageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let as_user = params.as_user;
    let attachments = params.attachments;
    let blocks = params.blocks;
    let channel = params.channel;
    let link_names = params.link_names;
    let parse = params.parse;
    let post_at = params.post_at;
    let reply_broadcast = params.reply_broadcast;
    let text = params.text;
    let thread_ts = params.thread_ts;
    let unfurl_links = params.unfurl_links;
    let unfurl_media = params.unfurl_media;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.scheduleMessage", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = token {
        local_var_req_builder = local_var_req_builder.header("token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = as_user {
        local_var_form_params.insert("as_user", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = attachments {
        local_var_form_params.insert("attachments", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = blocks {
        local_var_form_params.insert("blocks", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = channel {
        local_var_form_params.insert("channel", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = link_names {
        local_var_form_params.insert("link_names", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse {
        local_var_form_params.insert("parse", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = post_at {
        local_var_form_params.insert("post_at", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = reply_broadcast {
        local_var_form_params.insert("reply_broadcast", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = text {
        local_var_form_params.insert("text", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = thread_ts {
        local_var_form_params.insert("thread_ts", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = unfurl_links {
        local_var_form_params.insert("unfurl_links", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = unfurl_media {
        local_var_form_params.insert("unfurl_media", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatScheduleMessageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Returns a list of scheduled messages.
pub async fn chat_scheduled_messages_list(configuration: &configuration::Configuration, params: ChatScheduledMessagesListParams) -> Result<crate::models::ChatScheduledMessagesListSchema, Error<ChatScheduledMessagesListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel = params.channel;
    let latest = params.latest;
    let oldest = params.oldest;
    let limit = params.limit;
    let cursor = params.cursor;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.scheduledMessages.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = channel {
        local_var_req_builder = local_var_req_builder.query(&[("channel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = latest {
        local_var_req_builder = local_var_req_builder.query(&[("latest", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = oldest {
        local_var_req_builder = local_var_req_builder.query(&[("oldest", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(local_var_param_value) = token {
        local_var_req_builder = local_var_req_builder.header("token", local_var_param_value.to_string());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatScheduledMessagesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Provide custom unfurl behavior for user-posted URLs
pub async fn chat_unfurl(configuration: &configuration::Configuration, params: ChatUnfurlParams) -> Result<crate::models::ChatUnfurlSuccessSchema, Error<ChatUnfurlError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel = params.channel;
    let ts = params.ts;
    let unfurls = params.unfurls;
    let user_auth_message = params.user_auth_message;
    let user_auth_required = params.user_auth_required;
    let user_auth_url = params.user_auth_url;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.unfurl", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel", channel.to_string());
    local_var_form_params.insert("ts", ts.to_string());
    if let Some(local_var_param_value) = unfurls {
        local_var_form_params.insert("unfurls", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = user_auth_message {
        local_var_form_params.insert("user_auth_message", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = user_auth_required {
        local_var_form_params.insert("user_auth_required", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = user_auth_url {
        local_var_form_params.insert("user_auth_url", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatUnfurlError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Updates a message.
pub async fn chat_update(configuration: &configuration::Configuration, params: ChatUpdateParams) -> Result<crate::models::ChatUpdateSuccessSchema, Error<ChatUpdateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel = params.channel;
    let ts = params.ts;
    let as_user = params.as_user;
    let attachments = params.attachments;
    let blocks = params.blocks;
    let link_names = params.link_names;
    let parse = params.parse;
    let text = params.text;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/chat.update", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = as_user {
        local_var_form_params.insert("as_user", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = attachments {
        local_var_form_params.insert("attachments", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = blocks {
        local_var_form_params.insert("blocks", local_var_param_value.to_string());
    }
    local_var_form_params.insert("channel", channel.to_string());
    if let Some(local_var_param_value) = link_names {
        local_var_form_params.insert("link_names", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = parse {
        local_var_form_params.insert("parse", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = text {
        local_var_form_params.insert("text", local_var_param_value.to_string());
    }
    local_var_form_params.insert("ts", ts.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ChatUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

