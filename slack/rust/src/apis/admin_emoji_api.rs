/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`admin_emoji_add`]
#[derive(Clone, Debug, Default)]
pub struct AdminEmojiAddParams {
    /// The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.
    pub name: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
    pub url: String
}

/// struct for passing parameters to the method [`admin_emoji_add_alias`]
#[derive(Clone, Debug, Default)]
pub struct AdminEmojiAddAliasParams {
    /// The alias of the emoji.
    pub alias_for: String,
    /// The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included.
    pub name: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String
}

/// struct for passing parameters to the method [`admin_emoji_list`]
#[derive(Clone, Debug, Default)]
pub struct AdminEmojiListParams {
    /// Authentication token. Requires scope: `admin.teams:read`
    pub token: String,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    pub cursor: Option<String>,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`admin_emoji_remove`]
#[derive(Clone, Debug, Default)]
pub struct AdminEmojiRemoveParams {
    /// The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.
    pub name: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String
}

/// struct for passing parameters to the method [`admin_emoji_rename`]
#[derive(Clone, Debug, Default)]
pub struct AdminEmojiRenameParams {
    /// The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included.
    pub name: String,
    /// The new name of the emoji.
    pub new_name: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String
}


/// struct for typed errors of method [`admin_emoji_add`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminEmojiAddError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_emoji_add_alias`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminEmojiAddAliasError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_emoji_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminEmojiListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_emoji_remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminEmojiRemoveError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_emoji_rename`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminEmojiRenameError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}


/// Add an emoji.
pub async fn admin_emoji_add(configuration: &configuration::Configuration, params: AdminEmojiAddParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminEmojiAddError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let token = params.token;
    let url = params.url;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.emoji.add", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("name", name.to_string());
    local_var_form_params.insert("token", token.to_string());
    local_var_form_params.insert("url", url.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminEmojiAddError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Add an emoji alias.
pub async fn admin_emoji_add_alias(configuration: &configuration::Configuration, params: AdminEmojiAddAliasParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminEmojiAddAliasError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let alias_for = params.alias_for;
    let name = params.name;
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.emoji.addAlias", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("alias_for", alias_for.to_string());
    local_var_form_params.insert("name", name.to_string());
    local_var_form_params.insert("token", token.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminEmojiAddAliasError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List emoji for an Enterprise Grid organization.
pub async fn admin_emoji_list(configuration: &configuration::Configuration, params: AdminEmojiListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminEmojiListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let cursor = params.cursor;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.emoji.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminEmojiListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove an emoji across an Enterprise Grid organization
pub async fn admin_emoji_remove(configuration: &configuration::Configuration, params: AdminEmojiRemoveParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminEmojiRemoveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.emoji.remove", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("name", name.to_string());
    local_var_form_params.insert("token", token.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminEmojiRemoveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Rename an emoji.
pub async fn admin_emoji_rename(configuration: &configuration::Configuration, params: AdminEmojiRenameParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminEmojiRenameError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let new_name = params.new_name;
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.emoji.rename", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("name", name.to_string());
    local_var_form_params.insert("new_name", new_name.to_string());
    local_var_form_params.insert("token", token.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminEmojiRenameError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

