/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`admin_invite_requests_approve`]
#[derive(Clone, Debug, Default)]
pub struct AdminInviteRequestsApproveParams {
    /// Authentication token. Requires scope: `admin.invites:write`
    pub token: String,
    pub admin_invite_requests_approve_request: Option<crate::models::AdminInviteRequestsApproveRequest>
}

/// struct for passing parameters to the method [`admin_invite_requests_deny`]
#[derive(Clone, Debug, Default)]
pub struct AdminInviteRequestsDenyParams {
    /// Authentication token. Requires scope: `admin.invites:write`
    pub token: String,
    pub admin_invite_requests_approve_request: Option<crate::models::AdminInviteRequestsApproveRequest>
}

/// struct for passing parameters to the method [`admin_invite_requests_list`]
#[derive(Clone, Debug, Default)]
pub struct AdminInviteRequestsListParams {
    /// Authentication token. Requires scope: `admin.invites:read`
    pub token: String,
    /// ID for the workspace where the invite requests were made.
    pub team_id: Option<String>,
    /// Value of the `next_cursor` field sent as part of the previous API response
    pub cursor: Option<String>,
    /// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    pub limit: Option<i32>
}


/// struct for typed errors of method [`admin_invite_requests_approve`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminInviteRequestsApproveError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_invite_requests_deny`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminInviteRequestsDenyError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_invite_requests_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminInviteRequestsListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}


/// Approve a workspace invite request.
pub async fn admin_invite_requests_approve(configuration: &configuration::Configuration, params: AdminInviteRequestsApproveParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminInviteRequestsApproveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let admin_invite_requests_approve_request = params.admin_invite_requests_approve_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.inviteRequests.approve", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&admin_invite_requests_approve_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminInviteRequestsApproveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deny a workspace invite request.
pub async fn admin_invite_requests_deny(configuration: &configuration::Configuration, params: AdminInviteRequestsDenyParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminInviteRequestsDenyError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let admin_invite_requests_approve_request = params.admin_invite_requests_approve_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.inviteRequests.deny", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&admin_invite_requests_approve_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminInviteRequestsDenyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List all pending workspace invite requests.
pub async fn admin_invite_requests_list(configuration: &configuration::Configuration, params: AdminInviteRequestsListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminInviteRequestsListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let cursor = params.cursor;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.inviteRequests.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = team_id {
        local_var_req_builder = local_var_req_builder.query(&[("team_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminInviteRequestsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

