/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`admin_conversations_archive`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsArchiveParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to archive.
    pub channel_id: String
}

/// struct for passing parameters to the method [`admin_conversations_convert_to_private`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsConvertToPrivateParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to convert to private.
    pub channel_id: String
}

/// struct for passing parameters to the method [`admin_conversations_create`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsCreateParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// When `true`, creates a private channel instead of a public channel
    pub is_private: bool,
    /// Name of the public or private channel to create.
    pub name: String,
    /// Description of the public or private channel to create.
    pub description: Option<String>,
    /// When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel
    pub org_wide: Option<bool>,
    /// The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`.
    pub team_id: Option<String>
}

/// struct for passing parameters to the method [`admin_conversations_delete`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsDeleteParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to delete.
    pub channel_id: String
}

/// struct for passing parameters to the method [`admin_conversations_disconnect_shared`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsDisconnectSharedParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to be disconnected from some workspaces.
    pub channel_id: String,
    /// The team to be removed from the channel. Currently only a single team id can be specified.
    pub leaving_team_ids: Option<String>
}

/// struct for passing parameters to the method [`admin_conversations_get_conversation_prefs`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsGetConversationPrefsParams {
    /// Authentication token. Requires scope: `admin.conversations:read`
    pub token: String,
    /// The channel to get preferences for.
    pub channel_id: String
}

/// struct for passing parameters to the method [`admin_conversations_get_teams`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsGetTeamsParams {
    /// Authentication token. Requires scope: `admin.conversations:read`
    pub token: String,
    /// The channel to determine connected workspaces within the organization for.
    pub channel_id: String,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    pub cursor: Option<String>,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`admin_conversations_invite`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsInviteParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel that the users will be invited to.
    pub channel_id: String,
    /// The users to invite.
    pub user_ids: String
}

/// struct for passing parameters to the method [`admin_conversations_rename`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsRenameParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to rename.
    pub channel_id: String,
    pub name: String
}

/// struct for passing parameters to the method [`admin_conversations_search`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsSearchParams {
    /// Authentication token. Requires scope: `admin.conversations:read`
    pub token: String,
    /// Comma separated string of team IDs, signifying the workspaces to search through.
    pub team_ids: Option<String>,
    /// Name of the the channel to query by.
    pub query: Option<String>,
    /// Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
    pub limit: Option<i32>,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    pub cursor: Option<String>,
    /// The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types).
    pub search_channel_types: Option<String>,
    /// Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted 
    pub sort: Option<String>,
    /// Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)
    pub sort_dir: Option<String>
}

/// struct for passing parameters to the method [`admin_conversations_set_conversation_prefs`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsSetConversationPrefsParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to set the prefs for
    pub channel_id: String,
    /// The prefs for this channel in a stringified JSON format.
    pub prefs: String
}

/// struct for passing parameters to the method [`admin_conversations_set_teams`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsSetTeamsParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The encoded `channel_id` to add or remove to workspaces.
    pub channel_id: String,
    /// True if channel has to be converted to an org channel
    pub org_channel: Option<bool>,
    /// A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
    pub target_team_ids: Option<String>,
    /// The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.
    pub team_id: Option<String>
}

/// struct for passing parameters to the method [`admin_conversations_unarchive`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsUnarchiveParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to unarchive.
    pub channel_id: String
}


/// struct for typed errors of method [`admin_conversations_archive`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsArchiveError {
    DefaultResponse(crate::models::AdminConversationsArchiveErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_convert_to_private`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsConvertToPrivateError {
    DefaultResponse(crate::models::AdminConversationsConvertToPrivateErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsCreateError {
    DefaultResponse(crate::models::AdminConversationsCreateErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsDeleteError {
    DefaultResponse(crate::models::AdminConversationsDeleteErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_disconnect_shared`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsDisconnectSharedError {
    DefaultResponse(crate::models::AdminConversationsDisconnectSharedErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_get_conversation_prefs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsGetConversationPrefsError {
    DefaultResponse(crate::models::AdminConversationsUnarchiveErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_get_teams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsGetTeamsError {
    DefaultResponse(crate::models::AdminConversationsGetTeamsErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_invite`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsInviteError {
    DefaultResponse(crate::models::AdminConversationsInviteErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_rename`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsRenameError {
    DefaultResponse(crate::models::AdminConversationsUnarchiveErrorSchema1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_search`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsSearchError {
    DefaultResponse(crate::models::AdminConversationsSearchErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_set_conversation_prefs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsSetConversationPrefsError {
    DefaultResponse(crate::models::AdminConversationsSetConversationPrefsErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_set_teams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsSetTeamsError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_unarchive`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsUnarchiveError {
    DefaultResponse(crate::models::AdminConversationsUnarchiveErrorSchema2),
    UnknownValue(serde_json::Value),
}


/// Archive a public or private channel.
pub async fn admin_conversations_archive(configuration: &configuration::Configuration, params: AdminConversationsArchiveParams) -> Result<crate::models::AdminConversationsArchiveSchema, Error<AdminConversationsArchiveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.archive", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsArchiveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Convert a public channel to a private channel.
pub async fn admin_conversations_convert_to_private(configuration: &configuration::Configuration, params: AdminConversationsConvertToPrivateParams) -> Result<crate::models::AdminConversationsConvertToPrivateSchema, Error<AdminConversationsConvertToPrivateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.convertToPrivate", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsConvertToPrivateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a public or private channel-based conversation.
pub async fn admin_conversations_create(configuration: &configuration::Configuration, params: AdminConversationsCreateParams) -> Result<crate::models::AdminConversationsCreateSchema, Error<AdminConversationsCreateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let is_private = params.is_private;
    let name = params.name;
    let description = params.description;
    let org_wide = params.org_wide;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.create", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = description {
        local_var_form_params.insert("description", local_var_param_value.to_string());
    }
    local_var_form_params.insert("is_private", is_private.to_string());
    local_var_form_params.insert("name", name.to_string());
    if let Some(local_var_param_value) = org_wide {
        local_var_form_params.insert("org_wide", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = team_id {
        local_var_form_params.insert("team_id", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a public or private channel.
pub async fn admin_conversations_delete(configuration: &configuration::Configuration, params: AdminConversationsDeleteParams) -> Result<crate::models::AdminConversationsDeleteSchema, Error<AdminConversationsDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.delete", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Disconnect a connected channel from one or more workspaces.
pub async fn admin_conversations_disconnect_shared(configuration: &configuration::Configuration, params: AdminConversationsDisconnectSharedParams) -> Result<crate::models::AdminConversationsRenameSchema, Error<AdminConversationsDisconnectSharedError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;
    let leaving_team_ids = params.leaving_team_ids;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.disconnectShared", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    if let Some(local_var_param_value) = leaving_team_ids {
        local_var_form_params.insert("leaving_team_ids", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsDisconnectSharedError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get conversation preferences for a public or private channel.
pub async fn admin_conversations_get_conversation_prefs(configuration: &configuration::Configuration, params: AdminConversationsGetConversationPrefsParams) -> Result<crate::models::AdminConversationsGetConversationPrefsSchema, Error<AdminConversationsGetConversationPrefsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.getConversationPrefs", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("channel_id", &channel_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsGetConversationPrefsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get all the workspaces a given public or private channel is connected to within this Enterprise org.
pub async fn admin_conversations_get_teams(configuration: &configuration::Configuration, params: AdminConversationsGetTeamsParams) -> Result<crate::models::AdminConversationsGetTeamsSchema, Error<AdminConversationsGetTeamsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;
    let cursor = params.cursor;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.getTeams", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("channel_id", &channel_id.to_string())]);
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsGetTeamsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Invite a user to a public or private channel.
pub async fn admin_conversations_invite(configuration: &configuration::Configuration, params: AdminConversationsInviteParams) -> Result<crate::models::AdminConversationsInviteSchema, Error<AdminConversationsInviteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;
    let user_ids = params.user_ids;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.invite", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_form_params.insert("user_ids", user_ids.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsInviteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Rename a public or private channel.
pub async fn admin_conversations_rename(configuration: &configuration::Configuration, params: AdminConversationsRenameParams) -> Result<crate::models::AdminConversationsRenameSchema1, Error<AdminConversationsRenameError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;
    let name = params.name;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.rename", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_form_params.insert("name", name.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsRenameError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Search for public or private channels in an Enterprise organization.
pub async fn admin_conversations_search(configuration: &configuration::Configuration, params: AdminConversationsSearchParams) -> Result<crate::models::AdminConversationsSearchSchema, Error<AdminConversationsSearchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_ids = params.team_ids;
    let query = params.query;
    let limit = params.limit;
    let cursor = params.cursor;
    let search_channel_types = params.search_channel_types;
    let sort = params.sort;
    let sort_dir = params.sort_dir;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.search", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = team_ids {
        local_var_req_builder = local_var_req_builder.query(&[("team_ids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = query {
        local_var_req_builder = local_var_req_builder.query(&[("query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_channel_types {
        local_var_req_builder = local_var_req_builder.query(&[("search_channel_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_dir {
        local_var_req_builder = local_var_req_builder.query(&[("sort_dir", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsSearchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set the posting permissions for a public or private channel.
pub async fn admin_conversations_set_conversation_prefs(configuration: &configuration::Configuration, params: AdminConversationsSetConversationPrefsParams) -> Result<crate::models::AdminConversationsSetConversationPrefsSchema, Error<AdminConversationsSetConversationPrefsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;
    let prefs = params.prefs;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.setConversationPrefs", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_form_params.insert("prefs", prefs.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsSetConversationPrefsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set the workspaces in an Enterprise grid org that connect to a public or private channel.
pub async fn admin_conversations_set_teams(configuration: &configuration::Configuration, params: AdminConversationsSetTeamsParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminConversationsSetTeamsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;
    let org_channel = params.org_channel;
    let target_team_ids = params.target_team_ids;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.setTeams", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    if let Some(local_var_param_value) = org_channel {
        local_var_form_params.insert("org_channel", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = target_team_ids {
        local_var_form_params.insert("target_team_ids", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = team_id {
        local_var_form_params.insert("team_id", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsSetTeamsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Unarchive a public or private channel.
pub async fn admin_conversations_unarchive(configuration: &configuration::Configuration, params: AdminConversationsUnarchiveParams) -> Result<crate::models::AdminConversationsUnarchiveSchema, Error<AdminConversationsUnarchiveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.unarchive", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsUnarchiveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

