/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`admin_apps_approve`]
#[derive(Clone, Debug, Default)]
pub struct AdminAppsApproveParams {
    /// Authentication token. Requires scope: `admin.apps:write`
    pub token: String,
    /// The id of the app to approve.
    pub app_id: Option<String>,
    /// The id of the request to approve.
    pub request_id: Option<String>,
    pub team_id: Option<String>
}

/// struct for passing parameters to the method [`admin_apps_approved_list`]
#[derive(Clone, Debug, Default)]
pub struct AdminAppsApprovedListParams {
    /// Authentication token. Requires scope: `admin.apps:read`
    pub token: String,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    pub cursor: Option<String>,
    pub team_id: Option<String>,
    pub enterprise_id: Option<String>
}

/// struct for passing parameters to the method [`admin_apps_requests_list`]
#[derive(Clone, Debug, Default)]
pub struct AdminAppsRequestsListParams {
    /// Authentication token. Requires scope: `admin.apps:read`
    pub token: String,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    pub cursor: Option<String>,
    pub team_id: Option<String>
}

/// struct for passing parameters to the method [`admin_apps_restrict`]
#[derive(Clone, Debug, Default)]
pub struct AdminAppsRestrictParams {
    /// Authentication token. Requires scope: `admin.apps:write`
    pub token: String,
    /// The id of the app to restrict.
    pub app_id: Option<String>,
    /// The id of the request to restrict.
    pub request_id: Option<String>,
    pub team_id: Option<String>
}

/// struct for passing parameters to the method [`admin_apps_restricted_list`]
#[derive(Clone, Debug, Default)]
pub struct AdminAppsRestrictedListParams {
    /// Authentication token. Requires scope: `admin.apps:read`
    pub token: String,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    pub cursor: Option<String>,
    pub team_id: Option<String>,
    pub enterprise_id: Option<String>
}

/// struct for passing parameters to the method [`admin_conversations_archive`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsArchiveParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to archive.
    pub channel_id: String
}

/// struct for passing parameters to the method [`admin_conversations_convert_to_private`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsConvertToPrivateParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to convert to private.
    pub channel_id: String
}

/// struct for passing parameters to the method [`admin_conversations_create`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsCreateParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// When `true`, creates a private channel instead of a public channel
    pub is_private: bool,
    /// Name of the public or private channel to create.
    pub name: String,
    /// Description of the public or private channel to create.
    pub description: Option<String>,
    /// When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel
    pub org_wide: Option<bool>,
    /// The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`.
    pub team_id: Option<String>
}

/// struct for passing parameters to the method [`admin_conversations_delete`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsDeleteParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to delete.
    pub channel_id: String
}

/// struct for passing parameters to the method [`admin_conversations_disconnect_shared`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsDisconnectSharedParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to be disconnected from some workspaces.
    pub channel_id: String,
    /// The team to be removed from the channel. Currently only a single team id can be specified.
    pub leaving_team_ids: Option<String>
}

/// struct for passing parameters to the method [`admin_conversations_ekm_list_original_connected_channel_info`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsEkmListOriginalConnectedChannelInfoParams {
    /// Authentication token. Requires scope: `admin.conversations:read`
    pub token: String,
    /// A comma-separated list of channels to filter to.
    pub channel_ids: Option<String>,
    /// A comma-separated list of the workspaces to which the channels you would like returned belong.
    pub team_ids: Option<String>,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    pub cursor: Option<String>
}

/// struct for passing parameters to the method [`admin_conversations_get_conversation_prefs`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsGetConversationPrefsParams {
    /// Authentication token. Requires scope: `admin.conversations:read`
    pub token: String,
    /// The channel to get preferences for.
    pub channel_id: String
}

/// struct for passing parameters to the method [`admin_conversations_get_teams`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsGetTeamsParams {
    /// Authentication token. Requires scope: `admin.conversations:read`
    pub token: String,
    /// The channel to determine connected workspaces within the organization for.
    pub channel_id: String,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    pub cursor: Option<String>,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`admin_conversations_invite`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsInviteParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel that the users will be invited to.
    pub channel_id: String,
    /// The users to invite.
    pub user_ids: String
}

/// struct for passing parameters to the method [`admin_conversations_rename`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsRenameParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to rename.
    pub channel_id: String,
    pub name: String
}

/// struct for passing parameters to the method [`admin_conversations_restrict_access_add_group`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsRestrictAccessAddGroupParams {
    /// The channel to link this group to.
    pub channel_id: String,
    /// The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to be an allowlist for the private channel.
    pub group_id: String,
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    pub team_id: Option<String>
}

/// struct for passing parameters to the method [`admin_conversations_restrict_access_list_groups`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsRestrictAccessListGroupsParams {
    /// Authentication token. Requires scope: `admin.conversations:read`
    pub token: String,
    pub channel_id: String,
    /// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    pub team_id: Option<String>
}

/// struct for passing parameters to the method [`admin_conversations_restrict_access_remove_group`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsRestrictAccessRemoveGroupParams {
    /// The channel to remove the linked group from.
    pub channel_id: String,
    /// The [IDP Group](https://slack.com/help/articles/115001435788-Connect-identity-provider-groups-to-your-Enterprise-Grid-org) ID to remove from the private channel.
    pub group_id: String,
    /// The workspace where the channel exists. This argument is required for channels only tied to one workspace, and optional for channels that are shared across an organization.
    pub team_id: String,
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String
}

/// struct for passing parameters to the method [`admin_conversations_search`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsSearchParams {
    /// Authentication token. Requires scope: `admin.conversations:read`
    pub token: String,
    /// Comma separated string of team IDs, signifying the workspaces to search through.
    pub team_ids: Option<String>,
    /// Name of the the channel to query by.
    pub query: Option<String>,
    /// Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
    pub limit: Option<i32>,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    pub cursor: Option<String>,
    /// The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types).
    pub search_channel_types: Option<String>,
    /// Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted 
    pub sort: Option<String>,
    /// Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)
    pub sort_dir: Option<String>
}

/// struct for passing parameters to the method [`admin_conversations_set_conversation_prefs`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsSetConversationPrefsParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to set the prefs for
    pub channel_id: String,
    /// The prefs for this channel in a stringified JSON format.
    pub prefs: String
}

/// struct for passing parameters to the method [`admin_conversations_set_teams`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsSetTeamsParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The encoded `channel_id` to add or remove to workspaces.
    pub channel_id: String,
    /// True if channel has to be converted to an org channel
    pub org_channel: Option<bool>,
    /// A comma-separated list of workspaces to which the channel should be shared. Not required if the channel is being shared org-wide.
    pub target_team_ids: Option<String>,
    /// The workspace to which the channel belongs. Omit this argument if the channel is a cross-workspace shared channel.
    pub team_id: Option<String>
}

/// struct for passing parameters to the method [`admin_conversations_unarchive`]
#[derive(Clone, Debug, Default)]
pub struct AdminConversationsUnarchiveParams {
    /// Authentication token. Requires scope: `admin.conversations:write`
    pub token: String,
    /// The channel to unarchive.
    pub channel_id: String
}

/// struct for passing parameters to the method [`admin_emoji_add`]
#[derive(Clone, Debug, Default)]
pub struct AdminEmojiAddParams {
    /// The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.
    pub name: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// The URL of a file to use as an image for the emoji. Square images under 128KB and with transparent backgrounds work best.
    pub url: String
}

/// struct for passing parameters to the method [`admin_emoji_add_alias`]
#[derive(Clone, Debug, Default)]
pub struct AdminEmojiAddAliasParams {
    /// The alias of the emoji.
    pub alias_for: String,
    /// The name of the emoji to be aliased. Colons (`:myemoji:`) around the value are not required, although they may be included.
    pub name: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String
}

/// struct for passing parameters to the method [`admin_emoji_list`]
#[derive(Clone, Debug, Default)]
pub struct AdminEmojiListParams {
    /// Authentication token. Requires scope: `admin.teams:read`
    pub token: String,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page
    pub cursor: Option<String>,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`admin_emoji_remove`]
#[derive(Clone, Debug, Default)]
pub struct AdminEmojiRemoveParams {
    /// The name of the emoji to be removed. Colons (`:myemoji:`) around the value are not required, although they may be included.
    pub name: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String
}

/// struct for passing parameters to the method [`admin_emoji_rename`]
#[derive(Clone, Debug, Default)]
pub struct AdminEmojiRenameParams {
    /// The name of the emoji to be renamed. Colons (`:myemoji:`) around the value are not required, although they may be included.
    pub name: String,
    /// The new name of the emoji.
    pub new_name: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String
}

/// struct for passing parameters to the method [`admin_invite_requests_approve`]
#[derive(Clone, Debug, Default)]
pub struct AdminInviteRequestsApproveParams {
    /// Authentication token. Requires scope: `admin.invites:write`
    pub token: String,
    pub admin_invite_requests_approve_request: Option<crate::models::AdminInviteRequestsApproveRequest>
}

/// struct for passing parameters to the method [`admin_invite_requests_approved_list`]
#[derive(Clone, Debug, Default)]
pub struct AdminInviteRequestsApprovedListParams {
    /// Authentication token. Requires scope: `admin.invites:read`
    pub token: String,
    /// ID for the workspace where the invite requests were made.
    pub team_id: Option<String>,
    /// Value of the `next_cursor` field sent as part of the previous API response
    pub cursor: Option<String>,
    /// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`admin_invite_requests_denied_list`]
#[derive(Clone, Debug, Default)]
pub struct AdminInviteRequestsDeniedListParams {
    /// Authentication token. Requires scope: `admin.invites:read`
    pub token: String,
    /// ID for the workspace where the invite requests were made.
    pub team_id: Option<String>,
    /// Value of the `next_cursor` field sent as part of the previous api response
    pub cursor: Option<String>,
    /// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000 both inclusive
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`admin_invite_requests_deny`]
#[derive(Clone, Debug, Default)]
pub struct AdminInviteRequestsDenyParams {
    /// Authentication token. Requires scope: `admin.invites:write`
    pub token: String,
    pub admin_invite_requests_approve_request: Option<crate::models::AdminInviteRequestsApproveRequest>
}

/// struct for passing parameters to the method [`admin_invite_requests_list`]
#[derive(Clone, Debug, Default)]
pub struct AdminInviteRequestsListParams {
    /// Authentication token. Requires scope: `admin.invites:read`
    pub token: String,
    /// ID for the workspace where the invite requests were made.
    pub team_id: Option<String>,
    /// Value of the `next_cursor` field sent as part of the previous API response
    pub cursor: Option<String>,
    /// The number of results that will be returned by the API on each invocation. Must be between 1 - 1000, both inclusive
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`admin_teams_admins_list`]
#[derive(Clone, Debug, Default)]
pub struct AdminTeamsAdminsListParams {
    /// Authentication token. Requires scope: `admin.teams:read`
    pub token: String,
    pub team_id: String,
    /// The maximum number of items to return.
    pub limit: Option<i32>,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    pub cursor: Option<String>
}

/// struct for passing parameters to the method [`admin_teams_create`]
#[derive(Clone, Debug, Default)]
pub struct AdminTeamsCreateParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// Team domain (for example, slacksoftballteam).
    pub team_domain: String,
    /// Team name (for example, Slack Softball Team).
    pub team_name: String,
    /// Description for the team.
    pub team_description: Option<String>,
    /// Who can join the team. A team's discoverability can be `open`, `closed`, `invite_only`, or `unlisted`.
    pub team_discoverability: Option<String>
}

/// struct for passing parameters to the method [`admin_teams_list`]
#[derive(Clone, Debug, Default)]
pub struct AdminTeamsListParams {
    /// Authentication token. Requires scope: `admin.teams:read`
    pub token: String,
    /// The maximum number of items to return. Must be between 1 - 100 both inclusive.
    pub limit: Option<i32>,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    pub cursor: Option<String>
}

/// struct for passing parameters to the method [`admin_teams_owners_list`]
#[derive(Clone, Debug, Default)]
pub struct AdminTeamsOwnersListParams {
    /// Authentication token. Requires scope: `admin.teams:read`
    pub token: String,
    pub team_id: String,
    /// The maximum number of items to return. Must be between 1 - 1000 both inclusive.
    pub limit: Option<i32>,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    pub cursor: Option<String>
}

/// struct for passing parameters to the method [`admin_teams_settings_info`]
#[derive(Clone, Debug, Default)]
pub struct AdminTeamsSettingsInfoParams {
    /// Authentication token. Requires scope: `admin.teams:read`
    pub token: String,
    pub team_id: String
}

/// struct for passing parameters to the method [`admin_teams_settings_set_default_channels`]
#[derive(Clone, Debug, Default)]
pub struct AdminTeamsSettingsSetDefaultChannelsParams {
    /// An array of channel IDs.
    pub channel_ids: String,
    /// ID for the workspace to set the default channel for.
    pub team_id: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String
}

/// struct for passing parameters to the method [`admin_teams_settings_set_description`]
#[derive(Clone, Debug, Default)]
pub struct AdminTeamsSettingsSetDescriptionParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// The new description for the workspace.
    pub description: String,
    /// ID for the workspace to set the description for.
    pub team_id: String
}

/// struct for passing parameters to the method [`admin_teams_settings_set_discoverability`]
#[derive(Clone, Debug, Default)]
pub struct AdminTeamsSettingsSetDiscoverabilityParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// This workspace's discovery setting. It must be set to one of `open`, `invite_only`, `closed`, or `unlisted`.
    pub discoverability: String,
    /// The ID of the workspace to set discoverability on.
    pub team_id: String
}

/// struct for passing parameters to the method [`admin_teams_settings_set_icon`]
#[derive(Clone, Debug, Default)]
pub struct AdminTeamsSettingsSetIconParams {
    /// Image URL for the icon
    pub image_url: String,
    /// ID for the workspace to set the icon for.
    pub team_id: String,
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String
}

/// struct for passing parameters to the method [`admin_teams_settings_set_name`]
#[derive(Clone, Debug, Default)]
pub struct AdminTeamsSettingsSetNameParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// The new name of the workspace.
    pub name: String,
    /// ID for the workspace to set the name for.
    pub team_id: String
}

/// struct for passing parameters to the method [`admin_usergroups_add_channels`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsergroupsAddChannelsParams {
    /// Authentication token. Requires scope: `admin.usergroups:write`
    pub token: String,
    /// Comma separated string of channel IDs.
    pub channel_ids: String,
    /// ID of the IDP group to add default channels for.
    pub usergroup_id: String,
    /// The workspace to add default channels in.
    pub team_id: Option<String>
}

/// struct for passing parameters to the method [`admin_usergroups_add_teams`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsergroupsAddTeamsParams {
    /// Authentication token. Requires scope: `admin.teams:write`
    pub token: String,
    /// A comma separated list of encoded team (workspace) IDs. Each workspace *MUST* belong to the organization associated with the token.
    pub team_ids: String,
    /// An encoded usergroup (IDP Group) ID.
    pub usergroup_id: String,
    /// When `true`, this method automatically creates new workspace accounts for the IDP group members.
    pub auto_provision: Option<bool>
}

/// struct for passing parameters to the method [`admin_usergroups_list_channels`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsergroupsListChannelsParams {
    /// Authentication token. Requires scope: `admin.usergroups:read`
    pub token: String,
    /// ID of the IDP group to list default channels for.
    pub usergroup_id: String,
    /// ID of the the workspace.
    pub team_id: Option<String>,
    /// Flag to include or exclude the count of members per channel.
    pub include_num_members: Option<bool>
}

/// struct for passing parameters to the method [`admin_usergroups_remove_channels`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsergroupsRemoveChannelsParams {
    /// Authentication token. Requires scope: `admin.usergroups:write`
    pub token: String,
    /// Comma-separated string of channel IDs
    pub channel_ids: String,
    /// ID of the IDP Group
    pub usergroup_id: String
}

/// struct for passing parameters to the method [`admin_users_assign`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsersAssignParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String,
    /// The ID of the user to add to the workspace.
    pub user_id: String,
    /// Comma separated values of channel IDs to add user in the new workspace.
    pub channel_ids: Option<String>,
    /// True if user should be added to the workspace as a guest.
    pub is_restricted: Option<bool>,
    /// True if user should be added to the workspace as a single-channel guest.
    pub is_ultra_restricted: Option<bool>
}

/// struct for passing parameters to the method [`admin_users_invite`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsersInviteParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// A comma-separated list of `channel_id`s for this user to join. At least one channel is required.
    pub channel_ids: String,
    /// The email address of the person to invite.
    pub email: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String,
    /// An optional message to send to the user in the invite email.
    pub custom_message: Option<String>,
    /// Timestamp when guest account should be disabled. Only include this timestamp if you are inviting a guest user and you want their account to expire on a certain date.
    pub guest_expiration_ts: Option<String>,
    /// Is this user a multi-channel guest user? (default: false)
    pub is_restricted: Option<bool>,
    /// Is this user a single channel guest user? (default: false)
    pub is_ultra_restricted: Option<bool>,
    /// Full name of the user.
    pub real_name: Option<String>,
    /// Allow this invite to be resent in the future if a user has not signed up yet. (default: false)
    pub resend: Option<bool>
}

/// struct for passing parameters to the method [`admin_users_list`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsersListParams {
    /// Authentication token. Requires scope: `admin.users:read`
    pub token: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String,
    /// Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
    pub cursor: Option<String>,
    /// Limit for how many users to be retrieved per page
    pub limit: Option<i32>
}

/// struct for passing parameters to the method [`admin_users_remove`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsersRemoveParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String,
    /// The ID of the user to remove.
    pub user_id: String
}

/// struct for passing parameters to the method [`admin_users_session_invalidate`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsersSessionInvalidateParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    pub session_id: i32,
    /// ID of the team that the session belongs to
    pub team_id: String
}

/// struct for passing parameters to the method [`admin_users_session_reset`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsersSessionResetParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// The ID of the user to wipe sessions for
    pub user_id: String,
    /// Only expire mobile sessions (default: false)
    pub mobile_only: Option<bool>,
    /// Only expire web sessions (default: false)
    pub web_only: Option<bool>
}

/// struct for passing parameters to the method [`admin_users_set_admin`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsersSetAdminParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String,
    /// The ID of the user to designate as an admin.
    pub user_id: String
}

/// struct for passing parameters to the method [`admin_users_set_expiration`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsersSetExpirationParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// Timestamp when guest account should be disabled.
    pub expiration_ts: i32,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String,
    /// The ID of the user to set an expiration for.
    pub user_id: String
}

/// struct for passing parameters to the method [`admin_users_set_owner`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsersSetOwnerParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String,
    /// Id of the user to promote to owner.
    pub user_id: String
}

/// struct for passing parameters to the method [`admin_users_set_regular`]
#[derive(Clone, Debug, Default)]
pub struct AdminUsersSetRegularParams {
    /// Authentication token. Requires scope: `admin.users:write`
    pub token: String,
    /// The ID (`T1234`) of the workspace.
    pub team_id: String,
    /// The ID of the user to designate as a regular user.
    pub user_id: String
}


/// struct for typed errors of method [`admin_apps_approve`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminAppsApproveError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_apps_approved_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminAppsApprovedListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_apps_requests_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminAppsRequestsListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_apps_restrict`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminAppsRestrictError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_apps_restricted_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminAppsRestrictedListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_archive`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsArchiveError {
    DefaultResponse(crate::models::AdminConversationsArchiveErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_convert_to_private`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsConvertToPrivateError {
    DefaultResponse(crate::models::AdminConversationsConvertToPrivateErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsCreateError {
    DefaultResponse(crate::models::AdminConversationsCreateErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsDeleteError {
    DefaultResponse(crate::models::AdminConversationsDeleteErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_disconnect_shared`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsDisconnectSharedError {
    DefaultResponse(crate::models::AdminConversationsDisconnectSharedErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_ekm_list_original_connected_channel_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsEkmListOriginalConnectedChannelInfoError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_get_conversation_prefs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsGetConversationPrefsError {
    DefaultResponse(crate::models::AdminConversationsUnarchiveErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_get_teams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsGetTeamsError {
    DefaultResponse(crate::models::AdminConversationsGetTeamsErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_invite`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsInviteError {
    DefaultResponse(crate::models::AdminConversationsInviteErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_rename`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsRenameError {
    DefaultResponse(crate::models::AdminConversationsUnarchiveErrorSchema1),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_restrict_access_add_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsRestrictAccessAddGroupError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_restrict_access_list_groups`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsRestrictAccessListGroupsError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_restrict_access_remove_group`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsRestrictAccessRemoveGroupError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_search`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsSearchError {
    DefaultResponse(crate::models::AdminConversationsSearchErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_set_conversation_prefs`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsSetConversationPrefsError {
    DefaultResponse(crate::models::AdminConversationsSetConversationPrefsErrorSchema),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_set_teams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsSetTeamsError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_conversations_unarchive`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminConversationsUnarchiveError {
    DefaultResponse(crate::models::AdminConversationsUnarchiveErrorSchema2),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_emoji_add`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminEmojiAddError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_emoji_add_alias`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminEmojiAddAliasError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_emoji_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminEmojiListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_emoji_remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminEmojiRemoveError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_emoji_rename`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminEmojiRenameError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_invite_requests_approve`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminInviteRequestsApproveError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_invite_requests_approved_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminInviteRequestsApprovedListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_invite_requests_denied_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminInviteRequestsDeniedListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_invite_requests_deny`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminInviteRequestsDenyError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_invite_requests_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminInviteRequestsListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_teams_admins_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminTeamsAdminsListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_teams_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminTeamsCreateError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_teams_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminTeamsListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_teams_owners_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminTeamsOwnersListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_teams_settings_info`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminTeamsSettingsInfoError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_teams_settings_set_default_channels`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminTeamsSettingsSetDefaultChannelsError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_teams_settings_set_description`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminTeamsSettingsSetDescriptionError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_teams_settings_set_discoverability`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminTeamsSettingsSetDiscoverabilityError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_teams_settings_set_icon`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminTeamsSettingsSetIconError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_teams_settings_set_name`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminTeamsSettingsSetNameError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_usergroups_add_channels`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsergroupsAddChannelsError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_usergroups_add_teams`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsergroupsAddTeamsError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_usergroups_list_channels`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsergroupsListChannelsError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_usergroups_remove_channels`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsergroupsRemoveChannelsError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_users_assign`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsersAssignError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_users_invite`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsersInviteError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_users_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsersListError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_users_remove`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsersRemoveError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_users_session_invalidate`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsersSessionInvalidateError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_users_session_reset`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsersSessionResetError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_users_set_admin`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsersSetAdminError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_users_set_expiration`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsersSetExpirationError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_users_set_owner`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsersSetOwnerError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_users_set_regular`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminUsersSetRegularError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}


/// Approve an app for installation on a workspace.
pub async fn admin_apps_approve(configuration: &configuration::Configuration, params: AdminAppsApproveParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminAppsApproveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let app_id = params.app_id;
    let request_id = params.request_id;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.apps.approve", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = app_id {
        local_var_form_params.insert("app_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = request_id {
        local_var_form_params.insert("request_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = team_id {
        local_var_form_params.insert("team_id", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminAppsApproveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List approved apps for an org or workspace.
pub async fn admin_apps_approved_list(configuration: &configuration::Configuration, params: AdminAppsApprovedListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminAppsApprovedListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let limit = params.limit;
    let cursor = params.cursor;
    let team_id = params.team_id;
    let enterprise_id = params.enterprise_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.apps.approved.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = team_id {
        local_var_req_builder = local_var_req_builder.query(&[("team_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enterprise_id {
        local_var_req_builder = local_var_req_builder.query(&[("enterprise_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminAppsApprovedListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List app requests for a team/workspace.
pub async fn admin_apps_requests_list(configuration: &configuration::Configuration, params: AdminAppsRequestsListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminAppsRequestsListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let limit = params.limit;
    let cursor = params.cursor;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.apps.requests.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = team_id {
        local_var_req_builder = local_var_req_builder.query(&[("team_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminAppsRequestsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Restrict an app for installation on a workspace.
pub async fn admin_apps_restrict(configuration: &configuration::Configuration, params: AdminAppsRestrictParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminAppsRestrictError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let app_id = params.app_id;
    let request_id = params.request_id;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.apps.restrict", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = app_id {
        local_var_form_params.insert("app_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = request_id {
        local_var_form_params.insert("request_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = team_id {
        local_var_form_params.insert("team_id", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminAppsRestrictError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List restricted apps for an org or workspace.
pub async fn admin_apps_restricted_list(configuration: &configuration::Configuration, params: AdminAppsRestrictedListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminAppsRestrictedListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let limit = params.limit;
    let cursor = params.cursor;
    let team_id = params.team_id;
    let enterprise_id = params.enterprise_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.apps.restricted.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = team_id {
        local_var_req_builder = local_var_req_builder.query(&[("team_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enterprise_id {
        local_var_req_builder = local_var_req_builder.query(&[("enterprise_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminAppsRestrictedListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Archive a public or private channel.
pub async fn admin_conversations_archive(configuration: &configuration::Configuration, params: AdminConversationsArchiveParams) -> Result<crate::models::AdminConversationsArchiveSchema, Error<AdminConversationsArchiveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.archive", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsArchiveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Convert a public channel to a private channel.
pub async fn admin_conversations_convert_to_private(configuration: &configuration::Configuration, params: AdminConversationsConvertToPrivateParams) -> Result<crate::models::AdminConversationsConvertToPrivateSchema, Error<AdminConversationsConvertToPrivateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.convertToPrivate", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsConvertToPrivateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a public or private channel-based conversation.
pub async fn admin_conversations_create(configuration: &configuration::Configuration, params: AdminConversationsCreateParams) -> Result<crate::models::AdminConversationsCreateSchema, Error<AdminConversationsCreateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let is_private = params.is_private;
    let name = params.name;
    let description = params.description;
    let org_wide = params.org_wide;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.create", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = description {
        local_var_form_params.insert("description", local_var_param_value.to_string());
    }
    local_var_form_params.insert("is_private", is_private.to_string());
    local_var_form_params.insert("name", name.to_string());
    if let Some(local_var_param_value) = org_wide {
        local_var_form_params.insert("org_wide", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = team_id {
        local_var_form_params.insert("team_id", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a public or private channel.
pub async fn admin_conversations_delete(configuration: &configuration::Configuration, params: AdminConversationsDeleteParams) -> Result<crate::models::AdminConversationsDeleteSchema, Error<AdminConversationsDeleteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.delete", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Disconnect a connected channel from one or more workspaces.
pub async fn admin_conversations_disconnect_shared(configuration: &configuration::Configuration, params: AdminConversationsDisconnectSharedParams) -> Result<crate::models::AdminConversationsRenameSchema, Error<AdminConversationsDisconnectSharedError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;
    let leaving_team_ids = params.leaving_team_ids;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.disconnectShared", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    if let Some(local_var_param_value) = leaving_team_ids {
        local_var_form_params.insert("leaving_team_ids", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsDisconnectSharedError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List all disconnected channelsâ€”i.e., channels that were once connected to other workspaces and then disconnectedâ€”and the corresponding original channel IDs for key revocation with EKM.
pub async fn admin_conversations_ekm_list_original_connected_channel_info(configuration: &configuration::Configuration, params: AdminConversationsEkmListOriginalConnectedChannelInfoParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminConversationsEkmListOriginalConnectedChannelInfoError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_ids = params.channel_ids;
    let team_ids = params.team_ids;
    let limit = params.limit;
    let cursor = params.cursor;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.ekm.listOriginalConnectedChannelInfo", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref local_var_str) = channel_ids {
        local_var_req_builder = local_var_req_builder.query(&[("channel_ids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = team_ids {
        local_var_req_builder = local_var_req_builder.query(&[("team_ids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsEkmListOriginalConnectedChannelInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get conversation preferences for a public or private channel.
pub async fn admin_conversations_get_conversation_prefs(configuration: &configuration::Configuration, params: AdminConversationsGetConversationPrefsParams) -> Result<crate::models::AdminConversationsGetConversationPrefsSchema, Error<AdminConversationsGetConversationPrefsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.getConversationPrefs", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("channel_id", &channel_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsGetConversationPrefsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get all the workspaces a given public or private channel is connected to within this Enterprise org.
pub async fn admin_conversations_get_teams(configuration: &configuration::Configuration, params: AdminConversationsGetTeamsParams) -> Result<crate::models::AdminConversationsGetTeamsSchema, Error<AdminConversationsGetTeamsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;
    let cursor = params.cursor;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.getTeams", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("channel_id", &channel_id.to_string())]);
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsGetTeamsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Invite a user to a public or private channel.
pub async fn admin_conversations_invite(configuration: &configuration::Configuration, params: AdminConversationsInviteParams) -> Result<crate::models::AdminConversationsInviteSchema, Error<AdminConversationsInviteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;
    let user_ids = params.user_ids;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.invite", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_form_params.insert("user_ids", user_ids.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsInviteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Rename a public or private channel.
pub async fn admin_conversations_rename(configuration: &configuration::Configuration, params: AdminConversationsRenameParams) -> Result<crate::models::AdminConversationsRenameSchema1, Error<AdminConversationsRenameError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;
    let name = params.name;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.rename", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_form_params.insert("name", name.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsRenameError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Add an allowlist of IDP groups for accessing a channel
pub async fn admin_conversations_restrict_access_add_group(configuration: &configuration::Configuration, params: AdminConversationsRestrictAccessAddGroupParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminConversationsRestrictAccessAddGroupError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let channel_id = params.channel_id;
    let group_id = params.group_id;
    let token = params.token;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.restrictAccess.addGroup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_form_params.insert("group_id", group_id.to_string());
    if let Some(local_var_param_value) = team_id {
        local_var_form_params.insert("team_id", local_var_param_value.to_string());
    }
    local_var_form_params.insert("token", token.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsRestrictAccessAddGroupError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List all IDP Groups linked to a channel
pub async fn admin_conversations_restrict_access_list_groups(configuration: &configuration::Configuration, params: AdminConversationsRestrictAccessListGroupsParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminConversationsRestrictAccessListGroupsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.restrictAccess.listGroups", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("channel_id", &channel_id.to_string())]);
    if let Some(ref local_var_str) = team_id {
        local_var_req_builder = local_var_req_builder.query(&[("team_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsRestrictAccessListGroupsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove a linked IDP group linked from a private channel
pub async fn admin_conversations_restrict_access_remove_group(configuration: &configuration::Configuration, params: AdminConversationsRestrictAccessRemoveGroupParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminConversationsRestrictAccessRemoveGroupError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let channel_id = params.channel_id;
    let group_id = params.group_id;
    let team_id = params.team_id;
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.restrictAccess.removeGroup", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_form_params.insert("group_id", group_id.to_string());
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_form_params.insert("token", token.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsRestrictAccessRemoveGroupError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Search for public or private channels in an Enterprise organization.
pub async fn admin_conversations_search(configuration: &configuration::Configuration, params: AdminConversationsSearchParams) -> Result<crate::models::AdminConversationsSearchSchema, Error<AdminConversationsSearchError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_ids = params.team_ids;
    let query = params.query;
    let limit = params.limit;
    let cursor = params.cursor;
    let search_channel_types = params.search_channel_types;
    let sort = params.sort;
    let sort_dir = params.sort_dir;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.search", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = team_ids {
        local_var_req_builder = local_var_req_builder.query(&[("team_ids", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = query {
        local_var_req_builder = local_var_req_builder.query(&[("query", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_channel_types {
        local_var_req_builder = local_var_req_builder.query(&[("search_channel_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_dir {
        local_var_req_builder = local_var_req_builder.query(&[("sort_dir", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsSearchError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set the posting permissions for a public or private channel.
pub async fn admin_conversations_set_conversation_prefs(configuration: &configuration::Configuration, params: AdminConversationsSetConversationPrefsParams) -> Result<crate::models::AdminConversationsSetConversationPrefsSchema, Error<AdminConversationsSetConversationPrefsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;
    let prefs = params.prefs;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.setConversationPrefs", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_form_params.insert("prefs", prefs.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsSetConversationPrefsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set the workspaces in an Enterprise grid org that connect to a public or private channel.
pub async fn admin_conversations_set_teams(configuration: &configuration::Configuration, params: AdminConversationsSetTeamsParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminConversationsSetTeamsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;
    let org_channel = params.org_channel;
    let target_team_ids = params.target_team_ids;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.setTeams", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    if let Some(local_var_param_value) = org_channel {
        local_var_form_params.insert("org_channel", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = target_team_ids {
        local_var_form_params.insert("target_team_ids", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = team_id {
        local_var_form_params.insert("team_id", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsSetTeamsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Unarchive a public or private channel.
pub async fn admin_conversations_unarchive(configuration: &configuration::Configuration, params: AdminConversationsUnarchiveParams) -> Result<crate::models::AdminConversationsUnarchiveSchema, Error<AdminConversationsUnarchiveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_id = params.channel_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.conversations.unarchive", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_id", channel_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminConversationsUnarchiveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Add an emoji.
pub async fn admin_emoji_add(configuration: &configuration::Configuration, params: AdminEmojiAddParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminEmojiAddError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let token = params.token;
    let url = params.url;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.emoji.add", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("name", name.to_string());
    local_var_form_params.insert("token", token.to_string());
    local_var_form_params.insert("url", url.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminEmojiAddError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Add an emoji alias.
pub async fn admin_emoji_add_alias(configuration: &configuration::Configuration, params: AdminEmojiAddAliasParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminEmojiAddAliasError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let alias_for = params.alias_for;
    let name = params.name;
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.emoji.addAlias", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("alias_for", alias_for.to_string());
    local_var_form_params.insert("name", name.to_string());
    local_var_form_params.insert("token", token.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminEmojiAddAliasError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List emoji for an Enterprise Grid organization.
pub async fn admin_emoji_list(configuration: &configuration::Configuration, params: AdminEmojiListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminEmojiListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let cursor = params.cursor;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.emoji.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminEmojiListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove an emoji across an Enterprise Grid organization
pub async fn admin_emoji_remove(configuration: &configuration::Configuration, params: AdminEmojiRemoveParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminEmojiRemoveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.emoji.remove", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("name", name.to_string());
    local_var_form_params.insert("token", token.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminEmojiRemoveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Rename an emoji.
pub async fn admin_emoji_rename(configuration: &configuration::Configuration, params: AdminEmojiRenameParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminEmojiRenameError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;
    let new_name = params.new_name;
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.emoji.rename", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("name", name.to_string());
    local_var_form_params.insert("new_name", new_name.to_string());
    local_var_form_params.insert("token", token.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminEmojiRenameError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Approve a workspace invite request.
pub async fn admin_invite_requests_approve(configuration: &configuration::Configuration, params: AdminInviteRequestsApproveParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminInviteRequestsApproveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let admin_invite_requests_approve_request = params.admin_invite_requests_approve_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.inviteRequests.approve", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&admin_invite_requests_approve_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminInviteRequestsApproveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List all approved workspace invite requests.
pub async fn admin_invite_requests_approved_list(configuration: &configuration::Configuration, params: AdminInviteRequestsApprovedListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminInviteRequestsApprovedListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let cursor = params.cursor;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.inviteRequests.approved.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = team_id {
        local_var_req_builder = local_var_req_builder.query(&[("team_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminInviteRequestsApprovedListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List all denied workspace invite requests.
pub async fn admin_invite_requests_denied_list(configuration: &configuration::Configuration, params: AdminInviteRequestsDeniedListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminInviteRequestsDeniedListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let cursor = params.cursor;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.inviteRequests.denied.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = team_id {
        local_var_req_builder = local_var_req_builder.query(&[("team_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminInviteRequestsDeniedListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Deny a workspace invite request.
pub async fn admin_invite_requests_deny(configuration: &configuration::Configuration, params: AdminInviteRequestsDenyParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminInviteRequestsDenyError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let admin_invite_requests_approve_request = params.admin_invite_requests_approve_request;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.inviteRequests.deny", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&admin_invite_requests_approve_request);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminInviteRequestsDenyError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List all pending workspace invite requests.
pub async fn admin_invite_requests_list(configuration: &configuration::Configuration, params: AdminInviteRequestsListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminInviteRequestsListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let cursor = params.cursor;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.inviteRequests.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = team_id {
        local_var_req_builder = local_var_req_builder.query(&[("team_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminInviteRequestsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List all of the admins on a given workspace.
pub async fn admin_teams_admins_list(configuration: &configuration::Configuration, params: AdminTeamsAdminsListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminTeamsAdminsListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let limit = params.limit;
    let cursor = params.cursor;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.teams.admins.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("team_id", &team_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminTeamsAdminsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create an Enterprise team.
pub async fn admin_teams_create(configuration: &configuration::Configuration, params: AdminTeamsCreateParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminTeamsCreateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_domain = params.team_domain;
    let team_name = params.team_name;
    let team_description = params.team_description;
    let team_discoverability = params.team_discoverability;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.teams.create", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = team_description {
        local_var_form_params.insert("team_description", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = team_discoverability {
        local_var_form_params.insert("team_discoverability", local_var_param_value.to_string());
    }
    local_var_form_params.insert("team_domain", team_domain.to_string());
    local_var_form_params.insert("team_name", team_name.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminTeamsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List all teams on an Enterprise organization
pub async fn admin_teams_list(configuration: &configuration::Configuration, params: AdminTeamsListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminTeamsListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let limit = params.limit;
    let cursor = params.cursor;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.teams.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminTeamsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List all of the owners on a given workspace.
pub async fn admin_teams_owners_list(configuration: &configuration::Configuration, params: AdminTeamsOwnersListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminTeamsOwnersListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let limit = params.limit;
    let cursor = params.cursor;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.teams.owners.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("token", &token.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("team_id", &team_id.to_string())]);
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminTeamsOwnersListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Fetch information about settings in a workspace
pub async fn admin_teams_settings_info(configuration: &configuration::Configuration, params: AdminTeamsSettingsInfoParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminTeamsSettingsInfoError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.teams.settings.info", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("team_id", &team_id.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminTeamsSettingsInfoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set the default channels of a workspace.
pub async fn admin_teams_settings_set_default_channels(configuration: &configuration::Configuration, params: AdminTeamsSettingsSetDefaultChannelsParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminTeamsSettingsSetDefaultChannelsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let channel_ids = params.channel_ids;
    let team_id = params.team_id;
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.teams.settings.setDefaultChannels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_ids", channel_ids.to_string());
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_form_params.insert("token", token.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminTeamsSettingsSetDefaultChannelsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set the description of a given workspace.
pub async fn admin_teams_settings_set_description(configuration: &configuration::Configuration, params: AdminTeamsSettingsSetDescriptionParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminTeamsSettingsSetDescriptionError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let description = params.description;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.teams.settings.setDescription", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("description", description.to_string());
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminTeamsSettingsSetDescriptionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// An API method that allows admins to set the discoverability of a given workspace
pub async fn admin_teams_settings_set_discoverability(configuration: &configuration::Configuration, params: AdminTeamsSettingsSetDiscoverabilityParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminTeamsSettingsSetDiscoverabilityError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let discoverability = params.discoverability;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.teams.settings.setDiscoverability", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("discoverability", discoverability.to_string());
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminTeamsSettingsSetDiscoverabilityError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Sets the icon of a workspace.
pub async fn admin_teams_settings_set_icon(configuration: &configuration::Configuration, params: AdminTeamsSettingsSetIconParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminTeamsSettingsSetIconError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let image_url = params.image_url;
    let team_id = params.team_id;
    let token = params.token;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.teams.settings.setIcon", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("image_url", image_url.to_string());
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_form_params.insert("token", token.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminTeamsSettingsSetIconError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set the name of a given workspace.
pub async fn admin_teams_settings_set_name(configuration: &configuration::Configuration, params: AdminTeamsSettingsSetNameParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminTeamsSettingsSetNameError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let name = params.name;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.teams.settings.setName", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("name", name.to_string());
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminTeamsSettingsSetNameError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Add one or more default channels to an IDP group.
pub async fn admin_usergroups_add_channels(configuration: &configuration::Configuration, params: AdminUsergroupsAddChannelsParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsergroupsAddChannelsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_ids = params.channel_ids;
    let usergroup_id = params.usergroup_id;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.usergroups.addChannels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_ids", channel_ids.to_string());
    if let Some(local_var_param_value) = team_id {
        local_var_form_params.insert("team_id", local_var_param_value.to_string());
    }
    local_var_form_params.insert("usergroup_id", usergroup_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsergroupsAddChannelsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Associate one or more default workspaces with an organization-wide IDP group.
pub async fn admin_usergroups_add_teams(configuration: &configuration::Configuration, params: AdminUsergroupsAddTeamsParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsergroupsAddTeamsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_ids = params.team_ids;
    let usergroup_id = params.usergroup_id;
    let auto_provision = params.auto_provision;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.usergroups.addTeams", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = auto_provision {
        local_var_form_params.insert("auto_provision", local_var_param_value.to_string());
    }
    local_var_form_params.insert("team_ids", team_ids.to_string());
    local_var_form_params.insert("usergroup_id", usergroup_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsergroupsAddTeamsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List the channels linked to an org-level IDP group (user group).
pub async fn admin_usergroups_list_channels(configuration: &configuration::Configuration, params: AdminUsergroupsListChannelsParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsergroupsListChannelsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let usergroup_id = params.usergroup_id;
    let team_id = params.team_id;
    let include_num_members = params.include_num_members;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.usergroups.listChannels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("usergroup_id", &usergroup_id.to_string())]);
    if let Some(ref local_var_str) = team_id {
        local_var_req_builder = local_var_req_builder.query(&[("team_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_num_members {
        local_var_req_builder = local_var_req_builder.query(&[("include_num_members", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsergroupsListChannelsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove one or more default channels from an org-level IDP group (user group).
pub async fn admin_usergroups_remove_channels(configuration: &configuration::Configuration, params: AdminUsergroupsRemoveChannelsParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsergroupsRemoveChannelsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_ids = params.channel_ids;
    let usergroup_id = params.usergroup_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.usergroups.removeChannels", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_ids", channel_ids.to_string());
    local_var_form_params.insert("usergroup_id", usergroup_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsergroupsRemoveChannelsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Add an Enterprise user to a workspace.
pub async fn admin_users_assign(configuration: &configuration::Configuration, params: AdminUsersAssignParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsersAssignError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let user_id = params.user_id;
    let channel_ids = params.channel_ids;
    let is_restricted = params.is_restricted;
    let is_ultra_restricted = params.is_ultra_restricted;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.users.assign", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = channel_ids {
        local_var_form_params.insert("channel_ids", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = is_restricted {
        local_var_form_params.insert("is_restricted", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = is_ultra_restricted {
        local_var_form_params.insert("is_ultra_restricted", local_var_param_value.to_string());
    }
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_form_params.insert("user_id", user_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsersAssignError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Invite a user to a workspace.
pub async fn admin_users_invite(configuration: &configuration::Configuration, params: AdminUsersInviteParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsersInviteError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let channel_ids = params.channel_ids;
    let email = params.email;
    let team_id = params.team_id;
    let custom_message = params.custom_message;
    let guest_expiration_ts = params.guest_expiration_ts;
    let is_restricted = params.is_restricted;
    let is_ultra_restricted = params.is_ultra_restricted;
    let real_name = params.real_name;
    let resend = params.resend;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.users.invite", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("channel_ids", channel_ids.to_string());
    if let Some(local_var_param_value) = custom_message {
        local_var_form_params.insert("custom_message", local_var_param_value.to_string());
    }
    local_var_form_params.insert("email", email.to_string());
    if let Some(local_var_param_value) = guest_expiration_ts {
        local_var_form_params.insert("guest_expiration_ts", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = is_restricted {
        local_var_form_params.insert("is_restricted", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = is_ultra_restricted {
        local_var_form_params.insert("is_ultra_restricted", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = real_name {
        local_var_form_params.insert("real_name", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = resend {
        local_var_form_params.insert("resend", local_var_param_value.to_string());
    }
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsersInviteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// List users on a workspace
pub async fn admin_users_list(configuration: &configuration::Configuration, params: AdminUsersListParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsersListError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let cursor = params.cursor;
    let limit = params.limit;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.users.list", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("team_id", &team_id.to_string())]);
    if let Some(ref local_var_str) = cursor {
        local_var_req_builder = local_var_req_builder.query(&[("cursor", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsersListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Remove a user from a workspace.
pub async fn admin_users_remove(configuration: &configuration::Configuration, params: AdminUsersRemoveParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsersRemoveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let user_id = params.user_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.users.remove", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_form_params.insert("user_id", user_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsersRemoveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Invalidate a single session for a user by session_id
pub async fn admin_users_session_invalidate(configuration: &configuration::Configuration, params: AdminUsersSessionInvalidateParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsersSessionInvalidateError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let session_id = params.session_id;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.users.session.invalidate", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("session_id", session_id.to_string());
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsersSessionInvalidateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Wipes all valid sessions on all devices for a given user
pub async fn admin_users_session_reset(configuration: &configuration::Configuration, params: AdminUsersSessionResetParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsersSessionResetError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let user_id = params.user_id;
    let mobile_only = params.mobile_only;
    let web_only = params.web_only;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.users.session.reset", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = mobile_only {
        local_var_form_params.insert("mobile_only", local_var_param_value.to_string());
    }
    local_var_form_params.insert("user_id", user_id.to_string());
    if let Some(local_var_param_value) = web_only {
        local_var_form_params.insert("web_only", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsersSessionResetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set an existing guest, regular user, or owner to be an admin user.
pub async fn admin_users_set_admin(configuration: &configuration::Configuration, params: AdminUsersSetAdminParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsersSetAdminError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let user_id = params.user_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.users.setAdmin", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_form_params.insert("user_id", user_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsersSetAdminError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set an expiration for a guest user
pub async fn admin_users_set_expiration(configuration: &configuration::Configuration, params: AdminUsersSetExpirationParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsersSetExpirationError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let expiration_ts = params.expiration_ts;
    let team_id = params.team_id;
    let user_id = params.user_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.users.setExpiration", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("expiration_ts", expiration_ts.to_string());
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_form_params.insert("user_id", user_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsersSetExpirationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set an existing guest, regular user, or admin user to be a workspace owner.
pub async fn admin_users_set_owner(configuration: &configuration::Configuration, params: AdminUsersSetOwnerParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsersSetOwnerError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let user_id = params.user_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.users.setOwner", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_form_params.insert("user_id", user_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsersSetOwnerError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Set an existing guest user, admin user, or owner to be a regular user.
pub async fn admin_users_set_regular(configuration: &configuration::Configuration, params: AdminUsersSetRegularParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminUsersSetRegularError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let team_id = params.team_id;
    let user_id = params.user_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.users.setRegular", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    local_var_form_params.insert("team_id", team_id.to_string());
    local_var_form_params.insert("user_id", user_id.to_string());
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminUsersSetRegularError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

