/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`admin_apps_approve`]
#[derive(Clone, Debug, Default)]
pub struct AdminAppsApproveParams {
    /// Authentication token. Requires scope: `admin.apps:write`
    pub token: String,
    /// The id of the app to approve.
    pub app_id: Option<String>,
    /// The id of the request to approve.
    pub request_id: Option<String>,
    pub team_id: Option<String>
}

/// struct for passing parameters to the method [`admin_apps_restrict`]
#[derive(Clone, Debug, Default)]
pub struct AdminAppsRestrictParams {
    /// Authentication token. Requires scope: `admin.apps:write`
    pub token: String,
    /// The id of the app to restrict.
    pub app_id: Option<String>,
    /// The id of the request to restrict.
    pub request_id: Option<String>,
    pub team_id: Option<String>
}


/// struct for typed errors of method [`admin_apps_approve`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminAppsApproveError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`admin_apps_restrict`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AdminAppsRestrictError {
    DefaultResponse(crate::models::DefaultErrorTemplate),
    UnknownValue(serde_json::Value),
}


/// Approve an app for installation on a workspace.
pub async fn admin_apps_approve(configuration: &configuration::Configuration, params: AdminAppsApproveParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminAppsApproveError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let app_id = params.app_id;
    let request_id = params.request_id;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.apps.approve", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = app_id {
        local_var_form_params.insert("app_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = request_id {
        local_var_form_params.insert("request_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = team_id {
        local_var_form_params.insert("team_id", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminAppsApproveError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Restrict an app for installation on a workspace.
pub async fn admin_apps_restrict(configuration: &configuration::Configuration, params: AdminAppsRestrictParams) -> Result<crate::models::DefaultSuccessTemplate, Error<AdminAppsRestrictError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let token = params.token;
    let app_id = params.app_id;
    let request_id = params.request_id;
    let team_id = params.team_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/admin.apps.restrict", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("token", token.to_string());
    if let Some(ref local_var_token) = local_var_configuration.oauth_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form_params = std::collections::HashMap::new();
    if let Some(local_var_param_value) = app_id {
        local_var_form_params.insert("app_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = request_id {
        local_var_form_params.insert("request_id", local_var_param_value.to_string());
    }
    if let Some(local_var_param_value) = team_id {
        local_var_form_params.insert("team_id", local_var_param_value.to_string());
    }
    local_var_req_builder = local_var_req_builder.form(&local_var_form_params);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<AdminAppsRestrictError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

