/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct TeamAccessLogsSchemaLoginsInner {
    #[serde(rename = "count")]
    pub count: i32,
    #[serde(rename = "country", deserialize_with = "Option::deserialize")]
    pub country: Option<String>,
    #[serde(rename = "date_first")]
    pub date_first: i32,
    #[serde(rename = "date_last")]
    pub date_last: i32,
    #[serde(rename = "ip", deserialize_with = "Option::deserialize")]
    pub ip: Option<String>,
    #[serde(rename = "isp", deserialize_with = "Option::deserialize")]
    pub isp: Option<String>,
    #[serde(rename = "region", deserialize_with = "Option::deserialize")]
    pub region: Option<String>,
    #[serde(rename = "user_agent")]
    pub user_agent: String,
    #[serde(rename = "user_id")]
    pub user_id: String,
    #[serde(rename = "username")]
    pub username: String,
}

impl TeamAccessLogsSchemaLoginsInner {
    pub fn new(count: i32, country: Option<String>, date_first: i32, date_last: i32, ip: Option<String>, isp: Option<String>, region: Option<String>, user_agent: String, user_id: String, username: String) -> TeamAccessLogsSchemaLoginsInner {
        TeamAccessLogsSchemaLoginsInner {
            count,
            country,
            date_first,
            date_last,
            ip,
            isp,
            region,
            user_agent,
            user_id,
            username,
        }
    }
}


