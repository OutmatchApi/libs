/*
 * Slack Web API
 *
 * One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.
 *
 * The version of the OpenAPI document: 1.7.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ConversationsRepliesSuccessSchemaMessagesInnerInner {
    #[serde(rename = "last_read", skip_serializing_if = "Option::is_none")]
    pub last_read: Option<String>,
    #[serde(rename = "latest_reply", skip_serializing_if = "Option::is_none")]
    pub latest_reply: Option<String>,
    #[serde(rename = "reply_count")]
    pub reply_count: i32,
    #[serde(rename = "reply_users", skip_serializing_if = "Option::is_none")]
    pub reply_users: Option<Vec<String>>,
    #[serde(rename = "reply_users_count", skip_serializing_if = "Option::is_none")]
    pub reply_users_count: Option<i32>,
    #[serde(rename = "source_team", skip_serializing_if = "Option::is_none")]
    pub source_team: Option<String>,
    #[serde(rename = "subscribed")]
    pub subscribed: bool,
    #[serde(rename = "team", skip_serializing_if = "Option::is_none")]
    pub team: Option<String>,
    #[serde(rename = "text")]
    pub text: String,
    #[serde(rename = "thread_ts")]
    pub thread_ts: String,
    #[serde(rename = "ts")]
    pub ts: String,
    #[serde(rename = "type")]
    pub r#type: String,
    #[serde(rename = "unread_count", skip_serializing_if = "Option::is_none")]
    pub unread_count: Option<i32>,
    #[serde(rename = "user")]
    pub user: String,
    #[serde(rename = "user_profile", skip_serializing_if = "Option::is_none")]
    pub user_profile: Option<Box<crate::models::ObjsUserProfileShort>>,
    #[serde(rename = "user_team", skip_serializing_if = "Option::is_none")]
    pub user_team: Option<String>,
    #[serde(rename = "is_starred", skip_serializing_if = "Option::is_none")]
    pub is_starred: Option<bool>,
    #[serde(rename = "parent_user_id")]
    pub parent_user_id: String,
}

impl ConversationsRepliesSuccessSchemaMessagesInnerInner {
    pub fn new(reply_count: i32, subscribed: bool, text: String, thread_ts: String, ts: String, r#type: String, user: String, parent_user_id: String) -> ConversationsRepliesSuccessSchemaMessagesInnerInner {
        ConversationsRepliesSuccessSchemaMessagesInnerInner {
            last_read: None,
            latest_reply: None,
            reply_count,
            reply_users: None,
            reply_users_count: None,
            source_team: None,
            subscribed,
            team: None,
            text,
            thread_ts,
            ts,
            r#type,
            unread_count: None,
            user,
            user_profile: None,
            user_team: None,
            is_starred: None,
            parent_user_id,
        }
    }
}


