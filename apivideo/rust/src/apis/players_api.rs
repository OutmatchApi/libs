/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`d_elete_players_player_id`]
#[derive(Clone, Debug, Default)]
pub struct DEletePlayersPlayerIdParams {
    /// The unique identifier for the player you want to delete.
    pub player_id: String
}

/// struct for passing parameters to the method [`d_elete_players_player_id_logo`]
#[derive(Clone, Debug, Default)]
pub struct DEletePlayersPlayerIdLogoParams {
    /// The unique identifier for the player.
    pub player_id: String
}

/// struct for passing parameters to the method [`g_et_players`]
#[derive(Clone, Debug, Default)]
pub struct GEtPlayersParams {
    /// createdAt is the time the player was created. updatedAt is the time the player was last updated. The time is presented in ISO-8601 format.
    pub sort_by: Option<String>,
    /// Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones.
    pub sort_order: Option<String>,
    /// Choose the number of search results to return per page. Minimum value: 1
    pub current_page: Option<i32>,
    /// Results per page. Allowed values 1-100, default is 25.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method [`g_et_players_player_id`]
#[derive(Clone, Debug, Default)]
pub struct GEtPlayersPlayerIdParams {
    /// The unique identifier for the player you want to retrieve. 
    pub player_id: String
}

/// struct for passing parameters to the method [`p_atch_players_player_id`]
#[derive(Clone, Debug, Default)]
pub struct PAtchPlayersPlayerIdParams {
    /// The unique identifier for the player.
    pub player_id: String,
    pub player_update_payload: crate::models::PlayerUpdatePayload
}

/// struct for passing parameters to the method [`p_ost_players`]
#[derive(Clone, Debug, Default)]
pub struct POstPlayersParams {
    pub player_creation_payload: crate::models::PlayerCreationPayload
}

/// struct for passing parameters to the method [`p_ost_players_player_id_logo`]
#[derive(Clone, Debug, Default)]
pub struct POstPlayersPlayerIdLogoParams {
    /// The unique identifier for the player.
    pub player_id: String,
    /// The name of the file you want to use for your logo.
    pub file: std::path::PathBuf,
    /// The path to the file you want to upload and use as a logo.
    pub link: String
}


/// struct for typed errors of method [`d_elete_players_player_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEletePlayersPlayerIdError {
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`d_elete_players_player_id_logo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEletePlayersPlayerIdLogoError {
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_players`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtPlayersError {
    Status400(crate::models::BadRequest),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_players_player_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtPlayersPlayerIdError {
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_atch_players_player_id`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PAtchPlayersPlayerIdError {
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_players`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstPlayersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_players_player_id_logo`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstPlayersPlayerIdLogoError {
    Status400(crate::models::BadRequest),
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}


/// Delete a player if you no longer need it. You can delete any player that you have the player ID for.
pub async fn d_elete_players_player_id(configuration: &configuration::Configuration, params: DEletePlayersPlayerIdParams) -> Result<(), Error<DEletePlayersPlayerIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let player_id = params.player_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{playerId}", local_var_configuration.base_path, playerId=crate::apis::urlencode(player_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DEletePlayersPlayerIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn d_elete_players_player_id_logo(configuration: &configuration::Configuration, params: DEletePlayersPlayerIdLogoParams) -> Result<serde_json::Value, Error<DEletePlayersPlayerIdLogoError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let player_id = params.player_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{playerId}/logo", local_var_configuration.base_path, playerId=crate::apis::urlencode(player_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DEletePlayersPlayerIdLogoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of all the players you created, as well as details about each one. Tutorials that use the [player endpoint](https://api.video/blog/endpoints/player).
pub async fn g_et_players(configuration: &configuration::Configuration, params: GEtPlayersParams) -> Result<crate::models::PlayersListResponse, Error<GEtPlayersError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let sort_by = params.sort_by;
    let sort_order = params.sort_order;
    let current_page = params.current_page;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = sort_by {
        local_var_req_builder = local_var_req_builder.query(&[("sortBy", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_order {
        local_var_req_builder = local_var_req_builder.query(&[("sortOrder", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = current_page {
        local_var_req_builder = local_var_req_builder.query(&[("currentPage", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtPlayersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use a player ID to retrieve details about the player and display it for viewers.
pub async fn g_et_players_player_id(configuration: &configuration::Configuration, params: GEtPlayersPlayerIdParams) -> Result<crate::models::Player, Error<GEtPlayersPlayerIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let player_id = params.player_id;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{playerId}", local_var_configuration.base_path, playerId=crate::apis::urlencode(player_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtPlayersPlayerIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Use a player ID to update specific details for a player. NOTE: It may take up to 10 min before the new player configuration is available from our CDN.
pub async fn p_atch_players_player_id(configuration: &configuration::Configuration, params: PAtchPlayersPlayerIdParams) -> Result<crate::models::Player, Error<PAtchPlayersPlayerIdError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let player_id = params.player_id;
    let player_update_payload = params.player_update_payload;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{playerId}", local_var_configuration.base_path, playerId=crate::apis::urlencode(player_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&player_update_payload);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PAtchPlayersPlayerIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a player for your video, and customise it.
pub async fn p_ost_players(configuration: &configuration::Configuration, params: POstPlayersParams) -> Result<crate::models::Player, Error<POstPlayersError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let player_creation_payload = params.player_creation_payload;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&player_creation_payload);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstPlayersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// The uploaded image maximum size should be 200x100 and its weight should be 200KB.  It will be scaled down to 30px height and converted to PNG to be displayed in the player.
pub async fn p_ost_players_player_id_logo(configuration: &configuration::Configuration, params: POstPlayersPlayerIdLogoParams) -> Result<crate::models::Player, Error<POstPlayersPlayerIdLogoError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let player_id = params.player_id;
    let file = params.file;
    let link = params.link;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/players/{playerId}/logo", local_var_configuration.base_path, playerId=crate::apis::urlencode(player_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'file' parameter
    local_var_form = local_var_form.text("link", link.to_string());
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstPlayersPlayerIdLogoError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

