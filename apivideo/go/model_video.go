/*
api.video

api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apivideo

import (
	"encoding/json"
	"time"
)

// Video struct for Video
type Video struct {
	Assets *VideoAssets `json:"assets,omitempty"`
	// A description for the video content. 
	Description *string `json:"description,omitempty"`
	// Metadata you can use to categorise and filter videos. Metadata is a list of dictionaries, where each dictionary represents a key value pair for categorising a video. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair. 
	Metadata []Metadata `json:"metadata,omitempty"`
	// This lets you know whether mp4 is supported. If enabled, an mp4 URL will be provided in the response for the video. 
	Mp4Support *bool `json:"mp4Support,omitempty"`
	// Defines if video is panoramic. 
	Panoramic *bool `json:"panoramic,omitempty"`
	// The id of the player that will be applied on the video. 
	PlayerId *string `json:"playerId,omitempty"`
	// Defines if the content is publicly reachable or if a unique token is needed for each play session. Default is true. Tutorials on [private videos](https://api.video/blog/endpoints/private-videos). 
	Public *bool `json:"public,omitempty"`
	// The date and time the API created the video. Date and time are provided using ISO-8601 UTC format.
	PublishedAt *string `json:"publishedAt,omitempty"`
	Source *VideoSource `json:"source,omitempty"`
	// One array of tags (each tag is a string) in order to categorize a video. Tags may include spaces.  
	Tags []interface{} `json:"tags,omitempty"`
	// The title of the video content. 
	Title *string `json:"title,omitempty"`
	// The date and time the video was updated. Date and time are provided using ISO-8601 UTC format.
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	// The unique identifier of the video object.
	VideoId *string `json:"videoId,omitempty"`
}

// NewVideo instantiates a new Video object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideo() *Video {
	this := Video{}
	return &this
}

// NewVideoWithDefaults instantiates a new Video object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoWithDefaults() *Video {
	this := Video{}
	return &this
}

// GetAssets returns the Assets field value if set, zero value otherwise.
func (o *Video) GetAssets() VideoAssets {
	if o == nil || isNil(o.Assets) {
		var ret VideoAssets
		return ret
	}
	return *o.Assets
}

// GetAssetsOk returns a tuple with the Assets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Video) GetAssetsOk() (*VideoAssets, bool) {
	if o == nil || isNil(o.Assets) {
    return nil, false
	}
	return o.Assets, true
}

// HasAssets returns a boolean if a field has been set.
func (o *Video) HasAssets() bool {
	if o != nil && !isNil(o.Assets) {
		return true
	}

	return false
}

// SetAssets gets a reference to the given VideoAssets and assigns it to the Assets field.
func (o *Video) SetAssets(v VideoAssets) {
	o.Assets = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Video) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Video) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Video) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Video) SetDescription(v string) {
	o.Description = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Video) GetMetadata() []Metadata {
	if o == nil || isNil(o.Metadata) {
		var ret []Metadata
		return ret
	}
	return o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Video) GetMetadataOk() ([]Metadata, bool) {
	if o == nil || isNil(o.Metadata) {
    return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Video) HasMetadata() bool {
	if o != nil && !isNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given []Metadata and assigns it to the Metadata field.
func (o *Video) SetMetadata(v []Metadata) {
	o.Metadata = v
}

// GetMp4Support returns the Mp4Support field value if set, zero value otherwise.
func (o *Video) GetMp4Support() bool {
	if o == nil || isNil(o.Mp4Support) {
		var ret bool
		return ret
	}
	return *o.Mp4Support
}

// GetMp4SupportOk returns a tuple with the Mp4Support field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Video) GetMp4SupportOk() (*bool, bool) {
	if o == nil || isNil(o.Mp4Support) {
    return nil, false
	}
	return o.Mp4Support, true
}

// HasMp4Support returns a boolean if a field has been set.
func (o *Video) HasMp4Support() bool {
	if o != nil && !isNil(o.Mp4Support) {
		return true
	}

	return false
}

// SetMp4Support gets a reference to the given bool and assigns it to the Mp4Support field.
func (o *Video) SetMp4Support(v bool) {
	o.Mp4Support = &v
}

// GetPanoramic returns the Panoramic field value if set, zero value otherwise.
func (o *Video) GetPanoramic() bool {
	if o == nil || isNil(o.Panoramic) {
		var ret bool
		return ret
	}
	return *o.Panoramic
}

// GetPanoramicOk returns a tuple with the Panoramic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Video) GetPanoramicOk() (*bool, bool) {
	if o == nil || isNil(o.Panoramic) {
    return nil, false
	}
	return o.Panoramic, true
}

// HasPanoramic returns a boolean if a field has been set.
func (o *Video) HasPanoramic() bool {
	if o != nil && !isNil(o.Panoramic) {
		return true
	}

	return false
}

// SetPanoramic gets a reference to the given bool and assigns it to the Panoramic field.
func (o *Video) SetPanoramic(v bool) {
	o.Panoramic = &v
}

// GetPlayerId returns the PlayerId field value if set, zero value otherwise.
func (o *Video) GetPlayerId() string {
	if o == nil || isNil(o.PlayerId) {
		var ret string
		return ret
	}
	return *o.PlayerId
}

// GetPlayerIdOk returns a tuple with the PlayerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Video) GetPlayerIdOk() (*string, bool) {
	if o == nil || isNil(o.PlayerId) {
    return nil, false
	}
	return o.PlayerId, true
}

// HasPlayerId returns a boolean if a field has been set.
func (o *Video) HasPlayerId() bool {
	if o != nil && !isNil(o.PlayerId) {
		return true
	}

	return false
}

// SetPlayerId gets a reference to the given string and assigns it to the PlayerId field.
func (o *Video) SetPlayerId(v string) {
	o.PlayerId = &v
}

// GetPublic returns the Public field value if set, zero value otherwise.
func (o *Video) GetPublic() bool {
	if o == nil || isNil(o.Public) {
		var ret bool
		return ret
	}
	return *o.Public
}

// GetPublicOk returns a tuple with the Public field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Video) GetPublicOk() (*bool, bool) {
	if o == nil || isNil(o.Public) {
    return nil, false
	}
	return o.Public, true
}

// HasPublic returns a boolean if a field has been set.
func (o *Video) HasPublic() bool {
	if o != nil && !isNil(o.Public) {
		return true
	}

	return false
}

// SetPublic gets a reference to the given bool and assigns it to the Public field.
func (o *Video) SetPublic(v bool) {
	o.Public = &v
}

// GetPublishedAt returns the PublishedAt field value if set, zero value otherwise.
func (o *Video) GetPublishedAt() string {
	if o == nil || isNil(o.PublishedAt) {
		var ret string
		return ret
	}
	return *o.PublishedAt
}

// GetPublishedAtOk returns a tuple with the PublishedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Video) GetPublishedAtOk() (*string, bool) {
	if o == nil || isNil(o.PublishedAt) {
    return nil, false
	}
	return o.PublishedAt, true
}

// HasPublishedAt returns a boolean if a field has been set.
func (o *Video) HasPublishedAt() bool {
	if o != nil && !isNil(o.PublishedAt) {
		return true
	}

	return false
}

// SetPublishedAt gets a reference to the given string and assigns it to the PublishedAt field.
func (o *Video) SetPublishedAt(v string) {
	o.PublishedAt = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *Video) GetSource() VideoSource {
	if o == nil || isNil(o.Source) {
		var ret VideoSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Video) GetSourceOk() (*VideoSource, bool) {
	if o == nil || isNil(o.Source) {
    return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *Video) HasSource() bool {
	if o != nil && !isNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given VideoSource and assigns it to the Source field.
func (o *Video) SetSource(v VideoSource) {
	o.Source = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Video) GetTags() []interface{} {
	if o == nil || isNil(o.Tags) {
		var ret []interface{}
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Video) GetTagsOk() ([]interface{}, bool) {
	if o == nil || isNil(o.Tags) {
    return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Video) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []interface{} and assigns it to the Tags field.
func (o *Video) SetTags(v []interface{}) {
	o.Tags = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Video) GetTitle() string {
	if o == nil || isNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Video) GetTitleOk() (*string, bool) {
	if o == nil || isNil(o.Title) {
    return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Video) HasTitle() bool {
	if o != nil && !isNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Video) SetTitle(v string) {
	o.Title = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Video) GetUpdatedAt() time.Time {
	if o == nil || isNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Video) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.UpdatedAt) {
    return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Video) HasUpdatedAt() bool {
	if o != nil && !isNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Video) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetVideoId returns the VideoId field value if set, zero value otherwise.
func (o *Video) GetVideoId() string {
	if o == nil || isNil(o.VideoId) {
		var ret string
		return ret
	}
	return *o.VideoId
}

// GetVideoIdOk returns a tuple with the VideoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Video) GetVideoIdOk() (*string, bool) {
	if o == nil || isNil(o.VideoId) {
    return nil, false
	}
	return o.VideoId, true
}

// HasVideoId returns a boolean if a field has been set.
func (o *Video) HasVideoId() bool {
	if o != nil && !isNil(o.VideoId) {
		return true
	}

	return false
}

// SetVideoId gets a reference to the given string and assigns it to the VideoId field.
func (o *Video) SetVideoId(v string) {
	o.VideoId = &v
}

func (o Video) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Assets) {
		toSerialize["assets"] = o.Assets
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !isNil(o.Mp4Support) {
		toSerialize["mp4Support"] = o.Mp4Support
	}
	if !isNil(o.Panoramic) {
		toSerialize["panoramic"] = o.Panoramic
	}
	if !isNil(o.PlayerId) {
		toSerialize["playerId"] = o.PlayerId
	}
	if !isNil(o.Public) {
		toSerialize["public"] = o.Public
	}
	if !isNil(o.PublishedAt) {
		toSerialize["publishedAt"] = o.PublishedAt
	}
	if !isNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !isNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !isNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !isNil(o.VideoId) {
		toSerialize["videoId"] = o.VideoId
	}
	return json.Marshal(toSerialize)
}

type NullableVideo struct {
	value *Video
	isSet bool
}

func (v NullableVideo) Get() *Video {
	return v.value
}

func (v *NullableVideo) Set(val *Video) {
	v.value = val
	v.isSet = true
}

func (v NullableVideo) IsSet() bool {
	return v.isSet
}

func (v *NullableVideo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideo(val *Video) *NullableVideo {
	return &NullableVideo{value: val, isSet: true}
}

func (v NullableVideo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


