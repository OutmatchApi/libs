/*
api.video

Testing LiveApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package apivideo

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_apivideo_LiveApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test LiveApiService DELETELiveStreamsLiveStreamId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var liveStreamId string

        resp, httpRes, err := apiClient.LiveApi.DELETELiveStreamsLiveStreamId(context.Background(), liveStreamId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LiveApiService DELETELiveStreamsLiveStreamIdThumbnail", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var liveStreamId string

        resp, httpRes, err := apiClient.LiveApi.DELETELiveStreamsLiveStreamIdThumbnail(context.Background(), liveStreamId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LiveApiService GETLiveStreams", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.LiveApi.GETLiveStreams(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LiveApiService GETLiveStreamsLiveStreamId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var liveStreamId string

        resp, httpRes, err := apiClient.LiveApi.GETLiveStreamsLiveStreamId(context.Background(), liveStreamId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LiveApiService PATCHLiveStreamsLiveStreamId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var liveStreamId string

        resp, httpRes, err := apiClient.LiveApi.PATCHLiveStreamsLiveStreamId(context.Background(), liveStreamId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LiveApiService POSTLiveStreams", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.LiveApi.POSTLiveStreams(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test LiveApiService POSTLiveStreamsLiveStreamIdThumbnail", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var liveStreamId string

        resp, httpRes, err := apiClient.LiveApi.POSTLiveStreamsLiveStreamIdThumbnail(context.Background(), liveStreamId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
