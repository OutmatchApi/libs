/*
api.video

Testing VideosApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package apivideo

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_apivideo_VideosApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test VideosApiService DELETEVideo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var videoId string

        resp, httpRes, err := apiClient.VideosApi.DELETEVideo(context.Background(), videoId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VideosApiService GETVideo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var videoId string

        resp, httpRes, err := apiClient.VideosApi.GETVideo(context.Background(), videoId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VideosApiService GETVideoStatus", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var videoId string

        resp, httpRes, err := apiClient.VideosApi.GETVideoStatus(context.Background(), videoId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VideosApiService LISTVideos", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.VideosApi.LISTVideos(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VideosApiService PATCHVideo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var videoId string

        resp, httpRes, err := apiClient.VideosApi.PATCHVideo(context.Background(), videoId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VideosApiService PATCHVideosVideoIdThumbnail", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var videoId string

        resp, httpRes, err := apiClient.VideosApi.PATCHVideosVideoIdThumbnail(context.Background(), videoId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VideosApiService POSTVideo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.VideosApi.POSTVideo(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VideosApiService POSTVideosVideoIdSource", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var videoId string

        resp, httpRes, err := apiClient.VideosApi.POSTVideosVideoIdSource(context.Background(), videoId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test VideosApiService POSTVideosVideoIdThumbnail", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var videoId string

        resp, httpRes, err := apiClient.VideosApi.POSTVideosVideoIdThumbnail(context.Background(), videoId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
