=begin
#api.video

#api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module apivideo
  class LiveApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a live stream
    # @param live_stream_id [String] The unique ID for the live stream that you want to remove.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def d_elete_live_streams_live_stream_id(live_stream_id, opts = {})
      d_elete_live_streams_live_stream_id_with_http_info(live_stream_id, opts)
      nil
    end

    # Delete a live stream
    # @param live_stream_id [String] The unique ID for the live stream that you want to remove.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def d_elete_live_streams_live_stream_id_with_http_info(live_stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveApi.d_elete_live_streams_live_stream_id ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveApi.d_elete_live_streams_live_stream_id"
      end
      # resource path
      local_var_path = '/live-streams/{liveStreamId}'.sub('{' + 'liveStreamId' + '}', CGI.escape(live_stream_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LiveApi.d_elete_live_streams_live_stream_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveApi#d_elete_live_streams_live_stream_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete a thumbnail
    # Send the unique identifier for a live stream to delete it from the system.
    # @param live_stream_id [String] The unique identifier for the live stream you want to delete. 
    # @param [Hash] opts the optional parameters
    # @return [LiveStream]
    def d_elete_live_streams_live_stream_id_thumbnail(live_stream_id, opts = {})
      data, _status_code, _headers = d_elete_live_streams_live_stream_id_thumbnail_with_http_info(live_stream_id, opts)
      data
    end

    # Delete a thumbnail
    # Send the unique identifier for a live stream to delete it from the system.
    # @param live_stream_id [String] The unique identifier for the live stream you want to delete. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LiveStream, Integer, Hash)>] LiveStream data, response status code and response headers
    def d_elete_live_streams_live_stream_id_thumbnail_with_http_info(live_stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveApi.d_elete_live_streams_live_stream_id_thumbnail ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveApi.d_elete_live_streams_live_stream_id_thumbnail"
      end
      # resource path
      local_var_path = '/live-streams/{liveStreamId}/thumbnail'.sub('{' + 'liveStreamId' + '}', CGI.escape(live_stream_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LiveStream'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LiveApi.d_elete_live_streams_live_stream_id_thumbnail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveApi#d_elete_live_streams_live_stream_id_thumbnail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all live streams
    # With no parameters added to the url, this will return all livestreams. Query by name or key to limit the list.
    # @param [Hash] opts the parameters
    # @option opts [String] :stream_key The unique stream key that allows you to stream videos.
    # @option opts [String] :name You can filter live streams by their name or a part of their name.
    # @option opts [String] :sort_by Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format.
    # @option opts [String] :sort_order Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending.
    # @option opts [Integer] :current_page Choose the number of search results to return per page. Minimum value: 1 (default to 1)
    # @option opts [Integer] :page_size Results per page. Allowed values 1-100, default is 25. (default to 25)
    # @return [LiveStreamListResponse]
    def g_et_live_streams(opts = {})
      data, _status_code, _headers = g_et_live_streams_with_http_info(opts)
      data
    end

    # List all live streams
    # With no parameters added to the url, this will return all livestreams. Query by name or key to limit the list.
    # @param [Hash] opts the parameters
    # @option opts [String] :stream_key The unique stream key that allows you to stream videos.
    # @option opts [String] :name You can filter live streams by their name or a part of their name.
    # @option opts [String] :sort_by Allowed: createdAt, publishedAt, name. createdAt - the time a livestream was created using the specified streamKey. publishedAt - the time a livestream was published using the specified streamKey. name - the name of the livestream. If you choose one of the time based options, the time is presented in ISO-8601 format.
    # @option opts [String] :sort_order Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones. For title, it is 0-9 and A-Z ascending and Z-A, 9-0 descending.
    # @option opts [Integer] :current_page Choose the number of search results to return per page. Minimum value: 1 (default to 1)
    # @option opts [Integer] :page_size Results per page. Allowed values 1-100, default is 25. (default to 25)
    # @return [Array<(LiveStreamListResponse, Integer, Hash)>] LiveStreamListResponse data, response status code and response headers
    def g_et_live_streams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveApi.g_et_live_streams ...'
      end
      # unbox the parameters from the hash
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !allowable_values.include?(opts[:'sort_order'])
        fail ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/live-streams'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'streamKey'] = opts[:'stream_key'] if !opts[:'stream_key'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'currentPage'] = opts[:'current_page'] if !opts[:'current_page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LiveStreamListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LiveApi.g_et_live_streams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveApi#g_et_live_streams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show live stream
    # Supply a LivestreamId, and you'll get all the details for streaming into, and watching the livestream. Tutorials that use the [show livestream endpoint](https://api.video/blog/endpoints/live-stream-status).
    # @param live_stream_id [String] The unique ID for the live stream you want to watch.
    # @param [Hash] opts the optional parameters
    # @return [LiveStream]
    def g_et_live_streams_live_stream_id(live_stream_id, opts = {})
      data, _status_code, _headers = g_et_live_streams_live_stream_id_with_http_info(live_stream_id, opts)
      data
    end

    # Show live stream
    # Supply a LivestreamId, and you&#39;ll get all the details for streaming into, and watching the livestream. Tutorials that use the [show livestream endpoint](https://api.video/blog/endpoints/live-stream-status).
    # @param live_stream_id [String] The unique ID for the live stream you want to watch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LiveStream, Integer, Hash)>] LiveStream data, response status code and response headers
    def g_et_live_streams_live_stream_id_with_http_info(live_stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveApi.g_et_live_streams_live_stream_id ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveApi.g_et_live_streams_live_stream_id"
      end
      # resource path
      local_var_path = '/live-streams/{liveStreamId}'.sub('{' + 'liveStreamId' + '}', CGI.escape(live_stream_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LiveStream'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LiveApi.g_et_live_streams_live_stream_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveApi#g_et_live_streams_live_stream_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a live stream
    # Use this endpoint to update the player, or to turn recording on/off (saving a copy of the livestream). NOTE: If the livestream is actively streaming, changing the recording status will only affect the NEXT stream.    The public=false 'private livestream' is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer.
    # @param live_stream_id [String] The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.
    # @param [Hash] opts the optional parameters
    # @option opts [LiveStreamUpdatePayload] :live_stream_update_payload 
    # @return [LiveStream]
    def p_atch_live_streams_live_stream_id(live_stream_id, opts = {})
      data, _status_code, _headers = p_atch_live_streams_live_stream_id_with_http_info(live_stream_id, opts)
      data
    end

    # Update a live stream
    # Use this endpoint to update the player, or to turn recording on/off (saving a copy of the livestream). NOTE: If the livestream is actively streaming, changing the recording status will only affect the NEXT stream.    The public&#x3D;false &#39;private livestream&#39; is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer.
    # @param live_stream_id [String] The unique ID for the live stream that you want to update information for such as player details, or whether you want the recording on or off.
    # @param [Hash] opts the optional parameters
    # @option opts [LiveStreamUpdatePayload] :live_stream_update_payload 
    # @return [Array<(LiveStream, Integer, Hash)>] LiveStream data, response status code and response headers
    def p_atch_live_streams_live_stream_id_with_http_info(live_stream_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveApi.p_atch_live_streams_live_stream_id ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveApi.p_atch_live_streams_live_stream_id"
      end
      # resource path
      local_var_path = '/live-streams/{liveStreamId}'.sub('{' + 'liveStreamId' + '}', CGI.escape(live_stream_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'live_stream_update_payload'])

      # return_type
      return_type = opts[:debug_return_type] || 'LiveStream'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LiveApi.p_atch_live_streams_live_stream_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveApi#p_atch_live_streams_live_stream_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create live stream
    # A live stream will give you the 'connection point' to RTMP your video stream to api.video. It will also give you the details for viewers to watch the same livestream.  The public=false 'private livestream' is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer. See our [Live Stream Tutorial](https://api.video/blog/tutorials/live-stream-tutorial) for a walkthrough of this API with OBS. Your RTMP endpoint for the livestream is rtmp://broadcast.api.video/s/{streamKey} Tutorials that [create live streams](https://api.video/blog/endpoints/live-create).
    # @param [Hash] opts the optional parameters
    # @option opts [LiveStreamCreatePayload] :live_stream_create_payload 
    # @return [LiveStream]
    def p_ost_live_streams(opts = {})
      data, _status_code, _headers = p_ost_live_streams_with_http_info(opts)
      data
    end

    # Create live stream
    # A live stream will give you the &#39;connection point&#39; to RTMP your video stream to api.video. It will also give you the details for viewers to watch the same livestream.  The public&#x3D;false &#39;private livestream&#39; is available as a BETA feature, and should be limited to livestreams of 3,000 viewers or fewer. See our [Live Stream Tutorial](https://api.video/blog/tutorials/live-stream-tutorial) for a walkthrough of this API with OBS. Your RTMP endpoint for the livestream is rtmp://broadcast.api.video/s/{streamKey} Tutorials that [create live streams](https://api.video/blog/endpoints/live-create).
    # @param [Hash] opts the optional parameters
    # @option opts [LiveStreamCreatePayload] :live_stream_create_payload 
    # @return [Array<(LiveStream, Integer, Hash)>] LiveStream data, response status code and response headers
    def p_ost_live_streams_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveApi.p_ost_live_streams ...'
      end
      # resource path
      local_var_path = '/live-streams'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'live_stream_create_payload'])

      # return_type
      return_type = opts[:debug_return_type] || 'LiveStream'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LiveApi.p_ost_live_streams",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveApi#p_ost_live_streams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a thumbnail
    # Upload an image to use as a backdrop for your livestream. Tutorials that [update live stream thumbnails](https://api.video/blog/endpoints/live-upload-a-thumbnail).
    # @param live_stream_id [String] The unique ID for the live stream you want to upload.
    # @param file [File] The image to be added as a thumbnail.
    # @param [Hash] opts the optional parameters
    # @return [LiveStream]
    def p_ost_live_streams_live_stream_id_thumbnail(live_stream_id, file, opts = {})
      data, _status_code, _headers = p_ost_live_streams_live_stream_id_thumbnail_with_http_info(live_stream_id, file, opts)
      data
    end

    # Upload a thumbnail
    # Upload an image to use as a backdrop for your livestream. Tutorials that [update live stream thumbnails](https://api.video/blog/endpoints/live-upload-a-thumbnail).
    # @param live_stream_id [String] The unique ID for the live stream you want to upload.
    # @param file [File] The image to be added as a thumbnail.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LiveStream, Integer, Hash)>] LiveStream data, response status code and response headers
    def p_ost_live_streams_live_stream_id_thumbnail_with_http_info(live_stream_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LiveApi.p_ost_live_streams_live_stream_id_thumbnail ...'
      end
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling LiveApi.p_ost_live_streams_live_stream_id_thumbnail"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling LiveApi.p_ost_live_streams_live_stream_id_thumbnail"
      end
      # resource path
      local_var_path = '/live-streams/{liveStreamId}/thumbnail'.sub('{' + 'liveStreamId' + '}', CGI.escape(live_stream_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LiveStream'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"LiveApi.p_ost_live_streams_live_stream_id_thumbnail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LiveApi#p_ost_live_streams_live_stream_id_thumbnail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
