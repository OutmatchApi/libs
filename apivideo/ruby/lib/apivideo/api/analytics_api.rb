=begin
#api.video

#api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module apivideo
  class AnalyticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List live stream player sessions
    # @param [Hash] opts the parameters
    # @option opts [String] :live_stream_id The unique identifier for the live stream you want to retrieve analytics for. (required)
    # @option opts [String] :period Period must have one of the following formats:  - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot; For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot; 
    # @option opts [Integer] :current_page Choose the number of search results to return per page. Minimum value: 1 (default to 1)
    # @option opts [Integer] :page_size Results per page. Allowed values 1-100, default is 25. (default to 25)
    # @return [RawStatisticsListLiveStreamAnalyticsResponse]
    def g_et_analytics_live_streams_live_stream_id(opts = {})
      data, _status_code, _headers = g_et_analytics_live_streams_live_stream_id_with_http_info(opts)
      data
    end

    # List live stream player sessions
    # @param [Hash] opts the parameters
    # @option opts [String] :live_stream_id The unique identifier for the live stream you want to retrieve analytics for. (required)
    # @option opts [String] :period Period must have one of the following formats:  - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot; For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot; 
    # @option opts [Integer] :current_page Choose the number of search results to return per page. Minimum value: 1 (default to 1)
    # @option opts [Integer] :page_size Results per page. Allowed values 1-100, default is 25. (default to 25)
    # @return [Array<(RawStatisticsListLiveStreamAnalyticsResponse, Integer, Hash)>] RawStatisticsListLiveStreamAnalyticsResponse data, response status code and response headers
    def g_et_analytics_live_streams_live_stream_id_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.g_et_analytics_live_streams_live_stream_id ...'
      end
      # unbox the parameters from the hash
      live_stream_id = opts[:'live_stream_id']
      # verify the required parameter 'live_stream_id' is set
      if @api_client.config.client_side_validation && live_stream_id.nil?
        fail ArgumentError, "Missing the required parameter 'live_stream_id' when calling AnalyticsApi.g_et_analytics_live_streams_live_stream_id"
      end
      # resource path
      local_var_path = '/analytics/live-streams/{liveStreamId}'.sub('{' + 'liveStreamId' + '}', CGI.escape(live_stream_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'currentPage'] = opts[:'current_page'] if !opts[:'current_page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RawStatisticsListLiveStreamAnalyticsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.g_et_analytics_live_streams_live_stream_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#g_et_analytics_live_streams_live_stream_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List player session events
    # Useful to track and measure video's engagement.
    # @param [Hash] opts the parameters
    # @option opts [String] :session_id A unique identifier you can use to reference and track a session with. (required)
    # @option opts [Integer] :current_page Choose the number of search results to return per page. Minimum value: 1 (default to 1)
    # @option opts [Integer] :page_size Results per page. Allowed values 1-100, default is 25. (default to 25)
    # @return [RawStatisticsListPlayerSessionEventsResponse]
    def g_et_analytics_sessions_session_id_events(opts = {})
      data, _status_code, _headers = g_et_analytics_sessions_session_id_events_with_http_info(opts)
      data
    end

    # List player session events
    # Useful to track and measure video&#39;s engagement.
    # @param [Hash] opts the parameters
    # @option opts [String] :session_id A unique identifier you can use to reference and track a session with. (required)
    # @option opts [Integer] :current_page Choose the number of search results to return per page. Minimum value: 1 (default to 1)
    # @option opts [Integer] :page_size Results per page. Allowed values 1-100, default is 25. (default to 25)
    # @return [Array<(RawStatisticsListPlayerSessionEventsResponse, Integer, Hash)>] RawStatisticsListPlayerSessionEventsResponse data, response status code and response headers
    def g_et_analytics_sessions_session_id_events_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.g_et_analytics_sessions_session_id_events ...'
      end
      # unbox the parameters from the hash
      session_id = opts[:'session_id']
      # verify the required parameter 'session_id' is set
      if @api_client.config.client_side_validation && session_id.nil?
        fail ArgumentError, "Missing the required parameter 'session_id' when calling AnalyticsApi.g_et_analytics_sessions_session_id_events"
      end
      # resource path
      local_var_path = '/analytics/sessions/{sessionId}/events'.sub('{' + 'sessionId' + '}', CGI.escape(session_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currentPage'] = opts[:'current_page'] if !opts[:'current_page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RawStatisticsListPlayerSessionEventsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.g_et_analytics_sessions_session_id_events",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#g_et_analytics_sessions_session_id_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List video player sessions
    # Retrieve all available user sessions for a specific video. Tutorials that use the [analytics endpoint](https://api.video/blog/endpoints/analytics).
    # @param [Hash] opts the parameters
    # @option opts [String] :video_id The unique identifier for the video you want to retrieve session information for. (required)
    # @option opts [String] :period Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018 For a range period:  -  Date range: 2018-01-01/2018-01-15 
    # @option opts [Array<String>] :metadata Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with.
    # @option opts [Integer] :current_page Choose the number of search results to return per page. Minimum value: 1 (default to 1)
    # @option opts [Integer] :page_size Results per page. Allowed values 1-100, default is 25. (default to 25)
    # @return [RawStatisticsListSessionsResponse]
    def g_et_analytics_videos_video_id(opts = {})
      data, _status_code, _headers = g_et_analytics_videos_video_id_with_http_info(opts)
      data
    end

    # List video player sessions
    # Retrieve all available user sessions for a specific video. Tutorials that use the [analytics endpoint](https://api.video/blog/endpoints/analytics).
    # @param [Hash] opts the parameters
    # @option opts [String] :video_id The unique identifier for the video you want to retrieve session information for. (required)
    # @option opts [String] :period Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018 For a range period:  -  Date range: 2018-01-01/2018-01-15 
    # @option opts [Array<String>] :metadata Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with.
    # @option opts [Integer] :current_page Choose the number of search results to return per page. Minimum value: 1 (default to 1)
    # @option opts [Integer] :page_size Results per page. Allowed values 1-100, default is 25. (default to 25)
    # @return [Array<(RawStatisticsListSessionsResponse, Integer, Hash)>] RawStatisticsListSessionsResponse data, response status code and response headers
    def g_et_analytics_videos_video_id_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.g_et_analytics_videos_video_id ...'
      end
      # unbox the parameters from the hash
      video_id = opts[:'video_id']
      # verify the required parameter 'video_id' is set
      if @api_client.config.client_side_validation && video_id.nil?
        fail ArgumentError, "Missing the required parameter 'video_id' when calling AnalyticsApi.g_et_analytics_videos_video_id"
      end
      # resource path
      local_var_path = '/analytics/videos/{videoId}'.sub('{' + 'videoId' + '}', CGI.escape(video_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'period'] = opts[:'period'] if !opts[:'period'].nil?
      query_params[:'metadata'] = @api_client.build_collection_param(opts[:'metadata'], :multi) if !opts[:'metadata'].nil?
      query_params[:'currentPage'] = opts[:'current_page'] if !opts[:'current_page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RawStatisticsListSessionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.g_et_analytics_videos_video_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#g_et_analytics_videos_video_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
