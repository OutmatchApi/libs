/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outmatchapi.apivideo;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * Collection of details about the video object that you can use to work with the video object.
 */
@ApiModel(description = "Collection of details about the video object that you can use to work with the video object.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-09T00:34:33.415753Z[Etc/UTC]")
public class VideoAssets {
  public static final String SERIALIZED_NAME_HLS = "hls";
  @SerializedName(SERIALIZED_NAME_HLS)
  private String hls;

  public static final String SERIALIZED_NAME_IFRAME = "iframe";
  @SerializedName(SERIALIZED_NAME_IFRAME)
  private String iframe;

  public static final String SERIALIZED_NAME_MP4 = "mp4";
  @SerializedName(SERIALIZED_NAME_MP4)
  private String mp4;

  public static final String SERIALIZED_NAME_PLAYER = "player";
  @SerializedName(SERIALIZED_NAME_PLAYER)
  private String player;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private String thumbnail;

  public VideoAssets() {
  }

  public VideoAssets hls(String hls) {
    
    this.hls = hls;
    return this;
  }

   /**
   * This is the manifest URL. For HTTP Live Streaming (HLS), when a HLS video stream is initiated, the first file to download is the manifest. This file has the extension M3U8, and provides the video player with information about the various bitrates available for streaming.
   * @return hls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This is the manifest URL. For HTTP Live Streaming (HLS), when a HLS video stream is initiated, the first file to download is the manifest. This file has the extension M3U8, and provides the video player with information about the various bitrates available for streaming.")

  public String getHls() {
    return hls;
  }


  public void setHls(String hls) {
    this.hls = hls;
  }


  public VideoAssets iframe(String iframe) {
    
    this.iframe = iframe;
    return this;
  }

   /**
   * Code to use video from a third party website
   * @return iframe
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<iframe src=\"//embed.api.video/c188ed58-3403-46a2-b91b-44603d10b2c9?token=831a9bd9-9f50-464c-a369-8e9d914371ae\" width=\"100%\" height=\"100%\" frameborder=\"0\" scrolling=\"no\" allowfullscreen=\"\"></iframe>", value = "Code to use video from a third party website")

  public String getIframe() {
    return iframe;
  }


  public void setIframe(String iframe) {
    this.iframe = iframe;
  }


  public VideoAssets mp4(String mp4) {
    
    this.mp4 = mp4;
    return this;
  }

   /**
   * Available only if mp4Support is enabled. Raw mp4 url.
   * @return mp4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://cdn.api.video/vod/vi4k0jvEUuaTdRAEjQ4Jfrgz/token/8fd70443-d9f0-45d2-b01c-12c8cfc707c9/mp4/720/source.mp4", value = "Available only if mp4Support is enabled. Raw mp4 url.")

  public String getMp4() {
    return mp4;
  }


  public void setMp4(String mp4) {
    this.mp4 = mp4;
  }


  public VideoAssets player(String player) {
    
    this.player = player;
    return this;
  }

   /**
   * Raw url of the player.
   * @return player
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://embed.api.video/1b9d6ae8-8f57-4b6d-8552-d636926b4f5f?token=831a9bd9-9f50-464c-a369-8e9d914371ae", value = "Raw url of the player.")

  public String getPlayer() {
    return player;
  }


  public void setPlayer(String player) {
    this.player = player;
  }


  public VideoAssets thumbnail(String thumbnail) {
    
    this.thumbnail = thumbnail;
    return this;
  }

   /**
   * Poster of the video.
   * @return thumbnail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://cdn.api.video/stream/831a9bd9-9f50-464c-a369-8e9d914371ae/thumbnail.jpg", value = "Poster of the video.")

  public String getThumbnail() {
    return thumbnail;
  }


  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoAssets videoAssets = (VideoAssets) o;
    return Objects.equals(this.hls, videoAssets.hls) &&
        Objects.equals(this.iframe, videoAssets.iframe) &&
        Objects.equals(this.mp4, videoAssets.mp4) &&
        Objects.equals(this.player, videoAssets.player) &&
        Objects.equals(this.thumbnail, videoAssets.thumbnail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hls, iframe, mp4, player, thumbnail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoAssets {\n");
    sb.append("    hls: ").append(toIndentedString(hls)).append("\n");
    sb.append("    iframe: ").append(toIndentedString(iframe)).append("\n");
    sb.append("    mp4: ").append(toIndentedString(mp4)).append("\n");
    sb.append("    player: ").append(toIndentedString(player)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hls");
    openapiFields.add("iframe");
    openapiFields.add("mp4");
    openapiFields.add("player");
    openapiFields.add("thumbnail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VideoAssets
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VideoAssets.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoAssets is not found in the empty JSON string", VideoAssets.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!VideoAssets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoAssets` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("hls") != null && !jsonObj.get("hls").isJsonNull()) && !jsonObj.get("hls").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hls` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hls").toString()));
      }
      if ((jsonObj.get("iframe") != null && !jsonObj.get("iframe").isJsonNull()) && !jsonObj.get("iframe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iframe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iframe").toString()));
      }
      if ((jsonObj.get("mp4") != null && !jsonObj.get("mp4").isJsonNull()) && !jsonObj.get("mp4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mp4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mp4").toString()));
      }
      if ((jsonObj.get("player") != null && !jsonObj.get("player").isJsonNull()) && !jsonObj.get("player").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `player` to be a primitive type in the JSON string but got `%s`", jsonObj.get("player").toString()));
      }
      if ((jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) && !jsonObj.get("thumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoAssets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoAssets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoAssets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoAssets.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoAssets>() {
           @Override
           public void write(JsonWriter out, VideoAssets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoAssets read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VideoAssets given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VideoAssets
  * @throws IOException if the JSON string is invalid with respect to VideoAssets
  */
  public static VideoAssets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoAssets.class);
  }

 /**
  * Convert an instance of VideoAssets to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

