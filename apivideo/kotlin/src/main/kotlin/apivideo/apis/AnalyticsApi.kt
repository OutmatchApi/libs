/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package apivideo.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.outmatchapi.apivideo.NotMinusFound
import com.outmatchapi.apivideo.RawMinusStatisticsMinusListMinusLiveMinusStreamMinusAnalyticsMinusResponse
import com.outmatchapi.apivideo.RawMinusStatisticsMinusListMinusPlayerMinusSessionMinusEventsMinusResponse
import com.outmatchapi.apivideo.RawMinusStatisticsMinusListMinusSessionsMinusResponse

import com.squareup.moshi.Json

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import apivideo.infrastructure.ApiClient
import apivideo.infrastructure.ApiResponse
import apivideo.infrastructure.ClientException
import apivideo.infrastructure.ClientError
import apivideo.infrastructure.ServerException
import apivideo.infrastructure.ServerError
import apivideo.infrastructure.MultiValueMap
import apivideo.infrastructure.PartConfig
import apivideo.infrastructure.RequestConfig
import apivideo.infrastructure.RequestMethod
import apivideo.infrastructure.ResponseType
import apivideo.infrastructure.Success
import apivideo.infrastructure.toMultiValue

class AnalyticsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://ws.api.video")
        }
    }

    /**
     * List live stream player sessions
     * 
     * @param liveStreamId The unique identifier for the live stream you want to retrieve analytics for.
     * @param period Period must have one of the following formats:  - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot; For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot;  (optional)
     * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @return RawMinusStatisticsMinusListMinusLiveMinusStreamMinusAnalyticsMinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun gETAnalyticsLiveStreamsLiveStreamId(liveStreamId: kotlin.String, period: kotlin.String? = null, currentPage: kotlin.Int? = 1, pageSize: kotlin.Int? = 25) : RawMinusStatisticsMinusListMinusLiveMinusStreamMinusAnalyticsMinusResponse = withContext(Dispatchers.IO) {
        val localVarResponse = gETAnalyticsLiveStreamsLiveStreamIdWithHttpInfo(liveStreamId = liveStreamId, period = period, currentPage = currentPage, pageSize = pageSize)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RawMinusStatisticsMinusListMinusLiveMinusStreamMinusAnalyticsMinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List live stream player sessions
     * 
     * @param liveStreamId The unique identifier for the live stream you want to retrieve analytics for.
     * @param period Period must have one of the following formats:  - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot; For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot;  (optional)
     * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @return ApiResponse<RawMinusStatisticsMinusListMinusLiveMinusStreamMinusAnalyticsMinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun gETAnalyticsLiveStreamsLiveStreamIdWithHttpInfo(liveStreamId: kotlin.String, period: kotlin.String?, currentPage: kotlin.Int?, pageSize: kotlin.Int?) : ApiResponse<RawMinusStatisticsMinusListMinusLiveMinusStreamMinusAnalyticsMinusResponse?> = withContext(Dispatchers.IO) {
        val localVariableConfig = gETAnalyticsLiveStreamsLiveStreamIdRequestConfig(liveStreamId = liveStreamId, period = period, currentPage = currentPage, pageSize = pageSize)

        return@withContext request<Unit, RawMinusStatisticsMinusListMinusLiveMinusStreamMinusAnalyticsMinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation gETAnalyticsLiveStreamsLiveStreamId
     *
     * @param liveStreamId The unique identifier for the live stream you want to retrieve analytics for.
     * @param period Period must have one of the following formats:  - For a day : \&quot;2018-01-01\&quot;, - For a week: \&quot;2018-W01\&quot;,  - For a month: \&quot;2018-01\&quot; - For a year: \&quot;2018\&quot; For a range period:  -  Date range: \&quot;2018-01-01/2018-01-15\&quot;  (optional)
     * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @return RequestConfig
     */
    fun gETAnalyticsLiveStreamsLiveStreamIdRequestConfig(liveStreamId: kotlin.String, period: kotlin.String?, currentPage: kotlin.Int?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (period != null) {
                    put("period", listOf(period.toString()))
                }
                if (currentPage != null) {
                    put("currentPage", listOf(currentPage.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/analytics/live-streams/{liveStreamId}".replace("{"+"liveStreamId"+"}", encodeURIComponent(liveStreamId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List player session events
     * Useful to track and measure video&#39;s engagement.
     * @param sessionId A unique identifier you can use to reference and track a session with.
     * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @return RawMinusStatisticsMinusListMinusPlayerMinusSessionMinusEventsMinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun gETAnalyticsSessionsSessionIdEvents(sessionId: kotlin.String, currentPage: kotlin.Int? = 1, pageSize: kotlin.Int? = 25) : RawMinusStatisticsMinusListMinusPlayerMinusSessionMinusEventsMinusResponse = withContext(Dispatchers.IO) {
        val localVarResponse = gETAnalyticsSessionsSessionIdEventsWithHttpInfo(sessionId = sessionId, currentPage = currentPage, pageSize = pageSize)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RawMinusStatisticsMinusListMinusPlayerMinusSessionMinusEventsMinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List player session events
     * Useful to track and measure video&#39;s engagement.
     * @param sessionId A unique identifier you can use to reference and track a session with.
     * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @return ApiResponse<RawMinusStatisticsMinusListMinusPlayerMinusSessionMinusEventsMinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun gETAnalyticsSessionsSessionIdEventsWithHttpInfo(sessionId: kotlin.String, currentPage: kotlin.Int?, pageSize: kotlin.Int?) : ApiResponse<RawMinusStatisticsMinusListMinusPlayerMinusSessionMinusEventsMinusResponse?> = withContext(Dispatchers.IO) {
        val localVariableConfig = gETAnalyticsSessionsSessionIdEventsRequestConfig(sessionId = sessionId, currentPage = currentPage, pageSize = pageSize)

        return@withContext request<Unit, RawMinusStatisticsMinusListMinusPlayerMinusSessionMinusEventsMinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation gETAnalyticsSessionsSessionIdEvents
     *
     * @param sessionId A unique identifier you can use to reference and track a session with.
     * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @return RequestConfig
     */
    fun gETAnalyticsSessionsSessionIdEventsRequestConfig(sessionId: kotlin.String, currentPage: kotlin.Int?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (currentPage != null) {
                    put("currentPage", listOf(currentPage.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/analytics/sessions/{sessionId}/events".replace("{"+"sessionId"+"}", encodeURIComponent(sessionId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }

    /**
     * List video player sessions
     * Retrieve all available user sessions for a specific video. Tutorials that use the [analytics endpoint](https://api.video/blog/endpoints/analytics).
     * @param videoId The unique identifier for the video you want to retrieve session information for.
     * @param period Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018 For a range period:  -  Date range: 2018-01-01/2018-01-15  (optional)
     * @param metadata Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with. (optional)
     * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @return RawMinusStatisticsMinusListMinusSessionsMinusResponse
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    suspend fun gETAnalyticsVideosVideoId(videoId: kotlin.String, period: kotlin.String? = null, metadata: kotlin.collections.List<kotlin.String>? = null, currentPage: kotlin.Int? = 1, pageSize: kotlin.Int? = 25) : RawMinusStatisticsMinusListMinusSessionsMinusResponse = withContext(Dispatchers.IO) {
        val localVarResponse = gETAnalyticsVideosVideoIdWithHttpInfo(videoId = videoId, period = period, metadata = metadata, currentPage = currentPage, pageSize = pageSize)

        return@withContext when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as RawMinusStatisticsMinusListMinusSessionsMinusResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * List video player sessions
     * Retrieve all available user sessions for a specific video. Tutorials that use the [analytics endpoint](https://api.video/blog/endpoints/analytics).
     * @param videoId The unique identifier for the video you want to retrieve session information for.
     * @param period Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018 For a range period:  -  Date range: 2018-01-01/2018-01-15  (optional)
     * @param metadata Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with. (optional)
     * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @return ApiResponse<RawMinusStatisticsMinusListMinusSessionsMinusResponse?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    suspend fun gETAnalyticsVideosVideoIdWithHttpInfo(videoId: kotlin.String, period: kotlin.String?, metadata: kotlin.collections.List<kotlin.String>?, currentPage: kotlin.Int?, pageSize: kotlin.Int?) : ApiResponse<RawMinusStatisticsMinusListMinusSessionsMinusResponse?> = withContext(Dispatchers.IO) {
        val localVariableConfig = gETAnalyticsVideosVideoIdRequestConfig(videoId = videoId, period = period, metadata = metadata, currentPage = currentPage, pageSize = pageSize)

        return@withContext request<Unit, RawMinusStatisticsMinusListMinusSessionsMinusResponse>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation gETAnalyticsVideosVideoId
     *
     * @param videoId The unique identifier for the video you want to retrieve session information for.
     * @param period Period must have one of the following formats:  - For a day : 2018-01-01, - For a week: 2018-W01,  - For a month: 2018-01 - For a year: 2018 For a range period:  -  Date range: 2018-01-01/2018-01-15  (optional)
     * @param metadata Metadata and [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) filter. Send an array of key value pairs you want to filter sessios with. (optional)
     * @param currentPage Choose the number of search results to return per page. Minimum value: 1 (optional, default to 1)
     * @param pageSize Results per page. Allowed values 1-100, default is 25. (optional, default to 25)
     * @return RequestConfig
     */
    fun gETAnalyticsVideosVideoIdRequestConfig(videoId: kotlin.String, period: kotlin.String?, metadata: kotlin.collections.List<kotlin.String>?, currentPage: kotlin.Int?, pageSize: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (period != null) {
                    put("period", listOf(period.toString()))
                }
                if (metadata != null) {
                    put("metadata", toMultiValue(metadata.toList(), "multi"))
                }
                if (currentPage != null) {
                    put("currentPage", listOf(currentPage.toString()))
                }
                if (pageSize != null) {
                    put("pageSize", listOf(pageSize.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/analytics/videos/{videoId}".replace("{"+"videoId"+"}", encodeURIComponent(videoId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
