# coding: utf-8

"""
    api.video

    api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from apivideo import schemas  # noqa: F401


class LiveStream(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def assets() -> typing.Type['LiveStreamAssets']:
                return LiveStreamAssets
            broadcasting = schemas.BoolSchema
            liveStreamId = schemas.StrSchema
            name = schemas.StrSchema
            playerId = schemas.StrSchema
            public = schemas.BoolSchema
            record = schemas.BoolSchema
            streamKey = schemas.StrSchema
            __annotations__ = {
                "assets": assets,
                "broadcasting": broadcasting,
                "liveStreamId": liveStreamId,
                "name": name,
                "playerId": playerId,
                "public": public,
                "record": record,
                "streamKey": streamKey,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["assets"]) -> 'LiveStreamAssets': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["broadcasting"]) -> MetaOapg.properties.broadcasting: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["liveStreamId"]) -> MetaOapg.properties.liveStreamId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playerId"]) -> MetaOapg.properties.playerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public"]) -> MetaOapg.properties.public: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["record"]) -> MetaOapg.properties.record: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streamKey"]) -> MetaOapg.properties.streamKey: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["assets", "broadcasting", "liveStreamId", "name", "playerId", "public", "record", "streamKey", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["assets"]) -> typing.Union['LiveStreamAssets', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["broadcasting"]) -> typing.Union[MetaOapg.properties.broadcasting, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["liveStreamId"]) -> typing.Union[MetaOapg.properties.liveStreamId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playerId"]) -> typing.Union[MetaOapg.properties.playerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public"]) -> typing.Union[MetaOapg.properties.public, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["record"]) -> typing.Union[MetaOapg.properties.record, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streamKey"]) -> typing.Union[MetaOapg.properties.streamKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assets", "broadcasting", "liveStreamId", "name", "playerId", "public", "record", "streamKey", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        assets: typing.Union['LiveStreamAssets', schemas.Unset] = schemas.unset,
        broadcasting: typing.Union[MetaOapg.properties.broadcasting, bool, schemas.Unset] = schemas.unset,
        liveStreamId: typing.Union[MetaOapg.properties.liveStreamId, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        playerId: typing.Union[MetaOapg.properties.playerId, str, schemas.Unset] = schemas.unset,
        public: typing.Union[MetaOapg.properties.public, bool, schemas.Unset] = schemas.unset,
        record: typing.Union[MetaOapg.properties.record, bool, schemas.Unset] = schemas.unset,
        streamKey: typing.Union[MetaOapg.properties.streamKey, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LiveStream':
        return super().__new__(
            cls,
            *args,
            assets=assets,
            broadcasting=broadcasting,
            liveStreamId=liveStreamId,
            name=name,
            playerId=playerId,
            public=public,
            record=record,
            streamKey=streamKey,
            _configuration=_configuration,
            **kwargs,
        )

from apivideo.model.live_stream_assets import LiveStreamAssets
