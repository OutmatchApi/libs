/*
 * api.video
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.outmatchapi.video_api;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import invalidPackageName.JSON;

/**
 * LiveStreamAssets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-12-09T02:10:33.826846Z[Etc/UTC]")
public class LiveStreamAssets {
  public static final String SERIALIZED_NAME_HLS = "hls";
  @SerializedName(SERIALIZED_NAME_HLS)
  private String hls;

  public static final String SERIALIZED_NAME_IFRAME = "iframe";
  @SerializedName(SERIALIZED_NAME_IFRAME)
  private String iframe;

  public static final String SERIALIZED_NAME_PLAYER = "player";
  @SerializedName(SERIALIZED_NAME_PLAYER)
  private String player;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private String thumbnail;

  public LiveStreamAssets() {
  }

  public LiveStreamAssets hls(String hls) {
    
    this.hls = hls;
    return this;
  }

   /**
   * The http live streaming (HLS) link for your live video stream.
   * @return hls
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://live.api.video/li4pqNqGUkhKfWcBGpZVLRY5.m3u8", value = "The http live streaming (HLS) link for your live video stream.")

  public String getHls() {
    return hls;
  }


  public void setHls(String hls) {
    this.hls = hls;
  }


  public LiveStreamAssets iframe(String iframe) {
    
    this.iframe = iframe;
    return this;
  }

   /**
   * The embed code for the iframe containing your live video stream.
   * @return iframe
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "<iframe src=\\\"https://embed.api.video/live/li4pqNqGUkhKfWcBGpZVLRY5\\\" width=\\\"100%\\\" height=\\\"100%\\\" frameborder=\\\"0\\\" scrolling=\\\"no\\\" allowfullscreen=\\\"\\\"></iframe>", value = "The embed code for the iframe containing your live video stream.")

  public String getIframe() {
    return iframe;
  }


  public void setIframe(String iframe) {
    this.iframe = iframe;
  }


  public LiveStreamAssets player(String player) {
    
    this.player = player;
    return this;
  }

   /**
   * A link to the video player that is playing your live stream.
   * @return player
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://embed.api.video/live/li400mYKSgQ6xs7taUeSaEKr", value = "A link to the video player that is playing your live stream.")

  public String getPlayer() {
    return player;
  }


  public void setPlayer(String player) {
    this.player = player;
  }


  public LiveStreamAssets thumbnail(String thumbnail) {
    
    this.thumbnail = thumbnail;
    return this;
  }

   /**
   * A link to the thumbnail for your video.
   * @return thumbnail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://cdn.api.video/live/li400mYKSgQ6xs7taUeSaEKr/thumbnail.jpg", value = "A link to the thumbnail for your video.")

  public String getThumbnail() {
    return thumbnail;
  }


  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LiveStreamAssets liveStreamAssets = (LiveStreamAssets) o;
    return Objects.equals(this.hls, liveStreamAssets.hls) &&
        Objects.equals(this.iframe, liveStreamAssets.iframe) &&
        Objects.equals(this.player, liveStreamAssets.player) &&
        Objects.equals(this.thumbnail, liveStreamAssets.thumbnail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hls, iframe, player, thumbnail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LiveStreamAssets {\n");
    sb.append("    hls: ").append(toIndentedString(hls)).append("\n");
    sb.append("    iframe: ").append(toIndentedString(iframe)).append("\n");
    sb.append("    player: ").append(toIndentedString(player)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hls");
    openapiFields.add("iframe");
    openapiFields.add("player");
    openapiFields.add("thumbnail");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LiveStreamAssets
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!LiveStreamAssets.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LiveStreamAssets is not found in the empty JSON string", LiveStreamAssets.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LiveStreamAssets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LiveStreamAssets` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("hls") != null && !jsonObj.get("hls").isJsonNull()) && !jsonObj.get("hls").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hls` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hls").toString()));
      }
      if ((jsonObj.get("iframe") != null && !jsonObj.get("iframe").isJsonNull()) && !jsonObj.get("iframe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iframe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iframe").toString()));
      }
      if ((jsonObj.get("player") != null && !jsonObj.get("player").isJsonNull()) && !jsonObj.get("player").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `player` to be a primitive type in the JSON string but got `%s`", jsonObj.get("player").toString()));
      }
      if ((jsonObj.get("thumbnail") != null && !jsonObj.get("thumbnail").isJsonNull()) && !jsonObj.get("thumbnail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnail").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LiveStreamAssets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LiveStreamAssets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LiveStreamAssets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LiveStreamAssets.class));

       return (TypeAdapter<T>) new TypeAdapter<LiveStreamAssets>() {
           @Override
           public void write(JsonWriter out, LiveStreamAssets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LiveStreamAssets read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LiveStreamAssets given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LiveStreamAssets
  * @throws IOException if the JSON string is invalid with respect to LiveStreamAssets
  */
  public static LiveStreamAssets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LiveStreamAssets.class);
  }

 /**
  * Convert an instance of LiveStreamAssets to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

