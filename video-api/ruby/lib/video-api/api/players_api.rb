=begin
#api.video

#api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module video-api
  class PlayersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a player
    # Delete a player if you no longer need it. You can delete any player that you have the player ID for.
    # @param player_id [String] The unique identifier for the player you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def d_elete_players_player_id(player_id, opts = {})
      d_elete_players_player_id_with_http_info(player_id, opts)
      nil
    end

    # Delete a player
    # Delete a player if you no longer need it. You can delete any player that you have the player ID for.
    # @param player_id [String] The unique identifier for the player you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def d_elete_players_player_id_with_http_info(player_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.d_elete_players_player_id ...'
      end
      # verify the required parameter 'player_id' is set
      if @api_client.config.client_side_validation && player_id.nil?
        fail ArgumentError, "Missing the required parameter 'player_id' when calling PlayersApi.d_elete_players_player_id"
      end
      # resource path
      local_var_path = '/players/{playerId}'.sub('{' + 'playerId' + '}', CGI.escape(player_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PlayersApi.d_elete_players_player_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#d_elete_players_player_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete logo
    # @param player_id [String] The unique identifier for the player.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def d_elete_players_player_id_logo(player_id, opts = {})
      data, _status_code, _headers = d_elete_players_player_id_logo_with_http_info(player_id, opts)
      data
    end

    # Delete logo
    # @param player_id [String] The unique identifier for the player.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def d_elete_players_player_id_logo_with_http_info(player_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.d_elete_players_player_id_logo ...'
      end
      # verify the required parameter 'player_id' is set
      if @api_client.config.client_side_validation && player_id.nil?
        fail ArgumentError, "Missing the required parameter 'player_id' when calling PlayersApi.d_elete_players_player_id_logo"
      end
      # resource path
      local_var_path = '/players/{playerId}/logo'.sub('{' + 'playerId' + '}', CGI.escape(player_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PlayersApi.d_elete_players_player_id_logo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#d_elete_players_player_id_logo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all players
    # Retrieve a list of all the players you created, as well as details about each one. Tutorials that use the [player endpoint](https://api.video/blog/endpoints/player).
    # @param [Hash] opts the parameters
    # @option opts [String] :sort_by createdAt is the time the player was created. updatedAt is the time the player was last updated. The time is presented in ISO-8601 format.
    # @option opts [String] :sort_order Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones.
    # @option opts [Integer] :current_page Choose the number of search results to return per page. Minimum value: 1 (default to 1)
    # @option opts [Integer] :page_size Results per page. Allowed values 1-100, default is 25. (default to 25)
    # @return [PlayersListResponse]
    def g_et_players(opts = {})
      data, _status_code, _headers = g_et_players_with_http_info(opts)
      data
    end

    # List all players
    # Retrieve a list of all the players you created, as well as details about each one. Tutorials that use the [player endpoint](https://api.video/blog/endpoints/player).
    # @param [Hash] opts the parameters
    # @option opts [String] :sort_by createdAt is the time the player was created. updatedAt is the time the player was last updated. The time is presented in ISO-8601 format.
    # @option opts [String] :sort_order Allowed: asc, desc. Ascending for date and time means that earlier values precede later ones. Descending means that later values preced earlier ones.
    # @option opts [Integer] :current_page Choose the number of search results to return per page. Minimum value: 1 (default to 1)
    # @option opts [Integer] :page_size Results per page. Allowed values 1-100, default is 25. (default to 25)
    # @return [Array<(PlayersListResponse, Integer, Hash)>] PlayersListResponse data, response status code and response headers
    def g_et_players_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.g_et_players ...'
      end
      # unbox the parameters from the hash
      allowable_values = ["createdAt", "updatedAt"]
      if @api_client.config.client_side_validation && opts[:'sort_by'] && !allowable_values.include?(opts[:'sort_by'])
        fail ArgumentError, "invalid value for \"sort_by\", must be one of #{allowable_values}"
      end
      allowable_values = ["asc", "desc"]
      if @api_client.config.client_side_validation && opts[:'sort_order'] && !allowable_values.include?(opts[:'sort_order'])
        fail ArgumentError, "invalid value for \"sort_order\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/players'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'currentPage'] = opts[:'current_page'] if !opts[:'current_page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PlayersListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PlayersApi.g_et_players",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#g_et_players\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a player
    # Use a player ID to retrieve details about the player and display it for viewers.
    # @param player_id [String] The unique identifier for the player you want to retrieve. 
    # @param [Hash] opts the optional parameters
    # @return [Player]
    def g_et_players_player_id(player_id, opts = {})
      data, _status_code, _headers = g_et_players_player_id_with_http_info(player_id, opts)
      data
    end

    # Show a player
    # Use a player ID to retrieve details about the player and display it for viewers.
    # @param player_id [String] The unique identifier for the player you want to retrieve. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Player, Integer, Hash)>] Player data, response status code and response headers
    def g_et_players_player_id_with_http_info(player_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.g_et_players_player_id ...'
      end
      # verify the required parameter 'player_id' is set
      if @api_client.config.client_side_validation && player_id.nil?
        fail ArgumentError, "Missing the required parameter 'player_id' when calling PlayersApi.g_et_players_player_id"
      end
      # resource path
      local_var_path = '/players/{playerId}'.sub('{' + 'playerId' + '}', CGI.escape(player_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Player'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PlayersApi.g_et_players_player_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#g_et_players_player_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a player
    # Use a player ID to update specific details for a player. NOTE: It may take up to 10 min before the new player configuration is available from our CDN.
    # @param player_id [String] The unique identifier for the player.
    # @param player_update_payload [PlayerUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [Player]
    def p_atch_players_player_id(player_id, player_update_payload, opts = {})
      data, _status_code, _headers = p_atch_players_player_id_with_http_info(player_id, player_update_payload, opts)
      data
    end

    # Update a player
    # Use a player ID to update specific details for a player. NOTE: It may take up to 10 min before the new player configuration is available from our CDN.
    # @param player_id [String] The unique identifier for the player.
    # @param player_update_payload [PlayerUpdatePayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Player, Integer, Hash)>] Player data, response status code and response headers
    def p_atch_players_player_id_with_http_info(player_id, player_update_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.p_atch_players_player_id ...'
      end
      # verify the required parameter 'player_id' is set
      if @api_client.config.client_side_validation && player_id.nil?
        fail ArgumentError, "Missing the required parameter 'player_id' when calling PlayersApi.p_atch_players_player_id"
      end
      # verify the required parameter 'player_update_payload' is set
      if @api_client.config.client_side_validation && player_update_payload.nil?
        fail ArgumentError, "Missing the required parameter 'player_update_payload' when calling PlayersApi.p_atch_players_player_id"
      end
      # resource path
      local_var_path = '/players/{playerId}'.sub('{' + 'playerId' + '}', CGI.escape(player_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(player_update_payload)

      # return_type
      return_type = opts[:debug_return_type] || 'Player'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PlayersApi.p_atch_players_player_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#p_atch_players_player_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a player
    # Create a player for your video, and customise it.
    # @param player_creation_payload [PlayerCreationPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Player]
    def p_ost_players(player_creation_payload, opts = {})
      data, _status_code, _headers = p_ost_players_with_http_info(player_creation_payload, opts)
      data
    end

    # Create a player
    # Create a player for your video, and customise it.
    # @param player_creation_payload [PlayerCreationPayload] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Player, Integer, Hash)>] Player data, response status code and response headers
    def p_ost_players_with_http_info(player_creation_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.p_ost_players ...'
      end
      # verify the required parameter 'player_creation_payload' is set
      if @api_client.config.client_side_validation && player_creation_payload.nil?
        fail ArgumentError, "Missing the required parameter 'player_creation_payload' when calling PlayersApi.p_ost_players"
      end
      # resource path
      local_var_path = '/players'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(player_creation_payload)

      # return_type
      return_type = opts[:debug_return_type] || 'Player'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PlayersApi.p_ost_players",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#p_ost_players\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a logo
    # The uploaded image maximum size should be 200x100 and its weight should be 200KB.  It will be scaled down to 30px height and converted to PNG to be displayed in the player.
    # @param player_id [String] The unique identifier for the player.
    # @param file [File] The name of the file you want to use for your logo.
    # @param link [String] The path to the file you want to upload and use as a logo.
    # @param [Hash] opts the optional parameters
    # @return [Player]
    def p_ost_players_player_id_logo(player_id, file, link, opts = {})
      data, _status_code, _headers = p_ost_players_player_id_logo_with_http_info(player_id, file, link, opts)
      data
    end

    # Upload a logo
    # The uploaded image maximum size should be 200x100 and its weight should be 200KB.  It will be scaled down to 30px height and converted to PNG to be displayed in the player.
    # @param player_id [String] The unique identifier for the player.
    # @param file [File] The name of the file you want to use for your logo.
    # @param link [String] The path to the file you want to upload and use as a logo.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Player, Integer, Hash)>] Player data, response status code and response headers
    def p_ost_players_player_id_logo_with_http_info(player_id, file, link, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PlayersApi.p_ost_players_player_id_logo ...'
      end
      # verify the required parameter 'player_id' is set
      if @api_client.config.client_side_validation && player_id.nil?
        fail ArgumentError, "Missing the required parameter 'player_id' when calling PlayersApi.p_ost_players_player_id_logo"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling PlayersApi.p_ost_players_player_id_logo"
      end
      # verify the required parameter 'link' is set
      if @api_client.config.client_side_validation && link.nil?
        fail ArgumentError, "Missing the required parameter 'link' when calling PlayersApi.p_ost_players_player_id_logo"
      end
      # resource path
      local_var_path = '/players/{playerId}/logo'.sub('{' + 'playerId' + '}', CGI.escape(player_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file
      form_params['link'] = link

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Player'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"PlayersApi.p_ost_players_player_id_logo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PlayersApi#p_ost_players_player_id_logo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
