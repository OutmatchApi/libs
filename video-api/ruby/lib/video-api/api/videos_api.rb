=begin
#api.video

#api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

The version of the OpenAPI document: 1.0.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.2.1

=end

require 'cgi'

module video-api
  class VideosApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete a video
    # If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. Tutorials using [video deletion](https://api.video/blog/endpoints/video-delete).
    # @param video_id [String] The video ID for the video you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def d_elete_video(video_id, opts = {})
      d_elete_video_with_http_info(video_id, opts)
      nil
    end

    # Delete a video
    # If you do not need a video any longer, you can send a request to delete it. All you need is the videoId. Tutorials using [video deletion](https://api.video/blog/endpoints/video-delete).
    # @param video_id [String] The video ID for the video you want to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def d_elete_video_with_http_info(video_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideosApi.d_elete_video ...'
      end
      # verify the required parameter 'video_id' is set
      if @api_client.config.client_side_validation && video_id.nil?
        fail ArgumentError, "Missing the required parameter 'video_id' when calling VideosApi.d_elete_video"
      end
      # resource path
      local_var_path = '/videos/{videoId}'.sub('{' + 'videoId' + '}', CGI.escape(video_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"VideosApi.d_elete_video",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#d_elete_video\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show a video
    # This call provides the same JSON information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL. Tutorials using [video GET](https://api.video/blog/endpoints/video-get).
    # @param video_id [String] The unique identifier for the video you want details about.
    # @param [Hash] opts the optional parameters
    # @return [Video]
    def g_et_video(video_id, opts = {})
      data, _status_code, _headers = g_et_video_with_http_info(video_id, opts)
      data
    end

    # Show a video
    # This call provides the same JSON information provided on video creation. For private videos, it will generate a unique token url. Use this to retrieve any details you need about a video, or set up a private viewing URL. Tutorials using [video GET](https://api.video/blog/endpoints/video-get).
    # @param video_id [String] The unique identifier for the video you want details about.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Video, Integer, Hash)>] Video data, response status code and response headers
    def g_et_video_with_http_info(video_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideosApi.g_et_video ...'
      end
      # verify the required parameter 'video_id' is set
      if @api_client.config.client_side_validation && video_id.nil?
        fail ArgumentError, "Missing the required parameter 'video_id' when calling VideosApi.g_et_video"
      end
      # resource path
      local_var_path = '/videos/{videoId}'.sub('{' + 'videoId' + '}', CGI.escape(video_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Video'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"VideosApi.g_et_video",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#g_et_video\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Show video status
    # This API provides upload status & encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities. Tutorials using [video status](https://api.video/blog/endpoints/video-status).
    # @param video_id [String] The unique identifier for the video you want the status for.
    # @param [Hash] opts the optional parameters
    # @return [Videostatus]
    def g_et_video_status(video_id, opts = {})
      data, _status_code, _headers = g_et_video_status_with_http_info(video_id, opts)
      data
    end

    # Show video status
    # This API provides upload status &amp; encoding status to determine when the video is uploaded or ready to playback. Once encoding is completed, the response also lists the available stream qualities. Tutorials using [video status](https://api.video/blog/endpoints/video-status).
    # @param video_id [String] The unique identifier for the video you want the status for.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Videostatus, Integer, Hash)>] Videostatus data, response status code and response headers
    def g_et_video_status_with_http_info(video_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideosApi.g_et_video_status ...'
      end
      # verify the required parameter 'video_id' is set
      if @api_client.config.client_side_validation && video_id.nil?
        fail ArgumentError, "Missing the required parameter 'video_id' when calling VideosApi.g_et_video_status"
      end
      # resource path
      local_var_path = '/videos/{videoId}/status'.sub('{' + 'videoId' + '}', CGI.escape(video_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Videostatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"VideosApi.g_et_video_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#g_et_video_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List all videos
    # Requests to this endpoint return a list of your videos (with all their details). With no parameters added to this query, the API returns all videos. You can filter what videos the API returns using the parameters described below.  We have [several tutorials](https://api.video/blog/endpoints/video-list) that demonstrate this endpoint.
    # @param [Hash] opts the parameters
    # @option opts [String] :title The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles.
    # @option opts [Array<String>] :tags A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned.
    # @option opts [Array<String>] :metadata Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.
    # @option opts [String] :description If you described a video with a term or sentence, you can add it here to return videos containing this string.
    # @option opts [String] :live_stream_id If you know the ID for a live stream, you can retrieve the stream by adding the ID for it here.
    # @option opts [String] :sort_by Allowed: publishedAt, title. You can search by the time videos were published at, or by title.
    # @option opts [String] :sort_order Allowed: asc, desc. asc is ascending and sorts from A to Z. desc is descending and sorts from Z to A.
    # @option opts [Integer] :current_page Choose the number of search results to return per page. Minimum value: 1 (default to 1)
    # @option opts [Integer] :page_size Results per page. Allowed values 1-100, default is 25. (default to 25)
    # @return [VideosListResponse]
    def l_ist_videos(opts = {})
      data, _status_code, _headers = l_ist_videos_with_http_info(opts)
      data
    end

    # List all videos
    # Requests to this endpoint return a list of your videos (with all their details). With no parameters added to this query, the API returns all videos. You can filter what videos the API returns using the parameters described below.  We have [several tutorials](https://api.video/blog/endpoints/video-list) that demonstrate this endpoint.
    # @param [Hash] opts the parameters
    # @option opts [String] :title The title of a specific video you want to find. The search will match exactly to what term you provide and return any videos that contain the same term as part of their titles.
    # @option opts [Array<String>] :tags A tag is a category you create and apply to videos. You can search for videos with particular tags by listing one or more here. Only videos that have all the tags you list will be returned.
    # @option opts [Array<String>] :metadata Videos can be tagged with metadata tags in key:value pairs. You can search for videos with specific key value pairs using this parameter. [Dynamic Metadata](https://api.video/blog/endpoints/dynamic-metadata) allows you to define a key that allows any value pair.
    # @option opts [String] :description If you described a video with a term or sentence, you can add it here to return videos containing this string.
    # @option opts [String] :live_stream_id If you know the ID for a live stream, you can retrieve the stream by adding the ID for it here.
    # @option opts [String] :sort_by Allowed: publishedAt, title. You can search by the time videos were published at, or by title.
    # @option opts [String] :sort_order Allowed: asc, desc. asc is ascending and sorts from A to Z. desc is descending and sorts from Z to A.
    # @option opts [Integer] :current_page Choose the number of search results to return per page. Minimum value: 1 (default to 1)
    # @option opts [Integer] :page_size Results per page. Allowed values 1-100, default is 25. (default to 25)
    # @return [Array<(VideosListResponse, Integer, Hash)>] VideosListResponse data, response status code and response headers
    def l_ist_videos_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideosApi.l_ist_videos ...'
      end
      # unbox the parameters from the hash
      # resource path
      local_var_path = '/videos'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'title'] = opts[:'title'] if !opts[:'title'].nil?
      query_params[:'tags'] = @api_client.build_collection_param(opts[:'tags'], :multi) if !opts[:'tags'].nil?
      query_params[:'metadata'] = @api_client.build_collection_param(opts[:'metadata'], :multi) if !opts[:'metadata'].nil?
      query_params[:'description'] = opts[:'description'] if !opts[:'description'].nil?
      query_params[:'liveStreamId'] = opts[:'live_stream_id'] if !opts[:'live_stream_id'].nil?
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'sortOrder'] = opts[:'sort_order'] if !opts[:'sort_order'].nil?
      query_params[:'currentPage'] = opts[:'current_page'] if !opts[:'current_page'].nil?
      query_params[:'pageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'VideosListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"VideosApi.l_ist_videos",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#l_ist_videos\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a video
    # Use this endpoint to update the parameters associated with your video. The video you are updating is determined by the video ID you provide in the path. For each parameter you want to update, include the update in the request body. NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it. Tutorials using [video update](https://api.video/blog/endpoints/video-update).
    # @param video_id [String] The video ID for the video you want to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [VideoUpdatePayload] :video_update_payload 
    # @return [Video]
    def p_atch_video(video_id, opts = {})
      data, _status_code, _headers = p_atch_video_with_http_info(video_id, opts)
      data
    end

    # Update a video
    # Use this endpoint to update the parameters associated with your video. The video you are updating is determined by the video ID you provide in the path. For each parameter you want to update, include the update in the request body. NOTE: If you are updating an array, you must provide the entire array as what you provide here overwrites what is in the system rather than appending to it. Tutorials using [video update](https://api.video/blog/endpoints/video-update).
    # @param video_id [String] The video ID for the video you want to delete.
    # @param [Hash] opts the optional parameters
    # @option opts [VideoUpdatePayload] :video_update_payload 
    # @return [Array<(Video, Integer, Hash)>] Video data, response status code and response headers
    def p_atch_video_with_http_info(video_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideosApi.p_atch_video ...'
      end
      # verify the required parameter 'video_id' is set
      if @api_client.config.client_side_validation && video_id.nil?
        fail ArgumentError, "Missing the required parameter 'video_id' when calling VideosApi.p_atch_video"
      end
      # resource path
      local_var_path = '/videos/{videoId}'.sub('{' + 'videoId' + '}', CGI.escape(video_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'video_update_payload'])

      # return_type
      return_type = opts[:debug_return_type] || 'Video'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"VideosApi.p_atch_video",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#p_atch_video\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Pick a thumbnail
    # Pick a thumbnail from the given time code. If you'd like to upload an image for your thumbnail, use the [Upload a Thumbnail](https://docs.api.video/reference#post_videos-videoid-thumbnail) endpoint. There may be a short delay for the thumbnail to update. Tutorials using [Thumbnail picking](https://api.video/blog/endpoints/video-pick-a-thumbnail).
    # @param video_id [String] Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.
    # @param [Hash] opts the optional parameters
    # @option opts [VideoThumbnailPickPayload] :video_thumbnail_pick_payload 
    # @return [Video]
    def p_atch_videos_video_id_thumbnail(video_id, opts = {})
      data, _status_code, _headers = p_atch_videos_video_id_thumbnail_with_http_info(video_id, opts)
      data
    end

    # Pick a thumbnail
    # Pick a thumbnail from the given time code. If you&#39;d like to upload an image for your thumbnail, use the [Upload a Thumbnail](https://docs.api.video/reference#post_videos-videoid-thumbnail) endpoint. There may be a short delay for the thumbnail to update. Tutorials using [Thumbnail picking](https://api.video/blog/endpoints/video-pick-a-thumbnail).
    # @param video_id [String] Unique identifier of the video you want to add a thumbnail to, where you use a section of your video as the thumbnail.
    # @param [Hash] opts the optional parameters
    # @option opts [VideoThumbnailPickPayload] :video_thumbnail_pick_payload 
    # @return [Array<(Video, Integer, Hash)>] Video data, response status code and response headers
    def p_atch_videos_video_id_thumbnail_with_http_info(video_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideosApi.p_atch_videos_video_id_thumbnail ...'
      end
      # verify the required parameter 'video_id' is set
      if @api_client.config.client_side_validation && video_id.nil?
        fail ArgumentError, "Missing the required parameter 'video_id' when calling VideosApi.p_atch_videos_video_id_thumbnail"
      end
      # resource path
      local_var_path = '/videos/{videoId}/thumbnail'.sub('{' + 'videoId' + '}', CGI.escape(video_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'video_thumbnail_pick_payload'])

      # return_type
      return_type = opts[:debug_return_type] || 'Video'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"VideosApi.p_atch_videos_video_id_thumbnail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#p_atch_videos_video_id_thumbnail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a video
    # To create a video, you create its container&parameters first, before adding the video file (exception - when using an existing HTTP source). * Videos are public by default. [Learn about Private videos](https://api.video/blog/tutorials/tutorial-private-videos) * Up to 6 responsive video streams will be created (from 240p to 4k) * Mp4 encoded versions are created at the highest quality (max 1080p) by default. * Panoramic videos are for videos recorded in 360 degrees.  You can toggle this after your 360 video upload. * Searchable parameters: title, description, tags and metadata   ```shell $ curl https://ws.api.video/videos \\ -H 'Authorization: Bearer {access_token} \\ -d '{\"title\":\"My video\",       \"description\":\"so many details\",      \"mp4Support\":true }' ```    ## add an URL to upload on creation You can also create a video directly from a video hosted on a third-party server by giving its URI in `source` parameter: ```shell $ curl https://ws.api.video/videos \\ -H 'Authorization: Bearer {access_token} \\ -d '{\"source\":\"http://uri/to/video.mp4\", \"title\":\"My video\"}' ```  In this case, the service will respond `202 Accepted` and ingest the video asynchronously. ## Track users with Dynamic Metadata Metadata values can be a key:value where the values are predefined, but Dynamic metadata allows you to enter *any* value for a defined key.  To defined a dynamic metadata pair use: ``` \"metadata\":[{\"dynamicKey\": \"__dynamicKey__\"}] ```  The double underscore on both sides of the value allows any variable to be added for a given video session. Added the the url you might have: ``` <iframe type=\"text/html\" src=\"https://embed.api.video/vod/vi6QvU9dhYCzW3BpPvPsZUa8?metadata[classUserName]=Doug\" width=\"960\" height=\"320\" frameborder=\"0\" scrollling=\"no\"></iframe> ```   This video session will be tagged as watched by Doug - allowing for in-depth analysis on how each viewer interacts with the videos. ### We have tutorials on: * [Creating and uploading videos](https://api.video/blog/tutorials/video-upload-tutorial) * [Uploading large videos](https://api.video/blog/tutorials/video-upload-tutorial-large-videos)   * [Using tags with videos](https://api.video/blog/tutorials/video-tagging-best-practices) * [Private videos](https://api.video/blog/tutorials/tutorial-private-videos) * [Using Dynamic Metadata](https://api.video/blog/tutorials/dynamic-metadata)  * Full list of [tutorials](https://api.video/blog/endpoints/video-create) that demonstrate this endpoint. 
    # @param [Hash] opts the optional parameters
    # @option opts [VideoCreatePayload] :video_create_payload video to create
    # @return [Video]
    def p_ost_video(opts = {})
      data, _status_code, _headers = p_ost_video_with_http_info(opts)
      data
    end

    # Create a video
    # To create a video, you create its container&amp;parameters first, before adding the video file (exception - when using an existing HTTP source). * Videos are public by default. [Learn about Private videos](https://api.video/blog/tutorials/tutorial-private-videos) * Up to 6 responsive video streams will be created (from 240p to 4k) * Mp4 encoded versions are created at the highest quality (max 1080p) by default. * Panoramic videos are for videos recorded in 360 degrees.  You can toggle this after your 360 video upload. * Searchable parameters: title, description, tags and metadata   &#x60;&#x60;&#x60;shell $ curl https://ws.api.video/videos \\ -H &#39;Authorization: Bearer {access_token} \\ -d &#39;{\&quot;title\&quot;:\&quot;My video\&quot;,       \&quot;description\&quot;:\&quot;so many details\&quot;,      \&quot;mp4Support\&quot;:true }&#39; &#x60;&#x60;&#x60;    ## add an URL to upload on creation You can also create a video directly from a video hosted on a third-party server by giving its URI in &#x60;source&#x60; parameter: &#x60;&#x60;&#x60;shell $ curl https://ws.api.video/videos \\ -H &#39;Authorization: Bearer {access_token} \\ -d &#39;{\&quot;source\&quot;:\&quot;http://uri/to/video.mp4\&quot;, \&quot;title\&quot;:\&quot;My video\&quot;}&#39; &#x60;&#x60;&#x60;  In this case, the service will respond &#x60;202 Accepted&#x60; and ingest the video asynchronously. ## Track users with Dynamic Metadata Metadata values can be a key:value where the values are predefined, but Dynamic metadata allows you to enter *any* value for a defined key.  To defined a dynamic metadata pair use: &#x60;&#x60;&#x60; \&quot;metadata\&quot;:[{\&quot;dynamicKey\&quot;: \&quot;__dynamicKey__\&quot;}] &#x60;&#x60;&#x60;  The double underscore on both sides of the value allows any variable to be added for a given video session. Added the the url you might have: &#x60;&#x60;&#x60; &lt;iframe type&#x3D;\&quot;text/html\&quot; src&#x3D;\&quot;https://embed.api.video/vod/vi6QvU9dhYCzW3BpPvPsZUa8?metadata[classUserName]&#x3D;Doug\&quot; width&#x3D;\&quot;960\&quot; height&#x3D;\&quot;320\&quot; frameborder&#x3D;\&quot;0\&quot; scrollling&#x3D;\&quot;no\&quot;&gt;&lt;/iframe&gt; &#x60;&#x60;&#x60;   This video session will be tagged as watched by Doug - allowing for in-depth analysis on how each viewer interacts with the videos. ### We have tutorials on: * [Creating and uploading videos](https://api.video/blog/tutorials/video-upload-tutorial) * [Uploading large videos](https://api.video/blog/tutorials/video-upload-tutorial-large-videos)   * [Using tags with videos](https://api.video/blog/tutorials/video-tagging-best-practices) * [Private videos](https://api.video/blog/tutorials/tutorial-private-videos) * [Using Dynamic Metadata](https://api.video/blog/tutorials/dynamic-metadata)  * Full list of [tutorials](https://api.video/blog/endpoints/video-create) that demonstrate this endpoint. 
    # @param [Hash] opts the optional parameters
    # @option opts [VideoCreatePayload] :video_create_payload video to create
    # @return [Array<(Video, Integer, Hash)>] Video data, response status code and response headers
    def p_ost_video_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideosApi.p_ost_video ...'
      end
      # resource path
      local_var_path = '/videos'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'video_create_payload'])

      # return_type
      return_type = opts[:debug_return_type] || 'Video'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"VideosApi.p_ost_video",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#p_ost_video\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a video
    # To upload a video to the videoId you created. Replace {videoId} with the id you'd like to use, {access_token} with your token, and /path/to/video.mp4 with the path to the video you'd like to upload. You can only upload your video to the videoId once. ```bash curl https://ws.api.video/videos/{videoId}/source \\   -H 'Authorization: Bearer {access_token}' \\   -F file=@/path/to/video.mp4    ``` Tutorials using [video upload](https://api.video/blog/endpoints/video-upload).
    # @param video_id [String] Enter the videoId you want to use to upload your video.
    # @param file [File] The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_range Content-Range represents the range of bytes that will be returned as a result of the request. Byte ranges are inclusive, meaning that bytes 0-999 represents the first 1000 bytes in a file or object.
    # @return [Video]
    def p_ost_videos_video_id_source(video_id, file, opts = {})
      data, _status_code, _headers = p_ost_videos_video_id_source_with_http_info(video_id, file, opts)
      data
    end

    # Upload a video
    # To upload a video to the videoId you created. Replace {videoId} with the id you&#39;d like to use, {access_token} with your token, and /path/to/video.mp4 with the path to the video you&#39;d like to upload. You can only upload your video to the videoId once. &#x60;&#x60;&#x60;bash curl https://ws.api.video/videos/{videoId}/source \\   -H &#39;Authorization: Bearer {access_token}&#39; \\   -F file&#x3D;@/path/to/video.mp4    &#x60;&#x60;&#x60; Tutorials using [video upload](https://api.video/blog/endpoints/video-upload).
    # @param video_id [String] Enter the videoId you want to use to upload your video.
    # @param file [File] The path to the video you would like to upload. The path must be local. If you want to use a video from an online source, you must use the \\\&quot;/videos\\\&quot; endpoint and add the \\\&quot;source\\\&quot; parameter when you create a new video.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :content_range Content-Range represents the range of bytes that will be returned as a result of the request. Byte ranges are inclusive, meaning that bytes 0-999 represents the first 1000 bytes in a file or object.
    # @return [Array<(Video, Integer, Hash)>] Video data, response status code and response headers
    def p_ost_videos_video_id_source_with_http_info(video_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideosApi.p_ost_videos_video_id_source ...'
      end
      # verify the required parameter 'video_id' is set
      if @api_client.config.client_side_validation && video_id.nil?
        fail ArgumentError, "Missing the required parameter 'video_id' when calling VideosApi.p_ost_videos_video_id_source"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling VideosApi.p_ost_videos_video_id_source"
      end
      pattern = Regexp.new(/^bytes [0-9]*-[0-9]*\\/[0-9]*$/)
      if @api_client.config.client_side_validation && !opts[:'content_range'].nil? && opts[:'content_range'] !~ pattern
        fail ArgumentError, "invalid value for 'opts[:\"content_range\"]' when calling VideosApi.p_ost_videos_video_id_source, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/videos/{videoId}/source'.sub('{' + 'videoId' + '}', CGI.escape(video_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Content-Range'] = opts[:'content_range'] if !opts[:'content_range'].nil?

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Video'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"VideosApi.p_ost_videos_video_id_source",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#p_ost_videos_video_id_source\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Upload a thumbnail
    # The thumbnail is the poster that appears in the player window before video playback begins. This endpoint allows you to upload an image for the thumbnail. To select a still frame from the video using a time stamp, use [Pick a Thumbnail](https://docs.api.video/reference#patch_videos-videoid-thumbnail) to pick a time in the video.  Note: There may be a short delay before the new thumbnail is delivered to our CDN. Tutorials using [Thumbnail upload](https://api.video/blog/endpoints/videos-upload-a-thumbnail).
    # @param video_id [String] Unique identifier of the chosen video 
    # @param file [File] The image to be added as a thumbnail.
    # @param [Hash] opts the optional parameters
    # @return [Video]
    def p_ost_videos_video_id_thumbnail(video_id, file, opts = {})
      data, _status_code, _headers = p_ost_videos_video_id_thumbnail_with_http_info(video_id, file, opts)
      data
    end

    # Upload a thumbnail
    # The thumbnail is the poster that appears in the player window before video playback begins. This endpoint allows you to upload an image for the thumbnail. To select a still frame from the video using a time stamp, use [Pick a Thumbnail](https://docs.api.video/reference#patch_videos-videoid-thumbnail) to pick a time in the video.  Note: There may be a short delay before the new thumbnail is delivered to our CDN. Tutorials using [Thumbnail upload](https://api.video/blog/endpoints/videos-upload-a-thumbnail).
    # @param video_id [String] Unique identifier of the chosen video 
    # @param file [File] The image to be added as a thumbnail.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Video, Integer, Hash)>] Video data, response status code and response headers
    def p_ost_videos_video_id_thumbnail_with_http_info(video_id, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideosApi.p_ost_videos_video_id_thumbnail ...'
      end
      # verify the required parameter 'video_id' is set
      if @api_client.config.client_side_validation && video_id.nil?
        fail ArgumentError, "Missing the required parameter 'video_id' when calling VideosApi.p_ost_videos_video_id_thumbnail"
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling VideosApi.p_ost_videos_video_id_thumbnail"
      end
      # resource path
      local_var_path = '/videos/{videoId}/thumbnail'.sub('{' + 'videoId' + '}', CGI.escape(video_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = file

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Video'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"VideosApi.p_ost_videos_video_id_thumbnail",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideosApi#p_ost_videos_video_id_thumbnail\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
