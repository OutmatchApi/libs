/*
api.video

api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package video-api

import (
	"encoding/json"
	"time"
)

// VideoSessionSession struct for VideoSessionSession
type VideoSessionSession struct {
	// When the video session ended, presented in ISO-8601 format.
	EndedAt *time.Time `json:"endedAt,omitempty"`
	// When the video session started, presented in ISO-8601 format.
	LoadedAt *time.Time `json:"loadedAt,omitempty"`
	// The unique identifier for the session that you can use to track what happens during it.
	SessionId *string `json:"sessionId,omitempty"`
}

// NewVideoSessionSession instantiates a new VideoSessionSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoSessionSession() *VideoSessionSession {
	this := VideoSessionSession{}
	return &this
}

// NewVideoSessionSessionWithDefaults instantiates a new VideoSessionSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoSessionSessionWithDefaults() *VideoSessionSession {
	this := VideoSessionSession{}
	return &this
}

// GetEndedAt returns the EndedAt field value if set, zero value otherwise.
func (o *VideoSessionSession) GetEndedAt() time.Time {
	if o == nil || isNil(o.EndedAt) {
		var ret time.Time
		return ret
	}
	return *o.EndedAt
}

// GetEndedAtOk returns a tuple with the EndedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSessionSession) GetEndedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.EndedAt) {
    return nil, false
	}
	return o.EndedAt, true
}

// HasEndedAt returns a boolean if a field has been set.
func (o *VideoSessionSession) HasEndedAt() bool {
	if o != nil && !isNil(o.EndedAt) {
		return true
	}

	return false
}

// SetEndedAt gets a reference to the given time.Time and assigns it to the EndedAt field.
func (o *VideoSessionSession) SetEndedAt(v time.Time) {
	o.EndedAt = &v
}

// GetLoadedAt returns the LoadedAt field value if set, zero value otherwise.
func (o *VideoSessionSession) GetLoadedAt() time.Time {
	if o == nil || isNil(o.LoadedAt) {
		var ret time.Time
		return ret
	}
	return *o.LoadedAt
}

// GetLoadedAtOk returns a tuple with the LoadedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSessionSession) GetLoadedAtOk() (*time.Time, bool) {
	if o == nil || isNil(o.LoadedAt) {
    return nil, false
	}
	return o.LoadedAt, true
}

// HasLoadedAt returns a boolean if a field has been set.
func (o *VideoSessionSession) HasLoadedAt() bool {
	if o != nil && !isNil(o.LoadedAt) {
		return true
	}

	return false
}

// SetLoadedAt gets a reference to the given time.Time and assigns it to the LoadedAt field.
func (o *VideoSessionSession) SetLoadedAt(v time.Time) {
	o.LoadedAt = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *VideoSessionSession) GetSessionId() string {
	if o == nil || isNil(o.SessionId) {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoSessionSession) GetSessionIdOk() (*string, bool) {
	if o == nil || isNil(o.SessionId) {
    return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *VideoSessionSession) HasSessionId() bool {
	if o != nil && !isNil(o.SessionId) {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *VideoSessionSession) SetSessionId(v string) {
	o.SessionId = &v
}

func (o VideoSessionSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EndedAt) {
		toSerialize["endedAt"] = o.EndedAt
	}
	if !isNil(o.LoadedAt) {
		toSerialize["loadedAt"] = o.LoadedAt
	}
	if !isNil(o.SessionId) {
		toSerialize["sessionId"] = o.SessionId
	}
	return json.Marshal(toSerialize)
}

type NullableVideoSessionSession struct {
	value *VideoSessionSession
	isSet bool
}

func (v NullableVideoSessionSession) Get() *VideoSessionSession {
	return v.value
}

func (v *NullableVideoSessionSession) Set(val *VideoSessionSession) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoSessionSession) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoSessionSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoSessionSession(val *VideoSessionSession) *NullableVideoSessionSession {
	return &NullableVideoSessionSession{value: val, isSet: true}
}

func (v NullableVideoSessionSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoSessionSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


