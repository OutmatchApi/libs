/*
api.video

Testing PlayersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package video-api

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_video-api_PlayersApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test PlayersApiService DELETEPlayersPlayerId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var playerId string

        resp, httpRes, err := apiClient.PlayersApi.DELETEPlayersPlayerId(context.Background(), playerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PlayersApiService DELETEPlayersPlayerIdLogo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var playerId string

        resp, httpRes, err := apiClient.PlayersApi.DELETEPlayersPlayerIdLogo(context.Background(), playerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PlayersApiService GETPlayers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PlayersApi.GETPlayers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PlayersApiService GETPlayersPlayerId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var playerId string

        resp, httpRes, err := apiClient.PlayersApi.GETPlayersPlayerId(context.Background(), playerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PlayersApiService PATCHPlayersPlayerId", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var playerId string

        resp, httpRes, err := apiClient.PlayersApi.PATCHPlayersPlayerId(context.Background(), playerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PlayersApiService POSTPlayers", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.PlayersApi.POSTPlayers(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test PlayersApiService POSTPlayersPlayerIdLogo", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var playerId string

        resp, httpRes, err := apiClient.PlayersApi.POSTPlayersPlayerIdLogo(context.Background(), playerId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
