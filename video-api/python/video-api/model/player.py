# coding: utf-8

"""
    api.video

    api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.  # noqa: E501

    The version of the OpenAPI document: 1.0.1
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from video-api import schemas  # noqa: F401


class Player(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class assets(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                link = schemas.StrSchema
                                logo = schemas.StrSchema
                                __annotations__ = {
                                    "link": link,
                                    "logo": logo,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["logo"]) -> MetaOapg.properties.logo: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["link", "logo", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> typing.Union[MetaOapg.properties.logo, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["link", "logo", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
                            logo: typing.Union[MetaOapg.properties.logo, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'assets':
                            return super().__new__(
                                cls,
                                *args,
                                link=link,
                                logo=logo,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    createdAt = schemas.DateTimeSchema
                    linkActive = schemas.StrSchema
                    playerId = schemas.StrSchema
                    shapeAspect = schemas.StrSchema
                    shapeBackgroundBottom = schemas.StrSchema
                    shapeBackgroundTop = schemas.StrSchema
                    shapeMargin = schemas.IntSchema
                    shapeRadius = schemas.IntSchema
                    updatedAt = schemas.DateTimeSchema
                    __annotations__ = {
                        "assets": assets,
                        "createdAt": createdAt,
                        "linkActive": linkActive,
                        "playerId": playerId,
                        "shapeAspect": shapeAspect,
                        "shapeBackgroundBottom": shapeBackgroundBottom,
                        "shapeBackgroundTop": shapeBackgroundTop,
                        "shapeMargin": shapeMargin,
                        "shapeRadius": shapeRadius,
                        "updatedAt": updatedAt,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["assets"]) -> MetaOapg.properties.assets: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["linkActive"]) -> MetaOapg.properties.linkActive: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["playerId"]) -> MetaOapg.properties.playerId: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["shapeAspect"]) -> MetaOapg.properties.shapeAspect: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["shapeBackgroundBottom"]) -> MetaOapg.properties.shapeBackgroundBottom: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["shapeBackgroundTop"]) -> MetaOapg.properties.shapeBackgroundTop: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["shapeMargin"]) -> MetaOapg.properties.shapeMargin: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["shapeRadius"]) -> MetaOapg.properties.shapeRadius: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["updatedAt"]) -> MetaOapg.properties.updatedAt: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["assets", "createdAt", "linkActive", "playerId", "shapeAspect", "shapeBackgroundBottom", "shapeBackgroundTop", "shapeMargin", "shapeRadius", "updatedAt", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["assets"]) -> typing.Union[MetaOapg.properties.assets, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> typing.Union[MetaOapg.properties.createdAt, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["linkActive"]) -> typing.Union[MetaOapg.properties.linkActive, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["playerId"]) -> typing.Union[MetaOapg.properties.playerId, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["shapeAspect"]) -> typing.Union[MetaOapg.properties.shapeAspect, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["shapeBackgroundBottom"]) -> typing.Union[MetaOapg.properties.shapeBackgroundBottom, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["shapeBackgroundTop"]) -> typing.Union[MetaOapg.properties.shapeBackgroundTop, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["shapeMargin"]) -> typing.Union[MetaOapg.properties.shapeMargin, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["shapeRadius"]) -> typing.Union[MetaOapg.properties.shapeRadius, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["updatedAt"]) -> typing.Union[MetaOapg.properties.updatedAt, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["assets", "createdAt", "linkActive", "playerId", "shapeAspect", "shapeBackgroundBottom", "shapeBackgroundTop", "shapeMargin", "shapeRadius", "updatedAt", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                assets: typing.Union[MetaOapg.properties.assets, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                createdAt: typing.Union[MetaOapg.properties.createdAt, str, datetime, schemas.Unset] = schemas.unset,
                linkActive: typing.Union[MetaOapg.properties.linkActive, str, schemas.Unset] = schemas.unset,
                playerId: typing.Union[MetaOapg.properties.playerId, str, schemas.Unset] = schemas.unset,
                shapeAspect: typing.Union[MetaOapg.properties.shapeAspect, str, schemas.Unset] = schemas.unset,
                shapeBackgroundBottom: typing.Union[MetaOapg.properties.shapeBackgroundBottom, str, schemas.Unset] = schemas.unset,
                shapeBackgroundTop: typing.Union[MetaOapg.properties.shapeBackgroundTop, str, schemas.Unset] = schemas.unset,
                shapeMargin: typing.Union[MetaOapg.properties.shapeMargin, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                shapeRadius: typing.Union[MetaOapg.properties.shapeRadius, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                updatedAt: typing.Union[MetaOapg.properties.updatedAt, str, datetime, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    assets=assets,
                    createdAt=createdAt,
                    linkActive=linkActive,
                    playerId=playerId,
                    shapeAspect=shapeAspect,
                    shapeBackgroundBottom=shapeBackgroundBottom,
                    shapeBackgroundTop=shapeBackgroundTop,
                    shapeMargin=shapeMargin,
                    shapeRadius=shapeRadius,
                    updatedAt=updatedAt,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Playerinput,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Player':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from video-api.model.playerinput import Playerinput
