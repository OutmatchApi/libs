/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct VideostatusEncodingMetadata {
    #[serde(rename = "aspectRatio", skip_serializing_if = "Option::is_none")]
    pub aspect_ratio: Option<String>,
    /// The method used to compress and decompress digital audio for your video.
    #[serde(rename = "audioCodec", skip_serializing_if = "Option::is_none")]
    pub audio_codec: Option<String>,
    /// The number of bits processed per second.
    #[serde(rename = "bitrate", skip_serializing_if = "Option::is_none")]
    pub bitrate: Option<f32>,
    /// The length of the video.
    #[serde(rename = "duration", skip_serializing_if = "Option::is_none")]
    pub duration: Option<i32>,
    /// The frequency with which consecutive images or frames appear on a display. Shown in this API as frames per second (fps).
    #[serde(rename = "framerate", skip_serializing_if = "Option::is_none")]
    pub framerate: Option<i32>,
    /// The height of the video in pixels.
    #[serde(rename = "height", skip_serializing_if = "Option::is_none")]
    pub height: Option<i32>,
    /// How many samples per second a digital audio system uses to record an audio signal. The higher the rate, the higher the frequencies that can be recorded. They are presented in this API using hertz.
    #[serde(rename = "samplerate", skip_serializing_if = "Option::is_none")]
    pub samplerate: Option<i32>,
    /// The method used to compress and decompress digital video. API Video supports all codecs in the libavcodec library. 
    #[serde(rename = "videoCodec", skip_serializing_if = "Option::is_none")]
    pub video_codec: Option<String>,
    /// The width of the video in pixels.
    #[serde(rename = "width", skip_serializing_if = "Option::is_none")]
    pub width: Option<i32>,
}

impl VideostatusEncodingMetadata {
    pub fn new() -> VideostatusEncodingMetadata {
        VideostatusEncodingMetadata {
            aspect_ratio: None,
            audio_codec: None,
            bitrate: None,
            duration: None,
            framerate: None,
            height: None,
            samplerate: None,
            video_codec: None,
            width: None,
        }
    }
}


