/*
 * api.video
 *
 * api.video is an API that encodes on the go to facilitate immediate playback, enhancing viewer streaming experiences across multiple devices and platforms. You can stream live or on-demand online videos within minutes.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method [`d_elete_videos_video_id_captions_language`]
#[derive(Clone, Debug, Default)]
pub struct DEleteVideosVideoIdCaptionsLanguageParams {
    /// The unique identifier for the video you want to delete a caption from.
    pub video_id: String,
    /// A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
    pub language: String
}

/// struct for passing parameters to the method [`g_et_videos_video_id_captions`]
#[derive(Clone, Debug, Default)]
pub struct GEtVideosVideoIdCaptionsParams {
    /// The unique identifier for the video you want to retrieve a list of captions for.
    pub video_id: String,
    /// Choose the number of search results to return per page. Minimum value: 1
    pub current_page: Option<i32>,
    /// Results per page. Allowed values 1-100, default is 25.
    pub page_size: Option<i32>
}

/// struct for passing parameters to the method [`g_et_videos_video_id_captions_language`]
#[derive(Clone, Debug, Default)]
pub struct GEtVideosVideoIdCaptionsLanguageParams {
    /// The unique identifier for the video you want captions for.
    pub video_id: String,
    /// A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation
    pub language: String
}

/// struct for passing parameters to the method [`p_atch_videos_video_id_captions_language`]
#[derive(Clone, Debug, Default)]
pub struct PAtchVideosVideoIdCaptionsLanguageParams {
    /// The unique identifier for the video you want to have automatic captions for. 
    pub video_id: String,
    /// A valid [BCP 47](https://github.com/libyal/libfwnt/wiki/Language-Code-identifiers) language representation.
    pub language: String,
    pub captions_update_payload: Option<crate::models::CaptionsUpdatePayload>
}

/// struct for passing parameters to the method [`p_ost_videos_video_id_captions_language`]
#[derive(Clone, Debug, Default)]
pub struct POstVideosVideoIdCaptionsLanguageParams {
    /// The unique identifier for the video you want to add a caption to.
    pub video_id: String,
    /// A valid BCP 47 language representation.
    pub language: String,
    /// The video text track (VTT) you want to upload.
    pub file: std::path::PathBuf
}


/// struct for typed errors of method [`d_elete_videos_video_id_captions_language`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DEleteVideosVideoIdCaptionsLanguageError {
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_videos_video_id_captions`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtVideosVideoIdCaptionsError {
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`g_et_videos_video_id_captions_language`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GEtVideosVideoIdCaptionsLanguageError {
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_atch_videos_video_id_captions_language`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PAtchVideosVideoIdCaptionsLanguageError {
    Status400(crate::models::BadRequest),
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`p_ost_videos_video_id_captions_language`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum POstVideosVideoIdCaptionsLanguageError {
    Status400(crate::models::BadRequest),
    Status404(crate::models::NotFound),
    UnknownValue(serde_json::Value),
}


/// Delete a caption in a specific language by providing the video ID for the video you want to delete the caption from and the language the caption is in.
pub async fn d_elete_videos_video_id_captions_language(configuration: &configuration::Configuration, params: DEleteVideosVideoIdCaptionsLanguageParams) -> Result<(), Error<DEleteVideosVideoIdCaptionsLanguageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let video_id = params.video_id;
    let language = params.language;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/videos/{videoId}/captions/{language}", local_var_configuration.base_path, videoId=crate::apis::urlencode(video_id), language=crate::apis::urlencode(language));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DEleteVideosVideoIdCaptionsLanguageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of available captions for the videoId you provide.
pub async fn g_et_videos_video_id_captions(configuration: &configuration::Configuration, params: GEtVideosVideoIdCaptionsParams) -> Result<crate::models::CaptionsListResponse, Error<GEtVideosVideoIdCaptionsError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let video_id = params.video_id;
    let current_page = params.current_page;
    let page_size = params.page_size;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/videos/{videoId}/captions", local_var_configuration.base_path, videoId=crate::apis::urlencode(video_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = current_page {
        local_var_req_builder = local_var_req_builder.query(&[("currentPage", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder = local_var_req_builder.query(&[("pageSize", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtVideosVideoIdCaptionsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Display a caption for a video in a specific language. If the language is available, the caption is returned. Otherwise, you will get a response indicating the caption was not found. Tutorials that use the [captions endpoint](https://api.video/blog/endpoints/captions).
pub async fn g_et_videos_video_id_captions_language(configuration: &configuration::Configuration, params: GEtVideosVideoIdCaptionsLanguageParams) -> Result<crate::models::Subtitle, Error<GEtVideosVideoIdCaptionsLanguageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let video_id = params.video_id;
    let language = params.language;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/videos/{videoId}/captions/{language}", local_var_configuration.base_path, videoId=crate::apis::urlencode(video_id), language=crate::apis::urlencode(language));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GEtVideosVideoIdCaptionsLanguageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// To have the captions on automatically, use this PATCH to set default: true.
pub async fn p_atch_videos_video_id_captions_language(configuration: &configuration::Configuration, params: PAtchVideosVideoIdCaptionsLanguageParams) -> Result<crate::models::Subtitle, Error<PAtchVideosVideoIdCaptionsLanguageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let video_id = params.video_id;
    let language = params.language;
    let captions_update_payload = params.captions_update_payload;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/videos/{videoId}/captions/{language}", local_var_configuration.base_path, videoId=crate::apis::urlencode(video_id), language=crate::apis::urlencode(language));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&captions_update_payload);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PAtchVideosVideoIdCaptionsLanguageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Upload a VTT file to add captions to your video.  Read our [captioning tutorial](https://api.video/blog/tutorials/adding-captions) for more details.
pub async fn p_ost_videos_video_id_captions_language(configuration: &configuration::Configuration, params: POstVideosVideoIdCaptionsLanguageParams) -> Result<crate::models::Subtitle, Error<POstVideosVideoIdCaptionsLanguageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let video_id = params.video_id;
    let language = params.language;
    let file = params.file;


    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/videos/{videoId}/captions/{language}", local_var_configuration.base_path, videoId=crate::apis::urlencode(video_id), language=crate::apis::urlencode(language));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    let mut local_var_form = reqwest::multipart::Form::new();
    // TODO: support file upload for 'file' parameter
    local_var_req_builder = local_var_req_builder.multipart(local_var_form);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<POstVideosVideoIdCaptionsLanguageError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

