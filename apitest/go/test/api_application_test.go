/*
Svix API

Testing ApplicationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package apitest

import (
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"
    "testing"
    openapiclient "./openapi"
)

func Test_apitest_ApplicationApiService(t *testing.T) {

    configuration := openapiclient.NewConfiguration()
    apiClient := openapiclient.NewAPIClient(configuration)

    t.Run("Test ApplicationApiService CreateApplicationApiV1AppPost", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ApplicationApi.CreateApplicationApiV1AppPost(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationApiService DeleteApplicationApiV1AppAppIdDelete", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var appId string

        resp, httpRes, err := apiClient.ApplicationApi.DeleteApplicationApiV1AppAppIdDelete(context.Background(), appId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationApiService GetApplicationApiV1AppAppIdGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var appId string

        resp, httpRes, err := apiClient.ApplicationApi.GetApplicationApiV1AppAppIdGet(context.Background(), appId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationApiService ListApplicationsApiV1AppGet", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        resp, httpRes, err := apiClient.ApplicationApi.ListApplicationsApiV1AppGet(context.Background()).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

    t.Run("Test ApplicationApiService UpdateApplicationApiV1AppAppIdPut", func(t *testing.T) {

        t.Skip("skip test")  // remove to run test

        var appId string

        resp, httpRes, err := apiClient.ApplicationApi.UpdateApplicationApiV1AppAppIdPut(context.Background(), appId).Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)

    })

}
