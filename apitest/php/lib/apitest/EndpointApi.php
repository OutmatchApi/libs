<?php
/**
 * EndpointApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Svix API
 *
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
 *
 * The version of the OpenAPI document: 1.4.1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\apitest;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * EndpointApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EndpointApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createEndpointApiV1AppAppIdEndpointPost' => [
            'application/json',
        ],
        'deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete' => [
            'application/json',
        ],
        'getEndpointApiV1AppAppIdEndpointEndpointIdGet' => [
            'application/json',
        ],
        'getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet' => [
            'application/json',
        ],
        'getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet' => [
            'application/json',
        ],
        'getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet' => [
            'application/json',
        ],
        'listEndpointsApiV1AppAppIdEndpointGet' => [
            'application/json',
        ],
        'patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch' => [
            'application/json',
        ],
        'recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost' => [
            'application/json',
        ],
        'replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost' => [
            'application/json',
        ],
        'rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost' => [
            'application/json',
        ],
        'updateEndpointApiV1AppAppIdEndpointEndpointIdPut' => [
            'application/json',
        ],
        'updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createEndpointApiV1AppAppIdEndpointPost
     *
     * Create Endpoint
     *
     * @param  string $app_id app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointIn $endpoint_in endpoint_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEndpointApiV1AppAppIdEndpointPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EndpointOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function createEndpointApiV1AppAppIdEndpointPost($app_id, $endpoint_in, $idempotency_key = null, string $contentType = self::contentTypes['createEndpointApiV1AppAppIdEndpointPost'][0])
    {
        list($response) = $this->createEndpointApiV1AppAppIdEndpointPostWithHttpInfo($app_id, $endpoint_in, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation createEndpointApiV1AppAppIdEndpointPostWithHttpInfo
     *
     * Create Endpoint
     *
     * @param  string $app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointIn $endpoint_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEndpointApiV1AppAppIdEndpointPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EndpointOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function createEndpointApiV1AppAppIdEndpointPostWithHttpInfo($app_id, $endpoint_in, $idempotency_key = null, string $contentType = self::contentTypes['createEndpointApiV1AppAppIdEndpointPost'][0])
    {
        $request = $this->createEndpointApiV1AppAppIdEndpointPostRequest($app_id, $endpoint_in, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\EndpointOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EndpointOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EndpointOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EndpointOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EndpointOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createEndpointApiV1AppAppIdEndpointPostAsync
     *
     * Create Endpoint
     *
     * @param  string $app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointIn $endpoint_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEndpointApiV1AppAppIdEndpointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEndpointApiV1AppAppIdEndpointPostAsync($app_id, $endpoint_in, $idempotency_key = null, string $contentType = self::contentTypes['createEndpointApiV1AppAppIdEndpointPost'][0])
    {
        return $this->createEndpointApiV1AppAppIdEndpointPostAsyncWithHttpInfo($app_id, $endpoint_in, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createEndpointApiV1AppAppIdEndpointPostAsyncWithHttpInfo
     *
     * Create Endpoint
     *
     * @param  string $app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointIn $endpoint_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEndpointApiV1AppAppIdEndpointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createEndpointApiV1AppAppIdEndpointPostAsyncWithHttpInfo($app_id, $endpoint_in, $idempotency_key = null, string $contentType = self::contentTypes['createEndpointApiV1AppAppIdEndpointPost'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EndpointOut';
        $request = $this->createEndpointApiV1AppAppIdEndpointPostRequest($app_id, $endpoint_in, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createEndpointApiV1AppAppIdEndpointPost'
     *
     * @param  string $app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointIn $endpoint_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createEndpointApiV1AppAppIdEndpointPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createEndpointApiV1AppAppIdEndpointPostRequest($app_id, $endpoint_in, $idempotency_key = null, string $contentType = self::contentTypes['createEndpointApiV1AppAppIdEndpointPost'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling createEndpointApiV1AppAppIdEndpointPost'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.createEndpointApiV1AppAppIdEndpointPost, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.createEndpointApiV1AppAppIdEndpointPost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.createEndpointApiV1AppAppIdEndpointPost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_in' is set
        if ($endpoint_in === null || (is_array($endpoint_in) && count($endpoint_in) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_in when calling createEndpointApiV1AppAppIdEndpointPost'
            );
        }



        $resourcePath = '/api/v1/app/{app_id}/endpoint/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($endpoint_in)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($endpoint_in));
            } else {
                $httpBody = $endpoint_in;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete
     *
     * Delete Endpoint
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $app_id app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'][0])
    {
        $this->deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteWithHttpInfo($endpoint_id, $app_id, $idempotency_key, $contentType);
    }

    /**
     * Operation deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteWithHttpInfo
     *
     * Delete Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteWithHttpInfo($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'][0])
    {
        $request = $this->deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteRequest($endpoint_id, $app_id, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteAsync
     *
     * Delete Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteAsync($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'][0])
    {
        return $this->deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteAsyncWithHttpInfo($endpoint_id, $app_id, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteAsyncWithHttpInfo
     *
     * Delete Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteAsyncWithHttpInfo($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'][0])
    {
        $returnType = '';
        $request = $this->deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteRequest($endpoint_id, $app_id, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteEndpointApiV1AppAppIdEndpointEndpointIdDeleteRequest($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'][0])
    {

        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        


        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEndpointApiV1AppAppIdEndpointEndpointIdGet
     *
     * Get Endpoint
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $app_id app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointApiV1AppAppIdEndpointEndpointIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EndpointOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function getEndpointApiV1AppAppIdEndpointEndpointIdGet($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointApiV1AppAppIdEndpointEndpointIdGet'][0])
    {
        list($response) = $this->getEndpointApiV1AppAppIdEndpointEndpointIdGetWithHttpInfo($endpoint_id, $app_id, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation getEndpointApiV1AppAppIdEndpointEndpointIdGetWithHttpInfo
     *
     * Get Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointApiV1AppAppIdEndpointEndpointIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EndpointOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEndpointApiV1AppAppIdEndpointEndpointIdGetWithHttpInfo($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointApiV1AppAppIdEndpointEndpointIdGet'][0])
    {
        $request = $this->getEndpointApiV1AppAppIdEndpointEndpointIdGetRequest($endpoint_id, $app_id, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EndpointOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EndpointOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EndpointOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EndpointOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EndpointOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEndpointApiV1AppAppIdEndpointEndpointIdGetAsync
     *
     * Get Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointApiV1AppAppIdEndpointEndpointIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointApiV1AppAppIdEndpointEndpointIdGetAsync($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointApiV1AppAppIdEndpointEndpointIdGet'][0])
    {
        return $this->getEndpointApiV1AppAppIdEndpointEndpointIdGetAsyncWithHttpInfo($endpoint_id, $app_id, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEndpointApiV1AppAppIdEndpointEndpointIdGetAsyncWithHttpInfo
     *
     * Get Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointApiV1AppAppIdEndpointEndpointIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointApiV1AppAppIdEndpointEndpointIdGetAsyncWithHttpInfo($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointApiV1AppAppIdEndpointEndpointIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EndpointOut';
        $request = $this->getEndpointApiV1AppAppIdEndpointEndpointIdGetRequest($endpoint_id, $app_id, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEndpointApiV1AppAppIdEndpointEndpointIdGet'
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointApiV1AppAppIdEndpointEndpointIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEndpointApiV1AppAppIdEndpointEndpointIdGetRequest($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointApiV1AppAppIdEndpointEndpointIdGet'][0])
    {

        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling getEndpointApiV1AppAppIdEndpointEndpointIdGet'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointApiV1AppAppIdEndpointEndpointIdGet, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointApiV1AppAppIdEndpointEndpointIdGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.getEndpointApiV1AppAppIdEndpointEndpointIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getEndpointApiV1AppAppIdEndpointEndpointIdGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointApiV1AppAppIdEndpointEndpointIdGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointApiV1AppAppIdEndpointEndpointIdGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.getEndpointApiV1AppAppIdEndpointEndpointIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        


        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet
     *
     * Get Endpoint Headers
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $app_id app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EndpointHeadersOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet'][0])
    {
        list($response) = $this->getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetWithHttpInfo($endpoint_id, $app_id, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetWithHttpInfo
     *
     * Get Endpoint Headers
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EndpointHeadersOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetWithHttpInfo($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet'][0])
    {
        $request = $this->getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetRequest($endpoint_id, $app_id, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EndpointHeadersOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EndpointHeadersOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EndpointHeadersOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EndpointHeadersOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EndpointHeadersOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetAsync
     *
     * Get Endpoint Headers
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetAsync($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet'][0])
    {
        return $this->getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetAsyncWithHttpInfo($endpoint_id, $app_id, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetAsyncWithHttpInfo
     *
     * Get Endpoint Headers
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetAsyncWithHttpInfo($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EndpointHeadersOut';
        $request = $this->getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetRequest($endpoint_id, $app_id, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet'
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGetRequest($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet'][0])
    {

        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        


        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet
     *
     * Get Endpoint Secret
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $app_id app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EndpointSecretOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'][0])
    {
        list($response) = $this->getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetWithHttpInfo($endpoint_id, $app_id, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetWithHttpInfo
     *
     * Get Endpoint Secret
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EndpointSecretOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetWithHttpInfo($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'][0])
    {
        $request = $this->getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetRequest($endpoint_id, $app_id, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EndpointSecretOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EndpointSecretOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EndpointSecretOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EndpointSecretOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EndpointSecretOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetAsync
     *
     * Get Endpoint Secret
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetAsync($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'][0])
    {
        return $this->getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetAsyncWithHttpInfo($endpoint_id, $app_id, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetAsyncWithHttpInfo
     *
     * Get Endpoint Secret
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetAsyncWithHttpInfo($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EndpointSecretOut';
        $request = $this->getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetRequest($endpoint_id, $app_id, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGetRequest($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'][0])
    {

        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        


        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet
     *
     * Get Endpoint Stats
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $app_id app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EndpointStats|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'][0])
    {
        list($response) = $this->getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetWithHttpInfo($endpoint_id, $app_id, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetWithHttpInfo
     *
     * Get Endpoint Stats
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EndpointStats|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetWithHttpInfo($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'][0])
    {
        $request = $this->getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetRequest($endpoint_id, $app_id, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EndpointStats' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EndpointStats' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EndpointStats', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EndpointStats';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EndpointStats',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetAsync
     *
     * Get Endpoint Stats
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetAsync($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'][0])
    {
        return $this->getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetAsyncWithHttpInfo($endpoint_id, $app_id, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetAsyncWithHttpInfo
     *
     * Get Endpoint Stats
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetAsyncWithHttpInfo($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EndpointStats';
        $request = $this->getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetRequest($endpoint_id, $app_id, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGetRequest($endpoint_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'][0])
    {

        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        


        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listEndpointsApiV1AppAppIdEndpointGet
     *
     * List Endpoints
     *
     * @param  string $app_id app_id (required)
     * @param  string $iterator iterator (optional)
     * @param  int $limit limit (optional, default to 50)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEndpointsApiV1AppAppIdEndpointGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListResponseEndpointOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function listEndpointsApiV1AppAppIdEndpointGet($app_id, $iterator = null, $limit = 50, $idempotency_key = null, string $contentType = self::contentTypes['listEndpointsApiV1AppAppIdEndpointGet'][0])
    {
        list($response) = $this->listEndpointsApiV1AppAppIdEndpointGetWithHttpInfo($app_id, $iterator, $limit, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation listEndpointsApiV1AppAppIdEndpointGetWithHttpInfo
     *
     * List Endpoints
     *
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEndpointsApiV1AppAppIdEndpointGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListResponseEndpointOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function listEndpointsApiV1AppAppIdEndpointGetWithHttpInfo($app_id, $iterator = null, $limit = 50, $idempotency_key = null, string $contentType = self::contentTypes['listEndpointsApiV1AppAppIdEndpointGet'][0])
    {
        $request = $this->listEndpointsApiV1AppAppIdEndpointGetRequest($app_id, $iterator, $limit, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListResponseEndpointOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListResponseEndpointOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListResponseEndpointOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ListResponseEndpointOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListResponseEndpointOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listEndpointsApiV1AppAppIdEndpointGetAsync
     *
     * List Endpoints
     *
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEndpointsApiV1AppAppIdEndpointGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEndpointsApiV1AppAppIdEndpointGetAsync($app_id, $iterator = null, $limit = 50, $idempotency_key = null, string $contentType = self::contentTypes['listEndpointsApiV1AppAppIdEndpointGet'][0])
    {
        return $this->listEndpointsApiV1AppAppIdEndpointGetAsyncWithHttpInfo($app_id, $iterator, $limit, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listEndpointsApiV1AppAppIdEndpointGetAsyncWithHttpInfo
     *
     * List Endpoints
     *
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEndpointsApiV1AppAppIdEndpointGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listEndpointsApiV1AppAppIdEndpointGetAsyncWithHttpInfo($app_id, $iterator = null, $limit = 50, $idempotency_key = null, string $contentType = self::contentTypes['listEndpointsApiV1AppAppIdEndpointGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListResponseEndpointOut';
        $request = $this->listEndpointsApiV1AppAppIdEndpointGetRequest($app_id, $iterator, $limit, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listEndpointsApiV1AppAppIdEndpointGet'
     *
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listEndpointsApiV1AppAppIdEndpointGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listEndpointsApiV1AppAppIdEndpointGetRequest($app_id, $iterator = null, $limit = 50, $idempotency_key = null, string $contentType = self::contentTypes['listEndpointsApiV1AppAppIdEndpointGet'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling listEndpointsApiV1AppAppIdEndpointGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.listEndpointsApiV1AppAppIdEndpointGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.listEndpointsApiV1AppAppIdEndpointGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.listEndpointsApiV1AppAppIdEndpointGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        

        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling EndpointApi.listEndpointsApiV1AppAppIdEndpointGet, must be smaller than or equal to 250.');
        }
        


        $resourcePath = '/api/v1/app/{app_id}/endpoint/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch
     *
     * Patch Endpoint Headers
     *
     * @param  string $app_id app_id (required)
     * @param  string $endpoint_id endpoint_id (required)
     * @param  \OpenAPI\Client\Model\EndpointHeadersPatchIn $endpoint_headers_patch_in endpoint_headers_patch_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch($app_id, $endpoint_id, $endpoint_headers_patch_in, $idempotency_key = null, string $contentType = self::contentTypes['patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'][0])
    {
        $this->patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchWithHttpInfo($app_id, $endpoint_id, $endpoint_headers_patch_in, $idempotency_key, $contentType);
    }

    /**
     * Operation patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchWithHttpInfo
     *
     * Patch Endpoint Headers
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\EndpointHeadersPatchIn $endpoint_headers_patch_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchWithHttpInfo($app_id, $endpoint_id, $endpoint_headers_patch_in, $idempotency_key = null, string $contentType = self::contentTypes['patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'][0])
    {
        $request = $this->patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchRequest($app_id, $endpoint_id, $endpoint_headers_patch_in, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchAsync
     *
     * Patch Endpoint Headers
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\EndpointHeadersPatchIn $endpoint_headers_patch_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchAsync($app_id, $endpoint_id, $endpoint_headers_patch_in, $idempotency_key = null, string $contentType = self::contentTypes['patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'][0])
    {
        return $this->patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchAsyncWithHttpInfo($app_id, $endpoint_id, $endpoint_headers_patch_in, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchAsyncWithHttpInfo
     *
     * Patch Endpoint Headers
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\EndpointHeadersPatchIn $endpoint_headers_patch_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchAsyncWithHttpInfo($app_id, $endpoint_id, $endpoint_headers_patch_in, $idempotency_key = null, string $contentType = self::contentTypes['patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'][0])
    {
        $returnType = '';
        $request = $this->patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchRequest($app_id, $endpoint_id, $endpoint_headers_patch_in, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\EndpointHeadersPatchIn $endpoint_headers_patch_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatchRequest($app_id, $endpoint_id, $endpoint_headers_patch_in, $idempotency_key = null, string $contentType = self::contentTypes['patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_headers_patch_in' is set
        if ($endpoint_headers_patch_in === null || (is_array($endpoint_headers_patch_in) && count($endpoint_headers_patch_in) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_headers_patch_in when calling patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch'
            );
        }



        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($endpoint_headers_patch_in)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($endpoint_headers_patch_in));
            } else {
                $httpBody = $endpoint_headers_patch_in;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost
     *
     * Recover Failed Webhooks
     *
     * @param  string $app_id app_id (required)
     * @param  string $endpoint_id endpoint_id (required)
     * @param  \OpenAPI\Client\Model\RecoverIn $recover_in recover_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost($app_id, $endpoint_id, $recover_in, $idempotency_key = null, string $contentType = self::contentTypes['recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'][0])
    {
        list($response) = $this->recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostWithHttpInfo($app_id, $endpoint_id, $recover_in, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostWithHttpInfo
     *
     * Recover Failed Webhooks
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\RecoverIn $recover_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostWithHttpInfo($app_id, $endpoint_id, $recover_in, $idempotency_key = null, string $contentType = self::contentTypes['recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'][0])
    {
        $request = $this->recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostRequest($app_id, $endpoint_id, $recover_in, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostAsync
     *
     * Recover Failed Webhooks
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\RecoverIn $recover_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostAsync($app_id, $endpoint_id, $recover_in, $idempotency_key = null, string $contentType = self::contentTypes['recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'][0])
    {
        return $this->recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostAsyncWithHttpInfo($app_id, $endpoint_id, $recover_in, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostAsyncWithHttpInfo
     *
     * Recover Failed Webhooks
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\RecoverIn $recover_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostAsyncWithHttpInfo($app_id, $endpoint_id, $recover_in, $idempotency_key = null, string $contentType = self::contentTypes['recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'][0])
    {
        $returnType = 'object';
        $request = $this->recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostRequest($app_id, $endpoint_id, $recover_in, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\RecoverIn $recover_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPostRequest($app_id, $endpoint_id, $recover_in, $idempotency_key = null, string $contentType = self::contentTypes['recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'recover_in' is set
        if ($recover_in === null || (is_array($recover_in) && count($recover_in) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recover_in when calling recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost'
            );
        }



        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($recover_in)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($recover_in));
            } else {
                $httpBody = $recover_in;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost
     *
     * Replay Missing Webhooks
     *
     * @param  string $app_id app_id (required)
     * @param  string $endpoint_id endpoint_id (required)
     * @param  \OpenAPI\Client\Model\ReplayIn $replay_in replay_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost($app_id, $endpoint_id, $replay_in, $idempotency_key = null, string $contentType = self::contentTypes['replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'][0])
    {
        list($response) = $this->replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostWithHttpInfo($app_id, $endpoint_id, $replay_in, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostWithHttpInfo
     *
     * Replay Missing Webhooks
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\ReplayIn $replay_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostWithHttpInfo($app_id, $endpoint_id, $replay_in, $idempotency_key = null, string $contentType = self::contentTypes['replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'][0])
    {
        $request = $this->replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostRequest($app_id, $endpoint_id, $replay_in, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 202:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostAsync
     *
     * Replay Missing Webhooks
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\ReplayIn $replay_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostAsync($app_id, $endpoint_id, $replay_in, $idempotency_key = null, string $contentType = self::contentTypes['replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'][0])
    {
        return $this->replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostAsyncWithHttpInfo($app_id, $endpoint_id, $replay_in, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostAsyncWithHttpInfo
     *
     * Replay Missing Webhooks
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\ReplayIn $replay_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostAsyncWithHttpInfo($app_id, $endpoint_id, $replay_in, $idempotency_key = null, string $contentType = self::contentTypes['replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'][0])
    {
        $returnType = 'object';
        $request = $this->replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostRequest($app_id, $endpoint_id, $replay_in, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\ReplayIn $replay_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPostRequest($app_id, $endpoint_id, $replay_in, $idempotency_key = null, string $contentType = self::contentTypes['replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'replay_in' is set
        if ($replay_in === null || (is_array($replay_in) && count($replay_in) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $replay_in when calling replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost'
            );
        }



        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($replay_in)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($replay_in));
            } else {
                $httpBody = $replay_in;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost
     *
     * Rotate Endpoint Secret
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $app_id app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointSecretRotateIn $endpoint_secret_rotate_in endpoint_secret_rotate_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost($endpoint_id, $app_id, $endpoint_secret_rotate_in, $idempotency_key = null, string $contentType = self::contentTypes['rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'][0])
    {
        $this->rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostWithHttpInfo($endpoint_id, $app_id, $endpoint_secret_rotate_in, $idempotency_key, $contentType);
    }

    /**
     * Operation rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostWithHttpInfo
     *
     * Rotate Endpoint Secret
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointSecretRotateIn $endpoint_secret_rotate_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostWithHttpInfo($endpoint_id, $app_id, $endpoint_secret_rotate_in, $idempotency_key = null, string $contentType = self::contentTypes['rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'][0])
    {
        $request = $this->rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostRequest($endpoint_id, $app_id, $endpoint_secret_rotate_in, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostAsync
     *
     * Rotate Endpoint Secret
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointSecretRotateIn $endpoint_secret_rotate_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostAsync($endpoint_id, $app_id, $endpoint_secret_rotate_in, $idempotency_key = null, string $contentType = self::contentTypes['rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'][0])
    {
        return $this->rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostAsyncWithHttpInfo($endpoint_id, $app_id, $endpoint_secret_rotate_in, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostAsyncWithHttpInfo
     *
     * Rotate Endpoint Secret
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointSecretRotateIn $endpoint_secret_rotate_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostAsyncWithHttpInfo($endpoint_id, $app_id, $endpoint_secret_rotate_in, $idempotency_key = null, string $contentType = self::contentTypes['rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'][0])
    {
        $returnType = '';
        $request = $this->rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostRequest($endpoint_id, $app_id, $endpoint_secret_rotate_in, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointSecretRotateIn $endpoint_secret_rotate_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePostRequest($endpoint_id, $app_id, $endpoint_secret_rotate_in, $idempotency_key = null, string $contentType = self::contentTypes['rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'][0])
    {

        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_secret_rotate_in' is set
        if ($endpoint_secret_rotate_in === null || (is_array($endpoint_secret_rotate_in) && count($endpoint_secret_rotate_in) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_secret_rotate_in when calling rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost'
            );
        }



        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($endpoint_secret_rotate_in)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($endpoint_secret_rotate_in));
            } else {
                $httpBody = $endpoint_secret_rotate_in;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEndpointApiV1AppAppIdEndpointEndpointIdPut
     *
     * Update Endpoint
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $app_id app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointUpdate $endpoint_update endpoint_update (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEndpointApiV1AppAppIdEndpointEndpointIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\EndpointOut|\OpenAPI\Client\Model\EndpointOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function updateEndpointApiV1AppAppIdEndpointEndpointIdPut($endpoint_id, $app_id, $endpoint_update, $idempotency_key = null, string $contentType = self::contentTypes['updateEndpointApiV1AppAppIdEndpointEndpointIdPut'][0])
    {
        list($response) = $this->updateEndpointApiV1AppAppIdEndpointEndpointIdPutWithHttpInfo($endpoint_id, $app_id, $endpoint_update, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation updateEndpointApiV1AppAppIdEndpointEndpointIdPutWithHttpInfo
     *
     * Update Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointUpdate $endpoint_update (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEndpointApiV1AppAppIdEndpointEndpointIdPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\EndpointOut|\OpenAPI\Client\Model\EndpointOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEndpointApiV1AppAppIdEndpointEndpointIdPutWithHttpInfo($endpoint_id, $app_id, $endpoint_update, $idempotency_key = null, string $contentType = self::contentTypes['updateEndpointApiV1AppAppIdEndpointEndpointIdPut'][0])
    {
        $request = $this->updateEndpointApiV1AppAppIdEndpointEndpointIdPutRequest($endpoint_id, $app_id, $endpoint_update, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\EndpointOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EndpointOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EndpointOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 201:
                    if ('\OpenAPI\Client\Model\EndpointOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\EndpointOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\EndpointOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\EndpointOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EndpointOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\EndpointOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEndpointApiV1AppAppIdEndpointEndpointIdPutAsync
     *
     * Update Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointUpdate $endpoint_update (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEndpointApiV1AppAppIdEndpointEndpointIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEndpointApiV1AppAppIdEndpointEndpointIdPutAsync($endpoint_id, $app_id, $endpoint_update, $idempotency_key = null, string $contentType = self::contentTypes['updateEndpointApiV1AppAppIdEndpointEndpointIdPut'][0])
    {
        return $this->updateEndpointApiV1AppAppIdEndpointEndpointIdPutAsyncWithHttpInfo($endpoint_id, $app_id, $endpoint_update, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEndpointApiV1AppAppIdEndpointEndpointIdPutAsyncWithHttpInfo
     *
     * Update Endpoint
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointUpdate $endpoint_update (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEndpointApiV1AppAppIdEndpointEndpointIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEndpointApiV1AppAppIdEndpointEndpointIdPutAsyncWithHttpInfo($endpoint_id, $app_id, $endpoint_update, $idempotency_key = null, string $contentType = self::contentTypes['updateEndpointApiV1AppAppIdEndpointEndpointIdPut'][0])
    {
        $returnType = '\OpenAPI\Client\Model\EndpointOut';
        $request = $this->updateEndpointApiV1AppAppIdEndpointEndpointIdPutRequest($endpoint_id, $app_id, $endpoint_update, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEndpointApiV1AppAppIdEndpointEndpointIdPut'
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  \OpenAPI\Client\Model\EndpointUpdate $endpoint_update (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEndpointApiV1AppAppIdEndpointEndpointIdPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEndpointApiV1AppAppIdEndpointEndpointIdPutRequest($endpoint_id, $app_id, $endpoint_update, $idempotency_key = null, string $contentType = self::contentTypes['updateEndpointApiV1AppAppIdEndpointEndpointIdPut'][0])
    {

        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling updateEndpointApiV1AppAppIdEndpointEndpointIdPut'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.updateEndpointApiV1AppAppIdEndpointEndpointIdPut, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.updateEndpointApiV1AppAppIdEndpointEndpointIdPut, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.updateEndpointApiV1AppAppIdEndpointEndpointIdPut, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling updateEndpointApiV1AppAppIdEndpointEndpointIdPut'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.updateEndpointApiV1AppAppIdEndpointEndpointIdPut, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.updateEndpointApiV1AppAppIdEndpointEndpointIdPut, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.updateEndpointApiV1AppAppIdEndpointEndpointIdPut, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_update' is set
        if ($endpoint_update === null || (is_array($endpoint_update) && count($endpoint_update) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_update when calling updateEndpointApiV1AppAppIdEndpointEndpointIdPut'
            );
        }



        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($endpoint_update)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($endpoint_update));
            } else {
                $httpBody = $endpoint_update;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut
     *
     * Update Endpoint Headers
     *
     * @param  string $app_id app_id (required)
     * @param  string $endpoint_id endpoint_id (required)
     * @param  \OpenAPI\Client\Model\EndpointHeadersIn $endpoint_headers_in endpoint_headers_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut($app_id, $endpoint_id, $endpoint_headers_in, $idempotency_key = null, string $contentType = self::contentTypes['updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'][0])
    {
        $this->updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutWithHttpInfo($app_id, $endpoint_id, $endpoint_headers_in, $idempotency_key, $contentType);
    }

    /**
     * Operation updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutWithHttpInfo
     *
     * Update Endpoint Headers
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\EndpointHeadersIn $endpoint_headers_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutWithHttpInfo($app_id, $endpoint_id, $endpoint_headers_in, $idempotency_key = null, string $contentType = self::contentTypes['updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'][0])
    {
        $request = $this->updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutRequest($app_id, $endpoint_id, $endpoint_headers_in, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutAsync
     *
     * Update Endpoint Headers
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\EndpointHeadersIn $endpoint_headers_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutAsync($app_id, $endpoint_id, $endpoint_headers_in, $idempotency_key = null, string $contentType = self::contentTypes['updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'][0])
    {
        return $this->updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutAsyncWithHttpInfo($app_id, $endpoint_id, $endpoint_headers_in, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutAsyncWithHttpInfo
     *
     * Update Endpoint Headers
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\EndpointHeadersIn $endpoint_headers_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutAsyncWithHttpInfo($app_id, $endpoint_id, $endpoint_headers_in, $idempotency_key = null, string $contentType = self::contentTypes['updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'][0])
    {
        $returnType = '';
        $request = $this->updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutRequest($app_id, $endpoint_id, $endpoint_headers_in, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  \OpenAPI\Client\Model\EndpointHeadersIn $endpoint_headers_in (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPutRequest($app_id, $endpoint_id, $endpoint_headers_in, $idempotency_key = null, string $contentType = self::contentTypes['updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling EndpointApi.updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling EndpointApi.updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling EndpointApi.updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling EndpointApi.updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_headers_in' is set
        if ($endpoint_headers_in === null || (is_array($endpoint_headers_in) && count($endpoint_headers_in) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_headers_in when calling updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut'
            );
        }



        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($endpoint_headers_in)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($endpoint_headers_in));
            } else {
                $httpBody = $endpoint_headers_in;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
