<?php
/**
 * MessageAttemptApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Svix API
 *
 * Welcome to the Svix API documentation!  Useful links: [Homepage](https://www.svix.com) | [Support email](mailto:support+docs@svix.com) | [Blog](https://www.svix.com/blog/) | [Slack Community](https://www.svix.com/slack/)  # Introduction  This is the reference documentation and schemas for the [Svix webhook service](https://www.svix.com) API. For tutorials and other documentation please refer to [the documentation](https://docs.svix.com).  ## Main concepts  In Svix you have four important entities you will be interacting with:  - `messages`: these are the webhooks being sent. They can have contents and a few other properties. - `application`: this is where `messages` are sent to. Usually you want to create one application for each user on your platform. - `endpoint`: endpoints are the URLs messages will be sent to. Each application can have multiple `endpoints` and each message sent to that application will be sent to all of them (unless they are not subscribed to the sent event type). - `event-type`: event types are identifiers denoting the type of the message being sent. Event types are primarily used to decide which events are sent to which endpoint.   ## Authentication  Get your authentication token (`AUTH_TOKEN`) from the [Svix dashboard](https://dashboard.svix.com) and use it as part of the `Authorization` header as such: `Authorization: Bearer ${AUTH_TOKEN}`.  <SecurityDefinitions />   ## Code samples  The code samples assume you already have the respective libraries installed and you know how to use them. For the latest information on how to do that, please refer to [the documentation](https://docs.svix.com/).   ## Idempotency  Svix supports [idempotency](https://en.wikipedia.org/wiki/Idempotence) for safely retrying requests without accidentally performing the same operation twice. This is useful when an API call is disrupted in transit and you do not receive a response.  To perform an idempotent request, pass the idempotency key in the `Idempotency-Key` header to the request. The idempotency key should be a unique value generated by the client. You can create the key in however way you like, though we suggest using UUID v4, or any other string with enough entropy to avoid collisions.  Svix's idempotency works by saving the resulting status code and body of the first request made for any given idempotency key for any successful request. Subsequent requests with the same key return the same result.  Please note that idempotency is only supported for `POST` requests.   ## Cross-Origin Resource Sharing  This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with [W3C spec](https://www.w3.org/TR/cors/). And that allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.
 *
 * The version of the OpenAPI document: 1.4.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\apitest;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * MessageAttemptApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MessageAttemptApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet' => [
            'application/json',
        ],
        'listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet' => [
            'application/json',
        ],
        'listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet' => [
            'application/json',
        ],
        'listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet' => [
            'application/json',
        ],
        'listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet' => [
            'application/json',
        ],
        'listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet' => [
            'application/json',
        ],
        'listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet' => [
            'application/json',
        ],
        'resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet
     *
     * Get Attempt
     *
     * @param  string $attempt_id attempt_id (required)
     * @param  string $msg_id msg_id (required)
     * @param  string $app_id app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MessageAttemptOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet($attempt_id, $msg_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'][0])
    {
        list($response) = $this->getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetWithHttpInfo($attempt_id, $msg_id, $app_id, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetWithHttpInfo
     *
     * Get Attempt
     *
     * @param  string $attempt_id (required)
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MessageAttemptOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetWithHttpInfo($attempt_id, $msg_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'][0])
    {
        $request = $this->getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetRequest($attempt_id, $msg_id, $app_id, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MessageAttemptOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\MessageAttemptOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MessageAttemptOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MessageAttemptOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MessageAttemptOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetAsync
     *
     * Get Attempt
     *
     * @param  string $attempt_id (required)
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetAsync($attempt_id, $msg_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'][0])
    {
        return $this->getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetAsyncWithHttpInfo($attempt_id, $msg_id, $app_id, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetAsyncWithHttpInfo
     *
     * Get Attempt
     *
     * @param  string $attempt_id (required)
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetAsyncWithHttpInfo($attempt_id, $msg_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\MessageAttemptOut';
        $request = $this->getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetRequest($attempt_id, $msg_id, $app_id, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'
     *
     * @param  string $attempt_id (required)
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGetRequest($attempt_id, $msg_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'][0])
    {

        // verify the required parameter 'attempt_id' is set
        if ($attempt_id === null || (is_array($attempt_id) && count($attempt_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attempt_id when calling getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'
            );
        }

        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageAttemptApi.getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        


        $resourcePath = '/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($attempt_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attempt_id' . '}',
                ObjectSerializer::toPathValue($attempt_id),
                $resourcePath
            );
        }
        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet
     *
     * List Attempted Destinations
     *
     * @param  string $msg_id msg_id (required)
     * @param  string $app_id app_id (required)
     * @param  string $iterator iterator (optional)
     * @param  int $limit limit (optional, default to 50)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListResponseMessageEndpointOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet($msg_id, $app_id, $iterator = null, $limit = 50, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet'][0])
    {
        list($response) = $this->listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetWithHttpInfo($msg_id, $app_id, $iterator, $limit, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetWithHttpInfo
     *
     * List Attempted Destinations
     *
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListResponseMessageEndpointOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetWithHttpInfo($msg_id, $app_id, $iterator = null, $limit = 50, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet'][0])
    {
        $request = $this->listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetRequest($msg_id, $app_id, $iterator, $limit, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListResponseMessageEndpointOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListResponseMessageEndpointOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListResponseMessageEndpointOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ListResponseMessageEndpointOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListResponseMessageEndpointOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetAsync
     *
     * List Attempted Destinations
     *
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetAsync($msg_id, $app_id, $iterator = null, $limit = 50, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet'][0])
    {
        return $this->listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetAsyncWithHttpInfo($msg_id, $app_id, $iterator, $limit, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetAsyncWithHttpInfo
     *
     * List Attempted Destinations
     *
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetAsyncWithHttpInfo($msg_id, $app_id, $iterator = null, $limit = 50, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListResponseMessageEndpointOut';
        $request = $this->listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetRequest($msg_id, $app_id, $iterator, $limit, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet'
     *
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGetRequest($msg_id, $app_id, $iterator = null, $limit = 50, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet'][0])
    {

        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageAttemptApi.listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        

        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet, must be smaller than or equal to 250.');
        }
        


        $resourcePath = '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet
     *
     * List Attempted Messages
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $app_id app_id (required)
     * @param  string $iterator iterator (optional)
     * @param  int $limit limit (optional, default to 50)
     * @param  string $channel channel (optional)
     * @param  MessageStatus $status status (optional)
     * @param  \DateTime $before before (optional)
     * @param  \DateTime $after after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListResponseEndpointMessageOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet($endpoint_id, $app_id, $iterator = null, $limit = 50, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet'][0])
    {
        list($response) = $this->listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetWithHttpInfo($endpoint_id, $app_id, $iterator, $limit, $channel, $status, $before, $after, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetWithHttpInfo
     *
     * List Attempted Messages
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $channel (optional)
     * @param  MessageStatus $status (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListResponseEndpointMessageOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetWithHttpInfo($endpoint_id, $app_id, $iterator = null, $limit = 50, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet'][0])
    {
        $request = $this->listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetRequest($endpoint_id, $app_id, $iterator, $limit, $channel, $status, $before, $after, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListResponseEndpointMessageOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListResponseEndpointMessageOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListResponseEndpointMessageOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ListResponseEndpointMessageOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListResponseEndpointMessageOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetAsync
     *
     * List Attempted Messages
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $channel (optional)
     * @param  MessageStatus $status (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetAsync($endpoint_id, $app_id, $iterator = null, $limit = 50, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet'][0])
    {
        return $this->listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetAsyncWithHttpInfo($endpoint_id, $app_id, $iterator, $limit, $channel, $status, $before, $after, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetAsyncWithHttpInfo
     *
     * List Attempted Messages
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $channel (optional)
     * @param  MessageStatus $status (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetAsyncWithHttpInfo($endpoint_id, $app_id, $iterator = null, $limit = 50, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListResponseEndpointMessageOut';
        $request = $this->listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetRequest($endpoint_id, $app_id, $iterator, $limit, $channel, $status, $before, $after, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet'
     *
     * @param  string $endpoint_id (required)
     * @param  string $app_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $channel (optional)
     * @param  MessageStatus $status (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGetRequest($endpoint_id, $app_id, $iterator = null, $limit = 50, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet'][0])
    {

        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling MessageAttemptApi.listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        

        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet, must be smaller than or equal to 250.');
        }
        
        if ($channel !== null && strlen($channel) > 128) {
            throw new \InvalidArgumentException('invalid length for "$channel" when calling MessageAttemptApi.listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet, must be smaller than or equal to 128.');
        }
        if ($channel !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $channel)) {
            throw new \InvalidArgumentException("invalid value for \"channel\" when calling MessageAttemptApi.listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        





        $resourcePath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'MessageStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet
     *
     * List Attempts
     *
     * @param  string $app_id app_id (required)
     * @param  string $msg_id msg_id (required)
     * @param  string $iterator iterator (optional)
     * @param  int $limit limit (optional, default to 50)
     * @param  string $endpoint_id endpoint_id (optional)
     * @param  string[] $event_types event_types (optional)
     * @param  string $channel channel (optional)
     * @param  MessageStatus $status status (optional)
     * @param  \DateTime $before before (optional)
     * @param  \DateTime $after after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListResponseMessageAttemptOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     * @deprecated
     */
    public function listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet($app_id, $msg_id, $iterator = null, $limit = 50, $endpoint_id = null, $event_types = null, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet'][0])
    {
        list($response) = $this->listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetWithHttpInfo($app_id, $msg_id, $iterator, $limit, $endpoint_id, $event_types, $channel, $status, $before, $after, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetWithHttpInfo
     *
     * List Attempts
     *
     * @param  string $app_id (required)
     * @param  string $msg_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $endpoint_id (optional)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  MessageStatus $status (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListResponseMessageAttemptOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetWithHttpInfo($app_id, $msg_id, $iterator = null, $limit = 50, $endpoint_id = null, $event_types = null, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet'][0])
    {
        $request = $this->listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetRequest($app_id, $msg_id, $iterator, $limit, $endpoint_id, $event_types, $channel, $status, $before, $after, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListResponseMessageAttemptOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListResponseMessageAttemptOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListResponseMessageAttemptOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ListResponseMessageAttemptOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListResponseMessageAttemptOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetAsync
     *
     * List Attempts
     *
     * @param  string $app_id (required)
     * @param  string $msg_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $endpoint_id (optional)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  MessageStatus $status (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetAsync($app_id, $msg_id, $iterator = null, $limit = 50, $endpoint_id = null, $event_types = null, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet'][0])
    {
        return $this->listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetAsyncWithHttpInfo($app_id, $msg_id, $iterator, $limit, $endpoint_id, $event_types, $channel, $status, $before, $after, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetAsyncWithHttpInfo
     *
     * List Attempts
     *
     * @param  string $app_id (required)
     * @param  string $msg_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $endpoint_id (optional)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  MessageStatus $status (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetAsyncWithHttpInfo($app_id, $msg_id, $iterator = null, $limit = 50, $endpoint_id = null, $event_types = null, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListResponseMessageAttemptOut';
        $request = $this->listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetRequest($app_id, $msg_id, $iterator, $limit, $endpoint_id, $event_types, $channel, $status, $before, $after, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet'
     *
     * @param  string $app_id (required)
     * @param  string $msg_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string $endpoint_id (optional)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  MessageStatus $status (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function listAttemptsApiV1AppAppIdMsgMsgIdAttemptGetRequest($app_id, $msg_id, $iterator = null, $limit = 50, $endpoint_id = null, $event_types = null, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageAttemptApi.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        

        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet, must be smaller than or equal to 250.');
        }
        
        if ($endpoint_id !== null && strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet, must be smaller than or equal to 256.');
        }
        if ($endpoint_id !== null && strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet, must be bigger than or equal to 1.');
        }
        if ($endpoint_id !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling MessageAttemptApi.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        

        if ($channel !== null && strlen($channel) > 128) {
            throw new \InvalidArgumentException('invalid length for "$channel" when calling MessageAttemptApi.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet, must be smaller than or equal to 128.');
        }
        if ($channel !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $channel)) {
            throw new \InvalidArgumentException("invalid value for \"channel\" when calling MessageAttemptApi.listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        





        $resourcePath = '/api/v1/app/{app_id}/msg/{msg_id}/attempt/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endpoint_id,
            'endpoint_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_types,
            'event_types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'MessageStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet
     *
     * List Attempts By Endpoint
     *
     * @param  string $app_id app_id (required)
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $iterator iterator (optional)
     * @param  int $limit limit (optional, default to 50)
     * @param  MessageStatus $status status (optional)
     * @param  StatusCodeClass $status_code_class status_code_class (optional)
     * @param  string[] $event_types event_types (optional)
     * @param  string $channel channel (optional)
     * @param  \DateTime $before before (optional)
     * @param  \DateTime $after after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListResponseMessageAttemptOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet($app_id, $endpoint_id, $iterator = null, $limit = 50, $status = null, $status_code_class = null, $event_types = null, $channel = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet'][0])
    {
        list($response) = $this->listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetWithHttpInfo($app_id, $endpoint_id, $iterator, $limit, $status, $status_code_class, $event_types, $channel, $before, $after, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetWithHttpInfo
     *
     * List Attempts By Endpoint
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  MessageStatus $status (optional)
     * @param  StatusCodeClass $status_code_class (optional)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListResponseMessageAttemptOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetWithHttpInfo($app_id, $endpoint_id, $iterator = null, $limit = 50, $status = null, $status_code_class = null, $event_types = null, $channel = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet'][0])
    {
        $request = $this->listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetRequest($app_id, $endpoint_id, $iterator, $limit, $status, $status_code_class, $event_types, $channel, $before, $after, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListResponseMessageAttemptOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListResponseMessageAttemptOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListResponseMessageAttemptOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ListResponseMessageAttemptOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListResponseMessageAttemptOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetAsync
     *
     * List Attempts By Endpoint
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  MessageStatus $status (optional)
     * @param  StatusCodeClass $status_code_class (optional)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetAsync($app_id, $endpoint_id, $iterator = null, $limit = 50, $status = null, $status_code_class = null, $event_types = null, $channel = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet'][0])
    {
        return $this->listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetAsyncWithHttpInfo($app_id, $endpoint_id, $iterator, $limit, $status, $status_code_class, $event_types, $channel, $before, $after, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetAsyncWithHttpInfo
     *
     * List Attempts By Endpoint
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  MessageStatus $status (optional)
     * @param  StatusCodeClass $status_code_class (optional)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetAsyncWithHttpInfo($app_id, $endpoint_id, $iterator = null, $limit = 50, $status = null, $status_code_class = null, $event_types = null, $channel = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListResponseMessageAttemptOut';
        $request = $this->listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetRequest($app_id, $endpoint_id, $iterator, $limit, $status, $status_code_class, $event_types, $channel, $before, $after, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet'
     *
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  MessageStatus $status (optional)
     * @param  StatusCodeClass $status_code_class (optional)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGetRequest($app_id, $endpoint_id, $iterator = null, $limit = 50, $status = null, $status_code_class = null, $event_types = null, $channel = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling MessageAttemptApi.listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        

        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet, must be smaller than or equal to 250.');
        }
        



        if ($channel !== null && strlen($channel) > 128) {
            throw new \InvalidArgumentException('invalid length for "$channel" when calling MessageAttemptApi.listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet, must be smaller than or equal to 128.');
        }
        if ($channel !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $channel)) {
            throw new \InvalidArgumentException("invalid value for \"channel\" when calling MessageAttemptApi.listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        




        $resourcePath = '/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'MessageStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_code_class,
            'status_code_class', // param base name
            'StatusCodeClass', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_types,
            'event_types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet
     *
     * List Attempts By Msg
     *
     * @param  string $app_id app_id (required)
     * @param  string $msg_id msg_id (required)
     * @param  string $endpoint_id endpoint_id (optional)
     * @param  string $iterator iterator (optional)
     * @param  int $limit limit (optional, default to 50)
     * @param  MessageStatus $status status (optional)
     * @param  StatusCodeClass $status_code_class status_code_class (optional)
     * @param  string[] $event_types event_types (optional)
     * @param  string $channel channel (optional)
     * @param  \DateTime $before before (optional)
     * @param  \DateTime $after after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListResponseMessageAttemptOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     */
    public function listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet($app_id, $msg_id, $endpoint_id = null, $iterator = null, $limit = 50, $status = null, $status_code_class = null, $event_types = null, $channel = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet'][0])
    {
        list($response) = $this->listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetWithHttpInfo($app_id, $msg_id, $endpoint_id, $iterator, $limit, $status, $status_code_class, $event_types, $channel, $before, $after, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetWithHttpInfo
     *
     * List Attempts By Msg
     *
     * @param  string $app_id (required)
     * @param  string $msg_id (required)
     * @param  string $endpoint_id (optional)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  MessageStatus $status (optional)
     * @param  StatusCodeClass $status_code_class (optional)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListResponseMessageAttemptOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetWithHttpInfo($app_id, $msg_id, $endpoint_id = null, $iterator = null, $limit = 50, $status = null, $status_code_class = null, $event_types = null, $channel = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet'][0])
    {
        $request = $this->listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetRequest($app_id, $msg_id, $endpoint_id, $iterator, $limit, $status, $status_code_class, $event_types, $channel, $before, $after, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListResponseMessageAttemptOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListResponseMessageAttemptOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListResponseMessageAttemptOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ListResponseMessageAttemptOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListResponseMessageAttemptOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetAsync
     *
     * List Attempts By Msg
     *
     * @param  string $app_id (required)
     * @param  string $msg_id (required)
     * @param  string $endpoint_id (optional)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  MessageStatus $status (optional)
     * @param  StatusCodeClass $status_code_class (optional)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetAsync($app_id, $msg_id, $endpoint_id = null, $iterator = null, $limit = 50, $status = null, $status_code_class = null, $event_types = null, $channel = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet'][0])
    {
        return $this->listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetAsyncWithHttpInfo($app_id, $msg_id, $endpoint_id, $iterator, $limit, $status, $status_code_class, $event_types, $channel, $before, $after, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetAsyncWithHttpInfo
     *
     * List Attempts By Msg
     *
     * @param  string $app_id (required)
     * @param  string $msg_id (required)
     * @param  string $endpoint_id (optional)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  MessageStatus $status (optional)
     * @param  StatusCodeClass $status_code_class (optional)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetAsyncWithHttpInfo($app_id, $msg_id, $endpoint_id = null, $iterator = null, $limit = 50, $status = null, $status_code_class = null, $event_types = null, $channel = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListResponseMessageAttemptOut';
        $request = $this->listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetRequest($app_id, $msg_id, $endpoint_id, $iterator, $limit, $status, $status_code_class, $event_types, $channel, $before, $after, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet'
     *
     * @param  string $app_id (required)
     * @param  string $msg_id (required)
     * @param  string $endpoint_id (optional)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  MessageStatus $status (optional)
     * @param  StatusCodeClass $status_code_class (optional)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGetRequest($app_id, $msg_id, $endpoint_id = null, $iterator = null, $limit = 50, $status = null, $status_code_class = null, $event_types = null, $channel = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet'][0])
    {

        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageAttemptApi.listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        if ($endpoint_id !== null && strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet, must be smaller than or equal to 256.');
        }
        if ($endpoint_id !== null && strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet, must be bigger than or equal to 1.');
        }
        if ($endpoint_id !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling MessageAttemptApi.listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        

        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet, must be smaller than or equal to 250.');
        }
        



        if ($channel !== null && strlen($channel) > 128) {
            throw new \InvalidArgumentException('invalid length for "$channel" when calling MessageAttemptApi.listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet, must be smaller than or equal to 128.');
        }
        if ($channel !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $channel)) {
            throw new \InvalidArgumentException("invalid value for \"channel\" when calling MessageAttemptApi.listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        




        $resourcePath = '/api/v1/app/{app_id}/attempt/msg/{msg_id}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $endpoint_id,
            'endpoint_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'MessageStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status_code_class,
            'status_code_class', // param base name
            'StatusCodeClass', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_types,
            'event_types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet
     *
     * List Attempts For Endpoint
     *
     * @param  string $msg_id msg_id (required)
     * @param  string $app_id app_id (required)
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $iterator iterator (optional)
     * @param  int $limit limit (optional, default to 50)
     * @param  string[] $event_types event_types (optional)
     * @param  string $channel channel (optional)
     * @param  MessageStatus $status status (optional)
     * @param  \DateTime $before before (optional)
     * @param  \DateTime $after after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListResponseMessageAttemptEndpointOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut
     * @deprecated
     */
    public function listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet($msg_id, $app_id, $endpoint_id, $iterator = null, $limit = 50, $event_types = null, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'][0])
    {
        list($response) = $this->listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetWithHttpInfo($msg_id, $app_id, $endpoint_id, $iterator, $limit, $event_types, $channel, $status, $before, $after, $idempotency_key, $contentType);
        return $response;
    }

    /**
     * Operation listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetWithHttpInfo
     *
     * List Attempts For Endpoint
     *
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  MessageStatus $status (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListResponseMessageAttemptEndpointOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HttpErrorOut|\OpenAPI\Client\Model\HTTPValidationError|\OpenAPI\Client\Model\HttpErrorOut, HTTP status code, HTTP response headers (array of strings)
     * @deprecated
     */
    public function listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetWithHttpInfo($msg_id, $app_id, $endpoint_id, $iterator = null, $limit = 50, $event_types = null, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'][0])
    {
        $request = $this->listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetRequest($msg_id, $app_id, $endpoint_id, $iterator, $limit, $event_types, $channel, $status, $before, $after, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListResponseMessageAttemptEndpointOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListResponseMessageAttemptEndpointOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListResponseMessageAttemptEndpointOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\HTTPValidationError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HTTPValidationError' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HTTPValidationError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\OpenAPI\Client\Model\HttpErrorOut' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\HttpErrorOut' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\HttpErrorOut', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\ListResponseMessageAttemptEndpointOut';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListResponseMessageAttemptEndpointOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetAsync
     *
     * List Attempts For Endpoint
     *
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  MessageStatus $status (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetAsync($msg_id, $app_id, $endpoint_id, $iterator = null, $limit = 50, $event_types = null, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'][0])
    {
        return $this->listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetAsyncWithHttpInfo($msg_id, $app_id, $endpoint_id, $iterator, $limit, $event_types, $channel, $status, $before, $after, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetAsyncWithHttpInfo
     *
     * List Attempts For Endpoint
     *
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  MessageStatus $status (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     * @deprecated
     */
    public function listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetAsyncWithHttpInfo($msg_id, $app_id, $endpoint_id, $iterator = null, $limit = 50, $event_types = null, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListResponseMessageAttemptEndpointOut';
        $request = $this->listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetRequest($msg_id, $app_id, $endpoint_id, $iterator, $limit, $event_types, $channel, $status, $before, $after, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'
     *
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $endpoint_id (required)
     * @param  string $iterator (optional)
     * @param  int $limit (optional, default to 50)
     * @param  string[] $event_types (optional)
     * @param  string $channel (optional)
     * @param  MessageStatus $status (optional)
     * @param  \DateTime $before (optional)
     * @param  \DateTime $after (optional)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     * @deprecated
     */
    public function listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGetRequest($msg_id, $app_id, $endpoint_id, $iterator = null, $limit = 50, $event_types = null, $channel = null, $status = null, $before = null, $after = null, $idempotency_key = null, string $contentType = self::contentTypes['listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'][0])
    {

        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageAttemptApi.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling MessageAttemptApi.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        

        if ($limit !== null && $limit > 250) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling MessageAttemptApi.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet, must be smaller than or equal to 250.');
        }
        

        if ($channel !== null && strlen($channel) > 128) {
            throw new \InvalidArgumentException('invalid length for "$channel" when calling MessageAttemptApi.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet, must be smaller than or equal to 128.');
        }
        if ($channel !== null && !preg_match("/^[a-zA-Z0-9\\-_.]+$/", $channel)) {
            throw new \InvalidArgumentException("invalid value for \"channel\" when calling MessageAttemptApi.listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        





        $resourcePath = '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $iterator,
            'iterator', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $event_types,
            'event_types', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channel,
            'channel', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'MessageStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }
        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost
     *
     * Resend Webhook
     *
     * @param  string $endpoint_id endpoint_id (required)
     * @param  string $msg_id msg_id (required)
     * @param  string $app_id app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost($endpoint_id, $msg_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'][0])
    {
        $this->resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostWithHttpInfo($endpoint_id, $msg_id, $app_id, $idempotency_key, $contentType);
    }

    /**
     * Operation resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostWithHttpInfo
     *
     * Resend Webhook
     *
     * @param  string $endpoint_id (required)
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostWithHttpInfo($endpoint_id, $msg_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'][0])
    {
        $request = $this->resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostRequest($endpoint_id, $msg_id, $app_id, $idempotency_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HTTPValidationError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\HttpErrorOut',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostAsync
     *
     * Resend Webhook
     *
     * @param  string $endpoint_id (required)
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostAsync($endpoint_id, $msg_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'][0])
    {
        return $this->resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostAsyncWithHttpInfo($endpoint_id, $msg_id, $app_id, $idempotency_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostAsyncWithHttpInfo
     *
     * Resend Webhook
     *
     * @param  string $endpoint_id (required)
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostAsyncWithHttpInfo($endpoint_id, $msg_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'][0])
    {
        $returnType = '';
        $request = $this->resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostRequest($endpoint_id, $msg_id, $app_id, $idempotency_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'
     *
     * @param  string $endpoint_id (required)
     * @param  string $msg_id (required)
     * @param  string $app_id (required)
     * @param  string $idempotency_key The request&#39;s idempotency key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPostRequest($endpoint_id, $msg_id, $app_id, $idempotency_key = null, string $contentType = self::contentTypes['resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'][0])
    {

        // verify the required parameter 'endpoint_id' is set
        if ($endpoint_id === null || (is_array($endpoint_id) && count($endpoint_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $endpoint_id when calling resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'
            );
        }
        if (strlen($endpoint_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost, must be smaller than or equal to 256.');
        }
        if (strlen($endpoint_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$endpoint_id" when calling MessageAttemptApi.resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $endpoint_id)) {
            throw new \InvalidArgumentException("invalid value for \"endpoint_id\" when calling MessageAttemptApi.resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'msg_id' is set
        if ($msg_id === null || (is_array($msg_id) && count($msg_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $msg_id when calling resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'
            );
        }
        if (strlen($msg_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost, must be smaller than or equal to 256.');
        }
        if (strlen($msg_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$msg_id" when calling MessageAttemptApi.resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $msg_id)) {
            throw new \InvalidArgumentException("invalid value for \"msg_id\" when calling MessageAttemptApi.resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        
        // verify the required parameter 'app_id' is set
        if ($app_id === null || (is_array($app_id) && count($app_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_id when calling resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost'
            );
        }
        if (strlen($app_id) > 256) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost, must be smaller than or equal to 256.');
        }
        if (strlen($app_id) < 1) {
            throw new \InvalidArgumentException('invalid length for "$app_id" when calling MessageAttemptApi.resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost, must be bigger than or equal to 1.');
        }
        if (!preg_match("/^[a-zA-Z0-9\\-_.]+$/", $app_id)) {
            throw new \InvalidArgumentException("invalid value for \"app_id\" when calling MessageAttemptApi.resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost, must conform to the pattern /^[a-zA-Z0-9\\-_.]+$/.");
        }
        


        $resourcePath = '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($idempotency_key !== null) {
            $headerParams['idempotency-key'] = ObjectSerializer::toHeaderValue($idempotency_key);
        }

        // path params
        if ($endpoint_id !== null) {
            $resourcePath = str_replace(
                '{' . 'endpoint_id' . '}',
                ObjectSerializer::toPathValue($endpoint_id),
                $resourcePath
            );
        }
        // path params
        if ($msg_id !== null) {
            $resourcePath = str_replace(
                '{' . 'msg_id' . '}',
                ObjectSerializer::toPathValue($msg_id),
                $resourcePath
            );
        }
        // path params
        if ($app_id !== null) {
            $resourcePath = str_replace(
                '{' . 'app_id' . '}',
                ObjectSerializer::toPathValue($app_id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
